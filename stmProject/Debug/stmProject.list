
stmProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005638  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080057c0  080057c0  000157c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005808  08005808  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005810  08005810  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005810  08005810  00015810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005814  08005814  00015814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000000c  08005824  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08005824  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019118  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f82  00000000  00000000  00039154  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001608  00000000  00000000  0003c0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001460  00000000  00000000  0003d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a601  00000000  00000000  0003eb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001387c  00000000  00000000  00069141  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010b7a6  00000000  00000000  0007c9bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00188163  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cac  00000000  00000000  001881e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080057a8 	.word	0x080057a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080057a8 	.word	0x080057a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004ea:	4b63      	ldr	r3, [pc, #396]	; (8000678 <MX_ADC1_Init+0x1b0>)
 80004ec:	4a63      	ldr	r2, [pc, #396]	; (800067c <MX_ADC1_Init+0x1b4>)
 80004ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f0:	4b61      	ldr	r3, [pc, #388]	; (8000678 <MX_ADC1_Init+0x1b0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80004f6:	4b60      	ldr	r3, [pc, #384]	; (8000678 <MX_ADC1_Init+0x1b0>)
 80004f8:	2210      	movs	r2, #16
 80004fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fc:	4b5e      	ldr	r3, [pc, #376]	; (8000678 <MX_ADC1_Init+0x1b0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000502:	4b5d      	ldr	r3, [pc, #372]	; (8000678 <MX_ADC1_Init+0x1b0>)
 8000504:	2201      	movs	r2, #1
 8000506:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000508:	4b5b      	ldr	r3, [pc, #364]	; (8000678 <MX_ADC1_Init+0x1b0>)
 800050a:	2204      	movs	r2, #4
 800050c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800050e:	4b5a      	ldr	r3, [pc, #360]	; (8000678 <MX_ADC1_Init+0x1b0>)
 8000510:	2200      	movs	r2, #0
 8000512:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000514:	4b58      	ldr	r3, [pc, #352]	; (8000678 <MX_ADC1_Init+0x1b0>)
 8000516:	2200      	movs	r2, #0
 8000518:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 9;
 800051a:	4b57      	ldr	r3, [pc, #348]	; (8000678 <MX_ADC1_Init+0x1b0>)
 800051c:	2209      	movs	r2, #9
 800051e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000520:	4b55      	ldr	r3, [pc, #340]	; (8000678 <MX_ADC1_Init+0x1b0>)
 8000522:	2200      	movs	r2, #0
 8000524:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8000528:	4b53      	ldr	r3, [pc, #332]	; (8000678 <MX_ADC1_Init+0x1b0>)
 800052a:	f44f 62d0 	mov.w	r2, #1664	; 0x680
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000530:	4b51      	ldr	r3, [pc, #324]	; (8000678 <MX_ADC1_Init+0x1b0>)
 8000532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000538:	4b4f      	ldr	r3, [pc, #316]	; (8000678 <MX_ADC1_Init+0x1b0>)
 800053a:	2201      	movs	r2, #1
 800053c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000540:	4b4d      	ldr	r3, [pc, #308]	; (8000678 <MX_ADC1_Init+0x1b0>)
 8000542:	2200      	movs	r2, #0
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000546:	4b4c      	ldr	r3, [pc, #304]	; (8000678 <MX_ADC1_Init+0x1b0>)
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054e:	484a      	ldr	r0, [pc, #296]	; (8000678 <MX_ADC1_Init+0x1b0>)
 8000550:	f000 ff38 	bl	80013c4 <HAL_ADC_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800055a:	f000 fa3b 	bl	80009d4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	4619      	mov	r1, r3
 8000568:	4843      	ldr	r0, [pc, #268]	; (8000678 <MX_ADC1_Init+0x1b0>)
 800056a:	f001 fefd 	bl	8002368 <HAL_ADCEx_MultiModeConfigChannel>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000574:	f000 fa2e 	bl	80009d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000578:	4b41      	ldr	r3, [pc, #260]	; (8000680 <MX_ADC1_Init+0x1b8>)
 800057a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	; 0x7f
 8000586:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4619      	mov	r1, r3
 8000594:	4838      	ldr	r0, [pc, #224]	; (8000678 <MX_ADC1_Init+0x1b0>)
 8000596:	f001 faa1 	bl	8001adc <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80005a0:	f000 fa18 	bl	80009d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a4:	230c      	movs	r3, #12
 80005a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4619      	mov	r1, r3
 80005ac:	4832      	ldr	r0, [pc, #200]	; (8000678 <MX_ADC1_Init+0x1b0>)
 80005ae:	f001 fa95 	bl	8001adc <HAL_ADC_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80005b8:	f000 fa0c 	bl	80009d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005bc:	2312      	movs	r3, #18
 80005be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4619      	mov	r1, r3
 80005c4:	482c      	ldr	r0, [pc, #176]	; (8000678 <MX_ADC1_Init+0x1b0>)
 80005c6:	f001 fa89 	bl	8001adc <HAL_ADC_ConfigChannel>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80005d0:	f000 fa00 	bl	80009d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005d4:	2318      	movs	r3, #24
 80005d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4619      	mov	r1, r3
 80005dc:	4826      	ldr	r0, [pc, #152]	; (8000678 <MX_ADC1_Init+0x1b0>)
 80005de:	f001 fa7d 	bl	8001adc <HAL_ADC_ConfigChannel>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 80005e8:	f000 f9f4 	bl	80009d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80005ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	4820      	ldr	r0, [pc, #128]	; (8000678 <MX_ADC1_Init+0x1b0>)
 80005f8:	f001 fa70 	bl	8001adc <HAL_ADC_ConfigChannel>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000602:	f000 f9e7 	bl	80009d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000606:	f44f 7383 	mov.w	r3, #262	; 0x106
 800060a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4619      	mov	r1, r3
 8000610:	4819      	ldr	r0, [pc, #100]	; (8000678 <MX_ADC1_Init+0x1b0>)
 8000612:	f001 fa63 	bl	8001adc <HAL_ADC_ConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 800061c:	f000 f9da 	bl	80009d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000620:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000624:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4619      	mov	r1, r3
 800062a:	4813      	ldr	r0, [pc, #76]	; (8000678 <MX_ADC1_Init+0x1b0>)
 800062c:	f001 fa56 	bl	8001adc <HAL_ADC_ConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8000636:	f000 f9cd 	bl	80009d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800063a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800063e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	4619      	mov	r1, r3
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_ADC1_Init+0x1b0>)
 8000646:	f001 fa49 	bl	8001adc <HAL_ADC_ConfigChannel>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000650:	f000 f9c0 	bl	80009d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000654:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000658:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	4619      	mov	r1, r3
 800065e:	4806      	ldr	r0, [pc, #24]	; (8000678 <MX_ADC1_Init+0x1b0>)
 8000660:	f001 fa3c 	bl	8001adc <HAL_ADC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 800066a:	f000 f9b3 	bl	80009d4 <Error_Handler>
  }

}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	; 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000028 	.word	0x20000028
 800067c:	50040000 	.word	0x50040000
 8000680:	04300002 	.word	0x04300002

08000684 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a3b      	ldr	r2, [pc, #236]	; (8000790 <HAL_ADC_MspInit+0x10c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d16f      	bne.n	8000786 <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <HAL_ADC_MspInit+0x110>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <HAL_ADC_MspInit+0x110>)
 80006ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b38      	ldr	r3, [pc, #224]	; (8000794 <HAL_ADC_MspInit+0x110>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b35      	ldr	r3, [pc, #212]	; (8000794 <HAL_ADC_MspInit+0x110>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a34      	ldr	r2, [pc, #208]	; (8000794 <HAL_ADC_MspInit+0x110>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <HAL_ADC_MspInit+0x110>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <HAL_ADC_MspInit+0x110>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a2e      	ldr	r2, [pc, #184]	; (8000794 <HAL_ADC_MspInit+0x110>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <HAL_ADC_MspInit+0x110>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006ee:	230f      	movs	r3, #15
 80006f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006f2:	230b      	movs	r3, #11
 80006f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	4825      	ldr	r0, [pc, #148]	; (8000798 <HAL_ADC_MspInit+0x114>)
 8000702:	f002 f957 	bl	80029b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000706:	237a      	movs	r3, #122	; 0x7a
 8000708:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800070a:	230b      	movs	r3, #11
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071c:	f002 f94a 	bl	80029b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <HAL_ADC_MspInit+0x118>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <HAL_ADC_MspInit+0x11c>)
 8000724:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <HAL_ADC_MspInit+0x118>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <HAL_ADC_MspInit+0x118>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <HAL_ADC_MspInit+0x118>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <HAL_ADC_MspInit+0x118>)
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <HAL_ADC_MspInit+0x118>)
 8000740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000744:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_ADC_MspInit+0x118>)
 8000748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800074c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <HAL_ADC_MspInit+0x118>)
 8000750:	2220      	movs	r2, #32
 8000752:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <HAL_ADC_MspInit+0x118>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800075a:	4810      	ldr	r0, [pc, #64]	; (800079c <HAL_ADC_MspInit+0x118>)
 800075c:	f001 ffc2 	bl	80026e4 <HAL_DMA_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000766:	f000 f935 	bl	80009d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <HAL_ADC_MspInit+0x118>)
 800076e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <HAL_ADC_MspInit+0x118>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2012      	movs	r0, #18
 800077c:	f001 ff7b 	bl	8002676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000780:	2012      	movs	r0, #18
 8000782:	f001 ff94 	bl	80026ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	50040000 	.word	0x50040000
 8000794:	40021000 	.word	0x40021000
 8000798:	48000800 	.word	0x48000800
 800079c:	2000008c 	.word	0x2000008c
 80007a0:	40020008 	.word	0x40020008

080007a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_DMA_Init+0x38>)
 80007ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <MX_DMA_Init+0x38>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6493      	str	r3, [r2, #72]	; 0x48
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_DMA_Init+0x38>)
 80007b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	200b      	movs	r0, #11
 80007c8:	f001 ff55 	bl	8002676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007cc:	200b      	movs	r0, #11
 80007ce:	f001 ff6e 	bl	80026ae <HAL_NVIC_EnableIRQ>

}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b087      	sub	sp, #28
 80007e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_GPIO_Init+0x8c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a20      	ldr	r2, [pc, #128]	; (800086c <MX_GPIO_Init+0x8c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_GPIO_Init+0x8c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_GPIO_Init+0x8c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a1a      	ldr	r2, [pc, #104]	; (800086c <MX_GPIO_Init+0x8c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_GPIO_Init+0x8c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_GPIO_Init+0x8c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <MX_GPIO_Init+0x8c>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_GPIO_Init+0x8c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_GPIO_Init+0x8c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <MX_GPIO_Init+0x8c>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_GPIO_Init+0x8c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_GPIO_Init+0x8c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <MX_GPIO_Init+0x8c>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_GPIO_Init+0x8c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

}
 800085e:	bf00      	nop
 8000860:	371c      	adds	r7, #28
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000874:	f000 fb5c 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f810 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f7ff ffb0 	bl	80007e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000880:	f7ff ff90 	bl	80007a4 <MX_DMA_Init>
  MX_QUADSPI_Init();
 8000884:	f000 f8ae 	bl	80009e4 <MX_QUADSPI_Init>
  MX_ADC1_Init();
 8000888:	f7ff fe1e 	bl	80004c8 <MX_ADC1_Init>
  MX_RTC_Init();
 800088c:	f000 f932 	bl	8000af4 <MX_RTC_Init>
  MX_TIM2_Init();
 8000890:	f000 fa44 	bl	8000d1c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000894:	f000 faae 	bl	8000df4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000898:	e7fe      	b.n	8000898 <main+0x28>
	...

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b0b8      	sub	sp, #224	; 0xe0
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008a6:	2244      	movs	r2, #68	; 0x44
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 ff74 	bl	8005798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	2288      	movs	r2, #136	; 0x88
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f004 ff66 	bl	8005798 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008cc:	f002 fa1a 	bl	8002d04 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008d0:	4b3e      	ldr	r3, [pc, #248]	; (80009cc <SystemClock_Config+0x130>)
 80008d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008d6:	4a3d      	ldr	r2, [pc, #244]	; (80009cc <SystemClock_Config+0x130>)
 80008d8:	f023 0318 	bic.w	r3, r3, #24
 80008dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80008e0:	2306      	movs	r3, #6
 80008e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008e6:	2301      	movs	r3, #1
 80008e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2310      	movs	r3, #16
 80008f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000900:	2302      	movs	r3, #2
 8000902:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 800090c:	2314      	movs	r3, #20
 800090e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000912:	2307      	movs	r3, #7
 8000914:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800091e:	2304      	movs	r3, #4
 8000920:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000928:	4618      	mov	r0, r3
 800092a:	f002 fb1b 	bl	8002f64 <HAL_RCC_OscConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000934:	f000 f84e 	bl	80009d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	230f      	movs	r3, #15
 800093a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	2303      	movs	r3, #3
 8000940:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000956:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800095a:	2101      	movs	r1, #1
 800095c:	4618      	mov	r0, r3
 800095e:	f002 fee7 	bl	8003730 <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000968:	f000 f834 	bl	80009d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <SystemClock_Config+0x134>)
 800096e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000970:	2300      	movs	r3, #0
 8000972:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000974:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000978:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800097a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000982:	2302      	movs	r3, #2
 8000984:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 30;
 800098a:	231e      	movs	r3, #30
 800098c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800098e:	2307      	movs	r3, #7
 8000990:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000992:	2302      	movs	r3, #2
 8000994:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000996:	2304      	movs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800099a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800099e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 f8c8 	bl	8003b38 <HAL_RCCEx_PeriphCLKConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x116>
  {
    Error_Handler();
 80009ae:	f000 f811 	bl	80009d4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009b6:	f002 f9c3 	bl	8002d40 <HAL_PWREx_ControlVoltageScaling>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80009c0:	f000 f808 	bl	80009d4 <Error_Handler>
  }
}
 80009c4:	bf00      	nop
 80009c6:	37e0      	adds	r7, #224	; 0xe0
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	00024001 	.word	0x00024001

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <MX_QUADSPI_Init+0x48>)
 80009ec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 80009f6:	2204      	movs	r2, #4
 80009f8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 80009fc:	2210      	movs	r2, #16
 80009fe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 20;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 8000a02:	2214      	movs	r2, #20
 8000a04:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 8000a14:	f002 f9ea 	bl	8002dec <HAL_QSPI_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000a1e:	f7ff ffd9 	bl	80009d4 <Error_Handler>
  }

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000d4 	.word	0x200000d4
 8000a2c:	a0001000 	.word	0xa0001000

08000a30 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a25      	ldr	r2, [pc, #148]	; (8000ae4 <HAL_QSPI_MspInit+0xb4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d144      	bne.n	8000adc <HAL_QSPI_MspInit+0xac>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <HAL_QSPI_MspInit+0xb8>)
 8000a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a56:	4a24      	ldr	r2, [pc, #144]	; (8000ae8 <HAL_QSPI_MspInit+0xb8>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5c:	6513      	str	r3, [r2, #80]	; 0x50
 8000a5e:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <HAL_QSPI_MspInit+0xb8>)
 8000a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <HAL_QSPI_MspInit+0xb8>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <HAL_QSPI_MspInit+0xb8>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_QSPI_MspInit+0xb8>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_QSPI_MspInit+0xb8>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <HAL_QSPI_MspInit+0xb8>)
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_QSPI_MspInit+0xb8>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = QSO_Pin|QSI_Pin;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000aaa:	230a      	movs	r3, #10
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <HAL_QSPI_MspInit+0xbc>)
 8000ab6:	f001 ff7d 	bl	80029b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin|CS_Pin;
 8000aba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000acc:	230a      	movs	r3, #10
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <HAL_QSPI_MspInit+0xc0>)
 8000ad8:	f001 ff6c 	bl	80029b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	a0001000 	.word	0xa0001000
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	48000400 	.word	0x48000400
 8000af0:	48001000 	.word	0x48001000

08000af4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b08:	2300      	movs	r3, #0
 8000b0a:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b0c:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <MX_RTC_Init+0xb0>)
 8000b0e:	4a26      	ldr	r2, [pc, #152]	; (8000ba8 <MX_RTC_Init+0xb4>)
 8000b10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b12:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_RTC_Init+0xb0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_RTC_Init+0xb0>)
 8000b1a:	227f      	movs	r2, #127	; 0x7f
 8000b1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_RTC_Init+0xb0>)
 8000b20:	22ff      	movs	r2, #255	; 0xff
 8000b22:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_RTC_Init+0xb0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_RTC_Init+0xb0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_RTC_Init+0xb0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b36:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_RTC_Init+0xb0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b3c:	4819      	ldr	r0, [pc, #100]	; (8000ba4 <MX_RTC_Init+0xb0>)
 8000b3e:	f003 fcab 	bl	8004498 <HAL_RTC_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000b48:	f7ff ff44 	bl	80009d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	4619      	mov	r1, r3
 8000b66:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <MX_RTC_Init+0xb0>)
 8000b68:	f003 fd11 	bl	800458e <HAL_RTC_SetTime>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000b72:	f7ff ff2f 	bl	80009d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b76:	2301      	movs	r3, #1
 8000b78:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000b86:	463b      	mov	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_RTC_Init+0xb0>)
 8000b8e:	f003 fd9b 	bl	80046c8 <HAL_RTC_SetDate>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000b98:	f7ff ff1c 	bl	80009d4 <Error_Handler>
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000118 	.word	0x20000118
 8000ba8:	40002800 	.word	0x40002800

08000bac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_RTC_MspInit+0x30>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d107      	bne.n	8000bce <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_RTC_MspInit+0x34>)
 8000bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_RTC_MspInit+0x34>)
 8000bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40002800 	.word	0x40002800
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_MspInit+0x44>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_MspInit+0x44>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_MspInit+0x44>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x44>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x44>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 f9b2 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <DMA1_Channel1_IRQHandler+0x10>)
 8000c8e:	f001 fde1 	bl	8002854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000008c 	.word	0x2000008c

08000c9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <ADC1_2_IRQHandler+0x10>)
 8000ca2:	f000 fce3 	bl	800166c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000028 	.word	0x20000028

08000cb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <SystemInit+0x64>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cba:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <SystemInit+0x64>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <SystemInit+0x68>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <SystemInit+0x68>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <SystemInit+0x68>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <SystemInit+0x68>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <SystemInit+0x68>)
 8000cdc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ce0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ce4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <SystemInit+0x68>)
 8000ce8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <SystemInit+0x68>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <SystemInit+0x68>)
 8000cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <SystemInit+0x68>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SystemInit+0x64>)
 8000d02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d06:	609a      	str	r2, [r3, #8]
#endif
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00
 8000d18:	40021000 	.word	0x40021000

08000d1c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <MX_TIM2_Init+0x98>)
 8000d3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <MX_TIM2_Init+0x98>)
 8000d44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_TIM2_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_TIM2_Init+0x98>)
 8000d52:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000d56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_TIM2_Init+0x98>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_TIM2_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d64:	4813      	ldr	r0, [pc, #76]	; (8000db4 <MX_TIM2_Init+0x98>)
 8000d66:	f003 fded 	bl	8004944 <HAL_TIM_Base_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000d70:	f7ff fe30 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <MX_TIM2_Init+0x98>)
 8000d82:	f003 fe36 	bl	80049f2 <HAL_TIM_ConfigClockSource>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000d8c:	f7ff fe22 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d90:	2320      	movs	r3, #32
 8000d92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_TIM2_Init+0x98>)
 8000d9e:	f004 f815 	bl	8004dcc <HAL_TIMEx_MasterConfigSynchronization>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000da8:	f7ff fe14 	bl	80009d4 <Error_Handler>
  }

}
 8000dac:	bf00      	nop
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	2000013c 	.word	0x2000013c

08000db8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc8:	d10b      	bne.n	8000de2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_TIM_Base_MspInit+0x38>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_TIM_Base_MspInit+0x38>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_TIM_Base_MspInit+0x38>)
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000

08000df4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000dfa:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <MX_USART1_UART_Init+0x5c>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e38:	f004 f850 	bl	8004edc <HAL_UART_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e42:	f7ff fdc7 	bl	80009d4 <Error_Handler>
  }

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000188 	.word	0x20000188
 8000e50:	40013800 	.word	0x40013800

08000e54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <HAL_UART_MspInit+0x80>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d129      	bne.n	8000eca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_UART_MspInit+0x84>)
 8000e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7a:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <HAL_UART_MspInit+0x84>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e80:	6613      	str	r3, [r2, #96]	; 0x60
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_UART_MspInit+0x84>)
 8000e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_UART_MspInit+0x84>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <HAL_UART_MspInit+0x84>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_UART_MspInit+0x84>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ea6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec6:	f001 fd75 	bl	80029b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	40021000 	.word	0x40021000

08000edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee0:	f7ff fee6 	bl	8000cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ee4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ee6:	e003      	b.n	8000ef0 <LoopCopyDataInit>

08000ee8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000eea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000eec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000eee:	3104      	adds	r1, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ef0:	480a      	ldr	r0, [pc, #40]	; (8000f1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ef4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ef6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ef8:	d3f6      	bcc.n	8000ee8 <CopyDataInit>
	ldr	r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000efc:	e002      	b.n	8000f04 <LoopFillZerobss>

08000efe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000efe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f00:	f842 3b04 	str.w	r3, [r2], #4

08000f04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <LoopForever+0x16>)
	cmp	r2, r3
 8000f06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f08:	d3f9      	bcc.n	8000efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f004 fc21 	bl	8005750 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f0e:	f7ff fcaf 	bl	8000870 <main>

08000f12 <LoopForever>:

LoopForever:
    b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f14:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f18:	08005818 	.word	0x08005818
	ldr	r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f20:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000f24:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f28:	2000020c 	.word	0x2000020c

08000f2c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC3_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_Init+0x3c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <HAL_Init+0x3c>)
 8000f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f46:	2003      	movs	r0, #3
 8000f48:	f001 fb8a 	bl	8002660 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f000 f80f 	bl	8000f70 <HAL_InitTick>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	e001      	b.n	8000f62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f5e:	f7ff fe41 	bl	8000be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f62:	79fb      	ldrb	r3, [r7, #7]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_InitTick+0x6c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d023      	beq.n	8000fcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_InitTick+0x70>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_InitTick+0x6c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fb95 	bl	80026ca <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10f      	bne.n	8000fc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d809      	bhi.n	8000fc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb4:	f001 fb5f 	bl	8002676 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_InitTick+0x74>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e007      	b.n	8000fd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e004      	b.n	8000fd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e001      	b.n	8000fd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	20000208 	.word	0x20000208

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000208 	.word	0x20000208

08001028 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	609a      	str	r2, [r3, #8]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	609a      	str	r2, [r3, #8]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3360      	adds	r3, #96	; 0x60
 80010a2:	461a      	mov	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <LL_ADC_SetOffset+0x44>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	4313      	orrs	r3, r2
 80010c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010c8:	bf00      	nop
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	03fff000 	.word	0x03fff000

080010d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3360      	adds	r3, #96	; 0x60
 80010e6:	461a      	mov	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3360      	adds	r3, #96	; 0x60
 8001114:	461a      	mov	r2, r3
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	431a      	orrs	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800112e:	bf00      	nop
 8001130:	371c      	adds	r7, #28
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3330      	adds	r3, #48	; 0x30
 8001170:	461a      	mov	r2, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	4413      	add	r3, r2
 800117e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	211f      	movs	r1, #31
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	0e9b      	lsrs	r3, r3, #26
 8001198:	f003 011f 	and.w	r1, r3, #31
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	431a      	orrs	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011ac:	bf00      	nop
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011de:	b480      	push	{r7}
 80011e0:	b087      	sub	sp, #28
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3314      	adds	r3, #20
 80011ee:	461a      	mov	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	0e5b      	lsrs	r3, r3, #25
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	0d1b      	lsrs	r3, r3, #20
 8001206:	f003 031f 	and.w	r3, r3, #31
 800120a:	2107      	movs	r1, #7
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	401a      	ands	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	0d1b      	lsrs	r3, r3, #20
 8001218:	f003 031f 	and.w	r3, r3, #31
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	431a      	orrs	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001228:	bf00      	nop
 800122a:	371c      	adds	r7, #28
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800124c:	43db      	mvns	r3, r3
 800124e:	401a      	ands	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0318 	and.w	r3, r3, #24
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001258:	40d9      	lsrs	r1, r3
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	400b      	ands	r3, r1
 800125e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001262:	431a      	orrs	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	0007ffff 	.word	0x0007ffff

0800127c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 031f 	and.w	r3, r3, #31
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80012c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6093      	str	r3, [r2, #8]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012ec:	d101      	bne.n	80012f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001314:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800133c:	d101      	bne.n	8001342 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <LL_ADC_IsEnabled+0x18>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <LL_ADC_IsEnabled+0x1a>
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	2b04      	cmp	r3, #4
 8001388:	d101      	bne.n	800138e <LL_ADC_REG_IsConversionOngoing+0x18>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d101      	bne.n	80013b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e134      	b.n	8001648 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d109      	bne.n	8001400 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff f949 	bl	8000684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff67 	bl	80012d8 <LL_ADC_IsDeepPowerDownEnabled>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff4d 	bl	80012b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff82 	bl	8001328 <LL_ADC_IsInternalRegulatorEnabled>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d113      	bne.n	8001452 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff66 	bl	8001300 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001434:	4b86      	ldr	r3, [pc, #536]	; (8001650 <HAL_ADC_Init+0x28c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	099b      	lsrs	r3, r3, #6
 800143a:	4a86      	ldr	r2, [pc, #536]	; (8001654 <HAL_ADC_Init+0x290>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	099b      	lsrs	r3, r3, #6
 8001442:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001444:	e002      	b.n	800144c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	3b01      	subs	r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f9      	bne.n	8001446 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff66 	bl	8001328 <LL_ADC_IsInternalRegulatorEnabled>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10d      	bne.n	800147e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001466:	f043 0210 	orr.w	r2, r3, #16
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff77 	bl	8001376 <LL_ADC_REG_IsConversionOngoing>
 8001488:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 80cf 	bne.w	8001636 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 80cb 	bne.w	8001636 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014a8:	f043 0202 	orr.w	r2, r3, #2
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff4b 	bl	8001350 <LL_ADC_IsEnabled>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d115      	bne.n	80014ec <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014c0:	4865      	ldr	r0, [pc, #404]	; (8001658 <HAL_ADC_Init+0x294>)
 80014c2:	f7ff ff45 	bl	8001350 <LL_ADC_IsEnabled>
 80014c6:	4604      	mov	r4, r0
 80014c8:	4864      	ldr	r0, [pc, #400]	; (800165c <HAL_ADC_Init+0x298>)
 80014ca:	f7ff ff41 	bl	8001350 <LL_ADC_IsEnabled>
 80014ce:	4603      	mov	r3, r0
 80014d0:	431c      	orrs	r4, r3
 80014d2:	4863      	ldr	r0, [pc, #396]	; (8001660 <HAL_ADC_Init+0x29c>)
 80014d4:	f7ff ff3c 	bl	8001350 <LL_ADC_IsEnabled>
 80014d8:	4603      	mov	r3, r0
 80014da:	4323      	orrs	r3, r4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d105      	bne.n	80014ec <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4619      	mov	r1, r3
 80014e6:	485f      	ldr	r0, [pc, #380]	; (8001664 <HAL_ADC_Init+0x2a0>)
 80014e8:	f7ff fd9e 	bl	8001028 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7e5b      	ldrb	r3, [r3, #25]
 80014f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001502:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d106      	bne.n	8001528 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	3b01      	subs	r3, #1
 8001520:	045b      	lsls	r3, r3, #17
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	2b00      	cmp	r3, #0
 800152e:	d009      	beq.n	8001544 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_ADC_Init+0x2a4>)
 800154c:	4013      	ands	r3, r2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	69b9      	ldr	r1, [r7, #24]
 8001554:	430b      	orrs	r3, r1
 8001556:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff0a 	bl	8001376 <LL_ADC_REG_IsConversionOngoing>
 8001562:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff17 	bl	800139c <LL_ADC_INJ_IsConversionOngoing>
 800156e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d13d      	bne.n	80015f2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d13a      	bne.n	80015f2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001580:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001588:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001598:	f023 0302 	bic.w	r3, r3, #2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	69b9      	ldr	r1, [r7, #24]
 80015a2:	430b      	orrs	r3, r1
 80015a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d118      	bne.n	80015e2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015ba:	f023 0304 	bic.w	r3, r3, #4
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015c6:	4311      	orrs	r1, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015cc:	4311      	orrs	r1, r2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015d2:	430a      	orrs	r2, r1
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	e007      	b.n	80015f2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0201 	bic.w	r2, r2, #1
 80015f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d10c      	bne.n	8001614 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	f023 010f 	bic.w	r1, r3, #15
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	1e5a      	subs	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	631a      	str	r2, [r3, #48]	; 0x30
 8001612:	e007      	b.n	8001624 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 020f 	bic.w	r2, r2, #15
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001628:	f023 0303 	bic.w	r3, r3, #3
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	655a      	str	r2, [r3, #84]	; 0x54
 8001634:	e007      	b.n	8001646 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163a:	f043 0210 	orr.w	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001646:	7ffb      	ldrb	r3, [r7, #31]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3724      	adds	r7, #36	; 0x24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd90      	pop	{r4, r7, pc}
 8001650:	20000000 	.word	0x20000000
 8001654:	053e2d63 	.word	0x053e2d63
 8001658:	50040000 	.word	0x50040000
 800165c:	50040100 	.word	0x50040100
 8001660:	50040200 	.word	0x50040200
 8001664:	50040300 	.word	0x50040300
 8001668:	fff0c007 	.word	0xfff0c007

0800166c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001688:	4882      	ldr	r0, [pc, #520]	; (8001894 <HAL_ADC_IRQHandler+0x228>)
 800168a:	f7ff fdf7 	bl	800127c <LL_ADC_GetMultimode>
 800168e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d017      	beq.n	80016ca <HAL_ADC_IRQHandler+0x5e>
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d012      	beq.n	80016ca <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d105      	bne.n	80016bc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 fe49 	bl	8002354 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2202      	movs	r2, #2
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d004      	beq.n	80016de <HAL_ADC_IRQHandler+0x72>
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10a      	bne.n	80016f4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 8083 	beq.w	80017f0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d07d      	beq.n	80017f0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001704:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fd12 	bl	800113a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d062      	beq.n	80017e2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a5d      	ldr	r2, [pc, #372]	; (8001898 <HAL_ADC_IRQHandler+0x22c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d002      	beq.n	800172c <HAL_ADC_IRQHandler+0xc0>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	e000      	b.n	800172e <HAL_ADC_IRQHandler+0xc2>
 800172c:	4b5b      	ldr	r3, [pc, #364]	; (800189c <HAL_ADC_IRQHandler+0x230>)
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	4293      	cmp	r3, r2
 8001734:	d008      	beq.n	8001748 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d002      	beq.n	8001748 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2b09      	cmp	r3, #9
 8001746:	d104      	bne.n	8001752 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	623b      	str	r3, [r7, #32]
 8001750:	e00c      	b.n	800176c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a50      	ldr	r2, [pc, #320]	; (8001898 <HAL_ADC_IRQHandler+0x22c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d002      	beq.n	8001762 <HAL_ADC_IRQHandler+0xf6>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	e000      	b.n	8001764 <HAL_ADC_IRQHandler+0xf8>
 8001762:	4b4e      	ldr	r3, [pc, #312]	; (800189c <HAL_ADC_IRQHandler+0x230>)
 8001764:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d135      	bne.n	80017e2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b08      	cmp	r3, #8
 8001782:	d12e      	bne.n	80017e2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fdf4 	bl	8001376 <LL_ADC_REG_IsConversionOngoing>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d11a      	bne.n	80017ca <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 020c 	bic.w	r2, r2, #12
 80017a2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d112      	bne.n	80017e2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c0:	f043 0201 	orr.w	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	655a      	str	r2, [r3, #84]	; 0x54
 80017c8:	e00b      	b.n	80017e2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ce:	f043 0210 	orr.w	r2, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	f043 0201 	orr.w	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f95c 	bl	8001aa0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	220c      	movs	r2, #12
 80017ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0320 	and.w	r3, r3, #32
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <HAL_ADC_IRQHandler+0x198>
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10b      	bne.n	800181c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 809f 	beq.w	800194e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8099 	beq.w	800194e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	2b00      	cmp	r3, #0
 8001826:	d105      	bne.n	8001834 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fcbd 	bl	80011b8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800183e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fc78 	bl	800113a <LL_ADC_REG_IsTriggerSourceSWStart>
 800184a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a11      	ldr	r2, [pc, #68]	; (8001898 <HAL_ADC_IRQHandler+0x22c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d002      	beq.n	800185c <HAL_ADC_IRQHandler+0x1f0>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	e000      	b.n	800185e <HAL_ADC_IRQHandler+0x1f2>
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_ADC_IRQHandler+0x230>)
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	4293      	cmp	r3, r2
 8001864:	d008      	beq.n	8001878 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2b06      	cmp	r3, #6
 8001870:	d002      	beq.n	8001878 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b07      	cmp	r3, #7
 8001876:	d104      	bne.n	8001882 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	e013      	b.n	80018aa <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_ADC_IRQHandler+0x22c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d009      	beq.n	80018a0 <HAL_ADC_IRQHandler+0x234>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	e007      	b.n	80018a2 <HAL_ADC_IRQHandler+0x236>
 8001892:	bf00      	nop
 8001894:	50040300 	.word	0x50040300
 8001898:	50040100 	.word	0x50040100
 800189c:	50040000 	.word	0x50040000
 80018a0:	4b7d      	ldr	r3, [pc, #500]	; (8001a98 <HAL_ADC_IRQHandler+0x42c>)
 80018a2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10c      	bne.n	80018ca <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d142      	bne.n	8001940 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d03f      	beq.n	8001940 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d13a      	bne.n	8001940 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d4:	2b40      	cmp	r3, #64	; 0x40
 80018d6:	d133      	bne.n	8001940 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d12e      	bne.n	8001940 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fd58 	bl	800139c <LL_ADC_INJ_IsConversionOngoing>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d11a      	bne.n	8001928 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001900:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d112      	bne.n	8001940 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191e:	f043 0201 	orr.w	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	655a      	str	r2, [r3, #84]	; 0x54
 8001926:	e00b      	b.n	8001940 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192c:	f043 0210 	orr.w	r2, r3, #16
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	f043 0201 	orr.w	r2, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 fcdf 	bl	8002304 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2260      	movs	r2, #96	; 0x60
 800194c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001954:	2b00      	cmp	r3, #0
 8001956:	d011      	beq.n	800197c <HAL_ADC_IRQHandler+0x310>
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00c      	beq.n	800197c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001966:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f8a0 	bl	8001ab4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2280      	movs	r2, #128	; 0x80
 800197a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d012      	beq.n	80019ac <HAL_ADC_IRQHandler+0x340>
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00d      	beq.n	80019ac <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001994:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fcc5 	bl	800232c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d012      	beq.n	80019dc <HAL_ADC_IRQHandler+0x370>
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00d      	beq.n	80019dc <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 fcb7 	bl	8002340 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d036      	beq.n	8001a54 <HAL_ADC_IRQHandler+0x3e8>
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d031      	beq.n	8001a54 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80019f8:	2301      	movs	r3, #1
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
 80019fc:	e014      	b.n	8001a28 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a04:	4825      	ldr	r0, [pc, #148]	; (8001a9c <HAL_ADC_IRQHandler+0x430>)
 8001a06:	f7ff fc47 	bl	8001298 <LL_ADC_GetMultiDMATransfer>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00b      	beq.n	8001a28 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001a10:	2301      	movs	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
 8001a14:	e008      	b.n	8001a28 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001a24:	2301      	movs	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d10e      	bne.n	8001a4c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a32:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	f043 0202 	orr.w	r2, r3, #2
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f83e 	bl	8001ac8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2210      	movs	r2, #16
 8001a52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d018      	beq.n	8001a90 <HAL_ADC_IRQHandler+0x424>
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d013      	beq.n	8001a90 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	f043 0208 	orr.w	r2, r3, #8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a88:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fc44 	bl	8002318 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	50040000 	.word	0x50040000
 8001a9c:	50040300 	.word	0x50040300

08001aa0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0b6      	sub	sp, #216	; 0xd8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x22>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e3c6      	b.n	800228c <HAL_ADC_ConfigChannel+0x7b0>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fc33 	bl	8001376 <LL_ADC_REG_IsConversionOngoing>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 83a7 	bne.w	8002266 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d824      	bhi.n	8001b6a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	3b02      	subs	r3, #2
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d81b      	bhi.n	8001b62 <HAL_ADC_ConfigChannel+0x86>
 8001b2a:	a201      	add	r2, pc, #4	; (adr r2, 8001b30 <HAL_ADC_ConfigChannel+0x54>)
 8001b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b30:	08001b41 	.word	0x08001b41
 8001b34:	08001b49 	.word	0x08001b49
 8001b38:	08001b51 	.word	0x08001b51
 8001b3c:	08001b59 	.word	0x08001b59
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	220c      	movs	r2, #12
 8001b44:	605a      	str	r2, [r3, #4]
          break;
 8001b46:	e011      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2212      	movs	r2, #18
 8001b4c:	605a      	str	r2, [r3, #4]
          break;
 8001b4e:	e00d      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2218      	movs	r2, #24
 8001b54:	605a      	str	r2, [r3, #4]
          break;
 8001b56:	e009      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5e:	605a      	str	r2, [r3, #4]
          break;
 8001b60:	e004      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2206      	movs	r2, #6
 8001b66:	605a      	str	r2, [r3, #4]
          break;
 8001b68:	e000      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001b6a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f7ff faf1 	bl	8001160 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fbf7 	bl	8001376 <LL_ADC_REG_IsConversionOngoing>
 8001b88:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fc03 	bl	800139c <LL_ADC_INJ_IsConversionOngoing>
 8001b96:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 81a6 	bne.w	8001ef0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f040 81a1 	bne.w	8001ef0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f7ff fb0f 	bl	80011de <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	08db      	lsrs	r3, r3, #3
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d00a      	beq.n	8001bf8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6919      	ldr	r1, [r3, #16]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bf2:	f7ff fa4d 	bl	8001090 <LL_ADC_SetOffset>
 8001bf6:	e17b      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fa6a 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10a      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x148>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fa5f 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	0e9b      	lsrs	r3, r3, #26
 8001c1e:	f003 021f 	and.w	r2, r3, #31
 8001c22:	e01e      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x186>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fa54 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001c52:	2320      	movs	r3, #32
 8001c54:	e004      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001c56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d105      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x19e>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	e018      	b.n	8001cac <HAL_ADC_ConfigChannel+0x1d0>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001c9e:	2320      	movs	r3, #32
 8001ca0:	e004      	b.n	8001cac <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fa23 	bl	8001104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fa07 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10a      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x20e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff f9fc 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	0e9b      	lsrs	r3, r3, #26
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	e01e      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x24c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff f9f1 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e004      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x264>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	e018      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x296>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001d64:	2320      	movs	r3, #32
 8001d66:	e004      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d106      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f9c0 	bl	8001104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2102      	movs	r1, #2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f9a4 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10a      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x2d4>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2102      	movs	r1, #2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff f999 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	0e9b      	lsrs	r3, r3, #26
 8001daa:	f003 021f 	and.w	r2, r3, #31
 8001dae:	e01e      	b.n	8001dee <HAL_ADC_ConfigChannel+0x312>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2102      	movs	r1, #2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff f98e 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001dde:	2320      	movs	r3, #32
 8001de0:	e004      	b.n	8001dec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001de2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d105      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x32a>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	0e9b      	lsrs	r3, r3, #26
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	e016      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x358>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001e26:	2320      	movs	r3, #32
 8001e28:	e004      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d106      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2102      	movs	r1, #2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f95f 	bl	8001104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2103      	movs	r1, #3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f943 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10a      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x396>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2103      	movs	r1, #3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f938 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	0e9b      	lsrs	r3, r3, #26
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	e017      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x3c6>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2103      	movs	r1, #3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff f92d 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001e94:	2320      	movs	r3, #32
 8001e96:	e003      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d105      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x3de>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	0e9b      	lsrs	r3, r3, #26
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	e011      	b.n	8001ede <HAL_ADC_ConfigChannel+0x402>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	e003      	b.n	8001ede <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d106      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2103      	movs	r1, #3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f90a 	bl	8001104 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fa2b 	bl	8001350 <LL_ADC_IsEnabled>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f040 813f 	bne.w	8002180 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6819      	ldr	r1, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f7ff f990 	bl	8001234 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a8e      	ldr	r2, [pc, #568]	; (8002154 <HAL_ADC_ConfigChannel+0x678>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	f040 8130 	bne.w	8002180 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10b      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x46c>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	3301      	adds	r3, #1
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2b09      	cmp	r3, #9
 8001f3e:	bf94      	ite	ls
 8001f40:	2301      	movls	r3, #1
 8001f42:	2300      	movhi	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	e019      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x4a0>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001f60:	2320      	movs	r3, #32
 8001f62:	e003      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	2b09      	cmp	r3, #9
 8001f74:	bf94      	ite	ls
 8001f76:	2301      	movls	r3, #1
 8001f78:	2300      	movhi	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d079      	beq.n	8002074 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d107      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x4c0>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0e9b      	lsrs	r3, r3, #26
 8001f92:	3301      	adds	r3, #1
 8001f94:	069b      	lsls	r3, r3, #26
 8001f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f9a:	e015      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x4ec>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	e003      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	069b      	lsls	r3, r3, #26
 8001fc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x50c>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0e9b      	lsrs	r3, r3, #26
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	e017      	b.n	8002018 <HAL_ADC_ConfigChannel+0x53c>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002000:	2320      	movs	r3, #32
 8002002:	e003      	b.n	800200c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	3301      	adds	r3, #1
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	ea42 0103 	orr.w	r1, r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10a      	bne.n	800203e <HAL_ADC_ConfigChannel+0x562>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0e9b      	lsrs	r3, r3, #26
 800202e:	3301      	adds	r3, #1
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	051b      	lsls	r3, r3, #20
 800203c:	e018      	b.n	8002070 <HAL_ADC_ConfigChannel+0x594>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800204c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002056:	2320      	movs	r3, #32
 8002058:	e003      	b.n	8002062 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800205a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002070:	430b      	orrs	r3, r1
 8002072:	e080      	b.n	8002176 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207c:	2b00      	cmp	r3, #0
 800207e:	d107      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x5b4>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0e9b      	lsrs	r3, r3, #26
 8002086:	3301      	adds	r3, #1
 8002088:	069b      	lsls	r3, r3, #26
 800208a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800208e:	e015      	b.n	80020bc <HAL_ADC_ConfigChannel+0x5e0>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80020a8:	2320      	movs	r3, #32
 80020aa:	e003      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80020ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	3301      	adds	r3, #1
 80020b6:	069b      	lsls	r3, r3, #26
 80020b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d109      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x600>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	3301      	adds	r3, #1
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	2101      	movs	r1, #1
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	e017      	b.n	800210c <HAL_ADC_ConfigChannel+0x630>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	61fb      	str	r3, [r7, #28]
  return result;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80020f4:	2320      	movs	r3, #32
 80020f6:	e003      	b.n	8002100 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	3301      	adds	r3, #1
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	2101      	movs	r1, #1
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	ea42 0103 	orr.w	r1, r2, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10d      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x65c>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0e9b      	lsrs	r3, r3, #26
 8002122:	3301      	adds	r3, #1
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	3b1e      	subs	r3, #30
 8002130:	051b      	lsls	r3, r3, #20
 8002132:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002136:	e01d      	b.n	8002174 <HAL_ADC_ConfigChannel+0x698>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	613b      	str	r3, [r7, #16]
  return result;
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d103      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002150:	2320      	movs	r3, #32
 8002152:	e005      	b.n	8002160 <HAL_ADC_ConfigChannel+0x684>
 8002154:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	f003 021f 	and.w	r2, r3, #31
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	3b1e      	subs	r3, #30
 800216e:	051b      	lsls	r3, r3, #20
 8002170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002174:	430b      	orrs	r3, r1
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	6892      	ldr	r2, [r2, #8]
 800217a:	4619      	mov	r1, r3
 800217c:	f7ff f82f 	bl	80011de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_ADC_ConfigChannel+0x7b8>)
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d079      	beq.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800218c:	4842      	ldr	r0, [pc, #264]	; (8002298 <HAL_ADC_ConfigChannel+0x7bc>)
 800218e:	f7fe ff71 	bl	8001074 <LL_ADC_GetCommonPathInternalCh>
 8002192:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a40      	ldr	r2, [pc, #256]	; (800229c <HAL_ADC_ConfigChannel+0x7c0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d12b      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d125      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <HAL_ADC_ConfigChannel+0x7c4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_ADC_ConfigChannel+0x6e4>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d15c      	bne.n	800227a <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021c8:	4619      	mov	r1, r3
 80021ca:	4833      	ldr	r0, [pc, #204]	; (8002298 <HAL_ADC_ConfigChannel+0x7bc>)
 80021cc:	f7fe ff3f 	bl	800104e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80021d0:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	4a35      	ldr	r2, [pc, #212]	; (80022ac <HAL_ADC_ConfigChannel+0x7d0>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	099a      	lsrs	r2, r3, #6
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021e8:	e002      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f9      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021f6:	e040      	b.n	800227a <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <HAL_ADC_ConfigChannel+0x7d4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d118      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x758>
 8002202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d112      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_ADC_ConfigChannel+0x746>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <HAL_ADC_ConfigChannel+0x7c8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d12d      	bne.n	800227e <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002222:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800222a:	4619      	mov	r1, r3
 800222c:	481a      	ldr	r0, [pc, #104]	; (8002298 <HAL_ADC_ConfigChannel+0x7bc>)
 800222e:	f7fe ff0e 	bl	800104e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002232:	e024      	b.n	800227e <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_ADC_ConfigChannel+0x7d8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d120      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800223e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11a      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d115      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800225c:	4619      	mov	r1, r3
 800225e:	480e      	ldr	r0, [pc, #56]	; (8002298 <HAL_ADC_ConfigChannel+0x7bc>)
 8002260:	f7fe fef5 	bl	800104e <LL_ADC_SetCommonPathInternalCh>
 8002264:	e00c      	b.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f043 0220 	orr.w	r2, r3, #32
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002278:	e002      	b.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800227a:	bf00      	nop
 800227c:	e000      	b.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800227e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002288:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800228c:	4618      	mov	r0, r3
 800228e:	37d8      	adds	r7, #216	; 0xd8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	80080000 	.word	0x80080000
 8002298:	50040300 	.word	0x50040300
 800229c:	c7520000 	.word	0xc7520000
 80022a0:	50040000 	.word	0x50040000
 80022a4:	50040200 	.word	0x50040200
 80022a8:	20000000 	.word	0x20000000
 80022ac:	053e2d63 	.word	0x053e2d63
 80022b0:	cb840000 	.word	0xcb840000
 80022b4:	80000001 	.word	0x80000001

080022b8 <LL_ADC_IsEnabled>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <LL_ADC_IsEnabled+0x18>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <LL_ADC_IsEnabled+0x1a>
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <LL_ADC_REG_IsConversionOngoing>:
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d101      	bne.n	80022f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b09f      	sub	sp, #124	; 0x7c
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002382:	2302      	movs	r3, #2
 8002384:	e08f      	b.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a47      	ldr	r2, [pc, #284]	; (80024b0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d102      	bne.n	800239e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002398:	4b46      	ldr	r3, [pc, #280]	; (80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	e001      	b.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10b      	bne.n	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	f043 0220 	orr.w	r2, r3, #32
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e072      	b.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff8b 	bl	80022de <LL_ADC_REG_IsConversionOngoing>
 80023c8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff85 	bl	80022de <LL_ADC_REG_IsConversionOngoing>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d154      	bne.n	8002484 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80023da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d151      	bne.n	8002484 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023e0:	4b35      	ldr	r3, [pc, #212]	; (80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023e2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d02c      	beq.n	8002446 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023fe:	035b      	lsls	r3, r3, #13
 8002400:	430b      	orrs	r3, r1
 8002402:	431a      	orrs	r2, r3
 8002404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002406:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002408:	4829      	ldr	r0, [pc, #164]	; (80024b0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800240a:	f7ff ff55 	bl	80022b8 <LL_ADC_IsEnabled>
 800240e:	4604      	mov	r4, r0
 8002410:	4828      	ldr	r0, [pc, #160]	; (80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002412:	f7ff ff51 	bl	80022b8 <LL_ADC_IsEnabled>
 8002416:	4603      	mov	r3, r0
 8002418:	431c      	orrs	r4, r3
 800241a:	4828      	ldr	r0, [pc, #160]	; (80024bc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800241c:	f7ff ff4c 	bl	80022b8 <LL_ADC_IsEnabled>
 8002420:	4603      	mov	r3, r0
 8002422:	4323      	orrs	r3, r4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d137      	bne.n	8002498 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002430:	f023 030f 	bic.w	r3, r3, #15
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	6811      	ldr	r1, [r2, #0]
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	6892      	ldr	r2, [r2, #8]
 800243c:	430a      	orrs	r2, r1
 800243e:	431a      	orrs	r2, r3
 8002440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002442:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002444:	e028      	b.n	8002498 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800244e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002450:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002452:	4817      	ldr	r0, [pc, #92]	; (80024b0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002454:	f7ff ff30 	bl	80022b8 <LL_ADC_IsEnabled>
 8002458:	4604      	mov	r4, r0
 800245a:	4816      	ldr	r0, [pc, #88]	; (80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800245c:	f7ff ff2c 	bl	80022b8 <LL_ADC_IsEnabled>
 8002460:	4603      	mov	r3, r0
 8002462:	431c      	orrs	r4, r3
 8002464:	4815      	ldr	r0, [pc, #84]	; (80024bc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002466:	f7ff ff27 	bl	80022b8 <LL_ADC_IsEnabled>
 800246a:	4603      	mov	r3, r0
 800246c:	4323      	orrs	r3, r4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d112      	bne.n	8002498 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800247a:	f023 030f 	bic.w	r3, r3, #15
 800247e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002480:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002482:	e009      	b.n	8002498 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002496:	e000      	b.n	800249a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002498:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	377c      	adds	r7, #124	; 0x7c
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}
 80024ae:	bf00      	nop
 80024b0:	50040000 	.word	0x50040000
 80024b4:	50040100 	.word	0x50040100
 80024b8:	50040300 	.word	0x50040300
 80024bc:	50040200 	.word	0x50040200

080024c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024dc:	4013      	ands	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f2:	4a04      	ldr	r2, [pc, #16]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	60d3      	str	r3, [r2, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <__NVIC_GetPriorityGrouping+0x18>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	f003 0307 	and.w	r3, r3, #7
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	db0b      	blt.n	800254e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	4907      	ldr	r1, [pc, #28]	; (800255c <__NVIC_EnableIRQ+0x38>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2001      	movs	r0, #1
 8002546:	fa00 f202 	lsl.w	r2, r0, r2
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e100 	.word	0xe000e100

08002560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db0a      	blt.n	800258a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	490c      	ldr	r1, [pc, #48]	; (80025ac <__NVIC_SetPriority+0x4c>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	440b      	add	r3, r1
 8002584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002588:	e00a      	b.n	80025a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4908      	ldr	r1, [pc, #32]	; (80025b0 <__NVIC_SetPriority+0x50>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3b04      	subs	r3, #4
 8002598:	0112      	lsls	r2, r2, #4
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	440b      	add	r3, r1
 800259e:	761a      	strb	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f1c3 0307 	rsb	r3, r3, #7
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	bf28      	it	cs
 80025d2:	2304      	movcs	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3304      	adds	r3, #4
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d902      	bls.n	80025e4 <NVIC_EncodePriority+0x30>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3b03      	subs	r3, #3
 80025e2:	e000      	b.n	80025e6 <NVIC_EncodePriority+0x32>
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43d9      	mvns	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	4313      	orrs	r3, r2
         );
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	; 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800262c:	d301      	bcc.n	8002632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262e:	2301      	movs	r3, #1
 8002630:	e00f      	b.n	8002652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <SysTick_Config+0x40>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800263a:	210f      	movs	r1, #15
 800263c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002640:	f7ff ff8e 	bl	8002560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <SysTick_Config+0x40>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <SysTick_Config+0x40>)
 800264c:	2207      	movs	r2, #7
 800264e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	e000e010 	.word	0xe000e010

08002660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff29 	bl	80024c0 <__NVIC_SetPriorityGrouping>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002688:	f7ff ff3e 	bl	8002508 <__NVIC_GetPriorityGrouping>
 800268c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	6978      	ldr	r0, [r7, #20]
 8002694:	f7ff ff8e 	bl	80025b4 <NVIC_EncodePriority>
 8002698:	4602      	mov	r2, r0
 800269a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff5d 	bl	8002560 <__NVIC_SetPriority>
}
 80026a6:	bf00      	nop
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff31 	bl	8002524 <__NVIC_EnableIRQ>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffa2 	bl	800261c <SysTick_Config>
 80026d8:	4603      	mov	r3, r0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e098      	b.n	8002828 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b4d      	ldr	r3, [pc, #308]	; (8002834 <HAL_DMA_Init+0x150>)
 80026fe:	429a      	cmp	r2, r3
 8002700:	d80f      	bhi.n	8002722 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	4b4b      	ldr	r3, [pc, #300]	; (8002838 <HAL_DMA_Init+0x154>)
 800270a:	4413      	add	r3, r2
 800270c:	4a4b      	ldr	r2, [pc, #300]	; (800283c <HAL_DMA_Init+0x158>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	009a      	lsls	r2, r3, #2
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a48      	ldr	r2, [pc, #288]	; (8002840 <HAL_DMA_Init+0x15c>)
 800271e:	641a      	str	r2, [r3, #64]	; 0x40
 8002720:	e00e      	b.n	8002740 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	4b46      	ldr	r3, [pc, #280]	; (8002844 <HAL_DMA_Init+0x160>)
 800272a:	4413      	add	r3, r2
 800272c:	4a43      	ldr	r2, [pc, #268]	; (800283c <HAL_DMA_Init+0x158>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	009a      	lsls	r2, r3, #2
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a42      	ldr	r2, [pc, #264]	; (8002848 <HAL_DMA_Init+0x164>)
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800279a:	d039      	beq.n	8002810 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	4a27      	ldr	r2, [pc, #156]	; (8002840 <HAL_DMA_Init+0x15c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d11a      	bne.n	80027dc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027a6:	4b29      	ldr	r3, [pc, #164]	; (800284c <HAL_DMA_Init+0x168>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f003 031c 	and.w	r3, r3, #28
 80027b2:	210f      	movs	r1, #15
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	4924      	ldr	r1, [pc, #144]	; (800284c <HAL_DMA_Init+0x168>)
 80027bc:	4013      	ands	r3, r2
 80027be:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027c0:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_DMA_Init+0x168>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6859      	ldr	r1, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	f003 031c 	and.w	r3, r3, #28
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	491d      	ldr	r1, [pc, #116]	; (800284c <HAL_DMA_Init+0x168>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
 80027da:	e019      	b.n	8002810 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <HAL_DMA_Init+0x16c>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f003 031c 	and.w	r3, r3, #28
 80027e8:	210f      	movs	r1, #15
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	4917      	ldr	r1, [pc, #92]	; (8002850 <HAL_DMA_Init+0x16c>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027f6:	4b16      	ldr	r3, [pc, #88]	; (8002850 <HAL_DMA_Init+0x16c>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6859      	ldr	r1, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f003 031c 	and.w	r3, r3, #28
 8002806:	fa01 f303 	lsl.w	r3, r1, r3
 800280a:	4911      	ldr	r1, [pc, #68]	; (8002850 <HAL_DMA_Init+0x16c>)
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40020407 	.word	0x40020407
 8002838:	bffdfff8 	.word	0xbffdfff8
 800283c:	cccccccd 	.word	0xcccccccd
 8002840:	40020000 	.word	0x40020000
 8002844:	bffdfbf8 	.word	0xbffdfbf8
 8002848:	40020400 	.word	0x40020400
 800284c:	400200a8 	.word	0x400200a8
 8002850:	400204a8 	.word	0x400204a8

08002854 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	f003 031c 	and.w	r3, r3, #28
 8002874:	2204      	movs	r2, #4
 8002876:	409a      	lsls	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d026      	beq.n	80028ce <HAL_DMA_IRQHandler+0x7a>
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d021      	beq.n	80028ce <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d107      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0204 	bic.w	r2, r2, #4
 80028a6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	f003 021c 	and.w	r2, r3, #28
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	2104      	movs	r1, #4
 80028b6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ba:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d071      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80028cc:	e06c      	b.n	80029a8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f003 031c 	and.w	r3, r3, #28
 80028d6:	2202      	movs	r2, #2
 80028d8:	409a      	lsls	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d02e      	beq.n	8002940 <HAL_DMA_IRQHandler+0xec>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d029      	beq.n	8002940 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10b      	bne.n	8002912 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 020a 	bic.w	r2, r2, #10
 8002908:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f003 021c 	and.w	r2, r3, #28
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2102      	movs	r1, #2
 8002920:	fa01 f202 	lsl.w	r2, r1, r2
 8002924:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d038      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800293e:	e033      	b.n	80029a8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	f003 031c 	and.w	r3, r3, #28
 8002948:	2208      	movs	r2, #8
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d02a      	beq.n	80029aa <HAL_DMA_IRQHandler+0x156>
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d025      	beq.n	80029aa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 020e 	bic.w	r2, r2, #14
 800296c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	f003 021c 	and.w	r2, r3, #28
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f202 	lsl.w	r2, r1, r2
 8002980:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299c:	2b00      	cmp	r3, #0
 800299e:	d004      	beq.n	80029aa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
}
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c2:	e17f      	b.n	8002cc4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2101      	movs	r1, #1
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	4013      	ands	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8171 	beq.w	8002cbe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d00b      	beq.n	80029fc <HAL_GPIO_Init+0x48>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d007      	beq.n	80029fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029f0:	2b11      	cmp	r3, #17
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b12      	cmp	r3, #18
 80029fa:	d130      	bne.n	8002a5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a32:	2201      	movs	r2, #1
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	f003 0201 	and.w	r2, r3, #1
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d118      	bne.n	8002a9c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a70:	2201      	movs	r2, #1
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	08db      	lsrs	r3, r3, #3
 8002a86:	f003 0201 	and.w	r2, r3, #1
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x128>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b12      	cmp	r3, #18
 8002ada:	d123      	bne.n	8002b24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	08da      	lsrs	r2, r3, #3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3208      	adds	r2, #8
 8002ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	220f      	movs	r2, #15
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	08da      	lsrs	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3208      	adds	r2, #8
 8002b1e:	6939      	ldr	r1, [r7, #16]
 8002b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	2203      	movs	r2, #3
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0203 	and.w	r2, r3, #3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80ac 	beq.w	8002cbe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b66:	4b5e      	ldr	r3, [pc, #376]	; (8002ce0 <HAL_GPIO_Init+0x32c>)
 8002b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6a:	4a5d      	ldr	r2, [pc, #372]	; (8002ce0 <HAL_GPIO_Init+0x32c>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6613      	str	r3, [r2, #96]	; 0x60
 8002b72:	4b5b      	ldr	r3, [pc, #364]	; (8002ce0 <HAL_GPIO_Init+0x32c>)
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b7e:	4a59      	ldr	r2, [pc, #356]	; (8002ce4 <HAL_GPIO_Init+0x330>)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	3302      	adds	r3, #2
 8002b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	220f      	movs	r2, #15
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ba8:	d025      	beq.n	8002bf6 <HAL_GPIO_Init+0x242>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a4e      	ldr	r2, [pc, #312]	; (8002ce8 <HAL_GPIO_Init+0x334>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d01f      	beq.n	8002bf2 <HAL_GPIO_Init+0x23e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4d      	ldr	r2, [pc, #308]	; (8002cec <HAL_GPIO_Init+0x338>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d019      	beq.n	8002bee <HAL_GPIO_Init+0x23a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4c      	ldr	r2, [pc, #304]	; (8002cf0 <HAL_GPIO_Init+0x33c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_GPIO_Init+0x236>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4b      	ldr	r2, [pc, #300]	; (8002cf4 <HAL_GPIO_Init+0x340>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00d      	beq.n	8002be6 <HAL_GPIO_Init+0x232>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4a      	ldr	r2, [pc, #296]	; (8002cf8 <HAL_GPIO_Init+0x344>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d007      	beq.n	8002be2 <HAL_GPIO_Init+0x22e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a49      	ldr	r2, [pc, #292]	; (8002cfc <HAL_GPIO_Init+0x348>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <HAL_GPIO_Init+0x22a>
 8002bda:	2306      	movs	r3, #6
 8002bdc:	e00c      	b.n	8002bf8 <HAL_GPIO_Init+0x244>
 8002bde:	2307      	movs	r3, #7
 8002be0:	e00a      	b.n	8002bf8 <HAL_GPIO_Init+0x244>
 8002be2:	2305      	movs	r3, #5
 8002be4:	e008      	b.n	8002bf8 <HAL_GPIO_Init+0x244>
 8002be6:	2304      	movs	r3, #4
 8002be8:	e006      	b.n	8002bf8 <HAL_GPIO_Init+0x244>
 8002bea:	2303      	movs	r3, #3
 8002bec:	e004      	b.n	8002bf8 <HAL_GPIO_Init+0x244>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e002      	b.n	8002bf8 <HAL_GPIO_Init+0x244>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_GPIO_Init+0x244>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	f002 0203 	and.w	r2, r2, #3
 8002bfe:	0092      	lsls	r2, r2, #2
 8002c00:	4093      	lsls	r3, r2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c08:	4936      	ldr	r1, [pc, #216]	; (8002ce4 <HAL_GPIO_Init+0x330>)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3302      	adds	r3, #2
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c16:	4b3a      	ldr	r3, [pc, #232]	; (8002d00 <HAL_GPIO_Init+0x34c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c3a:	4a31      	ldr	r2, [pc, #196]	; (8002d00 <HAL_GPIO_Init+0x34c>)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002c40:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_GPIO_Init+0x34c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c64:	4a26      	ldr	r2, [pc, #152]	; (8002d00 <HAL_GPIO_Init+0x34c>)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c6a:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <HAL_GPIO_Init+0x34c>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <HAL_GPIO_Init+0x34c>)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c94:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <HAL_GPIO_Init+0x34c>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cb8:	4a11      	ldr	r2, [pc, #68]	; (8002d00 <HAL_GPIO_Init+0x34c>)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa22 f303 	lsr.w	r3, r2, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f47f ae78 	bne.w	80029c4 <HAL_GPIO_Init+0x10>
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40010000 	.word	0x40010000
 8002ce8:	48000400 	.word	0x48000400
 8002cec:	48000800 	.word	0x48000800
 8002cf0:	48000c00 	.word	0x48000c00
 8002cf4:	48001000 	.word	0x48001000
 8002cf8:	48001400 	.word	0x48001400
 8002cfc:	48001800 	.word	0x48001800
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40007000 	.word	0x40007000

08002d24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <HAL_PWREx_GetVoltageRange+0x18>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40007000 	.word	0x40007000

08002d40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d4e:	d130      	bne.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d50:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d5c:	d038      	beq.n	8002dd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d66:	4a1e      	ldr	r2, [pc, #120]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2232      	movs	r2, #50	; 0x32
 8002d74:	fb02 f303 	mul.w	r3, r2, r3
 8002d78:	4a1b      	ldr	r2, [pc, #108]	; (8002de8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0c9b      	lsrs	r3, r3, #18
 8002d80:	3301      	adds	r3, #1
 8002d82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d84:	e002      	b.n	8002d8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d8c:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d98:	d102      	bne.n	8002da0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f2      	bne.n	8002d86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dac:	d110      	bne.n	8002dd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e00f      	b.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dbe:	d007      	beq.n	8002dd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dc8:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40007000 	.word	0x40007000
 8002de4:	20000000 	.word	0x20000000
 8002de8:	431bde83 	.word	0x431bde83

08002dec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002df4:	f7fe f90c 	bl	8001010 <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e063      	b.n	8002ecc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10b      	bne.n	8002e28 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7fd fe09 	bl	8000a30 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002e1e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f858 	bl	8002ed8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	021a      	lsls	r2, r3, #8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2120      	movs	r1, #32
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f850 	bl	8002ef4 <QSPI_WaitFlagStateUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002e58:	7afb      	ldrb	r3, [r7, #11]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d131      	bne.n	8002ec2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e68:	f023 0310 	bic.w	r3, r3, #16
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6852      	ldr	r2, [r2, #4]
 8002e70:	0611      	lsls	r1, r2, #24
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68d2      	ldr	r2, [r2, #12]
 8002e76:	4311      	orrs	r1, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_QSPI_Init+0xe8>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6912      	ldr	r2, [r2, #16]
 8002e8e:	0411      	lsls	r1, r2, #16
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6952      	ldr	r2, [r2, #20]
 8002e94:	4311      	orrs	r1, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6992      	ldr	r2, [r2, #24]
 8002e9a:	4311      	orrs	r1, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002eca:	7afb      	ldrb	r3, [r7, #11]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	ffe0f8fe 	.word	0xffe0f8fe

08002ed8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	4613      	mov	r3, r2
 8002f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002f04:	e01a      	b.n	8002f3c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f0c:	d016      	beq.n	8002f3c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0e:	f7fe f87f 	bl	8001010 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2204      	movs	r2, #4
 8002f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e00e      	b.n	8002f5a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d1d6      	bne.n	8002f06 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e3d4      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f76:	4ba1      	ldr	r3, [pc, #644]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f80:	4b9e      	ldr	r3, [pc, #632]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80e4 	beq.w	8003160 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <HAL_RCC_OscConfig+0x4a>
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b0c      	cmp	r3, #12
 8002fa2:	f040 808b 	bne.w	80030bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	f040 8087 	bne.w	80030bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fae:	4b93      	ldr	r3, [pc, #588]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x62>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e3ac      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1a      	ldr	r2, [r3, #32]
 8002fca:	4b8c      	ldr	r3, [pc, #560]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d004      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x7c>
 8002fd6:	4b89      	ldr	r3, [pc, #548]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fde:	e005      	b.n	8002fec <HAL_RCC_OscConfig+0x88>
 8002fe0:	4b86      	ldr	r3, [pc, #536]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d223      	bcs.n	8003038 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fd3f 	bl	8003a78 <RCC_SetFlashLatencyFromMSIRange>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e38d      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003004:	4b7d      	ldr	r3, [pc, #500]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a7c      	ldr	r2, [pc, #496]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 800300a:	f043 0308 	orr.w	r3, r3, #8
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	4b7a      	ldr	r3, [pc, #488]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4977      	ldr	r1, [pc, #476]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003022:	4b76      	ldr	r3, [pc, #472]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	4972      	ldr	r1, [pc, #456]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
 8003036:	e025      	b.n	8003084 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003038:	4b70      	ldr	r3, [pc, #448]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a6f      	ldr	r2, [pc, #444]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 800303e:	f043 0308 	orr.w	r3, r3, #8
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4b6d      	ldr	r3, [pc, #436]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	496a      	ldr	r1, [pc, #424]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003056:	4b69      	ldr	r3, [pc, #420]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	4965      	ldr	r1, [pc, #404]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003066:	4313      	orrs	r3, r2
 8003068:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fcff 	bl	8003a78 <RCC_SetFlashLatencyFromMSIRange>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e34d      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003084:	f000 fc36 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 8003088:	4601      	mov	r1, r0
 800308a:	4b5c      	ldr	r3, [pc, #368]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	4a5a      	ldr	r2, [pc, #360]	; (8003200 <HAL_RCC_OscConfig+0x29c>)
 8003096:	5cd3      	ldrb	r3, [r2, r3]
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	fa21 f303 	lsr.w	r3, r1, r3
 80030a0:	4a58      	ldr	r2, [pc, #352]	; (8003204 <HAL_RCC_OscConfig+0x2a0>)
 80030a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030a4:	4b58      	ldr	r3, [pc, #352]	; (8003208 <HAL_RCC_OscConfig+0x2a4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd ff61 	bl	8000f70 <HAL_InitTick>
 80030ae:	4603      	mov	r3, r0
 80030b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d052      	beq.n	800315e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	e331      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d032      	beq.n	800312a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030c4:	4b4d      	ldr	r3, [pc, #308]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a4c      	ldr	r2, [pc, #304]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030d0:	f7fd ff9e 	bl	8001010 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030d8:	f7fd ff9a 	bl	8001010 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e31a      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ea:	4b44      	ldr	r3, [pc, #272]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f6:	4b41      	ldr	r3, [pc, #260]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a40      	ldr	r2, [pc, #256]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80030fc:	f043 0308 	orr.w	r3, r3, #8
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b3e      	ldr	r3, [pc, #248]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	493b      	ldr	r1, [pc, #236]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003110:	4313      	orrs	r3, r2
 8003112:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003114:	4b39      	ldr	r3, [pc, #228]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	021b      	lsls	r3, r3, #8
 8003122:	4936      	ldr	r1, [pc, #216]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
 8003128:	e01a      	b.n	8003160 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800312a:	4b34      	ldr	r3, [pc, #208]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a33      	ldr	r2, [pc, #204]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003136:	f7fd ff6b 	bl	8001010 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800313e:	f7fd ff67 	bl	8001010 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e2e7      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003150:	4b2a      	ldr	r3, [pc, #168]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f0      	bne.n	800313e <HAL_RCC_OscConfig+0x1da>
 800315c:	e000      	b.n	8003160 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800315e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d074      	beq.n	8003256 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b08      	cmp	r3, #8
 8003170:	d005      	beq.n	800317e <HAL_RCC_OscConfig+0x21a>
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b0c      	cmp	r3, #12
 8003176:	d10e      	bne.n	8003196 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b03      	cmp	r3, #3
 800317c:	d10b      	bne.n	8003196 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317e:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d064      	beq.n	8003254 <HAL_RCC_OscConfig+0x2f0>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d160      	bne.n	8003254 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e2c4      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x24a>
 80031a0:	4b16      	ldr	r3, [pc, #88]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a15      	ldr	r2, [pc, #84]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80031a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	e01d      	b.n	80031ea <HAL_RCC_OscConfig+0x286>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b6:	d10c      	bne.n	80031d2 <HAL_RCC_OscConfig+0x26e>
 80031b8:	4b10      	ldr	r3, [pc, #64]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a0f      	ldr	r2, [pc, #60]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80031be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0c      	ldr	r2, [pc, #48]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80031ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	e00b      	b.n	80031ea <HAL_RCC_OscConfig+0x286>
 80031d2:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a09      	ldr	r2, [pc, #36]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80031d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b07      	ldr	r3, [pc, #28]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a06      	ldr	r2, [pc, #24]	; (80031fc <HAL_RCC_OscConfig+0x298>)
 80031e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d01c      	beq.n	800322c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f2:	f7fd ff0d 	bl	8001010 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f8:	e011      	b.n	800321e <HAL_RCC_OscConfig+0x2ba>
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000
 8003200:	080057c0 	.word	0x080057c0
 8003204:	20000000 	.word	0x20000000
 8003208:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800320c:	f7fd ff00 	bl	8001010 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	; 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e280      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321e:	4baf      	ldr	r3, [pc, #700]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x2a8>
 800322a:	e014      	b.n	8003256 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fd fef0 	bl	8001010 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003234:	f7fd feec 	bl	8001010 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	; 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e26c      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003246:	4ba5      	ldr	r3, [pc, #660]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x2d0>
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d060      	beq.n	8003324 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b04      	cmp	r3, #4
 8003266:	d005      	beq.n	8003274 <HAL_RCC_OscConfig+0x310>
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d119      	bne.n	80032a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d116      	bne.n	80032a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003274:	4b99      	ldr	r3, [pc, #612]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_OscConfig+0x328>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e249      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328c:	4b93      	ldr	r3, [pc, #588]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	4990      	ldr	r1, [pc, #576]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a0:	e040      	b.n	8003324 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d023      	beq.n	80032f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032aa:	4b8c      	ldr	r3, [pc, #560]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a8b      	ldr	r2, [pc, #556]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 80032b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b6:	f7fd feab 	bl	8001010 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032be:	f7fd fea7 	bl	8001010 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e227      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d0:	4b82      	ldr	r3, [pc, #520]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032dc:	4b7f      	ldr	r3, [pc, #508]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	061b      	lsls	r3, r3, #24
 80032ea:	497c      	ldr	r1, [pc, #496]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
 80032f0:	e018      	b.n	8003324 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f2:	4b7a      	ldr	r3, [pc, #488]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a79      	ldr	r2, [pc, #484]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 80032f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fd fe87 	bl	8001010 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003306:	f7fd fe83 	bl	8001010 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e203      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003318:	4b70      	ldr	r3, [pc, #448]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d03c      	beq.n	80033aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01c      	beq.n	8003372 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003338:	4b68      	ldr	r3, [pc, #416]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333e:	4a67      	ldr	r2, [pc, #412]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003348:	f7fd fe62 	bl	8001010 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003350:	f7fd fe5e 	bl	8001010 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e1de      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003362:	4b5e      	ldr	r3, [pc, #376]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 8003364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ef      	beq.n	8003350 <HAL_RCC_OscConfig+0x3ec>
 8003370:	e01b      	b.n	80033aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003372:	4b5a      	ldr	r3, [pc, #360]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 8003374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003378:	4a58      	ldr	r2, [pc, #352]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003382:	f7fd fe45 	bl	8001010 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338a:	f7fd fe41 	bl	8001010 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e1c1      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800339c:	4b4f      	ldr	r3, [pc, #316]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 800339e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1ef      	bne.n	800338a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 80a6 	beq.w	8003504 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b8:	2300      	movs	r3, #0
 80033ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033bc:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10d      	bne.n	80033e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c8:	4b44      	ldr	r3, [pc, #272]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033cc:	4a43      	ldr	r2, [pc, #268]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6593      	str	r3, [r2, #88]	; 0x58
 80033d4:	4b41      	ldr	r3, [pc, #260]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 80033d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e0:	2301      	movs	r3, #1
 80033e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e4:	4b3e      	ldr	r3, [pc, #248]	; (80034e0 <HAL_RCC_OscConfig+0x57c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d118      	bne.n	8003422 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f0:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCC_OscConfig+0x57c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a3a      	ldr	r2, [pc, #232]	; (80034e0 <HAL_RCC_OscConfig+0x57c>)
 80033f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fc:	f7fd fe08 	bl	8001010 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003404:	f7fd fe04 	bl	8001010 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e184      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003416:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <HAL_RCC_OscConfig+0x57c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d108      	bne.n	800343c <HAL_RCC_OscConfig+0x4d8>
 800342a:	4b2c      	ldr	r3, [pc, #176]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003430:	4a2a      	ldr	r2, [pc, #168]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800343a:	e024      	b.n	8003486 <HAL_RCC_OscConfig+0x522>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b05      	cmp	r3, #5
 8003442:	d110      	bne.n	8003466 <HAL_RCC_OscConfig+0x502>
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	4a24      	ldr	r2, [pc, #144]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 800344c:	f043 0304 	orr.w	r3, r3, #4
 8003450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003454:	4b21      	ldr	r3, [pc, #132]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	4a20      	ldr	r2, [pc, #128]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003464:	e00f      	b.n	8003486 <HAL_RCC_OscConfig+0x522>
 8003466:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003476:	4b19      	ldr	r3, [pc, #100]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	4a17      	ldr	r2, [pc, #92]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 800347e:	f023 0304 	bic.w	r3, r3, #4
 8003482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fd fdbf 	bl	8001010 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003494:	e00a      	b.n	80034ac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fd fdbb 	bl	8001010 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e139      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_OscConfig+0x578>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0ed      	beq.n	8003496 <HAL_RCC_OscConfig+0x532>
 80034ba:	e01a      	b.n	80034f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fd fda8 	bl	8001010 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c2:	e00f      	b.n	80034e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c4:	f7fd fda4 	bl	8001010 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d906      	bls.n	80034e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e122      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e4:	4b90      	ldr	r3, [pc, #576]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e8      	bne.n	80034c4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f2:	7ffb      	ldrb	r3, [r7, #31]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d105      	bne.n	8003504 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f8:	4b8b      	ldr	r3, [pc, #556]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	4a8a      	ldr	r2, [pc, #552]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80034fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003502:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8108 	beq.w	800371e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	2b02      	cmp	r3, #2
 8003514:	f040 80d0 	bne.w	80036b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003518:	4b83      	ldr	r3, [pc, #524]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 0203 	and.w	r2, r3, #3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	429a      	cmp	r2, r3
 800352a:	d130      	bne.n	800358e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	3b01      	subs	r3, #1
 8003538:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d127      	bne.n	800358e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d11f      	bne.n	800358e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003558:	2a07      	cmp	r2, #7
 800355a:	bf14      	ite	ne
 800355c:	2201      	movne	r2, #1
 800355e:	2200      	moveq	r2, #0
 8003560:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003562:	4293      	cmp	r3, r2
 8003564:	d113      	bne.n	800358e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	3b01      	subs	r3, #1
 8003574:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d109      	bne.n	800358e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	3b01      	subs	r3, #1
 8003588:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d06e      	beq.n	800366c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b0c      	cmp	r3, #12
 8003592:	d069      	beq.n	8003668 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003594:	4b64      	ldr	r3, [pc, #400]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d105      	bne.n	80035ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035a0:	4b61      	ldr	r3, [pc, #388]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0b7      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035b0:	4b5d      	ldr	r3, [pc, #372]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a5c      	ldr	r2, [pc, #368]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80035b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035bc:	f7fd fd28 	bl	8001010 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fd fd24 	bl	8001010 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e0a4      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d6:	4b54      	ldr	r3, [pc, #336]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e2:	4b51      	ldr	r3, [pc, #324]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	4b51      	ldr	r3, [pc, #324]	; (800372c <HAL_RCC_OscConfig+0x7c8>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035f2:	3a01      	subs	r2, #1
 80035f4:	0112      	lsls	r2, r2, #4
 80035f6:	4311      	orrs	r1, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035fc:	0212      	lsls	r2, r2, #8
 80035fe:	4311      	orrs	r1, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003604:	0852      	lsrs	r2, r2, #1
 8003606:	3a01      	subs	r2, #1
 8003608:	0552      	lsls	r2, r2, #21
 800360a:	4311      	orrs	r1, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003610:	0852      	lsrs	r2, r2, #1
 8003612:	3a01      	subs	r2, #1
 8003614:	0652      	lsls	r2, r2, #25
 8003616:	4311      	orrs	r1, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800361c:	0912      	lsrs	r2, r2, #4
 800361e:	0452      	lsls	r2, r2, #17
 8003620:	430a      	orrs	r2, r1
 8003622:	4941      	ldr	r1, [pc, #260]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 8003624:	4313      	orrs	r3, r2
 8003626:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003628:	4b3f      	ldr	r3, [pc, #252]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a3e      	ldr	r2, [pc, #248]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 800362e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003632:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003634:	4b3c      	ldr	r3, [pc, #240]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4a3b      	ldr	r2, [pc, #236]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 800363a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800363e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003640:	f7fd fce6 	bl	8001010 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003648:	f7fd fce2 	bl	8001010 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e062      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365a:	4b33      	ldr	r3, [pc, #204]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003666:	e05a      	b.n	800371e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e059      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366c:	4b2e      	ldr	r3, [pc, #184]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d152      	bne.n	800371e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003678:	4b2b      	ldr	r3, [pc, #172]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a2a      	ldr	r2, [pc, #168]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 800367e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003682:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003684:	4b28      	ldr	r3, [pc, #160]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4a27      	ldr	r2, [pc, #156]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 800368a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800368e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003690:	f7fd fcbe 	bl	8001010 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003698:	f7fd fcba 	bl	8001010 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e03a      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036aa:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x734>
 80036b6:	e032      	b.n	800371e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2b0c      	cmp	r3, #12
 80036bc:	d02d      	beq.n	800371a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036be:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a19      	ldr	r2, [pc, #100]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80036c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d105      	bne.n	80036e2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036d6:	4b14      	ldr	r3, [pc, #80]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	4a13      	ldr	r2, [pc, #76]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80036dc:	f023 0303 	bic.w	r3, r3, #3
 80036e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036e2:	4b11      	ldr	r3, [pc, #68]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	4a10      	ldr	r2, [pc, #64]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 80036e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fd fc8d 	bl	8001010 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fa:	f7fd fc89 	bl	8001010 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e009      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <HAL_RCC_OscConfig+0x7c4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f0      	bne.n	80036fa <HAL_RCC_OscConfig+0x796>
 8003718:	e001      	b.n	800371e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3720      	adds	r7, #32
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000
 800372c:	f99d808c 	.word	0xf99d808c

08003730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0c8      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b66      	ldr	r3, [pc, #408]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d910      	bls.n	8003774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b63      	ldr	r3, [pc, #396]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 0207 	bic.w	r2, r3, #7
 800375a:	4961      	ldr	r1, [pc, #388]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b5f      	ldr	r3, [pc, #380]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0b0      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d04c      	beq.n	800381a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d107      	bne.n	8003798 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003788:	4b56      	ldr	r3, [pc, #344]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d121      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e09e      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d107      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a0:	4b50      	ldr	r3, [pc, #320]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d115      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e092      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037b8:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d109      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e086      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c8:	4b46      	ldr	r3, [pc, #280]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e07e      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037d8:	4b42      	ldr	r3, [pc, #264]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f023 0203 	bic.w	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	493f      	ldr	r1, [pc, #252]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ea:	f7fd fc11 	bl	8001010 <HAL_GetTick>
 80037ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f0:	e00a      	b.n	8003808 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f2:	f7fd fc0d 	bl	8001010 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e066      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003808:	4b36      	ldr	r3, [pc, #216]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 020c 	and.w	r2, r3, #12
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	429a      	cmp	r2, r3
 8003818:	d1eb      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003826:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	492c      	ldr	r1, [pc, #176]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003834:	4313      	orrs	r3, r2
 8003836:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003838:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d210      	bcs.n	8003868 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 0207 	bic.w	r2, r3, #7
 800384e:	4924      	ldr	r1, [pc, #144]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e036      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003874:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4918      	ldr	r1, [pc, #96]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003892:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4910      	ldr	r1, [pc, #64]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038a6:	f000 f825 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80038aa:	4601      	mov	r1, r0
 80038ac:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <HAL_RCC_ClockConfig+0x1b4>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <HAL_RCC_ClockConfig+0x1b8>)
 80038b8:	5cd3      	ldrb	r3, [r2, r3]
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	fa21 f303 	lsr.w	r3, r1, r3
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038c6:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd fb50 	bl	8000f70 <HAL_InitTick>
 80038d0:	4603      	mov	r3, r0
 80038d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80038d4:	7afb      	ldrb	r3, [r7, #11]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40022000 	.word	0x40022000
 80038e4:	40021000 	.word	0x40021000
 80038e8:	080057c0 	.word	0x080057c0
 80038ec:	20000000 	.word	0x20000000
 80038f0:	20000004 	.word	0x20000004

080038f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b089      	sub	sp, #36	; 0x24
 80038f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003902:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800390c:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x34>
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b0c      	cmp	r3, #12
 8003920:	d121      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d11e      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003928:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d107      	bne.n	8003944 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003934:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	e005      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003944:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003950:	4a2a      	ldr	r2, [pc, #168]	; (80039fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003958:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10d      	bne.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003964:	e00a      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d102      	bne.n	8003972 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x10c>)
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	e004      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d101      	bne.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x110>)
 800397a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d133      	bne.n	80039ea <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d002      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0xa4>
 8003992:	2b03      	cmp	r3, #3
 8003994:	d003      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0xaa>
 8003996:	e005      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003998:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x10c>)
 800399a:	617b      	str	r3, [r7, #20]
      break;
 800399c:	e005      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800399e:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x110>)
 80039a0:	617b      	str	r3, [r7, #20]
      break;
 80039a2:	e002      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	617b      	str	r3, [r7, #20]
      break;
 80039a8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039aa:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	3301      	adds	r3, #1
 80039b6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	0a1b      	lsrs	r3, r3, #8
 80039be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	fb02 f203 	mul.w	r2, r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0e5b      	lsrs	r3, r3, #25
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	3301      	adds	r3, #1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039ea:	69bb      	ldr	r3, [r7, #24]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3724      	adds	r7, #36	; 0x24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40021000 	.word	0x40021000
 80039fc:	080057d8 	.word	0x080057d8
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	007a1200 	.word	0x007a1200

08003a08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000000 	.word	0x20000000

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a24:	f7ff fff0 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a28:	4601      	mov	r1, r0
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a36:	5cd3      	ldrb	r3, [r2, r3]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	080057d0 	.word	0x080057d0

08003a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a50:	f7ff ffda 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a54:	4601      	mov	r1, r0
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	0adb      	lsrs	r3, r3, #11
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a62:	5cd3      	ldrb	r3, [r2, r3]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	080057d0 	.word	0x080057d0

08003a78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a80:	2300      	movs	r3, #0
 8003a82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a84:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a90:	f7ff f948 	bl	8002d24 <HAL_PWREx_GetVoltageRange>
 8003a94:	6178      	str	r0, [r7, #20]
 8003a96:	e014      	b.n	8003ac2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	4a24      	ldr	r2, [pc, #144]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8003aa4:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ab0:	f7ff f938 	bl	8002d24 <HAL_PWREx_GetVoltageRange>
 8003ab4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ab6:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac8:	d10b      	bne.n	8003ae2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b80      	cmp	r3, #128	; 0x80
 8003ace:	d919      	bls.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ad4:	d902      	bls.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	e013      	b.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003adc:	2301      	movs	r3, #1
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	e010      	b.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b80      	cmp	r3, #128	; 0x80
 8003ae6:	d902      	bls.n	8003aee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ae8:	2303      	movs	r3, #3
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	e00a      	b.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b80      	cmp	r3, #128	; 0x80
 8003af2:	d102      	bne.n	8003afa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003af4:	2302      	movs	r3, #2
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	e004      	b.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b70      	cmp	r3, #112	; 0x70
 8003afe:	d101      	bne.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b00:	2301      	movs	r3, #1
 8003b02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 0207 	bic.w	r2, r3, #7
 8003b0c:	4909      	ldr	r1, [pc, #36]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b14:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d001      	beq.n	8003b26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40022000 	.word	0x40022000

08003b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b40:	2300      	movs	r3, #0
 8003b42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b44:	2300      	movs	r3, #0
 8003b46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d03f      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b5c:	d01c      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b62:	d802      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00e      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003b68:	e01f      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003b6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b6e:	d003      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003b70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b74:	d01c      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003b76:	e018      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b78:	4b85      	ldr	r3, [pc, #532]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a84      	ldr	r2, [pc, #528]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b84:	e015      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fab9 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b96:	e00c      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3320      	adds	r3, #32
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fba0 	bl	80042e4 <RCCEx_PLLSAI2_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ba8:	e003      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	74fb      	strb	r3, [r7, #19]
      break;
 8003bae:	e000      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb2:	7cfb      	ldrb	r3, [r7, #19]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bb8:	4b75      	ldr	r3, [pc, #468]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc6:	4972      	ldr	r1, [pc, #456]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bce:	e001      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d03f      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003be8:	d01c      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003bea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bee:	d802      	bhi.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00e      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003bf4:	e01f      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bfa:	d003      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003bfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c00:	d01c      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003c02:	e018      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c04:	4b62      	ldr	r3, [pc, #392]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4a61      	ldr	r2, [pc, #388]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c10:	e015      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3304      	adds	r3, #4
 8003c16:	2100      	movs	r1, #0
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fa73 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c22:	e00c      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3320      	adds	r3, #32
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fb5a 	bl	80042e4 <RCCEx_PLLSAI2_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c34:	e003      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	74fb      	strb	r3, [r7, #19]
      break;
 8003c3a:	e000      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3e:	7cfb      	ldrb	r3, [r7, #19]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c44:	4b52      	ldr	r3, [pc, #328]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c52:	494f      	ldr	r1, [pc, #316]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c5a:	e001      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 80a0 	beq.w	8003dae <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003c82:	2300      	movs	r3, #0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00d      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c88:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6593      	str	r3, [r2, #88]	; 0x58
 8003c94:	4b3e      	ldr	r3, [pc, #248]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca4:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a3a      	ldr	r2, [pc, #232]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cb0:	f7fd f9ae 	bl	8001010 <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cb6:	e009      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb8:	f7fd f9aa 	bl	8001010 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d902      	bls.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	74fb      	strb	r3, [r7, #19]
        break;
 8003cca:	e005      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0ef      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d15c      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cde:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01f      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d019      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cfc:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d08:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	4a20      	ldr	r2, [pc, #128]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d18:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d28:	4a19      	ldr	r2, [pc, #100]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d016      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fd f969 	bl	8001010 <HAL_GetTick>
 8003d3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d40:	e00b      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fd f965 	bl	8001010 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d902      	bls.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	74fb      	strb	r3, [r7, #19]
            break;
 8003d58:	e006      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ec      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7e:	4904      	ldr	r1, [pc, #16]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d86:	e009      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	74bb      	strb	r3, [r7, #18]
 8003d8c:	e006      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d9c:	7c7b      	ldrb	r3, [r7, #17]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d105      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da2:	4b9e      	ldr	r3, [pc, #632]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	4a9d      	ldr	r2, [pc, #628]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dba:	4b98      	ldr	r3, [pc, #608]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc0:	f023 0203 	bic.w	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	4994      	ldr	r1, [pc, #592]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ddc:	4b8f      	ldr	r3, [pc, #572]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	f023 020c 	bic.w	r2, r3, #12
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	498c      	ldr	r1, [pc, #560]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dfe:	4b87      	ldr	r3, [pc, #540]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	4983      	ldr	r1, [pc, #524]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e20:	4b7e      	ldr	r3, [pc, #504]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	497b      	ldr	r1, [pc, #492]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e42:	4b76      	ldr	r3, [pc, #472]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e50:	4972      	ldr	r1, [pc, #456]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e64:	4b6d      	ldr	r3, [pc, #436]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	496a      	ldr	r1, [pc, #424]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e86:	4b65      	ldr	r3, [pc, #404]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	4961      	ldr	r1, [pc, #388]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ea8:	4b5c      	ldr	r3, [pc, #368]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb6:	4959      	ldr	r1, [pc, #356]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eca:	4b54      	ldr	r3, [pc, #336]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed8:	4950      	ldr	r1, [pc, #320]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eec:	4b4b      	ldr	r3, [pc, #300]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	4948      	ldr	r1, [pc, #288]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f0e:	4b43      	ldr	r3, [pc, #268]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	493f      	ldr	r1, [pc, #252]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d028      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f30:	4b3a      	ldr	r3, [pc, #232]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3e:	4937      	ldr	r1, [pc, #220]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f50:	4b32      	ldr	r3, [pc, #200]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a31      	ldr	r2, [pc, #196]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f5a:	60d3      	str	r3, [r2, #12]
 8003f5c:	e011      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f66:	d10c      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 f8c8 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003f7e:	7cfb      	ldrb	r3, [r7, #19]
 8003f80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d028      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f8e:	4b23      	ldr	r3, [pc, #140]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	491f      	ldr	r1, [pc, #124]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fac:	d106      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	4a1a      	ldr	r2, [pc, #104]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb8:	60d3      	str	r3, [r2, #12]
 8003fba:	e011      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f899 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fd6:	7cfb      	ldrb	r3, [r7, #19]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d02b      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffa:	4908      	ldr	r1, [pc, #32]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400a:	d109      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800400c:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a02      	ldr	r2, [pc, #8]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004016:	60d3      	str	r3, [r2, #12]
 8004018:	e014      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004024:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004028:	d10c      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f000 f867 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d02f      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004050:	4b2b      	ldr	r3, [pc, #172]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405e:	4928      	ldr	r1, [pc, #160]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800406e:	d10d      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	2102      	movs	r1, #2
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f844 	bl	8004104 <RCCEx_PLLSAI1_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004080:	7cfb      	ldrb	r3, [r7, #19]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d014      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004086:	7cfb      	ldrb	r3, [r7, #19]
 8004088:	74bb      	strb	r3, [r7, #18]
 800408a:	e011      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004094:	d10c      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3320      	adds	r3, #32
 800409a:	2102      	movs	r1, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f921 	bl	80042e4 <RCCEx_PLLSAI2_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ca:	490d      	ldr	r1, [pc, #52]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ee:	4904      	ldr	r1, [pc, #16]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000

08004104 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004112:	4b73      	ldr	r3, [pc, #460]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d018      	beq.n	8004150 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800411e:	4b70      	ldr	r3, [pc, #448]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0203 	and.w	r2, r3, #3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d10d      	bne.n	800414a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
       ||
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004136:	4b6a      	ldr	r3, [pc, #424]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	091b      	lsrs	r3, r3, #4
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
       ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d044      	beq.n	80041d4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
 800414e:	e041      	b.n	80041d4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d00c      	beq.n	8004172 <RCCEx_PLLSAI1_Config+0x6e>
 8004158:	2b03      	cmp	r3, #3
 800415a:	d013      	beq.n	8004184 <RCCEx_PLLSAI1_Config+0x80>
 800415c:	2b01      	cmp	r3, #1
 800415e:	d120      	bne.n	80041a2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004160:	4b5f      	ldr	r3, [pc, #380]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d11d      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004170:	e01a      	b.n	80041a8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004172:	4b5b      	ldr	r3, [pc, #364]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417a:	2b00      	cmp	r3, #0
 800417c:	d116      	bne.n	80041ac <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004182:	e013      	b.n	80041ac <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004184:	4b56      	ldr	r3, [pc, #344]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10f      	bne.n	80041b0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004190:	4b53      	ldr	r3, [pc, #332]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d109      	bne.n	80041b0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041a0:	e006      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
      break;
 80041a6:	e004      	b.n	80041b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80041a8:	bf00      	nop
 80041aa:	e002      	b.n	80041b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80041b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10d      	bne.n	80041d4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041b8:	4b49      	ldr	r3, [pc, #292]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6819      	ldr	r1, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	430b      	orrs	r3, r1
 80041ce:	4944      	ldr	r1, [pc, #272]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d17d      	bne.n	80042d6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041da:	4b41      	ldr	r3, [pc, #260]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a40      	ldr	r2, [pc, #256]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e6:	f7fc ff13 	bl	8001010 <HAL_GetTick>
 80041ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041ec:	e009      	b.n	8004202 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041ee:	f7fc ff0f 	bl	8001010 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d902      	bls.n	8004202 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	73fb      	strb	r3, [r7, #15]
        break;
 8004200:	e005      	b.n	800420e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004202:	4b37      	ldr	r3, [pc, #220]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1ef      	bne.n	80041ee <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d160      	bne.n	80042d6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d111      	bne.n	800423e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800421a:	4b31      	ldr	r3, [pc, #196]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6892      	ldr	r2, [r2, #8]
 800422a:	0211      	lsls	r1, r2, #8
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	68d2      	ldr	r2, [r2, #12]
 8004230:	0912      	lsrs	r2, r2, #4
 8004232:	0452      	lsls	r2, r2, #17
 8004234:	430a      	orrs	r2, r1
 8004236:	492a      	ldr	r1, [pc, #168]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004238:	4313      	orrs	r3, r2
 800423a:	610b      	str	r3, [r1, #16]
 800423c:	e027      	b.n	800428e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d112      	bne.n	800426a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004244:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800424c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6892      	ldr	r2, [r2, #8]
 8004254:	0211      	lsls	r1, r2, #8
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6912      	ldr	r2, [r2, #16]
 800425a:	0852      	lsrs	r2, r2, #1
 800425c:	3a01      	subs	r2, #1
 800425e:	0552      	lsls	r2, r2, #21
 8004260:	430a      	orrs	r2, r1
 8004262:	491f      	ldr	r1, [pc, #124]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004264:	4313      	orrs	r3, r2
 8004266:	610b      	str	r3, [r1, #16]
 8004268:	e011      	b.n	800428e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800426a:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004272:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6892      	ldr	r2, [r2, #8]
 800427a:	0211      	lsls	r1, r2, #8
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6952      	ldr	r2, [r2, #20]
 8004280:	0852      	lsrs	r2, r2, #1
 8004282:	3a01      	subs	r2, #1
 8004284:	0652      	lsls	r2, r2, #25
 8004286:	430a      	orrs	r2, r1
 8004288:	4915      	ldr	r1, [pc, #84]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800428e:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004294:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004298:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fc feb9 	bl	8001010 <HAL_GetTick>
 800429e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042a0:	e009      	b.n	80042b6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042a2:	f7fc feb5 	bl	8001010 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d902      	bls.n	80042b6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	73fb      	strb	r3, [r7, #15]
          break;
 80042b4:	e005      	b.n	80042c2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0ef      	beq.n	80042a2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d106      	bne.n	80042d6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	4903      	ldr	r1, [pc, #12]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40021000 	.word	0x40021000

080042e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042f2:	4b68      	ldr	r3, [pc, #416]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d018      	beq.n	8004330 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042fe:	4b65      	ldr	r3, [pc, #404]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0203 	and.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d10d      	bne.n	800432a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
       ||
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004316:	4b5f      	ldr	r3, [pc, #380]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
       ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d044      	beq.n	80043b4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	e041      	b.n	80043b4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d00c      	beq.n	8004352 <RCCEx_PLLSAI2_Config+0x6e>
 8004338:	2b03      	cmp	r3, #3
 800433a:	d013      	beq.n	8004364 <RCCEx_PLLSAI2_Config+0x80>
 800433c:	2b01      	cmp	r3, #1
 800433e:	d120      	bne.n	8004382 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004340:	4b54      	ldr	r3, [pc, #336]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d11d      	bne.n	8004388 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004350:	e01a      	b.n	8004388 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004352:	4b50      	ldr	r3, [pc, #320]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435a:	2b00      	cmp	r3, #0
 800435c:	d116      	bne.n	800438c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004362:	e013      	b.n	800438c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004364:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10f      	bne.n	8004390 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004370:	4b48      	ldr	r3, [pc, #288]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004380:	e006      	b.n	8004390 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
      break;
 8004386:	e004      	b.n	8004392 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004388:	bf00      	nop
 800438a:	e002      	b.n	8004392 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800438c:	bf00      	nop
 800438e:	e000      	b.n	8004392 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004390:	bf00      	nop
    }

    if(status == HAL_OK)
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10d      	bne.n	80043b4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004398:	4b3e      	ldr	r3, [pc, #248]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	430b      	orrs	r3, r1
 80043ae:	4939      	ldr	r1, [pc, #228]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d167      	bne.n	800448a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043ba:	4b36      	ldr	r3, [pc, #216]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a35      	ldr	r2, [pc, #212]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c6:	f7fc fe23 	bl	8001010 <HAL_GetTick>
 80043ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043cc:	e009      	b.n	80043e2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043ce:	f7fc fe1f 	bl	8001010 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d902      	bls.n	80043e2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	73fb      	strb	r3, [r7, #15]
        break;
 80043e0:	e005      	b.n	80043ee <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043e2:	4b2c      	ldr	r3, [pc, #176]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1ef      	bne.n	80043ce <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d14a      	bne.n	800448a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d111      	bne.n	800441e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043fa:	4b26      	ldr	r3, [pc, #152]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6892      	ldr	r2, [r2, #8]
 800440a:	0211      	lsls	r1, r2, #8
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68d2      	ldr	r2, [r2, #12]
 8004410:	0912      	lsrs	r2, r2, #4
 8004412:	0452      	lsls	r2, r2, #17
 8004414:	430a      	orrs	r2, r1
 8004416:	491f      	ldr	r1, [pc, #124]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004418:	4313      	orrs	r3, r2
 800441a:	614b      	str	r3, [r1, #20]
 800441c:	e011      	b.n	8004442 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800441e:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004426:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6892      	ldr	r2, [r2, #8]
 800442e:	0211      	lsls	r1, r2, #8
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6912      	ldr	r2, [r2, #16]
 8004434:	0852      	lsrs	r2, r2, #1
 8004436:	3a01      	subs	r2, #1
 8004438:	0652      	lsls	r2, r2, #25
 800443a:	430a      	orrs	r2, r1
 800443c:	4915      	ldr	r1, [pc, #84]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 800443e:	4313      	orrs	r3, r2
 8004440:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004442:	4b14      	ldr	r3, [pc, #80]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a13      	ldr	r2, [pc, #76]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444e:	f7fc fddf 	bl	8001010 <HAL_GetTick>
 8004452:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004454:	e009      	b.n	800446a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004456:	f7fc fddb 	bl	8001010 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d902      	bls.n	800446a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	73fb      	strb	r3, [r7, #15]
          break;
 8004468:	e005      	b.n	8004476 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ef      	beq.n	8004456 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004476:	7bfb      	ldrb	r3, [r7, #15]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d106      	bne.n	800448a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	4903      	ldr	r1, [pc, #12]	; (8004494 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004486:	4313      	orrs	r3, r2
 8004488:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800448a:	7bfb      	ldrb	r3, [r7, #15]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40021000 	.word	0x40021000

08004498 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d06c      	beq.n	8004584 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fc fb74 	bl	8000bac <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	22ca      	movs	r2, #202	; 0xca
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2253      	movs	r2, #83	; 0x53
 80044da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f9a0 	bl	8004822 <RTC_EnterInitMode>
 80044e2:	4603      	mov	r3, r0
 80044e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d14b      	bne.n	8004584 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6812      	ldr	r2, [r2, #0]
 80044f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80044fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044fe:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6899      	ldr	r1, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	68d2      	ldr	r2, [r2, #12]
 8004526:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6919      	ldr	r1, [r3, #16]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	041a      	lsls	r2, r3, #16
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f9a3 	bl	8004888 <RTC_ExitInitMode>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d11b      	bne.n	8004584 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0203 	bic.w	r2, r2, #3
 800455a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69da      	ldr	r2, [r3, #28]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	22ff      	movs	r2, #255	; 0xff
 800457a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004584:	7bfb      	ldrb	r3, [r7, #15]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800458e:	b590      	push	{r4, r7, lr}
 8004590:	b087      	sub	sp, #28
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_RTC_SetTime+0x1a>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e08b      	b.n	80046c0 <HAL_RTC_SetTime+0x132>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	22ca      	movs	r2, #202	; 0xca
 80045be:	625a      	str	r2, [r3, #36]	; 0x24
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2253      	movs	r2, #83	; 0x53
 80045c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f92a 	bl	8004822 <RTC_EnterInitMode>
 80045ce:	4603      	mov	r3, r0
 80045d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80045d2:	7cfb      	ldrb	r3, [r7, #19]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d163      	bne.n	80046a0 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d126      	bne.n	800462c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2200      	movs	r2, #0
 80045f0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 f984 	bl	8004904 <RTC_ByteToBcd2>
 80045fc:	4603      	mov	r3, r0
 80045fe:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	785b      	ldrb	r3, [r3, #1]
 8004604:	4618      	mov	r0, r3
 8004606:	f000 f97d 	bl	8004904 <RTC_ByteToBcd2>
 800460a:	4603      	mov	r3, r0
 800460c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800460e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	789b      	ldrb	r3, [r3, #2]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 f975 	bl	8004904 <RTC_ByteToBcd2>
 800461a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800461c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	78db      	ldrb	r3, [r3, #3]
 8004624:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e018      	b.n	800465e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d102      	bne.n	8004640 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2200      	movs	r2, #0
 800463e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	785b      	ldrb	r3, [r3, #1]
 800464a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800464c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004652:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	78db      	ldrb	r3, [r3, #3]
 8004658:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004668:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800466c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800467c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6899      	ldr	r1, [r3, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	431a      	orrs	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f8f6 	bl	8004888 <RTC_ExitInitMode>
 800469c:	4603      	mov	r3, r0
 800469e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	22ff      	movs	r2, #255	; 0xff
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80046a8:	7cfb      	ldrb	r3, [r7, #19]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d103      	bne.n	80046b6 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80046be:	7cfb      	ldrb	r3, [r7, #19]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd90      	pop	{r4, r7, pc}

080046c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_RTC_SetDate+0x1a>
 80046de:	2302      	movs	r3, #2
 80046e0:	e075      	b.n	80047ce <HAL_RTC_SetDate+0x106>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2202      	movs	r2, #2
 80046ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10e      	bne.n	8004716 <HAL_RTC_SetDate+0x4e>
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	785b      	ldrb	r3, [r3, #1]
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	f023 0310 	bic.w	r3, r3, #16
 800470c:	b2db      	uxtb	r3, r3
 800470e:	330a      	adds	r3, #10
 8004710:	b2da      	uxtb	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d11c      	bne.n	8004756 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	78db      	ldrb	r3, [r3, #3]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 f8ef 	bl	8004904 <RTC_ByteToBcd2>
 8004726:	4603      	mov	r3, r0
 8004728:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f8e8 	bl	8004904 <RTC_ByteToBcd2>
 8004734:	4603      	mov	r3, r0
 8004736:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004738:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	789b      	ldrb	r3, [r3, #2]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f8e0 	bl	8004904 <RTC_ByteToBcd2>
 8004744:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004746:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e00e      	b.n	8004774 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	78db      	ldrb	r3, [r3, #3]
 800475a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	785b      	ldrb	r3, [r3, #1]
 8004760:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004762:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004768:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	22ca      	movs	r2, #202	; 0xca
 800477a:	625a      	str	r2, [r3, #36]	; 0x24
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2253      	movs	r2, #83	; 0x53
 8004782:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f84c 	bl	8004822 <RTC_EnterInitMode>
 800478a:	4603      	mov	r3, r0
 800478c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10c      	bne.n	80047ae <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800479e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047a2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f86f 	bl	8004888 <RTC_ExitInitMode>
 80047aa:	4603      	mov	r3, r0
 80047ac:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	22ff      	movs	r2, #255	; 0xff
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d103      	bne.n	80047c4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80047cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd90      	pop	{r4, r7, pc}

080047d6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047ec:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80047ee:	f7fc fc0f 	bl	8001010 <HAL_GetTick>
 80047f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80047f4:	e009      	b.n	800480a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047f6:	f7fc fc0b 	bl	8001010 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004804:	d901      	bls.n	800480a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e007      	b.n	800481a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0ee      	beq.n	80047f6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d120      	bne.n	800487e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004844:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004846:	f7fc fbe3 	bl	8001010 <HAL_GetTick>
 800484a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800484c:	e00d      	b.n	800486a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800484e:	f7fc fbdf 	bl	8001010 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800485c:	d905      	bls.n	800486a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2203      	movs	r2, #3
 8004866:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	d102      	bne.n	800487e <RTC_EnterInitMode+0x5c>
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b03      	cmp	r3, #3
 800487c:	d1e7      	bne.n	800484e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800487e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004894:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <RTC_ExitInitMode+0x78>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4a19      	ldr	r2, [pc, #100]	; (8004900 <RTC_ExitInitMode+0x78>)
 800489a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800489e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80048a0:	4b17      	ldr	r3, [pc, #92]	; (8004900 <RTC_ExitInitMode+0x78>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0320 	and.w	r3, r3, #32
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10c      	bne.n	80048c6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ff92 	bl	80047d6 <HAL_RTC_WaitForSynchro>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01e      	beq.n	80048f6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2203      	movs	r2, #3
 80048bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	73fb      	strb	r3, [r7, #15]
 80048c4:	e017      	b.n	80048f6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048c6:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <RTC_ExitInitMode+0x78>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	4a0d      	ldr	r2, [pc, #52]	; (8004900 <RTC_ExitInitMode+0x78>)
 80048cc:	f023 0320 	bic.w	r3, r3, #32
 80048d0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff ff7f 	bl	80047d6 <HAL_RTC_WaitForSynchro>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2203      	movs	r2, #3
 80048e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <RTC_ExitInitMode+0x78>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	4a04      	ldr	r2, [pc, #16]	; (8004900 <RTC_ExitInitMode+0x78>)
 80048f0:	f043 0320 	orr.w	r3, r3, #32
 80048f4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40002800 	.word	0x40002800

08004904 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004916:	e005      	b.n	8004924 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3301      	adds	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800491e:	7afb      	ldrb	r3, [r7, #11]
 8004920:	3b0a      	subs	r3, #10
 8004922:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004924:	7afb      	ldrb	r3, [r7, #11]
 8004926:	2b09      	cmp	r3, #9
 8004928:	d8f6      	bhi.n	8004918 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	b2da      	uxtb	r2, r3
 8004932:	7afb      	ldrb	r3, [r7, #11]
 8004934:	4313      	orrs	r3, r2
 8004936:	b2db      	uxtb	r3, r3
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e049      	b.n	80049ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fc fa24 	bl	8000db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3304      	adds	r3, #4
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f000 f8ee 	bl	8004b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_ConfigClockSource+0x18>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e0a8      	b.n	8004b5c <HAL_TIM_ConfigClockSource+0x16a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a2c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a34:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d067      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x124>
 8004a46:	2b40      	cmp	r3, #64	; 0x40
 8004a48:	d80b      	bhi.n	8004a62 <HAL_TIM_ConfigClockSource+0x70>
 8004a4a:	2b10      	cmp	r3, #16
 8004a4c:	d073      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x144>
 8004a4e:	2b10      	cmp	r3, #16
 8004a50:	d802      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x66>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d06f      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a56:	e078      	b.n	8004b4a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d06c      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x144>
 8004a5c:	2b30      	cmp	r3, #48	; 0x30
 8004a5e:	d06a      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004a60:	e073      	b.n	8004b4a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004a62:	2b70      	cmp	r3, #112	; 0x70
 8004a64:	d00d      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x90>
 8004a66:	2b70      	cmp	r3, #112	; 0x70
 8004a68:	d804      	bhi.n	8004a74 <HAL_TIM_ConfigClockSource+0x82>
 8004a6a:	2b50      	cmp	r3, #80	; 0x50
 8004a6c:	d033      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0xe4>
 8004a6e:	2b60      	cmp	r3, #96	; 0x60
 8004a70:	d041      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004a72:	e06a      	b.n	8004b4a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a78:	d066      	beq.n	8004b48 <HAL_TIM_ConfigClockSource+0x156>
 8004a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7e:	d017      	beq.n	8004ab0 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004a80:	e063      	b.n	8004b4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6899      	ldr	r1, [r3, #8]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f000 f97b 	bl	8004d8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004aa4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	609a      	str	r2, [r3, #8]
      break;
 8004aae:	e04c      	b.n	8004b4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6818      	ldr	r0, [r3, #0]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	6899      	ldr	r1, [r3, #8]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f000 f964 	bl	8004d8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ad2:	609a      	str	r2, [r3, #8]
      break;
 8004ad4:	e039      	b.n	8004b4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6859      	ldr	r1, [r3, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f000 f8d8 	bl	8004c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2150      	movs	r1, #80	; 0x50
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f931 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004af4:	e029      	b.n	8004b4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6859      	ldr	r1, [r3, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f000 f8f7 	bl	8004cf6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2160      	movs	r1, #96	; 0x60
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f921 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004b14:	e019      	b.n	8004b4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6859      	ldr	r1, [r3, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	461a      	mov	r2, r3
 8004b24:	f000 f8b8 	bl	8004c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2140      	movs	r1, #64	; 0x40
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 f911 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004b34:	e009      	b.n	8004b4a <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4610      	mov	r0, r2
 8004b42:	f000 f908 	bl	8004d56 <TIM_ITRx_SetConfig>
        break;
 8004b46:	e000      	b.n	8004b4a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004b48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a40      	ldr	r2, [pc, #256]	; (8004c78 <TIM_Base_SetConfig+0x114>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d013      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b82:	d00f      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a3d      	ldr	r2, [pc, #244]	; (8004c7c <TIM_Base_SetConfig+0x118>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00b      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a3c      	ldr	r2, [pc, #240]	; (8004c80 <TIM_Base_SetConfig+0x11c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d007      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3b      	ldr	r2, [pc, #236]	; (8004c84 <TIM_Base_SetConfig+0x120>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d003      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a3a      	ldr	r2, [pc, #232]	; (8004c88 <TIM_Base_SetConfig+0x124>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d108      	bne.n	8004bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a2f      	ldr	r2, [pc, #188]	; (8004c78 <TIM_Base_SetConfig+0x114>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01f      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc4:	d01b      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2c      	ldr	r2, [pc, #176]	; (8004c7c <TIM_Base_SetConfig+0x118>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d017      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a2b      	ldr	r2, [pc, #172]	; (8004c80 <TIM_Base_SetConfig+0x11c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2a      	ldr	r2, [pc, #168]	; (8004c84 <TIM_Base_SetConfig+0x120>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00f      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a29      	ldr	r2, [pc, #164]	; (8004c88 <TIM_Base_SetConfig+0x124>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00b      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a28      	ldr	r2, [pc, #160]	; (8004c8c <TIM_Base_SetConfig+0x128>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d007      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a27      	ldr	r2, [pc, #156]	; (8004c90 <TIM_Base_SetConfig+0x12c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a26      	ldr	r2, [pc, #152]	; (8004c94 <TIM_Base_SetConfig+0x130>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d108      	bne.n	8004c10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a10      	ldr	r2, [pc, #64]	; (8004c78 <TIM_Base_SetConfig+0x114>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00f      	beq.n	8004c5c <TIM_Base_SetConfig+0xf8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a12      	ldr	r2, [pc, #72]	; (8004c88 <TIM_Base_SetConfig+0x124>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00b      	beq.n	8004c5c <TIM_Base_SetConfig+0xf8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a11      	ldr	r2, [pc, #68]	; (8004c8c <TIM_Base_SetConfig+0x128>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d007      	beq.n	8004c5c <TIM_Base_SetConfig+0xf8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a10      	ldr	r2, [pc, #64]	; (8004c90 <TIM_Base_SetConfig+0x12c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_Base_SetConfig+0xf8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a0f      	ldr	r2, [pc, #60]	; (8004c94 <TIM_Base_SetConfig+0x130>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d103      	bne.n	8004c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	615a      	str	r2, [r3, #20]
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800
 8004c84:	40000c00 	.word	0x40000c00
 8004c88:	40013400 	.word	0x40013400
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	40014400 	.word	0x40014400
 8004c94:	40014800 	.word	0x40014800

08004c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0201 	bic.w	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f023 030a 	bic.w	r3, r3, #10
 8004cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	621a      	str	r2, [r3, #32]
}
 8004cea:	bf00      	nop
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b087      	sub	sp, #28
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f023 0210 	bic.w	r2, r3, #16
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	031b      	lsls	r3, r3, #12
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	621a      	str	r2, [r3, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f043 0307 	orr.w	r3, r3, #7
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	609a      	str	r2, [r3, #8]
}
 8004d80:	bf00      	nop
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	021a      	lsls	r2, r3, #8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e068      	b.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a2e      	ldr	r2, [pc, #184]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d004      	beq.n	8004e18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a2d      	ldr	r2, [pc, #180]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d108      	bne.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1e      	ldr	r2, [pc, #120]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01d      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e56:	d018      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1b      	ldr	r2, [pc, #108]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1a      	ldr	r2, [pc, #104]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00e      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d009      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a14      	ldr	r2, [pc, #80]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d10c      	bne.n	8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40013400 	.word	0x40013400
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	40014000 	.word	0x40014000

08004edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e040      	b.n	8004f70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fb ffa8 	bl	8000e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2224      	movs	r2, #36	; 0x24
 8004f08:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0201 	bic.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f82c 	bl	8004f78 <UART_SetConfig>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e022      	b.n	8004f70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 faaa 	bl	800548c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0201 	orr.w	r2, r2, #1
 8004f66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fb31 	bl	80055d0 <UART_CheckIdleState>
 8004f6e:	4603      	mov	r3, r0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004f7c:	b088      	sub	sp, #32
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4bac      	ldr	r3, [pc, #688]	; (8005258 <UART_SetConfig+0x2e0>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	69f9      	ldr	r1, [r7, #28]
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4aa2      	ldr	r2, [pc, #648]	; (800525c <UART_SetConfig+0x2e4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a99      	ldr	r2, [pc, #612]	; (8005260 <UART_SetConfig+0x2e8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d121      	bne.n	8005044 <UART_SetConfig+0xcc>
 8005000:	4b98      	ldr	r3, [pc, #608]	; (8005264 <UART_SetConfig+0x2ec>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	2b03      	cmp	r3, #3
 800500c:	d816      	bhi.n	800503c <UART_SetConfig+0xc4>
 800500e:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <UART_SetConfig+0x9c>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005025 	.word	0x08005025
 8005018:	08005031 	.word	0x08005031
 800501c:	0800502b 	.word	0x0800502b
 8005020:	08005037 	.word	0x08005037
 8005024:	2301      	movs	r3, #1
 8005026:	76fb      	strb	r3, [r7, #27]
 8005028:	e0e8      	b.n	80051fc <UART_SetConfig+0x284>
 800502a:	2302      	movs	r3, #2
 800502c:	76fb      	strb	r3, [r7, #27]
 800502e:	e0e5      	b.n	80051fc <UART_SetConfig+0x284>
 8005030:	2304      	movs	r3, #4
 8005032:	76fb      	strb	r3, [r7, #27]
 8005034:	e0e2      	b.n	80051fc <UART_SetConfig+0x284>
 8005036:	2308      	movs	r3, #8
 8005038:	76fb      	strb	r3, [r7, #27]
 800503a:	e0df      	b.n	80051fc <UART_SetConfig+0x284>
 800503c:	2310      	movs	r3, #16
 800503e:	76fb      	strb	r3, [r7, #27]
 8005040:	bf00      	nop
 8005042:	e0db      	b.n	80051fc <UART_SetConfig+0x284>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a87      	ldr	r2, [pc, #540]	; (8005268 <UART_SetConfig+0x2f0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d134      	bne.n	80050b8 <UART_SetConfig+0x140>
 800504e:	4b85      	ldr	r3, [pc, #532]	; (8005264 <UART_SetConfig+0x2ec>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005054:	f003 030c 	and.w	r3, r3, #12
 8005058:	2b0c      	cmp	r3, #12
 800505a:	d829      	bhi.n	80050b0 <UART_SetConfig+0x138>
 800505c:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <UART_SetConfig+0xec>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005099 	.word	0x08005099
 8005068:	080050b1 	.word	0x080050b1
 800506c:	080050b1 	.word	0x080050b1
 8005070:	080050b1 	.word	0x080050b1
 8005074:	080050a5 	.word	0x080050a5
 8005078:	080050b1 	.word	0x080050b1
 800507c:	080050b1 	.word	0x080050b1
 8005080:	080050b1 	.word	0x080050b1
 8005084:	0800509f 	.word	0x0800509f
 8005088:	080050b1 	.word	0x080050b1
 800508c:	080050b1 	.word	0x080050b1
 8005090:	080050b1 	.word	0x080050b1
 8005094:	080050ab 	.word	0x080050ab
 8005098:	2300      	movs	r3, #0
 800509a:	76fb      	strb	r3, [r7, #27]
 800509c:	e0ae      	b.n	80051fc <UART_SetConfig+0x284>
 800509e:	2302      	movs	r3, #2
 80050a0:	76fb      	strb	r3, [r7, #27]
 80050a2:	e0ab      	b.n	80051fc <UART_SetConfig+0x284>
 80050a4:	2304      	movs	r3, #4
 80050a6:	76fb      	strb	r3, [r7, #27]
 80050a8:	e0a8      	b.n	80051fc <UART_SetConfig+0x284>
 80050aa:	2308      	movs	r3, #8
 80050ac:	76fb      	strb	r3, [r7, #27]
 80050ae:	e0a5      	b.n	80051fc <UART_SetConfig+0x284>
 80050b0:	2310      	movs	r3, #16
 80050b2:	76fb      	strb	r3, [r7, #27]
 80050b4:	bf00      	nop
 80050b6:	e0a1      	b.n	80051fc <UART_SetConfig+0x284>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a6b      	ldr	r2, [pc, #428]	; (800526c <UART_SetConfig+0x2f4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d120      	bne.n	8005104 <UART_SetConfig+0x18c>
 80050c2:	4b68      	ldr	r3, [pc, #416]	; (8005264 <UART_SetConfig+0x2ec>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d00f      	beq.n	80050f0 <UART_SetConfig+0x178>
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d802      	bhi.n	80050da <UART_SetConfig+0x162>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <UART_SetConfig+0x16c>
 80050d8:	e010      	b.n	80050fc <UART_SetConfig+0x184>
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d005      	beq.n	80050ea <UART_SetConfig+0x172>
 80050de:	2b30      	cmp	r3, #48	; 0x30
 80050e0:	d009      	beq.n	80050f6 <UART_SetConfig+0x17e>
 80050e2:	e00b      	b.n	80050fc <UART_SetConfig+0x184>
 80050e4:	2300      	movs	r3, #0
 80050e6:	76fb      	strb	r3, [r7, #27]
 80050e8:	e088      	b.n	80051fc <UART_SetConfig+0x284>
 80050ea:	2302      	movs	r3, #2
 80050ec:	76fb      	strb	r3, [r7, #27]
 80050ee:	e085      	b.n	80051fc <UART_SetConfig+0x284>
 80050f0:	2304      	movs	r3, #4
 80050f2:	76fb      	strb	r3, [r7, #27]
 80050f4:	e082      	b.n	80051fc <UART_SetConfig+0x284>
 80050f6:	2308      	movs	r3, #8
 80050f8:	76fb      	strb	r3, [r7, #27]
 80050fa:	e07f      	b.n	80051fc <UART_SetConfig+0x284>
 80050fc:	2310      	movs	r3, #16
 80050fe:	76fb      	strb	r3, [r7, #27]
 8005100:	bf00      	nop
 8005102:	e07b      	b.n	80051fc <UART_SetConfig+0x284>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a59      	ldr	r2, [pc, #356]	; (8005270 <UART_SetConfig+0x2f8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d120      	bne.n	8005150 <UART_SetConfig+0x1d8>
 800510e:	4b55      	ldr	r3, [pc, #340]	; (8005264 <UART_SetConfig+0x2ec>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005118:	2b40      	cmp	r3, #64	; 0x40
 800511a:	d00f      	beq.n	800513c <UART_SetConfig+0x1c4>
 800511c:	2b40      	cmp	r3, #64	; 0x40
 800511e:	d802      	bhi.n	8005126 <UART_SetConfig+0x1ae>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <UART_SetConfig+0x1b8>
 8005124:	e010      	b.n	8005148 <UART_SetConfig+0x1d0>
 8005126:	2b80      	cmp	r3, #128	; 0x80
 8005128:	d005      	beq.n	8005136 <UART_SetConfig+0x1be>
 800512a:	2bc0      	cmp	r3, #192	; 0xc0
 800512c:	d009      	beq.n	8005142 <UART_SetConfig+0x1ca>
 800512e:	e00b      	b.n	8005148 <UART_SetConfig+0x1d0>
 8005130:	2300      	movs	r3, #0
 8005132:	76fb      	strb	r3, [r7, #27]
 8005134:	e062      	b.n	80051fc <UART_SetConfig+0x284>
 8005136:	2302      	movs	r3, #2
 8005138:	76fb      	strb	r3, [r7, #27]
 800513a:	e05f      	b.n	80051fc <UART_SetConfig+0x284>
 800513c:	2304      	movs	r3, #4
 800513e:	76fb      	strb	r3, [r7, #27]
 8005140:	e05c      	b.n	80051fc <UART_SetConfig+0x284>
 8005142:	2308      	movs	r3, #8
 8005144:	76fb      	strb	r3, [r7, #27]
 8005146:	e059      	b.n	80051fc <UART_SetConfig+0x284>
 8005148:	2310      	movs	r3, #16
 800514a:	76fb      	strb	r3, [r7, #27]
 800514c:	bf00      	nop
 800514e:	e055      	b.n	80051fc <UART_SetConfig+0x284>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a47      	ldr	r2, [pc, #284]	; (8005274 <UART_SetConfig+0x2fc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d124      	bne.n	80051a4 <UART_SetConfig+0x22c>
 800515a:	4b42      	ldr	r3, [pc, #264]	; (8005264 <UART_SetConfig+0x2ec>)
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005168:	d012      	beq.n	8005190 <UART_SetConfig+0x218>
 800516a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516e:	d802      	bhi.n	8005176 <UART_SetConfig+0x1fe>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <UART_SetConfig+0x20c>
 8005174:	e012      	b.n	800519c <UART_SetConfig+0x224>
 8005176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800517a:	d006      	beq.n	800518a <UART_SetConfig+0x212>
 800517c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005180:	d009      	beq.n	8005196 <UART_SetConfig+0x21e>
 8005182:	e00b      	b.n	800519c <UART_SetConfig+0x224>
 8005184:	2300      	movs	r3, #0
 8005186:	76fb      	strb	r3, [r7, #27]
 8005188:	e038      	b.n	80051fc <UART_SetConfig+0x284>
 800518a:	2302      	movs	r3, #2
 800518c:	76fb      	strb	r3, [r7, #27]
 800518e:	e035      	b.n	80051fc <UART_SetConfig+0x284>
 8005190:	2304      	movs	r3, #4
 8005192:	76fb      	strb	r3, [r7, #27]
 8005194:	e032      	b.n	80051fc <UART_SetConfig+0x284>
 8005196:	2308      	movs	r3, #8
 8005198:	76fb      	strb	r3, [r7, #27]
 800519a:	e02f      	b.n	80051fc <UART_SetConfig+0x284>
 800519c:	2310      	movs	r3, #16
 800519e:	76fb      	strb	r3, [r7, #27]
 80051a0:	bf00      	nop
 80051a2:	e02b      	b.n	80051fc <UART_SetConfig+0x284>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a2c      	ldr	r2, [pc, #176]	; (800525c <UART_SetConfig+0x2e4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d124      	bne.n	80051f8 <UART_SetConfig+0x280>
 80051ae:	4b2d      	ldr	r3, [pc, #180]	; (8005264 <UART_SetConfig+0x2ec>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051bc:	d012      	beq.n	80051e4 <UART_SetConfig+0x26c>
 80051be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c2:	d802      	bhi.n	80051ca <UART_SetConfig+0x252>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d007      	beq.n	80051d8 <UART_SetConfig+0x260>
 80051c8:	e012      	b.n	80051f0 <UART_SetConfig+0x278>
 80051ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ce:	d006      	beq.n	80051de <UART_SetConfig+0x266>
 80051d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051d4:	d009      	beq.n	80051ea <UART_SetConfig+0x272>
 80051d6:	e00b      	b.n	80051f0 <UART_SetConfig+0x278>
 80051d8:	2300      	movs	r3, #0
 80051da:	76fb      	strb	r3, [r7, #27]
 80051dc:	e00e      	b.n	80051fc <UART_SetConfig+0x284>
 80051de:	2302      	movs	r3, #2
 80051e0:	76fb      	strb	r3, [r7, #27]
 80051e2:	e00b      	b.n	80051fc <UART_SetConfig+0x284>
 80051e4:	2304      	movs	r3, #4
 80051e6:	76fb      	strb	r3, [r7, #27]
 80051e8:	e008      	b.n	80051fc <UART_SetConfig+0x284>
 80051ea:	2308      	movs	r3, #8
 80051ec:	76fb      	strb	r3, [r7, #27]
 80051ee:	e005      	b.n	80051fc <UART_SetConfig+0x284>
 80051f0:	2310      	movs	r3, #16
 80051f2:	76fb      	strb	r3, [r7, #27]
 80051f4:	bf00      	nop
 80051f6:	e001      	b.n	80051fc <UART_SetConfig+0x284>
 80051f8:	2310      	movs	r3, #16
 80051fa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a16      	ldr	r2, [pc, #88]	; (800525c <UART_SetConfig+0x2e4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	f040 8087 	bne.w	8005316 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005208:	7efb      	ldrb	r3, [r7, #27]
 800520a:	2b08      	cmp	r3, #8
 800520c:	d836      	bhi.n	800527c <UART_SetConfig+0x304>
 800520e:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <UART_SetConfig+0x29c>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	08005239 	.word	0x08005239
 8005218:	0800527d 	.word	0x0800527d
 800521c:	08005241 	.word	0x08005241
 8005220:	0800527d 	.word	0x0800527d
 8005224:	08005247 	.word	0x08005247
 8005228:	0800527d 	.word	0x0800527d
 800522c:	0800527d 	.word	0x0800527d
 8005230:	0800527d 	.word	0x0800527d
 8005234:	0800524f 	.word	0x0800524f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005238:	f7fe fbf2 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 800523c:	6178      	str	r0, [r7, #20]
        break;
 800523e:	e022      	b.n	8005286 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005240:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <UART_SetConfig+0x300>)
 8005242:	617b      	str	r3, [r7, #20]
        break;
 8005244:	e01f      	b.n	8005286 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005246:	f7fe fb55 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 800524a:	6178      	str	r0, [r7, #20]
        break;
 800524c:	e01b      	b.n	8005286 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800524e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005252:	617b      	str	r3, [r7, #20]
        break;
 8005254:	e017      	b.n	8005286 <UART_SetConfig+0x30e>
 8005256:	bf00      	nop
 8005258:	efff69f3 	.word	0xefff69f3
 800525c:	40008000 	.word	0x40008000
 8005260:	40013800 	.word	0x40013800
 8005264:	40021000 	.word	0x40021000
 8005268:	40004400 	.word	0x40004400
 800526c:	40004800 	.word	0x40004800
 8005270:	40004c00 	.word	0x40004c00
 8005274:	40005000 	.word	0x40005000
 8005278:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	76bb      	strb	r3, [r7, #26]
        break;
 8005284:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80f1 	beq.w	8005470 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	4413      	add	r3, r2
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	429a      	cmp	r2, r3
 800529c:	d305      	bcc.n	80052aa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d902      	bls.n	80052b0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	76bb      	strb	r3, [r7, #26]
 80052ae:	e0df      	b.n	8005470 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	4619      	mov	r1, r3
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	f04f 0400 	mov.w	r4, #0
 80052c0:	0214      	lsls	r4, r2, #8
 80052c2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80052c6:	020b      	lsls	r3, r1, #8
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6852      	ldr	r2, [r2, #4]
 80052cc:	0852      	lsrs	r2, r2, #1
 80052ce:	4611      	mov	r1, r2
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	eb13 0b01 	adds.w	fp, r3, r1
 80052d8:	eb44 0c02 	adc.w	ip, r4, r2
 80052dc:	4658      	mov	r0, fp
 80052de:	4661      	mov	r1, ip
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f04f 0400 	mov.w	r4, #0
 80052e8:	461a      	mov	r2, r3
 80052ea:	4623      	mov	r3, r4
 80052ec:	f7fa ff6c 	bl	80001c8 <__aeabi_uldivmod>
 80052f0:	4603      	mov	r3, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052fc:	d308      	bcc.n	8005310 <UART_SetConfig+0x398>
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005304:	d204      	bcs.n	8005310 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	e0af      	b.n	8005470 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	76bb      	strb	r3, [r7, #26]
 8005314:	e0ac      	b.n	8005470 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531e:	d15b      	bne.n	80053d8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005320:	7efb      	ldrb	r3, [r7, #27]
 8005322:	2b08      	cmp	r3, #8
 8005324:	d827      	bhi.n	8005376 <UART_SetConfig+0x3fe>
 8005326:	a201      	add	r2, pc, #4	; (adr r2, 800532c <UART_SetConfig+0x3b4>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	08005351 	.word	0x08005351
 8005330:	08005359 	.word	0x08005359
 8005334:	08005361 	.word	0x08005361
 8005338:	08005377 	.word	0x08005377
 800533c:	08005367 	.word	0x08005367
 8005340:	08005377 	.word	0x08005377
 8005344:	08005377 	.word	0x08005377
 8005348:	08005377 	.word	0x08005377
 800534c:	0800536f 	.word	0x0800536f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005350:	f7fe fb66 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8005354:	6178      	str	r0, [r7, #20]
        break;
 8005356:	e013      	b.n	8005380 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005358:	f7fe fb78 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 800535c:	6178      	str	r0, [r7, #20]
        break;
 800535e:	e00f      	b.n	8005380 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005360:	4b49      	ldr	r3, [pc, #292]	; (8005488 <UART_SetConfig+0x510>)
 8005362:	617b      	str	r3, [r7, #20]
        break;
 8005364:	e00c      	b.n	8005380 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005366:	f7fe fac5 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 800536a:	6178      	str	r0, [r7, #20]
        break;
 800536c:	e008      	b.n	8005380 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800536e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005372:	617b      	str	r3, [r7, #20]
        break;
 8005374:	e004      	b.n	8005380 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	76bb      	strb	r3, [r7, #26]
        break;
 800537e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d074      	beq.n	8005470 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	005a      	lsls	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	441a      	add	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	b29b      	uxth	r3, r3
 800539c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d916      	bls.n	80053d2 <UART_SetConfig+0x45a>
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053aa:	d212      	bcs.n	80053d2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f023 030f 	bic.w	r3, r3, #15
 80053b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	085b      	lsrs	r3, r3, #1
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	89fb      	ldrh	r3, [r7, #14]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	89fa      	ldrh	r2, [r7, #14]
 80053ce:	60da      	str	r2, [r3, #12]
 80053d0:	e04e      	b.n	8005470 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	76bb      	strb	r3, [r7, #26]
 80053d6:	e04b      	b.n	8005470 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053d8:	7efb      	ldrb	r3, [r7, #27]
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d827      	bhi.n	800542e <UART_SetConfig+0x4b6>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0x46c>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	08005409 	.word	0x08005409
 80053e8:	08005411 	.word	0x08005411
 80053ec:	08005419 	.word	0x08005419
 80053f0:	0800542f 	.word	0x0800542f
 80053f4:	0800541f 	.word	0x0800541f
 80053f8:	0800542f 	.word	0x0800542f
 80053fc:	0800542f 	.word	0x0800542f
 8005400:	0800542f 	.word	0x0800542f
 8005404:	08005427 	.word	0x08005427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005408:	f7fe fb0a 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 800540c:	6178      	str	r0, [r7, #20]
        break;
 800540e:	e013      	b.n	8005438 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005410:	f7fe fb1c 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 8005414:	6178      	str	r0, [r7, #20]
        break;
 8005416:	e00f      	b.n	8005438 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005418:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <UART_SetConfig+0x510>)
 800541a:	617b      	str	r3, [r7, #20]
        break;
 800541c:	e00c      	b.n	8005438 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800541e:	f7fe fa69 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 8005422:	6178      	str	r0, [r7, #20]
        break;
 8005424:	e008      	b.n	8005438 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800542a:	617b      	str	r3, [r7, #20]
        break;
 800542c:	e004      	b.n	8005438 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	76bb      	strb	r3, [r7, #26]
        break;
 8005436:	bf00      	nop
    }

    if (pclk != 0U)
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d018      	beq.n	8005470 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	085a      	lsrs	r2, r3, #1
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	441a      	add	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	b29b      	uxth	r3, r3
 8005452:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	2b0f      	cmp	r3, #15
 8005458:	d908      	bls.n	800546c <UART_SetConfig+0x4f4>
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005460:	d204      	bcs.n	800546c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	e001      	b.n	8005470 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800547c:	7ebb      	ldrb	r3, [r7, #26]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005488:	00f42400 	.word	0x00f42400

0800548c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01a      	beq.n	80055a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800558a:	d10a      	bne.n	80055a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
  }
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80055de:	f7fb fd17 	bl	8001010 <HAL_GetTick>
 80055e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d10e      	bne.n	8005610 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f82a 	bl	800565a <UART_WaitOnFlagUntilTimeout>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e020      	b.n	8005652 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b04      	cmp	r3, #4
 800561c:	d10e      	bne.n	800563c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800561e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f814 	bl	800565a <UART_WaitOnFlagUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e00a      	b.n	8005652 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2220      	movs	r2, #32
 8005640:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	603b      	str	r3, [r7, #0]
 8005666:	4613      	mov	r3, r2
 8005668:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800566a:	e05d      	b.n	8005728 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005672:	d059      	beq.n	8005728 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005674:	f7fb fccc 	bl	8001010 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	429a      	cmp	r2, r3
 8005682:	d302      	bcc.n	800568a <UART_WaitOnFlagUntilTimeout+0x30>
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d11b      	bne.n	80056c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005698:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e042      	b.n	8005748 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d02b      	beq.n	8005728 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056de:	d123      	bne.n	8005728 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056f8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0201 	bic.w	r2, r2, #1
 8005708:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e00f      	b.n	8005748 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69da      	ldr	r2, [r3, #28]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	4013      	ands	r3, r2
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	429a      	cmp	r2, r3
 8005736:	bf0c      	ite	eq
 8005738:	2301      	moveq	r3, #1
 800573a:	2300      	movne	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	461a      	mov	r2, r3
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	429a      	cmp	r2, r3
 8005744:	d092      	beq.n	800566c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <__libc_init_array>:
 8005750:	b570      	push	{r4, r5, r6, lr}
 8005752:	4e0d      	ldr	r6, [pc, #52]	; (8005788 <__libc_init_array+0x38>)
 8005754:	4c0d      	ldr	r4, [pc, #52]	; (800578c <__libc_init_array+0x3c>)
 8005756:	1ba4      	subs	r4, r4, r6
 8005758:	10a4      	asrs	r4, r4, #2
 800575a:	2500      	movs	r5, #0
 800575c:	42a5      	cmp	r5, r4
 800575e:	d109      	bne.n	8005774 <__libc_init_array+0x24>
 8005760:	4e0b      	ldr	r6, [pc, #44]	; (8005790 <__libc_init_array+0x40>)
 8005762:	4c0c      	ldr	r4, [pc, #48]	; (8005794 <__libc_init_array+0x44>)
 8005764:	f000 f820 	bl	80057a8 <_init>
 8005768:	1ba4      	subs	r4, r4, r6
 800576a:	10a4      	asrs	r4, r4, #2
 800576c:	2500      	movs	r5, #0
 800576e:	42a5      	cmp	r5, r4
 8005770:	d105      	bne.n	800577e <__libc_init_array+0x2e>
 8005772:	bd70      	pop	{r4, r5, r6, pc}
 8005774:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005778:	4798      	blx	r3
 800577a:	3501      	adds	r5, #1
 800577c:	e7ee      	b.n	800575c <__libc_init_array+0xc>
 800577e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005782:	4798      	blx	r3
 8005784:	3501      	adds	r5, #1
 8005786:	e7f2      	b.n	800576e <__libc_init_array+0x1e>
 8005788:	08005810 	.word	0x08005810
 800578c:	08005810 	.word	0x08005810
 8005790:	08005810 	.word	0x08005810
 8005794:	08005814 	.word	0x08005814

08005798 <memset>:
 8005798:	4402      	add	r2, r0
 800579a:	4603      	mov	r3, r0
 800579c:	4293      	cmp	r3, r2
 800579e:	d100      	bne.n	80057a2 <memset+0xa>
 80057a0:	4770      	bx	lr
 80057a2:	f803 1b01 	strb.w	r1, [r3], #1
 80057a6:	e7f9      	b.n	800579c <memset+0x4>

080057a8 <_init>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	bf00      	nop
 80057ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ae:	bc08      	pop	{r3}
 80057b0:	469e      	mov	lr, r3
 80057b2:	4770      	bx	lr

080057b4 <_fini>:
 80057b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b6:	bf00      	nop
 80057b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ba:	bc08      	pop	{r3}
 80057bc:	469e      	mov	lr, r3
 80057be:	4770      	bx	lr
