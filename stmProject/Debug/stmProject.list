
stmProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006050  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080061d8  080061d8  000161d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006220  08006220  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006220  08006220  00016220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006228  08006228  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800622c  0800622c  0001622c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2000000c  0800623c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800623c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c36  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003151  00000000  00000000  00039c72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001648  00000000  00000000  0003cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a0  00000000  00000000  0003e410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b602  00000000  00000000  0003f8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013edb  00000000  00000000  0006aeb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110302  00000000  00000000  0007ed8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018f08f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005de8  00000000  00000000  0018f10c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080061c0 	.word	0x080061c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080061c0 	.word	0x080061c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004ea:	4b2f      	ldr	r3, [pc, #188]	; (80005a8 <MX_ADC1_Init+0xe0>)
 80004ec:	4a2f      	ldr	r2, [pc, #188]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f0:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <MX_ADC1_Init+0xe0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f6:	4b2c      	ldr	r3, [pc, #176]	; (80005a8 <MX_ADC1_Init+0xe0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fc:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <MX_ADC1_Init+0xe0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000502:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000508:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <MX_ADC1_Init+0xe0>)
 800050a:	2204      	movs	r2, #4
 800050c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800050e:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000510:	2200      	movs	r2, #0
 8000512:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000514:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000516:	2200      	movs	r2, #0
 8000518:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <MX_ADC1_Init+0xe0>)
 800051c:	2201      	movs	r2, #1
 800051e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000520:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000522:	2200      	movs	r2, #0
 8000524:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <MX_ADC1_Init+0xe0>)
 800052a:	2200      	movs	r2, #0
 800052c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000530:	2200      	movs	r2, #0
 8000532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000534:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000536:	2200      	movs	r2, #0
 8000538:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_ADC1_Init+0xe0>)
 800053e:	2200      	movs	r2, #0
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000544:	2200      	movs	r2, #0
 8000546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054a:	4817      	ldr	r0, [pc, #92]	; (80005a8 <MX_ADC1_Init+0xe0>)
 800054c:	f001 fad6 	bl	8001afc <HAL_ADC_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000556:	f000 fa7d 	bl	8000a54 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	4619      	mov	r1, r3
 8000564:	4810      	ldr	r0, [pc, #64]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000566:	f002 f831 	bl	80025cc <HAL_ADCEx_MultiModeConfigChannel>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000570:	f000 fa70 	bl	8000a54 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_ADC1_Init+0xe8>)
 8000576:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000578:	2306      	movs	r3, #6
 800057a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000580:	237f      	movs	r3, #127	; 0x7f
 8000582:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000584:	2304      	movs	r3, #4
 8000586:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	4619      	mov	r1, r3
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_ADC1_Init+0xe0>)
 8000592:	f001 fc07 	bl	8001da4 <HAL_ADC_ConfigChannel>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800059c:	f000 fa5a 	bl	8000a54 <Error_Handler>
  }

}
 80005a0:	bf00      	nop
 80005a2:	3728      	adds	r7, #40	; 0x28
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2000002c 	.word	0x2000002c
 80005ac:	50040000 	.word	0x50040000
 80005b0:	19200040 	.word	0x19200040

080005b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a15      	ldr	r2, [pc, #84]	; (8000628 <HAL_ADC_MspInit+0x74>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d124      	bne.n	8000620 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_ADC_MspInit+0x78>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a14      	ldr	r2, [pc, #80]	; (800062c <HAL_ADC_MspInit+0x78>)
 80005dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_ADC_MspInit+0x78>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_ADC_MspInit+0x78>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_ADC_MspInit+0x78>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_ADC_MspInit+0x78>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000606:	2302      	movs	r3, #2
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800060a:	230b      	movs	r3, #11
 800060c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061c:	f002 f9a6 	bl	800296c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	; 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	50040000 	.word	0x50040000
 800062c:	40021000 	.word	0x40021000

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b3e      	ldr	r3, [pc, #248]	; (8000740 <MX_GPIO_Init+0x110>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a3d      	ldr	r2, [pc, #244]	; (8000740 <MX_GPIO_Init+0x110>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <MX_GPIO_Init+0x110>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065e:	4b38      	ldr	r3, [pc, #224]	; (8000740 <MX_GPIO_Init+0x110>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a37      	ldr	r2, [pc, #220]	; (8000740 <MX_GPIO_Init+0x110>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b35      	ldr	r3, [pc, #212]	; (8000740 <MX_GPIO_Init+0x110>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <MX_GPIO_Init+0x110>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a31      	ldr	r2, [pc, #196]	; (8000740 <MX_GPIO_Init+0x110>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <MX_GPIO_Init+0x110>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800068e:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <MX_GPIO_Init+0x110>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a2b      	ldr	r2, [pc, #172]	; (8000740 <MX_GPIO_Init+0x110>)
 8000694:	f043 0310 	orr.w	r3, r3, #16
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b29      	ldr	r3, [pc, #164]	; (8000740 <MX_GPIO_Init+0x110>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0310 	and.w	r3, r3, #16
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <MX_GPIO_Init+0x110>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a25      	ldr	r2, [pc, #148]	; (8000740 <MX_GPIO_Init+0x110>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b23      	ldr	r3, [pc, #140]	; (8000740 <MX_GPIO_Init+0x110>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2121      	movs	r1, #33	; 0x21
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c6:	f002 fbed 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d0:	481c      	ldr	r0, [pc, #112]	; (8000744 <MX_GPIO_Init+0x114>)
 80006d2:	f002 fbe7 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	21c0      	movs	r1, #192	; 0xc0
 80006da:	481b      	ldr	r0, [pc, #108]	; (8000748 <MX_GPIO_Init+0x118>)
 80006dc:	f002 fbe2 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80006e0:	2321      	movs	r3, #33	; 0x21
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f002 f937 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	480b      	ldr	r0, [pc, #44]	; (8000744 <MX_GPIO_Init+0x114>)
 8000718:	f002 f928 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800071c:	23c0      	movs	r3, #192	; 0xc0
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_GPIO_Init+0x118>)
 8000734:	f002 f91a 	bl	800296c <HAL_GPIO_Init>

}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	; 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	48001000 	.word	0x48001000
 8000748:	48000400 	.word	0x48000400

0800074c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b092      	sub	sp, #72	; 0x48
 8000750:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000752:	f000 ffa9 	bl	80016a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000756:	f000 f8e1 	bl	800091c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800075a:	f7ff ff69 	bl	8000630 <MX_GPIO_Init>
	MX_QUADSPI_Init();
 800075e:	f000 fa1b 	bl	8000b98 <MX_QUADSPI_Init>
	MX_ADC1_Init();
 8000762:	f7ff feb1 	bl	80004c8 <MX_ADC1_Init>
	MX_RTC_Init();
 8000766:	f000 fd4f 	bl	8001208 <MX_RTC_Init>
	MX_TIM2_Init();
 800076a:	f000 fe95 	bl	8001498 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 800076e:	f000 feff 	bl	8001570 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	//Przetestowane i dziala zakomentowane bo inicjalizacja qspi dlugo trwa
	 //Inicjalizacja
	 if (CSP_QUADSPI_Init() != HAL_OK) {
 8000772:	f000 fa99 	bl	8000ca8 <CSP_QUADSPI_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <main+0x34>
	 Error_Handler();
 800077c:	f000 f96a 	bl	8000a54 <Error_Handler>
	 }

	 if (CSP_QSPI_Erase_Chip() != HAL_OK) {
 8000780:	f000 fac8 	bl	8000d14 <CSP_QSPI_Erase_Chip>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <main+0x42>
	 Error_Handler();
 800078a:	f000 f963 	bl	8000a54 <Error_Handler>
	 }
	 //Ustawienie daty i godziny
	 if (setDate(14, 04, 22, 3))
 800078e:	2303      	movs	r3, #3
 8000790:	2216      	movs	r2, #22
 8000792:	2104      	movs	r1, #4
 8000794:	200e      	movs	r0, #14
 8000796:	f000 fdaf 	bl	80012f8 <setDate>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <main+0x58>
	 Error_Handler();
 80007a0:	f000 f958 	bl	8000a54 <Error_Handler>
	 if (setTime(0, 33, 17))
 80007a4:	2211      	movs	r2, #17
 80007a6:	2121      	movs	r1, #33	; 0x21
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fdcb 	bl	8001344 <setTime>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <main+0x6c>
	 Error_Handler();
 80007b4:	f000 f94e 	bl	8000a54 <Error_Handler>
	 if (CSP_QSPI_Read(&readbuf, 0, 2) != HAL_OK) {
	 Error_Handler();
	 }*/

	struct measurement mes[3];
	for(int i=0;i<3;i++){
 80007b8:	2300      	movs	r3, #0
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007bc:	e0a7      	b.n	800090e <main+0x1c2>
	mes[i].time = 1000+i;
 80007be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80007c6:	b299      	uxth	r1, r3
 80007c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007ca:	4613      	mov	r3, r2
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80007d6:	4413      	add	r3, r2
 80007d8:	3b40      	subs	r3, #64	; 0x40
 80007da:	460a      	mov	r2, r1
 80007dc:	801a      	strh	r2, [r3, #0]
	mes[i].meas[0] = 1+i;
 80007de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	3301      	adds	r3, #1
 80007e4:	b299      	uxth	r1, r3
 80007e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007e8:	4613      	mov	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80007f4:	4413      	add	r3, r2
 80007f6:	3b3e      	subs	r3, #62	; 0x3e
 80007f8:	460a      	mov	r2, r1
 80007fa:	801a      	strh	r2, [r3, #0]
	mes[i].meas[1] = 8+i;
 80007fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007fe:	b29b      	uxth	r3, r3
 8000800:	3308      	adds	r3, #8
 8000802:	b299      	uxth	r1, r3
 8000804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000812:	4413      	add	r3, r2
 8000814:	3b3c      	subs	r3, #60	; 0x3c
 8000816:	460a      	mov	r2, r1
 8000818:	801a      	strh	r2, [r3, #0]
	mes[i].meas[2] = 4+i;
 800081a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800081c:	b29b      	uxth	r3, r3
 800081e:	3304      	adds	r3, #4
 8000820:	b299      	uxth	r1, r3
 8000822:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000824:	4613      	mov	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000830:	4413      	add	r3, r2
 8000832:	3b3a      	subs	r3, #58	; 0x3a
 8000834:	460a      	mov	r2, r1
 8000836:	801a      	strh	r2, [r3, #0]
	mes[i].meas[3] = 1+i;
 8000838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800083a:	b29b      	uxth	r3, r3
 800083c:	3301      	adds	r3, #1
 800083e:	b299      	uxth	r1, r3
 8000840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000842:	4613      	mov	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800084e:	4413      	add	r3, r2
 8000850:	3b38      	subs	r3, #56	; 0x38
 8000852:	460a      	mov	r2, r1
 8000854:	801a      	strh	r2, [r3, #0]
	mes[i].meas[4] = 5+i;
 8000856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000858:	b29b      	uxth	r3, r3
 800085a:	3305      	adds	r3, #5
 800085c:	b299      	uxth	r1, r3
 800085e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800086c:	4413      	add	r3, r2
 800086e:	3b36      	subs	r3, #54	; 0x36
 8000870:	460a      	mov	r2, r1
 8000872:	801a      	strh	r2, [r3, #0]
	mes[i].meas[5] = 14+i;
 8000874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000876:	b29b      	uxth	r3, r3
 8000878:	330e      	adds	r3, #14
 800087a:	b299      	uxth	r1, r3
 800087c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800088a:	4413      	add	r3, r2
 800088c:	3b34      	subs	r3, #52	; 0x34
 800088e:	460a      	mov	r2, r1
 8000890:	801a      	strh	r2, [r3, #0]
	mes[i].meas[6] = 18+i;
 8000892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000894:	b29b      	uxth	r3, r3
 8000896:	3312      	adds	r3, #18
 8000898:	b299      	uxth	r1, r3
 800089a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800089c:	4613      	mov	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80008a8:	4413      	add	r3, r2
 80008aa:	3b32      	subs	r3, #50	; 0x32
 80008ac:	460a      	mov	r2, r1
 80008ae:	801a      	strh	r2, [r3, #0]
	mes[i].meas[7] = 12+i;
 80008b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	330c      	adds	r3, #12
 80008b6:	b299      	uxth	r1, r3
 80008b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008ba:	4613      	mov	r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4413      	add	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80008c6:	4413      	add	r3, r2
 80008c8:	3b30      	subs	r3, #48	; 0x30
 80008ca:	460a      	mov	r2, r1
 80008cc:	801a      	strh	r2, [r3, #0]
	mes[i].meas[8] = 11+i;
 80008ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	330b      	adds	r3, #11
 80008d4:	b299      	uxth	r1, r3
 80008d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008d8:	4613      	mov	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	4413      	add	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80008e4:	4413      	add	r3, r2
 80008e6:	3b2e      	subs	r3, #46	; 0x2e
 80008e8:	460a      	mov	r2, r1
 80008ea:	801a      	strh	r2, [r3, #0]

	storeData(mes[i]);
 80008ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008ee:	4613      	mov	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4413      	add	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80008fa:	4413      	add	r3, r2
 80008fc:	3b40      	subs	r3, #64	; 0x40
 80008fe:	691a      	ldr	r2, [r3, #16]
 8000900:	9200      	str	r2, [sp, #0]
 8000902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000904:	f000 f8b2 	bl	8000a6c <storeData>
	for(int i=0;i<3;i++){
 8000908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800090a:	3301      	adds	r3, #1
 800090c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800090e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000910:	2b02      	cmp	r3, #2
 8000912:	f77f af54 	ble.w	80007be <main+0x72>
	}
	sendData();
 8000916:	f000 f8f9 	bl	8000b0c <sendData>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800091a:	e7fe      	b.n	800091a <main+0x1ce>

0800091c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b0b8      	sub	sp, #224	; 0xe0
 8000920:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000922:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000926:	2244      	movs	r2, #68	; 0x44
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f005 fc40 	bl	80061b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000930:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000940:	463b      	mov	r3, r7
 8000942:	2288      	movs	r2, #136	; 0x88
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f005 fc32 	bl	80061b0 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800094c:	f002 fac2 	bl	8002ed4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000950:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <SystemClock_Config+0x130>)
 8000952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000956:	4a3d      	ldr	r2, [pc, #244]	; (8000a4c <SystemClock_Config+0x130>)
 8000958:	f023 0318 	bic.w	r3, r3, #24
 800095c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000960:	2306      	movs	r3, #6
 8000962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000966:	2301      	movs	r3, #1
 8000968:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800096c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000970:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000974:	2310      	movs	r3, #16
 8000976:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000980:	2302      	movs	r3, #2
 8000982:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000986:	2301      	movs	r3, #1
 8000988:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 10;
 800098c:	230a      	movs	r3, #10
 800098e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000992:	2307      	movs	r3, #7
 8000994:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000998:	2302      	movs	r3, #2
 800099a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800099e:	2302      	movs	r3, #2
 80009a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 ffe7 	bl	800397c <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x9c>
		Error_Handler();
 80009b4:	f000 f84e 	bl	8000a54 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009b8:	230f      	movs	r3, #15
 80009ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	2303      	movs	r3, #3
 80009c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80009d6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80009da:	2104      	movs	r1, #4
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 fbb3 	bl	8004148 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xd0>
		Error_Handler();
 80009e8:	f000 f834 	bl	8000a54 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <SystemClock_Config+0x134>)
 80009ee:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009f8:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80009fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a02:	2302      	movs	r3, #2
 8000a04:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a06:	2301      	movs	r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a0e:	2307      	movs	r3, #7
 8000a10:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a1e:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000a20:	463b      	mov	r3, r7
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 fd94 	bl	8004550 <HAL_RCCEx_PeriphCLKConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x116>
		Error_Handler();
 8000a2e:	f000 f811 	bl	8000a54 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a36:	f002 fa6b 	bl	8002f10 <HAL_PWREx_ControlVoltageScaling>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x128>
			!= HAL_OK) {
		Error_Handler();
 8000a40:	f000 f808 	bl	8000a54 <Error_Handler>
	}
}
 8000a44:	bf00      	nop
 8000a46:	37e0      	adds	r7, #224	; 0xe0
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	00024002 	.word	0x00024002

08000a54 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	int a = 10;
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	607b      	str	r3, [r7, #4]
	/* USER CODE END Error_Handler_Debug */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <storeData>:

//Variable with current address
uint32_t curAddr = 0;

//Write date and data to memory
HAL_StatusTypeDef storeData(struct measurement mes) {
 8000a6c:	b084      	sub	sp, #16
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	f107 0c10 	add.w	ip, r7, #16
 8000a78:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	if ((curAddr + 20) >= FLASH_SIZE_HERE)
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <storeData+0x9c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3314      	adds	r3, #20
 8000a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000a86:	d301      	bcc.n	8000a8c <storeData+0x20>
		return HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e036      	b.n	8000afa <storeData+0x8e>
	uint16_t tmp = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	807b      	strh	r3, [r7, #2]
	tmp = mes.time;
 8000a90:	8a3b      	ldrh	r3, [r7, #16]
 8000a92:	807b      	strh	r3, [r7, #2]
	if (CSP_QSPI_Write(&tmp, curAddr, 2) != HAL_OK)
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <storeData+0x9c>)
 8000a96:	6819      	ldr	r1, [r3, #0]
 8000a98:	1cbb      	adds	r3, r7, #2
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fae3 	bl	8001068 <CSP_QSPI_Write>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <storeData+0x40>
		return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e026      	b.n	8000afa <storeData+0x8e>

	curAddr = curAddr + 2;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <storeData+0x9c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <storeData+0x9c>)
 8000ab4:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < 9; i++) {
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	e01a      	b.n	8000af2 <storeData+0x86>
		tmp = mes.meas[i];
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	f107 0210 	add.w	r2, r7, #16
 8000ac4:	4413      	add	r3, r2
 8000ac6:	885b      	ldrh	r3, [r3, #2]
 8000ac8:	807b      	strh	r3, [r7, #2]
		if (CSP_QSPI_Write(&tmp, curAddr, 2) != HAL_OK)
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <storeData+0x9c>)
 8000acc:	6819      	ldr	r1, [r3, #0]
 8000ace:	1cbb      	adds	r3, r7, #2
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fac8 	bl	8001068 <CSP_QSPI_Write>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <storeData+0x76>
			return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00b      	b.n	8000afa <storeData+0x8e>
		curAddr = curAddr + 2;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <storeData+0x9c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <storeData+0x9c>)
 8000aea:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 9; i++) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3301      	adds	r3, #1
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b08      	cmp	r3, #8
 8000af6:	dde1      	ble.n	8000abc <storeData+0x50>
	}
	return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b04:	b004      	add	sp, #16
 8000b06:	4770      	bx	lr
 8000b08:	20000028 	.word	0x20000028

08000b0c <sendData>:

uint16_t sendData() {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0
	uint16_t dataNum = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint32_t tmpCurAddr = curAddr;
 8000b16:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <sendData+0x84>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t readData[20];
	//string uartData;
	if (curAddr < 18)
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <sendData+0x84>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b11      	cmp	r3, #17
 8000b22:	d801      	bhi.n	8000b28 <sendData+0x1c>
		return dataNum;
 8000b24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000b26:	e02f      	b.n	8000b88 <sendData+0x7c>
	for (int i = 0; i < (tmpCurAddr / 20); i++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
 8000b2c:	e01b      	b.n	8000b66 <sendData+0x5a>
		if (CSP_QSPI_Read(&readData, dataNum * 20, 20) != HAL_OK)
 8000b2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000b30:	4613      	mov	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4619      	mov	r1, r3
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2214      	movs	r2, #20
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fb0c 	bl	800115c <CSP_QSPI_Read>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d002      	beq.n	8000b50 <sendData+0x44>
			return -1;
 8000b4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b4e:	e01b      	b.n	8000b88 <sendData+0x7c>
		dataNum++;
 8000b50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000b52:	3301      	adds	r3, #1
 8000b54:	86fb      	strh	r3, [r7, #54]	; 0x36
		curAddr = curAddr - 10;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <sendData+0x84>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	3b0a      	subs	r3, #10
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <sendData+0x84>)
 8000b5e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < (tmpCurAddr / 20); i++) {
 8000b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b62:	3301      	adds	r3, #1
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
 8000b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <sendData+0x88>)
 8000b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6e:	091a      	lsrs	r2, r3, #4
 8000b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d8db      	bhi.n	8000b2e <sendData+0x22>
		//strncpy(uartData,readData,20);
		//printf("%s", readData);
	}
	if (CSP_QSPI_Erase_Chip() != HAL_OK)
 8000b76:	f000 f8cd 	bl	8000d14 <CSP_QSPI_Erase_Chip>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <sendData+0x7a>
		return -2;
 8000b80:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000b84:	e000      	b.n	8000b88 <sendData+0x7c>
	return dataNum;
 8000b86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3738      	adds	r7, #56	; 0x38
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000028 	.word	0x20000028
 8000b94:	cccccccd 	.word	0xcccccccd

08000b98 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_QUADSPI_Init+0x44>)
 8000b9e:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <MX_QUADSPI_Init+0x48>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_QUADSPI_Init+0x44>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_QUADSPI_Init+0x44>)
 8000baa:	2204      	movs	r2, #4
 8000bac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_QUADSPI_Init+0x44>)
 8000bb0:	2210      	movs	r2, #16
 8000bb2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_QUADSPI_Init+0x44>)
 8000bb6:	2217      	movs	r2, #23
 8000bb8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_QUADSPI_Init+0x44>)
 8000bbc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000bc0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_QUADSPI_Init+0x44>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_QUADSPI_Init+0x44>)
 8000bca:	f002 f9f7 	bl	8002fbc <HAL_QSPI_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_QUADSPI_Init+0x40>
  {
    Error_Handler();
 8000bd4:	f7ff ff3e 	bl	8000a54 <Error_Handler>
  }

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000090 	.word	0x20000090
 8000be0:	a0001000 	.word	0xa0001000

08000be4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_QSPI_MspInit+0x7c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d128      	bne.n	8000c58 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_QSPI_MspInit+0x80>)
 8000c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c0a:	4a16      	ldr	r2, [pc, #88]	; (8000c64 <HAL_QSPI_MspInit+0x80>)
 8000c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c10:	6513      	str	r3, [r2, #80]	; 0x50
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_QSPI_MspInit+0x80>)
 8000c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_QSPI_MspInit+0x80>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <HAL_QSPI_MspInit+0x80>)
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_QSPI_MspInit+0x80>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0310 	and.w	r3, r3, #16
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000c36:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000c3a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c48:	230a      	movs	r3, #10
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <HAL_QSPI_MspInit+0x84>)
 8000c54:	f001 fe8a 	bl	800296c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	a0001000 	.word	0xa0001000
 8000c64:	40021000 	.word	0x40021000
 8000c68:	48001000 	.word	0x48001000

08000c6c <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_QSPI_MspDeInit+0x30>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d10a      	bne.n	8000c94 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_QSPI_MspDeInit+0x34>)
 8000c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c82:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_QSPI_MspDeInit+0x34>)
 8000c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c88:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000c8a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_QSPI_MspDeInit+0x38>)
 8000c90:	f002 f814 	bl	8002cbc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	a0001000 	.word	0xa0001000
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48001000 	.word	0x48001000

08000ca8 <CSP_QUADSPI_Init>:
*/



uint8_t CSP_QUADSPI_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <CSP_QUADSPI_Init+0x64>)
 8000cae:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <CSP_QUADSPI_Init+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000cb2:	4816      	ldr	r0, [pc, #88]	; (8000d0c <CSP_QUADSPI_Init+0x64>)
 8000cb4:	f002 f9f8 	bl	80030a8 <HAL_QSPI_DeInit>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <CSP_QUADSPI_Init+0x1a>
        return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e021      	b.n	8000d06 <CSP_QUADSPI_Init+0x5e>
    }

    MX_QUADSPI_Init();
 8000cc2:	f7ff ff69 	bl	8000b98 <MX_QUADSPI_Init>

    if (QSPI_ResetChip() != HAL_OK) {
 8000cc6:	f000 f971 	bl	8000fac <QSPI_ResetChip>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <CSP_QUADSPI_Init+0x2c>
        return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e018      	b.n	8000d06 <CSP_QUADSPI_Init+0x5e>
    }

    HAL_Delay(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f000 fd63 	bl	80017a0 <HAL_Delay>

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000cda:	f000 f857 	bl	8000d8c <QSPI_AutoPollingMemReady>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <CSP_QUADSPI_Init+0x40>
        return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e00e      	b.n	8000d06 <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
 8000ce8:	f000 f888 	bl	8000dfc <QSPI_WriteEnable>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <CSP_QUADSPI_Init+0x4e>

        return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e007      	b.n	8000d06 <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_Configuration() != HAL_OK) {
 8000cf6:	f000 f8cb 	bl	8000e90 <QSPI_Configuration>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <CSP_QUADSPI_Init+0x5c>
        return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <CSP_QUADSPI_Init+0x5e>
    }

    return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000090 	.word	0x20000090
 8000d10:	a0001000 	.word	0xa0001000

08000d14 <CSP_QSPI_Erase_Chip>:


uint8_t CSP_QSPI_Erase_Chip(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	; 0x38
 8000d18:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;


    if (QSPI_WriteEnable() != HAL_OK) {
 8000d1a:	f000 f86f 	bl	8000dfc <QSPI_WriteEnable>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <CSP_QSPI_Erase_Chip+0x14>
        return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e02b      	b.n	8000d80 <CSP_QSPI_Erase_Chip+0x6c>
    }


    /* Erasing Sequence --------------------------------- */
    sCommand.Instruction = BULK_ERASE_CMD;
 8000d28:	23c7      	movs	r3, #199	; 0xc7
 8000d2a:	603b      	str	r3, [r7, #0]
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d30:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d36:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d40:	2300      	movs	r3, #0
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d44:	2300      	movs	r3, #0
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    sCommand.Address = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
    sCommand.DataMode = QSPI_DATA_NONE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DummyCycles = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]


    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_MAX_DELAY)
 8000d58:	463b      	mov	r3, r7
 8000d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <CSP_QSPI_Erase_Chip+0x74>)
 8000d62:	f002 f9c5 	bl	80030f0 <HAL_QSPI_Command>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <CSP_QSPI_Erase_Chip+0x5c>
        != HAL_OK) {
        return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e007      	b.n	8000d80 <CSP_QSPI_Erase_Chip+0x6c>
    }

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000d70:	f000 f80c 	bl	8000d8c <QSPI_AutoPollingMemReady>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <CSP_QSPI_Erase_Chip+0x6a>
        return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <CSP_QSPI_Erase_Chip+0x6c>
    }

    return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3738      	adds	r7, #56	; 0x38
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000090 	.word	0x20000090

08000d8c <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b094      	sub	sp, #80	; 0x50
 8000d90:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8000d98:	2305      	movs	r3, #5
 8000d9a:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000da8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000db2:	2300      	movs	r3, #0
 8000db4:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000db6:	2300      	movs	r3, #0
 8000db8:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match = 0x00;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
    sConfig.Mask = N25Q128A_SR_WIP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8000dca:	2310      	movs	r3, #16
 8000dcc:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000dce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dd2:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_MAX_DELAY) != HAL_OK)
 8000dd4:	463a      	mov	r2, r7
 8000dd6:	f107 0118 	add.w	r1, r7, #24
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <QSPI_AutoPollingMemReady+0x6c>)
 8000de0:	f002 fb1d 	bl	800341e <HAL_QSPI_AutoPolling>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <QSPI_AutoPollingMemReady+0x62>
    {
        return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <QSPI_AutoPollingMemReady+0x64>
    }

    return HAL_OK;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3750      	adds	r7, #80	; 0x50
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000090 	.word	0x20000090

08000dfc <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	; 0x50
 8000e00:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 8000e08:	2306      	movs	r3, #6
 8000e0a:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e20:	2300      	movs	r3, #0
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e24:	2300      	movs	r3, #0
 8000e26:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e30:	4619      	mov	r1, r3
 8000e32:	4816      	ldr	r0, [pc, #88]	; (8000e8c <QSPI_WriteEnable+0x90>)
 8000e34:	f002 f95c 	bl	80030f0 <HAL_QSPI_Command>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e01f      	b.n	8000e82 <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
 8000e42:	2302      	movs	r3, #2
 8000e44:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
 8000e46:	2302      	movs	r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8000e52:	2310      	movs	r3, #16
 8000e54:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5a:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000e66:	463a      	mov	r2, r7
 8000e68:	f107 0118 	add.w	r1, r7, #24
 8000e6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e70:	4806      	ldr	r0, [pc, #24]	; (8000e8c <QSPI_WriteEnable+0x90>)
 8000e72:	f002 fad4 	bl	800341e <HAL_QSPI_AutoPolling>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e000      	b.n	8000e82 <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3750      	adds	r7, #80	; 0x50
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000090 	.word	0x20000090

08000e90 <QSPI_Configuration>:


/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b092      	sub	sp, #72	; 0x48
 8000e94:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    uint8_t reg;

    /*read configuration register*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9a:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction = READ_VOL_CFG_REG_CMD;
 8000e9c:	2385      	movs	r3, #133	; 0x85
 8000e9e:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.NbData = 1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4837      	ldr	r0, [pc, #220]	; (8000fa8 <QSPI_Configuration+0x118>)
 8000ecc:	f002 f910 	bl	80030f0 <HAL_QSPI_Command>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <QSPI_Configuration+0x4a>
        != HAL_OK) {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e061      	b.n	8000f9e <QSPI_Configuration+0x10e>
    }


    if (HAL_QSPI_Receive(&hqspi, &reg,
 8000eda:	1cfb      	adds	r3, r7, #3
 8000edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4831      	ldr	r0, [pc, #196]	; (8000fa8 <QSPI_Configuration+0x118>)
 8000ee4:	f002 f9f9 	bl	80032da <HAL_QSPI_Receive>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <QSPI_Configuration+0x62>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e055      	b.n	8000f9e <QSPI_Configuration+0x10e>
    }



    if (QSPI_WriteEnable() != HAL_OK) {
 8000ef2:	f7ff ff83 	bl	8000dfc <QSPI_WriteEnable>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <QSPI_Configuration+0x70>

        return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e04e      	b.n	8000f9e <QSPI_Configuration+0x10e>
    }


    /*set dummy cycles*/
    MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f003 030f 	and.w	r3, r3, #15
 8000f08:	b25a      	sxtb	r2, r3
 8000f0a:	23f0      	movs	r3, #240	; 0xf0
 8000f0c:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f10:	fa93 f3a3 	rbit	r3, r3
 8000f14:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f18:	647b      	str	r3, [r7, #68]	; 0x44
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <QSPI_Configuration+0x94>
  {
    return 32U;
 8000f20:	2320      	movs	r3, #32
 8000f22:	e003      	b.n	8000f2c <QSPI_Configuration+0x9c>
  }
  return __builtin_clz(value);
 8000f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f26:	fab3 f383 	clz	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	230a      	movs	r3, #10
 8000f30:	408b      	lsls	r3, r1
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	70fb      	strb	r3, [r7, #3]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f40:	61fb      	str	r3, [r7, #28]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8000f52:	2381      	movs	r3, #129	; 0x81
 8000f54:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000f5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
    sCommand.NbData = 1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <QSPI_Configuration+0x118>)
 8000f72:	f002 f8bd 	bl	80030f0 <HAL_QSPI_Command>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <QSPI_Configuration+0xf0>
        != HAL_OK) {
        return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e00e      	b.n	8000f9e <QSPI_Configuration+0x10e>
    }

    if (HAL_QSPI_Transmit(&hqspi, &reg,
 8000f80:	1cfb      	adds	r3, r7, #3
 8000f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f86:	4619      	mov	r1, r3
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <QSPI_Configuration+0x118>)
 8000f8a:	f002 f90f 	bl	80031ac <HAL_QSPI_Transmit>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <QSPI_Configuration+0x10c>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        Error_Handler();
 8000f94:	f7ff fd5e 	bl	8000a54 <Error_Handler>
        return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <QSPI_Configuration+0x10e>
    }
    return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3748      	adds	r7, #72	; 0x48
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000090 	.word	0x20000090

08000fac <QSPI_ResetChip>:
    }
    return HAL_OK;
}

uint8_t QSPI_ResetChip()
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b090      	sub	sp, #64	; 0x40
 8000fb0:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fba:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc0:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 8000fd2:	2366      	movs	r3, #102	; 0x66
 8000fd4:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fec:	4619      	mov	r1, r3
 8000fee:	481d      	ldr	r0, [pc, #116]	; (8001064 <QSPI_ResetChip+0xb8>)
 8000ff0:	f002 f87e 	bl	80030f0 <HAL_QSPI_Command>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e02e      	b.n	800105c <QSPI_ResetChip+0xb0>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 8000ffe:	2300      	movs	r3, #0
 8001000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001002:	e003      	b.n	800100c <QSPI_ResetChip+0x60>
        __NOP();
 8001004:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 8001006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001008:	3301      	adds	r3, #1
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800100c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800100e:	2b2e      	cmp	r3, #46	; 0x2e
 8001010:	d9f8      	bls.n	8001004 <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001016:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101c:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800102a:	2300      	movs	r3, #0
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_MEMORY_CMD;
 800102e:	2399      	movs	r3, #153	; 0x99
 8001030:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 800103a:	2300      	movs	r3, #0
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	f241 3288 	movw	r2, #5000	; 0x1388
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <QSPI_ResetChip+0xb8>)
 800104c:	f002 f850 	bl	80030f0 <HAL_QSPI_Command>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <QSPI_ResetChip+0xb0>
    }
    return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3740      	adds	r7, #64	; 0x40
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000090 	.word	0x20000090

08001068 <CSP_QSPI_Write>:
  return HAL_OK;
}


uint8_t CSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b096      	sub	sp, #88	; 0x58
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800107c:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800107e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	d901      	bls.n	800108a <CSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 800109c:	2312      	movs	r3, #18
 800109e:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80010a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80010a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010aa:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80010b0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80010be:	2300      	movs	r3, #0
 80010c0:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80010c2:	2300      	movs	r3, #0
 80010c4:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 80010c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010c8:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 80010ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010cc:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 80010ce:	f7ff fe95 	bl	8000dfc <QSPI_WriteEnable>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <CSP_QSPI_Write+0x74>
    {
      return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e038      	b.n	800114e <CSP_QSPI_Write+0xe6>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e4:	4619      	mov	r1, r3
 80010e6:	481c      	ldr	r0, [pc, #112]	; (8001158 <CSP_QSPI_Write+0xf0>)
 80010e8:	f002 f802 	bl	80030f0 <HAL_QSPI_Command>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <CSP_QSPI_Write+0x8e>
    {
      return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e02b      	b.n	800114e <CSP_QSPI_Write+0xe6>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80010f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fa:	68f9      	ldr	r1, [r7, #12]
 80010fc:	4816      	ldr	r0, [pc, #88]	; (8001158 <CSP_QSPI_Write+0xf0>)
 80010fe:	f002 f855 	bl	80031ac <HAL_QSPI_Transmit>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <CSP_QSPI_Write+0xa4>
    {
      return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e020      	b.n	800114e <CSP_QSPI_Write+0xe6>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady() != HAL_OK)
 800110c:	f7ff fe3e 	bl	8000d8c <QSPI_AutoPollingMemReady>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <CSP_QSPI_Write+0xb2>
    {
      return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e019      	b.n	800114e <CSP_QSPI_Write+0xe6>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800111a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800111c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800111e:	4413      	add	r3, r2
 8001120:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 800112a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800112c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001132:	429a      	cmp	r2, r3
 8001134:	d203      	bcs.n	800113e <CSP_QSPI_Write+0xd6>
 8001136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	e001      	b.n	8001142 <CSP_QSPI_Write+0xda>
 800113e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001142:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8001144:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001148:	429a      	cmp	r2, r3
 800114a:	d3bc      	bcc.n	80010c6 <CSP_QSPI_Write+0x5e>

  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3758      	adds	r7, #88	; 0x58
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000090 	.word	0x20000090

0800115c <CSP_QSPI_Read>:


uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b092      	sub	sp, #72	; 0x48
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800116e:	23eb      	movs	r3, #235	; 0xeb
 8001170:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001172:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117c:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001182:	2300      	movs	r3, #0
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001186:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 800118c:	230a      	movs	r3, #10
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001198:	2300      	movs	r3, #0
 800119a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800119c:	2300      	movs	r3, #0
 800119e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a8:	4619      	mov	r1, r3
 80011aa:	4816      	ldr	r0, [pc, #88]	; (8001204 <CSP_QSPI_Read+0xa8>)
 80011ac:	f001 ffa0 	bl	80030f0 <HAL_QSPI_Command>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <CSP_QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e01f      	b.n	80011fa <CSP_QSPI_Read+0x9e>
  }

  /* Set S# timing for Read command */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <CSP_QSPI_Read+0xa8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <CSP_QSPI_Read+0xa8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011cc:	605a      	str	r2, [r3, #4]

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d2:	68f9      	ldr	r1, [r7, #12]
 80011d4:	480b      	ldr	r0, [pc, #44]	; (8001204 <CSP_QSPI_Read+0xa8>)
 80011d6:	f002 f880 	bl	80032da <HAL_QSPI_Receive>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <CSP_QSPI_Read+0x88>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e00a      	b.n	80011fa <CSP_QSPI_Read+0x9e>
  }

  /* Restore S# timing for nonRead commands */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <CSP_QSPI_Read+0xa8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <CSP_QSPI_Read+0xa8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 80011f6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3748      	adds	r7, #72	; 0x48
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000090 	.word	0x20000090

08001208 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <MX_RTC_Init+0xb0>)
 8001222:	4a26      	ldr	r2, [pc, #152]	; (80012bc <MX_RTC_Init+0xb4>)
 8001224:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <MX_RTC_Init+0xb0>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800122c:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <MX_RTC_Init+0xb0>)
 800122e:	227f      	movs	r2, #127	; 0x7f
 8001230:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <MX_RTC_Init+0xb0>)
 8001234:	22ff      	movs	r2, #255	; 0xff
 8001236:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <MX_RTC_Init+0xb0>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_RTC_Init+0xb0>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_RTC_Init+0xb0>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_RTC_Init+0xb0>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001250:	4819      	ldr	r0, [pc, #100]	; (80012b8 <MX_RTC_Init+0xb0>)
 8001252:	f003 fe2d 	bl	8004eb0 <HAL_RTC_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800125c:	f7ff fbfa 	bl	8000a54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	4619      	mov	r1, r3
 800127a:	480f      	ldr	r0, [pc, #60]	; (80012b8 <MX_RTC_Init+0xb0>)
 800127c:	f003 fe93 	bl	8004fa6 <HAL_RTC_SetTime>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001286:	f7ff fbe5 	bl	8000a54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800128a:	2301      	movs	r3, #1
 800128c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800128e:	2301      	movs	r3, #1
 8001290:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001292:	2301      	movs	r3, #1
 8001294:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_RTC_Init+0xb0>)
 80012a2:	f003 ff1d 	bl	80050e0 <HAL_RTC_SetDate>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80012ac:	f7ff fbd2 	bl	8000a54 <Error_Handler>
  }

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200000d4 	.word	0x200000d4
 80012bc:	40002800 	.word	0x40002800

080012c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <HAL_RTC_MspInit+0x30>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d107      	bne.n	80012e2 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_RTC_MspInit+0x34>)
 80012d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <HAL_RTC_MspInit+0x34>)
 80012da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40002800 	.word	0x40002800
 80012f4:	40021000 	.word	0x40021000

080012f8 <setDate>:
  /* USER CODE END RTC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint8_t setDate(int day,int month,int year,int weekDay) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
	  RTC_DateTypeDef Date;
	  Date.Date=day;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	75bb      	strb	r3, [r7, #22]
	  Date.Month=month;
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	757b      	strb	r3, [r7, #21]
	  Date.WeekDay=weekDay;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	753b      	strb	r3, [r7, #20]
	  Date.Year=year;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	75fb      	strb	r3, [r7, #23]

	 if( HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN)==HAL_OK)
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <setDate+0x48>)
 8001328:	f003 feda 	bl	80050e0 <HAL_RTC_SetDate>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <setDate+0x3e>
		 return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <setDate+0x40>
	 else
		 return HAL_ERROR;
 8001336:	2301      	movs	r3, #1

}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200000d4 	.word	0x200000d4

08001344 <setTime>:
uint8_t setTime(int sec,int min,int hour){
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
	  RTC_TimeTypeDef Time;
	  Time.Seconds=sec;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	75bb      	strb	r3, [r7, #22]
	  Time.Minutes=min;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	757b      	strb	r3, [r7, #21]
	  Time.Hours=hour;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	753b      	strb	r3, [r7, #20]

	  if(HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN)!=HAL_OK)
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	2200      	movs	r2, #0
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <setTime+0x40>)
 800136c:	f003 fe1b 	bl	8004fa6 <HAL_RTC_SetTime>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <setTime+0x36>
		  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <setTime+0x38>
	  else
		  return HAL_ERROR;
 800137a:	2301      	movs	r3, #1

}
 800137c:	4618      	mov	r0, r3
 800137e:	3728      	adds	r7, #40	; 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200000d4 	.word	0x200000d4

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_MspInit+0x44>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <HAL_MspInit+0x44>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6613      	str	r3, [r2, #96]	; 0x60
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_MspInit+0x44>)
 800139c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_MspInit+0x44>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_MspInit+0x44>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b0:	6593      	str	r3, [r2, #88]	; 0x58
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_MspInit+0x44>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler+0x4>

080013ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001424:	f000 f99c 	bl	8001760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <SystemInit+0x64>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001436:	4a16      	ldr	r2, [pc, #88]	; (8001490 <SystemInit+0x64>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <SystemInit+0x68>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <SystemInit+0x68>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <SystemInit+0x68>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <SystemInit+0x68>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <SystemInit+0x68>)
 8001458:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800145c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001460:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <SystemInit+0x68>)
 8001464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001468:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <SystemInit+0x68>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <SystemInit+0x68>)
 8001470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001474:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <SystemInit+0x68>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SystemInit+0x64>)
 800147e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001482:	609a      	str	r2, [r3, #8]
#endif
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00
 8001494:	40021000 	.word	0x40021000

08001498 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <MX_TIM2_Init+0x98>)
 80014b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_TIM2_Init+0x98>)
 80014c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_TIM2_Init+0x98>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_TIM2_Init+0x98>)
 80014ce:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_TIM2_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_TIM2_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e0:	4813      	ldr	r0, [pc, #76]	; (8001530 <MX_TIM2_Init+0x98>)
 80014e2:	f003 ff3b 	bl	800535c <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80014ec:	f7ff fab2 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <MX_TIM2_Init+0x98>)
 80014fe:	f003 ff84 	bl	800540a <HAL_TIM_ConfigClockSource>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001508:	f7ff faa4 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800150c:	2320      	movs	r3, #32
 800150e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_TIM2_Init+0x98>)
 800151a:	f004 f963 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001524:	f7ff fa96 	bl	8000a54 <Error_Handler>
  }

}
 8001528:	bf00      	nop
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200000f8 	.word	0x200000f8

08001534 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001544:	d10b      	bne.n	800155e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_TIM_Base_MspInit+0x38>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	4a08      	ldr	r2, [pc, #32]	; (800156c <HAL_TIM_Base_MspInit+0x38>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6593      	str	r3, [r2, #88]	; 0x58
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_TIM_Base_MspInit+0x38>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000

08001570 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 8001576:	4a15      	ldr	r2, [pc, #84]	; (80015cc <MX_USART2_UART_Init+0x5c>)
 8001578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 80015b4:	f004 f99e 	bl	80058f4 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015be:	f7ff fa49 	bl	8000a54 <Error_Handler>
  }

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000144 	.word	0x20000144
 80015cc:	40004400 	.word	0x40004400

080015d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_UART_MspInit+0x7c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d128      	bne.n	8001644 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_UART_MspInit+0x80>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	4a16      	ldr	r2, [pc, #88]	; (8001650 <HAL_UART_MspInit+0x80>)
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	6593      	str	r3, [r2, #88]	; 0x58
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_UART_MspInit+0x80>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_UART_MspInit+0x80>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_UART_MspInit+0x80>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_UART_MspInit+0x80>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001622:	230c      	movs	r3, #12
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001632:	2307      	movs	r3, #7
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001640:	f001 f994 	bl	800296c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40004400 	.word	0x40004400
 8001650:	40021000 	.word	0x40021000

08001654 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001658:	f7ff fee8 	bl	800142c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800165c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800165e:	e003      	b.n	8001668 <LoopCopyDataInit>

08001660 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001662:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001664:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001666:	3104      	adds	r1, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001668:	480a      	ldr	r0, [pc, #40]	; (8001694 <LoopForever+0xa>)
	ldr	r3, =_edata
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <LoopForever+0xe>)
	adds	r2, r0, r1
 800166c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800166e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001670:	d3f6      	bcc.n	8001660 <CopyDataInit>
	ldr	r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001674:	e002      	b.n	800167c <LoopFillZerobss>

08001676 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001676:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001678:	f842 3b04 	str.w	r3, [r2], #4

0800167c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <LoopForever+0x16>)
	cmp	r2, r3
 800167e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001680:	d3f9      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001682:	f004 fd71 	bl	8006168 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001686:	f7ff f861 	bl	800074c <main>

0800168a <LoopForever>:

LoopForever:
    b LoopForever
 800168a:	e7fe      	b.n	800168a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800168c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001690:	08006230 	.word	0x08006230
	ldr	r0, =_sdata
 8001694:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001698:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800169c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80016a0:	200001c8 	.word	0x200001c8

080016a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC1_2_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_Init+0x3c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <HAL_Init+0x3c>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016be:	2003      	movs	r0, #3
 80016c0:	f001 f8e2 	bl	8002888 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c4:	2000      	movs	r0, #0
 80016c6:	f000 f80f 	bl	80016e8 <HAL_InitTick>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	e001      	b.n	80016da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016d6:	f7ff fe57 	bl	8001388 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016da:	79fb      	ldrb	r3, [r7, #7]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40022000 	.word	0x40022000

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_InitTick+0x6c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d023      	beq.n	8001744 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_InitTick+0x70>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_InitTick+0x6c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f001 f8df 	bl	80028d6 <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10f      	bne.n	800173e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d809      	bhi.n	8001738 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800172c:	f001 f8b7 	bl	800289e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001730:	4a0a      	ldr	r2, [pc, #40]	; (800175c <HAL_InitTick+0x74>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e007      	b.n	8001748 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e004      	b.n	8001748 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	e001      	b.n	8001748 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_IncTick+0x20>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x24>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <HAL_IncTick+0x24>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000008 	.word	0x20000008
 8001784:	200001c4 	.word	0x200001c4

08001788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_GetTick+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	200001c4 	.word	0x200001c4

080017a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff ffee 	bl	8001788 <HAL_GetTick>
 80017ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017b8:	d005      	beq.n	80017c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_Delay+0x40>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c6:	bf00      	nop
 80017c8:	f7ff ffde 	bl	8001788 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d8f7      	bhi.n	80017c8 <HAL_Delay+0x28>
  {
  }
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000008 	.word	0x20000008

080017e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	609a      	str	r2, [r3, #8]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3360      	adds	r3, #96	; 0x60
 800185e:	461a      	mov	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <LL_ADC_SetOffset+0x44>)
 800186e:	4013      	ands	r3, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	4313      	orrs	r3, r2
 800187c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001884:	bf00      	nop
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	03fff000 	.word	0x03fff000

08001894 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3360      	adds	r3, #96	; 0x60
 80018a2:	461a      	mov	r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3360      	adds	r3, #96	; 0x60
 80018d0:	461a      	mov	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018ea:	bf00      	nop
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b087      	sub	sp, #28
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3330      	adds	r3, #48	; 0x30
 8001906:	461a      	mov	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	4413      	add	r3, r2
 8001914:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	211f      	movs	r1, #31
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	401a      	ands	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	0e9b      	lsrs	r3, r3, #26
 800192e:	f003 011f 	and.w	r1, r3, #31
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	431a      	orrs	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001942:	bf00      	nop
 8001944:	371c      	adds	r7, #28
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800194e:	b480      	push	{r7}
 8001950:	b087      	sub	sp, #28
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3314      	adds	r3, #20
 800195e:	461a      	mov	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	0e5b      	lsrs	r3, r3, #25
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	4413      	add	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	0d1b      	lsrs	r3, r3, #20
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	2107      	movs	r1, #7
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	401a      	ands	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	0d1b      	lsrs	r3, r3, #20
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	431a      	orrs	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001998:	bf00      	nop
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019bc:	43db      	mvns	r3, r3
 80019be:	401a      	ands	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0318 	and.w	r3, r3, #24
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019c8:	40d9      	lsrs	r1, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	400b      	ands	r3, r1
 80019ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d2:	431a      	orrs	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	0007ffff 	.word	0x0007ffff

080019ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6093      	str	r3, [r2, #8]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a24:	d101      	bne.n	8001a2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a74:	d101      	bne.n	8001a7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <LL_ADC_IsEnabled+0x18>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <LL_ADC_IsEnabled+0x1a>
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d101      	bne.n	8001ac6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d101      	bne.n	8001aec <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e134      	b.n	8001d80 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7fe fd45 	bl	80005b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff67 	bl	8001a10 <LL_ADC_IsDeepPowerDownEnabled>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d004      	beq.n	8001b52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff4d 	bl	80019ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff82 	bl	8001a60 <LL_ADC_IsInternalRegulatorEnabled>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d113      	bne.n	8001b8a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff66 	bl	8001a38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001b6c:	4b86      	ldr	r3, [pc, #536]	; (8001d88 <HAL_ADC_Init+0x28c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	099b      	lsrs	r3, r3, #6
 8001b72:	4a86      	ldr	r2, [pc, #536]	; (8001d8c <HAL_ADC_Init+0x290>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	099b      	lsrs	r3, r3, #6
 8001b7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b7c:	e002      	b.n	8001b84 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f9      	bne.n	8001b7e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ff66 	bl	8001a60 <LL_ADC_IsInternalRegulatorEnabled>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10d      	bne.n	8001bb6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	f043 0210 	orr.w	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001baa:	f043 0201 	orr.w	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ff77 	bl	8001aae <LL_ADC_REG_IsConversionOngoing>
 8001bc0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f040 80cf 	bne.w	8001d6e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 80cb 	bne.w	8001d6e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bdc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001be0:	f043 0202 	orr.w	r2, r3, #2
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff4b 	bl	8001a88 <LL_ADC_IsEnabled>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d115      	bne.n	8001c24 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bf8:	4865      	ldr	r0, [pc, #404]	; (8001d90 <HAL_ADC_Init+0x294>)
 8001bfa:	f7ff ff45 	bl	8001a88 <LL_ADC_IsEnabled>
 8001bfe:	4604      	mov	r4, r0
 8001c00:	4864      	ldr	r0, [pc, #400]	; (8001d94 <HAL_ADC_Init+0x298>)
 8001c02:	f7ff ff41 	bl	8001a88 <LL_ADC_IsEnabled>
 8001c06:	4603      	mov	r3, r0
 8001c08:	431c      	orrs	r4, r3
 8001c0a:	4863      	ldr	r0, [pc, #396]	; (8001d98 <HAL_ADC_Init+0x29c>)
 8001c0c:	f7ff ff3c 	bl	8001a88 <LL_ADC_IsEnabled>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4323      	orrs	r3, r4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d105      	bne.n	8001c24 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	485f      	ldr	r0, [pc, #380]	; (8001d9c <HAL_ADC_Init+0x2a0>)
 8001c20:	f7ff fde0 	bl	80017e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7e5b      	ldrb	r3, [r3, #25]
 8001c28:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c2e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c34:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c3a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c42:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d106      	bne.n	8001c60 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	3b01      	subs	r3, #1
 8001c58:	045b      	lsls	r3, r3, #17
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d009      	beq.n	8001c7c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <HAL_ADC_Init+0x2a4>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff0a 	bl	8001aae <LL_ADC_REG_IsConversionOngoing>
 8001c9a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff17 	bl	8001ad4 <LL_ADC_INJ_IsConversionOngoing>
 8001ca6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d13d      	bne.n	8001d2a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d13a      	bne.n	8001d2a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cb8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cc0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cd0:	f023 0302 	bic.w	r3, r3, #2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	69b9      	ldr	r1, [r7, #24]
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d118      	bne.n	8001d1a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cf2:	f023 0304 	bic.w	r3, r3, #4
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cfe:	4311      	orrs	r1, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d04:	4311      	orrs	r1, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	611a      	str	r2, [r3, #16]
 8001d18:	e007      	b.n	8001d2a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0201 	bic.w	r2, r2, #1
 8001d28:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d10c      	bne.n	8001d4c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	f023 010f 	bic.w	r1, r3, #15
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	1e5a      	subs	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	631a      	str	r2, [r3, #48]	; 0x30
 8001d4a:	e007      	b.n	8001d5c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 020f 	bic.w	r2, r2, #15
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	f023 0303 	bic.w	r3, r3, #3
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54
 8001d6c:	e007      	b.n	8001d7e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	f043 0210 	orr.w	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3724      	adds	r7, #36	; 0x24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd90      	pop	{r4, r7, pc}
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	053e2d63 	.word	0x053e2d63
 8001d90:	50040000 	.word	0x50040000
 8001d94:	50040100 	.word	0x50040100
 8001d98:	50040200 	.word	0x50040200
 8001d9c:	50040300 	.word	0x50040300
 8001da0:	fff0c007 	.word	0xfff0c007

08001da4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b0b6      	sub	sp, #216	; 0xd8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x22>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e3c6      	b.n	8002554 <HAL_ADC_ConfigChannel+0x7b0>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fe6b 	bl	8001aae <LL_ADC_REG_IsConversionOngoing>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 83a7 	bne.w	800252e <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d824      	bhi.n	8001e32 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	3b02      	subs	r3, #2
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d81b      	bhi.n	8001e2a <HAL_ADC_ConfigChannel+0x86>
 8001df2:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <HAL_ADC_ConfigChannel+0x54>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e09 	.word	0x08001e09
 8001dfc:	08001e11 	.word	0x08001e11
 8001e00:	08001e19 	.word	0x08001e19
 8001e04:	08001e21 	.word	0x08001e21
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	605a      	str	r2, [r3, #4]
          break;
 8001e0e:	e011      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2212      	movs	r2, #18
 8001e14:	605a      	str	r2, [r3, #4]
          break;
 8001e16:	e00d      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2218      	movs	r2, #24
 8001e1c:	605a      	str	r2, [r3, #4]
          break;
 8001e1e:	e009      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e26:	605a      	str	r2, [r3, #4]
          break;
 8001e28:	e004      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2206      	movs	r2, #6
 8001e2e:	605a      	str	r2, [r3, #4]
          break;
 8001e30:	e000      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001e32:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	f7ff fd58 	bl	80018f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fe2f 	bl	8001aae <LL_ADC_REG_IsConversionOngoing>
 8001e50:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fe3b 	bl	8001ad4 <LL_ADC_INJ_IsConversionOngoing>
 8001e5e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 81a6 	bne.w	80021b8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f040 81a1 	bne.w	80021b8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	461a      	mov	r2, r3
 8001e84:	f7ff fd63 	bl	800194e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	08db      	lsrs	r3, r3, #3
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	6919      	ldr	r1, [r3, #16]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001eba:	f7ff fcc7 	bl	800184c <LL_ADC_SetOffset>
 8001ebe:	e17b      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fce4 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10a      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x148>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fcd9 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	0e9b      	lsrs	r3, r3, #26
 8001ee6:	f003 021f 	and.w	r2, r3, #31
 8001eea:	e01e      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x186>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fcce 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8001f0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8001f12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 8001f1a:	2320      	movs	r3, #32
 8001f1c:	e004      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 8001f1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d105      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x19e>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	0e9b      	lsrs	r3, r3, #26
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	e018      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x1d0>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001f66:	2320      	movs	r3, #32
 8001f68:	e004      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001f6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d106      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fc9d 	bl	80018c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fc81 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x20e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fc76 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	0e9b      	lsrs	r3, r3, #26
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	e01e      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x24c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fc6b 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001fd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001fd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	e004      	b.n	8001fee <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001fe4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x264>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	e018      	b.n	800203a <HAL_ADC_ConfigChannel+0x296>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800201c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800202c:	2320      	movs	r3, #32
 800202e:	e004      	b.n	800203a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800203a:	429a      	cmp	r2, r3
 800203c:	d106      	bne.n	800204c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2200      	movs	r2, #0
 8002044:	2101      	movs	r1, #1
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fc3a 	bl	80018c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2102      	movs	r1, #2
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fc1e 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10a      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x2d4>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2102      	movs	r1, #2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fc13 	bl	8001894 <LL_ADC_GetOffsetChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	f003 021f 	and.w	r2, r3, #31
 8002076:	e01e      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x312>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2102      	movs	r1, #2
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fc08 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002096:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800209a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800209e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80020a6:	2320      	movs	r3, #32
 80020a8:	e004      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80020aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x32a>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	0e9b      	lsrs	r3, r3, #26
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	e016      	b.n	80020fc <HAL_ADC_ConfigChannel+0x358>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80020e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80020e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80020ee:	2320      	movs	r3, #32
 80020f0:	e004      	b.n	80020fc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80020f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d106      	bne.n	800210e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2200      	movs	r2, #0
 8002106:	2102      	movs	r1, #2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fbd9 	bl	80018c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2103      	movs	r1, #3
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fbbd 	bl	8001894 <LL_ADC_GetOffsetChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10a      	bne.n	800213a <HAL_ADC_ConfigChannel+0x396>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2103      	movs	r1, #3
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fbb2 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8002130:	4603      	mov	r3, r0
 8002132:	0e9b      	lsrs	r3, r3, #26
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	e017      	b.n	800216a <HAL_ADC_ConfigChannel+0x3c6>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2103      	movs	r1, #3
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fba7 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002154:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800215c:	2320      	movs	r3, #32
 800215e:	e003      	b.n	8002168 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002172:	2b00      	cmp	r3, #0
 8002174:	d105      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x3de>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	0e9b      	lsrs	r3, r3, #26
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	e011      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x402>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002192:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800219a:	2320      	movs	r3, #32
 800219c:	e003      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800219e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d106      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2200      	movs	r2, #0
 80021b0:	2103      	movs	r1, #3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fb84 	bl	80018c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fc63 	bl	8001a88 <LL_ADC_IsEnabled>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f040 813f 	bne.w	8002448 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6819      	ldr	r1, [r3, #0]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	461a      	mov	r2, r3
 80021d8:	f7ff fbe4 	bl	80019a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a8e      	ldr	r2, [pc, #568]	; (800241c <HAL_ADC_ConfigChannel+0x678>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	f040 8130 	bne.w	8002448 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10b      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x46c>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	3301      	adds	r3, #1
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	2b09      	cmp	r3, #9
 8002206:	bf94      	ite	ls
 8002208:	2301      	movls	r3, #1
 800220a:	2300      	movhi	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	e019      	b.n	8002244 <HAL_ADC_ConfigChannel+0x4a0>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800221e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002220:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002228:	2320      	movs	r3, #32
 800222a:	e003      	b.n	8002234 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800222c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	3301      	adds	r3, #1
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	2b09      	cmp	r3, #9
 800223c:	bf94      	ite	ls
 800223e:	2301      	movls	r3, #1
 8002240:	2300      	movhi	r3, #0
 8002242:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002244:	2b00      	cmp	r3, #0
 8002246:	d079      	beq.n	800233c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002250:	2b00      	cmp	r3, #0
 8002252:	d107      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x4c0>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0e9b      	lsrs	r3, r3, #26
 800225a:	3301      	adds	r3, #1
 800225c:	069b      	lsls	r3, r3, #26
 800225e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002262:	e015      	b.n	8002290 <HAL_ADC_ConfigChannel+0x4ec>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002274:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800227c:	2320      	movs	r3, #32
 800227e:	e003      	b.n	8002288 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	3301      	adds	r3, #1
 800228a:	069b      	lsls	r3, r3, #26
 800228c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002298:	2b00      	cmp	r3, #0
 800229a:	d109      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x50c>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0e9b      	lsrs	r3, r3, #26
 80022a2:	3301      	adds	r3, #1
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	2101      	movs	r1, #1
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	e017      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x53c>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80022be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80022c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80022c8:	2320      	movs	r3, #32
 80022ca:	e003      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80022cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	3301      	adds	r3, #1
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	2101      	movs	r1, #1
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	ea42 0103 	orr.w	r1, r2, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10a      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x562>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0e9b      	lsrs	r3, r3, #26
 80022f6:	3301      	adds	r3, #1
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	051b      	lsls	r3, r3, #20
 8002304:	e018      	b.n	8002338 <HAL_ADC_ConfigChannel+0x594>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002316:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800231e:	2320      	movs	r3, #32
 8002320:	e003      	b.n	800232a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3301      	adds	r3, #1
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002338:	430b      	orrs	r3, r1
 800233a:	e080      	b.n	800243e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002344:	2b00      	cmp	r3, #0
 8002346:	d107      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x5b4>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0e9b      	lsrs	r3, r3, #26
 800234e:	3301      	adds	r3, #1
 8002350:	069b      	lsls	r3, r3, #26
 8002352:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002356:	e015      	b.n	8002384 <HAL_ADC_ConfigChannel+0x5e0>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002370:	2320      	movs	r3, #32
 8002372:	e003      	b.n	800237c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	3301      	adds	r3, #1
 800237e:	069b      	lsls	r3, r3, #26
 8002380:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x600>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	3301      	adds	r3, #1
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	2101      	movs	r1, #1
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	e017      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x630>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	61fb      	str	r3, [r7, #28]
  return result;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80023bc:	2320      	movs	r3, #32
 80023be:	e003      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	2101      	movs	r1, #1
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	ea42 0103 	orr.w	r1, r2, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10d      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x65c>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	0e9b      	lsrs	r3, r3, #26
 80023ea:	3301      	adds	r3, #1
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	3b1e      	subs	r3, #30
 80023f8:	051b      	lsls	r3, r3, #20
 80023fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023fe:	e01d      	b.n	800243c <HAL_ADC_ConfigChannel+0x698>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	613b      	str	r3, [r7, #16]
  return result;
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d103      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002418:	2320      	movs	r3, #32
 800241a:	e005      	b.n	8002428 <HAL_ADC_ConfigChannel+0x684>
 800241c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	3301      	adds	r3, #1
 800242a:	f003 021f 	and.w	r2, r3, #31
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	3b1e      	subs	r3, #30
 8002436:	051b      	lsls	r3, r3, #20
 8002438:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800243c:	430b      	orrs	r3, r1
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	6892      	ldr	r2, [r2, #8]
 8002442:	4619      	mov	r1, r3
 8002444:	f7ff fa83 	bl	800194e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b43      	ldr	r3, [pc, #268]	; (800255c <HAL_ADC_ConfigChannel+0x7b8>)
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d079      	beq.n	8002548 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002454:	4842      	ldr	r0, [pc, #264]	; (8002560 <HAL_ADC_ConfigChannel+0x7bc>)
 8002456:	f7ff f9eb 	bl	8001830 <LL_ADC_GetCommonPathInternalCh>
 800245a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a40      	ldr	r2, [pc, #256]	; (8002564 <HAL_ADC_ConfigChannel+0x7c0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d12b      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800246c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d125      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a3b      	ldr	r2, [pc, #236]	; (8002568 <HAL_ADC_ConfigChannel+0x7c4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d004      	beq.n	8002488 <HAL_ADC_ConfigChannel+0x6e4>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a3a      	ldr	r2, [pc, #232]	; (800256c <HAL_ADC_ConfigChannel+0x7c8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d15c      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800248c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002490:	4619      	mov	r1, r3
 8002492:	4833      	ldr	r0, [pc, #204]	; (8002560 <HAL_ADC_ConfigChannel+0x7bc>)
 8002494:	f7ff f9b9 	bl	800180a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002498:	4b35      	ldr	r3, [pc, #212]	; (8002570 <HAL_ADC_ConfigChannel+0x7cc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	099b      	lsrs	r3, r3, #6
 800249e:	4a35      	ldr	r2, [pc, #212]	; (8002574 <HAL_ADC_ConfigChannel+0x7d0>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	099a      	lsrs	r2, r3, #6
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024b0:	e002      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f9      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024be:	e040      	b.n	8002542 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a2c      	ldr	r2, [pc, #176]	; (8002578 <HAL_ADC_ConfigChannel+0x7d4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d118      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x758>
 80024ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d112      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a23      	ldr	r2, [pc, #140]	; (8002568 <HAL_ADC_ConfigChannel+0x7c4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d004      	beq.n	80024ea <HAL_ADC_ConfigChannel+0x746>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a21      	ldr	r2, [pc, #132]	; (800256c <HAL_ADC_ConfigChannel+0x7c8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d12d      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f2:	4619      	mov	r1, r3
 80024f4:	481a      	ldr	r0, [pc, #104]	; (8002560 <HAL_ADC_ConfigChannel+0x7bc>)
 80024f6:	f7ff f988 	bl	800180a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024fa:	e024      	b.n	8002546 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a1e      	ldr	r2, [pc, #120]	; (800257c <HAL_ADC_ConfigChannel+0x7d8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d120      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002506:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d11a      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a14      	ldr	r2, [pc, #80]	; (8002568 <HAL_ADC_ConfigChannel+0x7c4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d115      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800251c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002520:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002524:	4619      	mov	r1, r3
 8002526:	480e      	ldr	r0, [pc, #56]	; (8002560 <HAL_ADC_ConfigChannel+0x7bc>)
 8002528:	f7ff f96f 	bl	800180a <LL_ADC_SetCommonPathInternalCh>
 800252c:	e00c      	b.n	8002548 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f043 0220 	orr.w	r2, r3, #32
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002540:	e002      	b.n	8002548 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002542:	bf00      	nop
 8002544:	e000      	b.n	8002548 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002546:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002550:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002554:	4618      	mov	r0, r3
 8002556:	37d8      	adds	r7, #216	; 0xd8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	80080000 	.word	0x80080000
 8002560:	50040300 	.word	0x50040300
 8002564:	c7520000 	.word	0xc7520000
 8002568:	50040000 	.word	0x50040000
 800256c:	50040200 	.word	0x50040200
 8002570:	20000000 	.word	0x20000000
 8002574:	053e2d63 	.word	0x053e2d63
 8002578:	cb840000 	.word	0xcb840000
 800257c:	80000001 	.word	0x80000001

08002580 <LL_ADC_IsEnabled>:
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <LL_ADC_IsEnabled+0x18>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <LL_ADC_IsEnabled+0x1a>
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d101      	bne.n	80025be <LL_ADC_REG_IsConversionOngoing+0x18>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b09f      	sub	sp, #124	; 0x7c
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e08f      	b.n	800270a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a47      	ldr	r2, [pc, #284]	; (8002714 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d102      	bne.n	8002602 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80025fc:	4b46      	ldr	r3, [pc, #280]	; (8002718 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	e001      	b.n	8002606 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10b      	bne.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002610:	f043 0220 	orr.w	r2, r3, #32
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e072      	b.n	800270a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ffbd 	bl	80025a6 <LL_ADC_REG_IsConversionOngoing>
 800262c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ffb7 	bl	80025a6 <LL_ADC_REG_IsConversionOngoing>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d154      	bne.n	80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800263e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002640:	2b00      	cmp	r3, #0
 8002642:	d151      	bne.n	80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002644:	4b35      	ldr	r3, [pc, #212]	; (800271c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002646:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d02c      	beq.n	80026aa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002662:	035b      	lsls	r3, r3, #13
 8002664:	430b      	orrs	r3, r1
 8002666:	431a      	orrs	r2, r3
 8002668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800266c:	4829      	ldr	r0, [pc, #164]	; (8002714 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800266e:	f7ff ff87 	bl	8002580 <LL_ADC_IsEnabled>
 8002672:	4604      	mov	r4, r0
 8002674:	4828      	ldr	r0, [pc, #160]	; (8002718 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002676:	f7ff ff83 	bl	8002580 <LL_ADC_IsEnabled>
 800267a:	4603      	mov	r3, r0
 800267c:	431c      	orrs	r4, r3
 800267e:	4828      	ldr	r0, [pc, #160]	; (8002720 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002680:	f7ff ff7e 	bl	8002580 <LL_ADC_IsEnabled>
 8002684:	4603      	mov	r3, r0
 8002686:	4323      	orrs	r3, r4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d137      	bne.n	80026fc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800268c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002694:	f023 030f 	bic.w	r3, r3, #15
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	6811      	ldr	r1, [r2, #0]
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	6892      	ldr	r2, [r2, #8]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	431a      	orrs	r2, r3
 80026a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026a8:	e028      	b.n	80026fc <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026b6:	4817      	ldr	r0, [pc, #92]	; (8002714 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80026b8:	f7ff ff62 	bl	8002580 <LL_ADC_IsEnabled>
 80026bc:	4604      	mov	r4, r0
 80026be:	4816      	ldr	r0, [pc, #88]	; (8002718 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80026c0:	f7ff ff5e 	bl	8002580 <LL_ADC_IsEnabled>
 80026c4:	4603      	mov	r3, r0
 80026c6:	431c      	orrs	r4, r3
 80026c8:	4815      	ldr	r0, [pc, #84]	; (8002720 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026ca:	f7ff ff59 	bl	8002580 <LL_ADC_IsEnabled>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4323      	orrs	r3, r4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d112      	bne.n	80026fc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026de:	f023 030f 	bic.w	r3, r3, #15
 80026e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026e4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026e6:	e009      	b.n	80026fc <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	f043 0220 	orr.w	r2, r3, #32
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80026fa:	e000      	b.n	80026fe <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002706:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800270a:	4618      	mov	r0, r3
 800270c:	377c      	adds	r7, #124	; 0x7c
 800270e:	46bd      	mov	sp, r7
 8002710:	bd90      	pop	{r4, r7, pc}
 8002712:	bf00      	nop
 8002714:	50040000 	.word	0x50040000
 8002718:	50040100 	.word	0x50040100
 800271c:	50040300 	.word	0x50040300
 8002720:	50040200 	.word	0x50040200

08002724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002740:	4013      	ands	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800274c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002756:	4a04      	ldr	r2, [pc, #16]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	60d3      	str	r3, [r2, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <__NVIC_GetPriorityGrouping+0x18>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 0307 	and.w	r3, r3, #7
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	6039      	str	r1, [r7, #0]
 8002792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	db0a      	blt.n	80027b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	490c      	ldr	r1, [pc, #48]	; (80027d4 <__NVIC_SetPriority+0x4c>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	0112      	lsls	r2, r2, #4
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	440b      	add	r3, r1
 80027ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b0:	e00a      	b.n	80027c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4908      	ldr	r1, [pc, #32]	; (80027d8 <__NVIC_SetPriority+0x50>)
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	3b04      	subs	r3, #4
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	440b      	add	r3, r1
 80027c6:	761a      	strb	r2, [r3, #24]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000e100 	.word	0xe000e100
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	; 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f1c3 0307 	rsb	r3, r3, #7
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	bf28      	it	cs
 80027fa:	2304      	movcs	r3, #4
 80027fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3304      	adds	r3, #4
 8002802:	2b06      	cmp	r3, #6
 8002804:	d902      	bls.n	800280c <NVIC_EncodePriority+0x30>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3b03      	subs	r3, #3
 800280a:	e000      	b.n	800280e <NVIC_EncodePriority+0x32>
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	401a      	ands	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	43d9      	mvns	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	4313      	orrs	r3, r2
         );
}
 8002836:	4618      	mov	r0, r3
 8002838:	3724      	adds	r7, #36	; 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002854:	d301      	bcc.n	800285a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002856:	2301      	movs	r3, #1
 8002858:	e00f      	b.n	800287a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <SysTick_Config+0x40>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002862:	210f      	movs	r1, #15
 8002864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002868:	f7ff ff8e 	bl	8002788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <SysTick_Config+0x40>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002872:	4b04      	ldr	r3, [pc, #16]	; (8002884 <SysTick_Config+0x40>)
 8002874:	2207      	movs	r2, #7
 8002876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	e000e010 	.word	0xe000e010

08002888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ff47 	bl	8002724 <__NVIC_SetPriorityGrouping>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028b0:	f7ff ff5c 	bl	800276c <__NVIC_GetPriorityGrouping>
 80028b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f7ff ff8e 	bl	80027dc <NVIC_EncodePriority>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff5d 	bl	8002788 <__NVIC_SetPriority>
}
 80028ce:	bf00      	nop
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ffb0 	bl	8002844 <SysTick_Config>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d008      	beq.n	8002918 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2204      	movs	r2, #4
 800290a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e022      	b.n	800295e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 020e 	bic.w	r2, r2, #14
 8002926:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	f003 021c 	and.w	r2, r3, #28
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2101      	movs	r1, #1
 8002946:	fa01 f202 	lsl.w	r2, r1, r2
 800294a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800295c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297a:	e17f      	b.n	8002c7c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2101      	movs	r1, #1
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8171 	beq.w	8002c76 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d00b      	beq.n	80029b4 <HAL_GPIO_Init+0x48>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d007      	beq.n	80029b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029a8:	2b11      	cmp	r3, #17
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b12      	cmp	r3, #18
 80029b2:	d130      	bne.n	8002a16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ea:	2201      	movs	r2, #1
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	f003 0201 	and.w	r2, r3, #1
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d118      	bne.n	8002a54 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a28:	2201      	movs	r2, #1
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	08db      	lsrs	r3, r3, #3
 8002a3e:	f003 0201 	and.w	r2, r3, #1
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x128>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b12      	cmp	r3, #18
 8002a92:	d123      	bne.n	8002adc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	08da      	lsrs	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3208      	adds	r2, #8
 8002a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	220f      	movs	r2, #15
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	08da      	lsrs	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3208      	adds	r2, #8
 8002ad6:	6939      	ldr	r1, [r7, #16]
 8002ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4013      	ands	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0203 	and.w	r2, r3, #3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80ac 	beq.w	8002c76 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1e:	4b5e      	ldr	r3, [pc, #376]	; (8002c98 <HAL_GPIO_Init+0x32c>)
 8002b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b22:	4a5d      	ldr	r2, [pc, #372]	; (8002c98 <HAL_GPIO_Init+0x32c>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6613      	str	r3, [r2, #96]	; 0x60
 8002b2a:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <HAL_GPIO_Init+0x32c>)
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b36:	4a59      	ldr	r2, [pc, #356]	; (8002c9c <HAL_GPIO_Init+0x330>)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b60:	d025      	beq.n	8002bae <HAL_GPIO_Init+0x242>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4e      	ldr	r2, [pc, #312]	; (8002ca0 <HAL_GPIO_Init+0x334>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d01f      	beq.n	8002baa <HAL_GPIO_Init+0x23e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4d      	ldr	r2, [pc, #308]	; (8002ca4 <HAL_GPIO_Init+0x338>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d019      	beq.n	8002ba6 <HAL_GPIO_Init+0x23a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4c      	ldr	r2, [pc, #304]	; (8002ca8 <HAL_GPIO_Init+0x33c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_GPIO_Init+0x236>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4b      	ldr	r2, [pc, #300]	; (8002cac <HAL_GPIO_Init+0x340>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00d      	beq.n	8002b9e <HAL_GPIO_Init+0x232>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4a      	ldr	r2, [pc, #296]	; (8002cb0 <HAL_GPIO_Init+0x344>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d007      	beq.n	8002b9a <HAL_GPIO_Init+0x22e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a49      	ldr	r2, [pc, #292]	; (8002cb4 <HAL_GPIO_Init+0x348>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_GPIO_Init+0x22a>
 8002b92:	2306      	movs	r3, #6
 8002b94:	e00c      	b.n	8002bb0 <HAL_GPIO_Init+0x244>
 8002b96:	2307      	movs	r3, #7
 8002b98:	e00a      	b.n	8002bb0 <HAL_GPIO_Init+0x244>
 8002b9a:	2305      	movs	r3, #5
 8002b9c:	e008      	b.n	8002bb0 <HAL_GPIO_Init+0x244>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	e006      	b.n	8002bb0 <HAL_GPIO_Init+0x244>
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e004      	b.n	8002bb0 <HAL_GPIO_Init+0x244>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e002      	b.n	8002bb0 <HAL_GPIO_Init+0x244>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_GPIO_Init+0x244>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	f002 0203 	and.w	r2, r2, #3
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	4093      	lsls	r3, r2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bc0:	4936      	ldr	r1, [pc, #216]	; (8002c9c <HAL_GPIO_Init+0x330>)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bce:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <HAL_GPIO_Init+0x34c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bf2:	4a31      	ldr	r2, [pc, #196]	; (8002cb8 <HAL_GPIO_Init+0x34c>)
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <HAL_GPIO_Init+0x34c>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c1c:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <HAL_GPIO_Init+0x34c>)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c22:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <HAL_GPIO_Init+0x34c>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <HAL_GPIO_Init+0x34c>)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_GPIO_Init+0x34c>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c70:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <HAL_GPIO_Init+0x34c>)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f47f ae78 	bne.w	800297c <HAL_GPIO_Init+0x10>
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	48000400 	.word	0x48000400
 8002ca4:	48000800 	.word	0x48000800
 8002ca8:	48000c00 	.word	0x48000c00
 8002cac:	48001000 	.word	0x48001000
 8002cb0:	48001400 	.word	0x48001400
 8002cb4:	48001800 	.word	0x48001800
 8002cb8:	40010400 	.word	0x40010400

08002cbc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002cca:	e0cd      	b.n	8002e68 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002ccc:	2201      	movs	r2, #1
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80c0 	beq.w	8002e62 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002ce2:	4a68      	ldr	r2, [pc, #416]	; (8002e84 <HAL_GPIO_DeInit+0x1c8>)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	220f      	movs	r2, #15
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4013      	ands	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d0a:	d025      	beq.n	8002d58 <HAL_GPIO_DeInit+0x9c>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a5e      	ldr	r2, [pc, #376]	; (8002e88 <HAL_GPIO_DeInit+0x1cc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d01f      	beq.n	8002d54 <HAL_GPIO_DeInit+0x98>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a5d      	ldr	r2, [pc, #372]	; (8002e8c <HAL_GPIO_DeInit+0x1d0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d019      	beq.n	8002d50 <HAL_GPIO_DeInit+0x94>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a5c      	ldr	r2, [pc, #368]	; (8002e90 <HAL_GPIO_DeInit+0x1d4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d013      	beq.n	8002d4c <HAL_GPIO_DeInit+0x90>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a5b      	ldr	r2, [pc, #364]	; (8002e94 <HAL_GPIO_DeInit+0x1d8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00d      	beq.n	8002d48 <HAL_GPIO_DeInit+0x8c>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a5a      	ldr	r2, [pc, #360]	; (8002e98 <HAL_GPIO_DeInit+0x1dc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d007      	beq.n	8002d44 <HAL_GPIO_DeInit+0x88>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a59      	ldr	r2, [pc, #356]	; (8002e9c <HAL_GPIO_DeInit+0x1e0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d101      	bne.n	8002d40 <HAL_GPIO_DeInit+0x84>
 8002d3c:	2306      	movs	r3, #6
 8002d3e:	e00c      	b.n	8002d5a <HAL_GPIO_DeInit+0x9e>
 8002d40:	2307      	movs	r3, #7
 8002d42:	e00a      	b.n	8002d5a <HAL_GPIO_DeInit+0x9e>
 8002d44:	2305      	movs	r3, #5
 8002d46:	e008      	b.n	8002d5a <HAL_GPIO_DeInit+0x9e>
 8002d48:	2304      	movs	r3, #4
 8002d4a:	e006      	b.n	8002d5a <HAL_GPIO_DeInit+0x9e>
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e004      	b.n	8002d5a <HAL_GPIO_DeInit+0x9e>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e002      	b.n	8002d5a <HAL_GPIO_DeInit+0x9e>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_GPIO_DeInit+0x9e>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	f002 0203 	and.w	r2, r2, #3
 8002d60:	0092      	lsls	r2, r2, #2
 8002d62:	4093      	lsls	r3, r2
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d132      	bne.n	8002dd0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002d6a:	4b4d      	ldr	r3, [pc, #308]	; (8002ea0 <HAL_GPIO_DeInit+0x1e4>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	494b      	ldr	r1, [pc, #300]	; (8002ea0 <HAL_GPIO_DeInit+0x1e4>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002d78:	4b49      	ldr	r3, [pc, #292]	; (8002ea0 <HAL_GPIO_DeInit+0x1e4>)
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	4947      	ldr	r1, [pc, #284]	; (8002ea0 <HAL_GPIO_DeInit+0x1e4>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002d86:	4b46      	ldr	r3, [pc, #280]	; (8002ea0 <HAL_GPIO_DeInit+0x1e4>)
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	4944      	ldr	r1, [pc, #272]	; (8002ea0 <HAL_GPIO_DeInit+0x1e4>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002d94:	4b42      	ldr	r3, [pc, #264]	; (8002ea0 <HAL_GPIO_DeInit+0x1e4>)
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	4940      	ldr	r1, [pc, #256]	; (8002ea0 <HAL_GPIO_DeInit+0x1e4>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	220f      	movs	r2, #15
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002db2:	4a34      	ldr	r2, [pc, #208]	; (8002e84 <HAL_GPIO_DeInit+0x1c8>)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	089b      	lsrs	r3, r3, #2
 8002db8:	3302      	adds	r3, #2
 8002dba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	4830      	ldr	r0, [pc, #192]	; (8002e84 <HAL_GPIO_DeInit+0x1c8>)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	089b      	lsrs	r3, r3, #2
 8002dc8:	400a      	ands	r2, r1
 8002dca:	3302      	adds	r3, #2
 8002dcc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2103      	movs	r1, #3
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	08da      	lsrs	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3208      	adds	r2, #8
 8002dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	220f      	movs	r2, #15
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	08d2      	lsrs	r2, r2, #3
 8002e04:	4019      	ands	r1, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3208      	adds	r2, #8
 8002e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2103      	movs	r1, #3
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	401a      	ands	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	401a      	ands	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	2103      	movs	r1, #3
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	401a      	ands	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e52:	2101      	movs	r1, #1
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3301      	adds	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f47f af2b 	bne.w	8002ccc <HAL_GPIO_DeInit+0x10>
  }
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40010000 	.word	0x40010000
 8002e88:	48000400 	.word	0x48000400
 8002e8c:	48000800 	.word	0x48000800
 8002e90:	48000c00 	.word	0x48000c00
 8002e94:	48001000 	.word	0x48001000
 8002e98:	48001400 	.word	0x48001400
 8002e9c:	48001800 	.word	0x48001800
 8002ea0:	40010400 	.word	0x40010400

08002ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eb4:	787b      	ldrb	r3, [r7, #1]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ec0:	e002      	b.n	8002ec8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40007000 	.word	0x40007000

08002ef4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <HAL_PWREx_GetVoltageRange+0x18>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40007000 	.word	0x40007000

08002f10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1e:	d130      	bne.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f20:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2c:	d038      	beq.n	8002fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f36:	4a1e      	ldr	r2, [pc, #120]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2232      	movs	r2, #50	; 0x32
 8002f44:	fb02 f303 	mul.w	r3, r2, r3
 8002f48:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0c9b      	lsrs	r3, r3, #18
 8002f50:	3301      	adds	r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f54:	e002      	b.n	8002f5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f5c:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f68:	d102      	bne.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f2      	bne.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7c:	d110      	bne.n	8002fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e00f      	b.n	8002fa2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8e:	d007      	beq.n	8002fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f90:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f98:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	431bde83 	.word	0x431bde83

08002fbc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7fe fbe0 	bl	8001788 <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e063      	b.n	800309c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10b      	bne.n	8002ff8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7fd fdfb 	bl	8000be4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002fee:	f241 3188 	movw	r1, #5000	; 0x1388
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 faf7 	bl	80035e6 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	3b01      	subs	r3, #1
 8003008:	021a      	lsls	r2, r3, #8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	2120      	movs	r1, #32
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 faef 	bl	8003602 <QSPI_WaitFlagStateUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003028:	7afb      	ldrb	r3, [r7, #11]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d131      	bne.n	8003092 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003038:	f023 0310 	bic.w	r3, r3, #16
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6852      	ldr	r2, [r2, #4]
 8003040:	0611      	lsls	r1, r2, #24
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68d2      	ldr	r2, [r2, #12]
 8003046:	4311      	orrs	r1, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	430b      	orrs	r3, r1
 800304e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <HAL_QSPI_Init+0xe8>)
 8003058:	4013      	ands	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6912      	ldr	r2, [r2, #16]
 800305e:	0411      	lsls	r1, r2, #16
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6952      	ldr	r2, [r2, #20]
 8003064:	4311      	orrs	r1, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6992      	ldr	r2, [r2, #24]
 800306a:	4311      	orrs	r1, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	430b      	orrs	r3, r1
 8003072:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800309a:	7afb      	ldrb	r3, [r7, #11]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	ffe0f8fe 	.word	0xffe0f8fe

080030a8 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e016      	b.n	80030e8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fd fdce 	bl	8000c6c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80030fc:	f7fe fb44 	bl	8001788 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_QSPI_Command+0x22>
 800310e:	2302      	movs	r3, #2
 8003110:	e048      	b.n	80031a4 <HAL_QSPI_Command+0xb4>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d137      	bne.n	8003196 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2200      	movs	r2, #0
 800313c:	2120      	movs	r1, #32
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fa5f 	bl	8003602 <QSPI_WaitFlagStateUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d125      	bne.n	800319a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800314e:	2200      	movs	r2, #0
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fa8c 	bl	8003670 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	2b00      	cmp	r3, #0
 800315e:	d115      	bne.n	800318c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2201      	movs	r2, #1
 8003168:	2102      	movs	r1, #2
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fa49 	bl	8003602 <QSPI_WaitFlagStateUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2202      	movs	r2, #2
 8003180:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800318a:	e006      	b.n	800319a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003194:	e001      	b.n	800319a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003196:	2302      	movs	r3, #2
 8003198:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	; 0x28
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80031bc:	f7fe fae4 	bl	8001788 <HAL_GetTick>
 80031c0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3320      	adds	r3, #32
 80031c8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_QSPI_Transmit+0x2e>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e07b      	b.n	80032d2 <HAL_QSPI_Transmit+0x126>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d16a      	bne.n	80032c4 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d05b      	beq.n	80032b2 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2212      	movs	r2, #18
 80031fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800322e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003230:	e01b      	b.n	800326a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2201      	movs	r2, #1
 800323a:	2104      	movs	r1, #4
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f9e0 	bl	8003602 <QSPI_WaitFlagStateUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003246:	7ffb      	ldrb	r3, [r7, #31]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d113      	bne.n	8003274 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	781a      	ldrb	r2, [r3, #0]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	1e5a      	subs	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1df      	bne.n	8003232 <HAL_QSPI_Transmit+0x86>
 8003272:	e000      	b.n	8003276 <HAL_QSPI_Transmit+0xca>
          break;
 8003274:	bf00      	nop
      }

      if (status == HAL_OK)
 8003276:	7ffb      	ldrb	r3, [r7, #31]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d115      	bne.n	80032a8 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2201      	movs	r2, #1
 8003284:	2102      	movs	r1, #2
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f9bb 	bl	8003602 <QSPI_WaitFlagStateUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003290:	7ffb      	ldrb	r3, [r7, #31]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d108      	bne.n	80032a8 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2202      	movs	r2, #2
 800329c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f934 	bl	800350c <HAL_QSPI_Abort>
 80032a4:	4603      	mov	r3, r0
 80032a6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80032b0:	e00a      	b.n	80032c8 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	f043 0208 	orr.w	r2, r3, #8
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	77fb      	strb	r3, [r7, #31]
 80032c2:	e001      	b.n	80032c8 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
 80032c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80032d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b08a      	sub	sp, #40	; 0x28
 80032de:	af02      	add	r7, sp, #8
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80032ea:	f7fe fa4d 	bl	8001788 <HAL_GetTick>
 80032ee:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3320      	adds	r3, #32
 80032fe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_QSPI_Receive+0x36>
 800330c:	2302      	movs	r3, #2
 800330e:	e082      	b.n	8003416 <HAL_QSPI_Receive+0x13c>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d171      	bne.n	8003408 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d062      	beq.n	80033f6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2222      	movs	r2, #34	; 0x22
 8003334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003368:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003372:	e01c      	b.n	80033ae <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2201      	movs	r2, #1
 800337c:	2106      	movs	r1, #6
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f93f 	bl	8003602 <QSPI_WaitFlagStateUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003388:	7ffb      	ldrb	r3, [r7, #31]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d114      	bne.n	80033b8 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	7812      	ldrb	r2, [r2, #0]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	1e5a      	subs	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1de      	bne.n	8003374 <HAL_QSPI_Receive+0x9a>
 80033b6:	e000      	b.n	80033ba <HAL_QSPI_Receive+0xe0>
          break;
 80033b8:	bf00      	nop
      }

      if (status == HAL_OK)
 80033ba:	7ffb      	ldrb	r3, [r7, #31]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d115      	bne.n	80033ec <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2201      	movs	r2, #1
 80033c8:	2102      	movs	r1, #2
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f919 	bl	8003602 <QSPI_WaitFlagStateUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80033d4:	7ffb      	ldrb	r3, [r7, #31]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d108      	bne.n	80033ec <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2202      	movs	r2, #2
 80033e0:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f892 	bl	800350c <HAL_QSPI_Abort>
 80033e8:	4603      	mov	r3, r0
 80033ea:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80033f4:	e00a      	b.n	800340c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fa:	f043 0208 	orr.w	r2, r3, #8
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	e001      	b.n	800340c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003408:	2302      	movs	r3, #2
 800340a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003414:	7ffb      	ldrb	r3, [r7, #31]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b088      	sub	sp, #32
 8003422:	af02      	add	r7, sp, #8
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800342c:	f7fe f9ac 	bl	8001788 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_QSPI_AutoPolling+0x24>
 800343e:	2302      	movs	r3, #2
 8003440:	e060      	b.n	8003504 <HAL_QSPI_AutoPolling+0xe6>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d14f      	bne.n	80034f6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2242      	movs	r2, #66	; 0x42
 8003460:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2200      	movs	r2, #0
 800346c:	2120      	movs	r1, #32
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f8c7 	bl	8003602 <QSPI_WaitFlagStateUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d13d      	bne.n	80034fa <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6852      	ldr	r2, [r2, #4]
 8003490:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6892      	ldr	r2, [r2, #8]
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80034b4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80034be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f8d3 	bl	8003670 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2201      	movs	r2, #1
 80034d2:	2108      	movs	r1, #8
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f894 	bl	8003602 <QSPI_WaitFlagStateUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80034de:	7dfb      	ldrb	r3, [r7, #23]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2208      	movs	r2, #8
 80034ea:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80034f4:	e001      	b.n	80034fa <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003502:	7dfb      	ldrb	r3, [r7, #23]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af02      	add	r7, sp, #8
 8003512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003518:	f7fe f936 	bl	8001788 <HAL_GetTick>
 800351c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d056      	beq.n	80035dc <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d017      	beq.n	8003574 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0204 	bic.w	r2, r2, #4
 8003552:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff f9c8 	bl	80028ee <HAL_DMA_Abort>
 800355e:	4603      	mov	r3, r0
 8003560:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	f043 0204 	orr.w	r2, r3, #4
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0202 	orr.w	r2, r2, #2
 8003582:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2201      	movs	r2, #1
 800358e:	2102      	movs	r1, #2
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f836 	bl	8003602 <QSPI_WaitFlagStateUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10e      	bne.n	80035be <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2202      	movs	r2, #2
 80035a6:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2200      	movs	r2, #0
 80035b2:	2120      	movs	r1, #32
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f824 	bl	8003602 <QSPI_WaitFlagStateUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10b      	bne.n	80035dc <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80035d2:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003612:	e01a      	b.n	800364a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800361a:	d016      	beq.n	800364a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361c:	f7fe f8b4 	bl	8001788 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	429a      	cmp	r2, r3
 800362a:	d302      	bcc.n	8003632 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2204      	movs	r2, #4
 8003636:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	f043 0201 	orr.w	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e00e      	b.n	8003668 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	461a      	mov	r2, r3
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	429a      	cmp	r2, r3
 8003664:	d1d6      	bne.n	8003614 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	2b00      	cmp	r3, #0
 8003682:	d009      	beq.n	8003698 <QSPI_Config+0x28>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800368a:	d005      	beq.n	8003698 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3a01      	subs	r2, #1
 8003696:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80b9 	beq.w	8003814 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d05f      	beq.n	800376a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	6892      	ldr	r2, [r2, #8]
 80036b2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d031      	beq.n	8003720 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	431a      	orrs	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ca:	431a      	orrs	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	431a      	orrs	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	049b      	lsls	r3, r3, #18
 80036d8:	431a      	orrs	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	431a      	orrs	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	ea42 0103 	orr.w	r1, r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	430a      	orrs	r2, r1
 8003708:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003710:	f000 812e 	beq.w	8003970 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	6852      	ldr	r2, [r2, #4]
 800371c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800371e:	e127      	b.n	8003970 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	431a      	orrs	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372e:	431a      	orrs	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	431a      	orrs	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	049b      	lsls	r3, r3, #18
 800373c:	431a      	orrs	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	431a      	orrs	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	431a      	orrs	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	431a      	orrs	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	431a      	orrs	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	ea42 0103 	orr.w	r1, r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	430a      	orrs	r2, r1
 8003766:	615a      	str	r2, [r3, #20]
}
 8003768:	e102      	b.n	8003970 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d02e      	beq.n	80037d0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	431a      	orrs	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003780:	431a      	orrs	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	431a      	orrs	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	049b      	lsls	r3, r3, #18
 800378e:	431a      	orrs	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	431a      	orrs	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	431a      	orrs	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	ea42 0103 	orr.w	r1, r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80037c0:	f000 80d6 	beq.w	8003970 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	6852      	ldr	r2, [r2, #4]
 80037cc:	619a      	str	r2, [r3, #24]
}
 80037ce:	e0cf      	b.n	8003970 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	431a      	orrs	r2, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037de:	431a      	orrs	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	431a      	orrs	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	049b      	lsls	r3, r3, #18
 80037ec:	431a      	orrs	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	431a      	orrs	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	ea42 0103 	orr.w	r1, r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	430a      	orrs	r2, r1
 8003810:	615a      	str	r2, [r3, #20]
}
 8003812:	e0ad      	b.n	8003970 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d058      	beq.n	80038ce <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	6892      	ldr	r2, [r2, #8]
 8003824:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d02d      	beq.n	800388a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	431a      	orrs	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383c:	431a      	orrs	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	431a      	orrs	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	049b      	lsls	r3, r3, #18
 800384a:	431a      	orrs	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	431a      	orrs	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	431a      	orrs	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	431a      	orrs	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	431a      	orrs	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	ea42 0103 	orr.w	r1, r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	430a      	orrs	r2, r1
 8003874:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800387c:	d078      	beq.n	8003970 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	6852      	ldr	r2, [r2, #4]
 8003886:	619a      	str	r2, [r3, #24]
}
 8003888:	e072      	b.n	8003970 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	431a      	orrs	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003898:	431a      	orrs	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	431a      	orrs	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	049b      	lsls	r3, r3, #18
 80038a6:	431a      	orrs	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	ea42 0103 	orr.w	r1, r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	615a      	str	r2, [r3, #20]
}
 80038cc:	e050      	b.n	8003970 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d02a      	beq.n	800392c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	431a      	orrs	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	431a      	orrs	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	431a      	orrs	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	049b      	lsls	r3, r3, #18
 80038f2:	431a      	orrs	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	431a      	orrs	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	431a      	orrs	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	ea42 0103 	orr.w	r1, r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	430a      	orrs	r2, r1
 8003916:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800391e:	d027      	beq.n	8003970 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	6852      	ldr	r2, [r2, #4]
 8003928:	619a      	str	r2, [r3, #24]
}
 800392a:	e021      	b.n	8003970 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01d      	beq.n	8003970 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	431a      	orrs	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	431a      	orrs	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	431a      	orrs	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	049b      	lsls	r3, r3, #18
 8003950:	431a      	orrs	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	431a      	orrs	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	431a      	orrs	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	ea42 0103 	orr.w	r1, r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	430a      	orrs	r2, r1
 800396e:	615a      	str	r2, [r3, #20]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e3d4      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398e:	4ba1      	ldr	r3, [pc, #644]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003998:	4b9e      	ldr	r3, [pc, #632]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80e4 	beq.w	8003b78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_RCC_OscConfig+0x4a>
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b0c      	cmp	r3, #12
 80039ba:	f040 808b 	bne.w	8003ad4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	f040 8087 	bne.w	8003ad4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039c6:	4b93      	ldr	r3, [pc, #588]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x62>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e3ac      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1a      	ldr	r2, [r3, #32]
 80039e2:	4b8c      	ldr	r3, [pc, #560]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d004      	beq.n	80039f8 <HAL_RCC_OscConfig+0x7c>
 80039ee:	4b89      	ldr	r3, [pc, #548]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f6:	e005      	b.n	8003a04 <HAL_RCC_OscConfig+0x88>
 80039f8:	4b86      	ldr	r3, [pc, #536]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 80039fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d223      	bcs.n	8003a50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fd3f 	bl	8004490 <RCC_SetFlashLatencyFromMSIRange>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e38d      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a1c:	4b7d      	ldr	r3, [pc, #500]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a7c      	ldr	r2, [pc, #496]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003a22:	f043 0308 	orr.w	r3, r3, #8
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	4b7a      	ldr	r3, [pc, #488]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	4977      	ldr	r1, [pc, #476]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a3a:	4b76      	ldr	r3, [pc, #472]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	4972      	ldr	r1, [pc, #456]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
 8003a4e:	e025      	b.n	8003a9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a50:	4b70      	ldr	r3, [pc, #448]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a6f      	ldr	r2, [pc, #444]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003a56:	f043 0308 	orr.w	r3, r3, #8
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b6d      	ldr	r3, [pc, #436]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	496a      	ldr	r1, [pc, #424]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a6e:	4b69      	ldr	r3, [pc, #420]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	4965      	ldr	r1, [pc, #404]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fcff 	bl	8004490 <RCC_SetFlashLatencyFromMSIRange>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e34d      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a9c:	f000 fc36 	bl	800430c <HAL_RCC_GetSysClockFreq>
 8003aa0:	4601      	mov	r1, r0
 8003aa2:	4b5c      	ldr	r3, [pc, #368]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	4a5a      	ldr	r2, [pc, #360]	; (8003c18 <HAL_RCC_OscConfig+0x29c>)
 8003aae:	5cd3      	ldrb	r3, [r2, r3]
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	fa21 f303 	lsr.w	r3, r1, r3
 8003ab8:	4a58      	ldr	r2, [pc, #352]	; (8003c1c <HAL_RCC_OscConfig+0x2a0>)
 8003aba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003abc:	4b58      	ldr	r3, [pc, #352]	; (8003c20 <HAL_RCC_OscConfig+0x2a4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fd fe11 	bl	80016e8 <HAL_InitTick>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d052      	beq.n	8003b76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	e331      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d032      	beq.n	8003b42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003adc:	4b4d      	ldr	r3, [pc, #308]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a4c      	ldr	r2, [pc, #304]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fe4e 	bl	8001788 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003af0:	f7fd fe4a 	bl	8001788 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e31a      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b02:	4b44      	ldr	r3, [pc, #272]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b0e:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a40      	ldr	r2, [pc, #256]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003b14:	f043 0308 	orr.w	r3, r3, #8
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	4b3e      	ldr	r3, [pc, #248]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	493b      	ldr	r1, [pc, #236]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b2c:	4b39      	ldr	r3, [pc, #228]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	4936      	ldr	r1, [pc, #216]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]
 8003b40:	e01a      	b.n	8003b78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b42:	4b34      	ldr	r3, [pc, #208]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a33      	ldr	r2, [pc, #204]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b4e:	f7fd fe1b 	bl	8001788 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b56:	f7fd fe17 	bl	8001788 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e2e7      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b68:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f0      	bne.n	8003b56 <HAL_RCC_OscConfig+0x1da>
 8003b74:	e000      	b.n	8003b78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d074      	beq.n	8003c6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d005      	beq.n	8003b96 <HAL_RCC_OscConfig+0x21a>
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	2b0c      	cmp	r3, #12
 8003b8e:	d10e      	bne.n	8003bae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d10b      	bne.n	8003bae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b96:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d064      	beq.n	8003c6c <HAL_RCC_OscConfig+0x2f0>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d160      	bne.n	8003c6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e2c4      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x24a>
 8003bb8:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	e01d      	b.n	8003c02 <HAL_RCC_OscConfig+0x286>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bce:	d10c      	bne.n	8003bea <HAL_RCC_OscConfig+0x26e>
 8003bd0:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a0f      	ldr	r2, [pc, #60]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003bd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0c      	ldr	r2, [pc, #48]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e00b      	b.n	8003c02 <HAL_RCC_OscConfig+0x286>
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a06      	ldr	r2, [pc, #24]	; (8003c14 <HAL_RCC_OscConfig+0x298>)
 8003bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d01c      	beq.n	8003c44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0a:	f7fd fdbd 	bl	8001788 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c10:	e011      	b.n	8003c36 <HAL_RCC_OscConfig+0x2ba>
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	080061d8 	.word	0x080061d8
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c24:	f7fd fdb0 	bl	8001788 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	; 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e280      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c36:	4baf      	ldr	r3, [pc, #700]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0x2a8>
 8003c42:	e014      	b.n	8003c6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fd fda0 	bl	8001788 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c4c:	f7fd fd9c 	bl	8001788 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	; 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e26c      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c5e:	4ba5      	ldr	r3, [pc, #660]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x2d0>
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d060      	beq.n	8003d3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_OscConfig+0x310>
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	2b0c      	cmp	r3, #12
 8003c84:	d119      	bne.n	8003cba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d116      	bne.n	8003cba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c8c:	4b99      	ldr	r3, [pc, #612]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x328>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e249      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca4:	4b93      	ldr	r3, [pc, #588]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	061b      	lsls	r3, r3, #24
 8003cb2:	4990      	ldr	r1, [pc, #576]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb8:	e040      	b.n	8003d3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d023      	beq.n	8003d0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cc2:	4b8c      	ldr	r3, [pc, #560]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a8b      	ldr	r2, [pc, #556]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cce:	f7fd fd5b 	bl	8001788 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd6:	f7fd fd57 	bl	8001788 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e227      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce8:	4b82      	ldr	r3, [pc, #520]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf4:	4b7f      	ldr	r3, [pc, #508]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	497c      	ldr	r1, [pc, #496]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
 8003d08:	e018      	b.n	8003d3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d0a:	4b7a      	ldr	r3, [pc, #488]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a79      	ldr	r2, [pc, #484]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7fd fd37 	bl	8001788 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d1e:	f7fd fd33 	bl	8001788 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e203      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d30:	4b70      	ldr	r3, [pc, #448]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f0      	bne.n	8003d1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d03c      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01c      	beq.n	8003d8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d50:	4b68      	ldr	r3, [pc, #416]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d56:	4a67      	ldr	r2, [pc, #412]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d60:	f7fd fd12 	bl	8001788 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d68:	f7fd fd0e 	bl	8001788 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e1de      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d7a:	4b5e      	ldr	r3, [pc, #376]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0ef      	beq.n	8003d68 <HAL_RCC_OscConfig+0x3ec>
 8003d88:	e01b      	b.n	8003dc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d8a:	4b5a      	ldr	r3, [pc, #360]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d90:	4a58      	ldr	r2, [pc, #352]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9a:	f7fd fcf5 	bl	8001788 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da2:	f7fd fcf1 	bl	8001788 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e1c1      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003db4:	4b4f      	ldr	r3, [pc, #316]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1ef      	bne.n	8003da2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80a6 	beq.w	8003f1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003dd4:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10d      	bne.n	8003dfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de0:	4b44      	ldr	r3, [pc, #272]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	4a43      	ldr	r2, [pc, #268]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dea:	6593      	str	r3, [r2, #88]	; 0x58
 8003dec:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dfc:	4b3e      	ldr	r3, [pc, #248]	; (8003ef8 <HAL_RCC_OscConfig+0x57c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d118      	bne.n	8003e3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e08:	4b3b      	ldr	r3, [pc, #236]	; (8003ef8 <HAL_RCC_OscConfig+0x57c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a3a      	ldr	r2, [pc, #232]	; (8003ef8 <HAL_RCC_OscConfig+0x57c>)
 8003e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e14:	f7fd fcb8 	bl	8001788 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1c:	f7fd fcb4 	bl	8001788 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e184      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e2e:	4b32      	ldr	r3, [pc, #200]	; (8003ef8 <HAL_RCC_OscConfig+0x57c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d108      	bne.n	8003e54 <HAL_RCC_OscConfig+0x4d8>
 8003e42:	4b2c      	ldr	r3, [pc, #176]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	4a2a      	ldr	r2, [pc, #168]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e52:	e024      	b.n	8003e9e <HAL_RCC_OscConfig+0x522>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b05      	cmp	r3, #5
 8003e5a:	d110      	bne.n	8003e7e <HAL_RCC_OscConfig+0x502>
 8003e5c:	4b25      	ldr	r3, [pc, #148]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e62:	4a24      	ldr	r2, [pc, #144]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e6c:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e7c:	e00f      	b.n	8003e9e <HAL_RCC_OscConfig+0x522>
 8003e7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e84:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003e86:	f023 0301 	bic.w	r3, r3, #1
 8003e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e8e:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e94:	4a17      	ldr	r2, [pc, #92]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003e96:	f023 0304 	bic.w	r3, r3, #4
 8003e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fd fc6f 	bl	8001788 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fd fc6b 	bl	8001788 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e139      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_OscConfig+0x578>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0ed      	beq.n	8003eae <HAL_RCC_OscConfig+0x532>
 8003ed2:	e01a      	b.n	8003f0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed4:	f7fd fc58 	bl	8001788 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eda:	e00f      	b.n	8003efc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003edc:	f7fd fc54 	bl	8001788 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d906      	bls.n	8003efc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e122      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003efc:	4b90      	ldr	r3, [pc, #576]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e8      	bne.n	8003edc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f0a:	7ffb      	ldrb	r3, [r7, #31]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d105      	bne.n	8003f1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f10:	4b8b      	ldr	r3, [pc, #556]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8003f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f14:	4a8a      	ldr	r2, [pc, #552]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8003f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8108 	beq.w	8004136 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	f040 80d0 	bne.w	80040d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f30:	4b83      	ldr	r3, [pc, #524]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0203 	and.w	r2, r3, #3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d130      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d127      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d11f      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f70:	2a07      	cmp	r2, #7
 8003f72:	bf14      	ite	ne
 8003f74:	2201      	movne	r2, #1
 8003f76:	2200      	moveq	r2, #0
 8003f78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d113      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d109      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d06e      	beq.n	8004084 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b0c      	cmp	r3, #12
 8003faa:	d069      	beq.n	8004080 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fac:	4b64      	ldr	r3, [pc, #400]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d105      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fb8:	4b61      	ldr	r3, [pc, #388]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0b7      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fc8:	4b5d      	ldr	r3, [pc, #372]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a5c      	ldr	r2, [pc, #368]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8003fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fd4:	f7fd fbd8 	bl	8001788 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fd fbd4 	bl	8001788 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e0a4      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fee:	4b54      	ldr	r3, [pc, #336]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ffa:	4b51      	ldr	r3, [pc, #324]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	4b51      	ldr	r3, [pc, #324]	; (8004144 <HAL_RCC_OscConfig+0x7c8>)
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800400a:	3a01      	subs	r2, #1
 800400c:	0112      	lsls	r2, r2, #4
 800400e:	4311      	orrs	r1, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004014:	0212      	lsls	r2, r2, #8
 8004016:	4311      	orrs	r1, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800401c:	0852      	lsrs	r2, r2, #1
 800401e:	3a01      	subs	r2, #1
 8004020:	0552      	lsls	r2, r2, #21
 8004022:	4311      	orrs	r1, r2
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004028:	0852      	lsrs	r2, r2, #1
 800402a:	3a01      	subs	r2, #1
 800402c:	0652      	lsls	r2, r2, #25
 800402e:	4311      	orrs	r1, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004034:	0912      	lsrs	r2, r2, #4
 8004036:	0452      	lsls	r2, r2, #17
 8004038:	430a      	orrs	r2, r1
 800403a:	4941      	ldr	r1, [pc, #260]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 800403c:	4313      	orrs	r3, r2
 800403e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004040:	4b3f      	ldr	r3, [pc, #252]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a3e      	ldr	r2, [pc, #248]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8004046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800404a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800404c:	4b3c      	ldr	r3, [pc, #240]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4a3b      	ldr	r2, [pc, #236]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8004052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004058:	f7fd fb96 	bl	8001788 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004060:	f7fd fb92 	bl	8001788 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e062      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004072:	4b33      	ldr	r3, [pc, #204]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800407e:	e05a      	b.n	8004136 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e059      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004084:	4b2e      	ldr	r3, [pc, #184]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d152      	bne.n	8004136 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004090:	4b2b      	ldr	r3, [pc, #172]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2a      	ldr	r2, [pc, #168]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8004096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800409a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800409c:	4b28      	ldr	r3, [pc, #160]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4a27      	ldr	r2, [pc, #156]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 80040a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040a8:	f7fd fb6e 	bl	8001788 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fd fb6a 	bl	8001788 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e03a      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c2:	4b1f      	ldr	r3, [pc, #124]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x734>
 80040ce:	e032      	b.n	8004136 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	2b0c      	cmp	r3, #12
 80040d4:	d02d      	beq.n	8004132 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a19      	ldr	r2, [pc, #100]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 80040dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040e0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80040e2:	4b17      	ldr	r3, [pc, #92]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d105      	bne.n	80040fa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80040ee:	4b14      	ldr	r3, [pc, #80]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	4a13      	ldr	r2, [pc, #76]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 80040f4:	f023 0303 	bic.w	r3, r3, #3
 80040f8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040fa:	4b11      	ldr	r3, [pc, #68]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	4a10      	ldr	r2, [pc, #64]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8004100:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004108:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7fd fb3d 	bl	8001788 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004112:	f7fd fb39 	bl	8001788 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e009      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_RCC_OscConfig+0x7c4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1f0      	bne.n	8004112 <HAL_RCC_OscConfig+0x796>
 8004130:	e001      	b.n	8004136 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000
 8004144:	f99d808c 	.word	0xf99d808c

08004148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0c8      	b.n	80042ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800415c:	4b66      	ldr	r3, [pc, #408]	; (80042f8 <HAL_RCC_ClockConfig+0x1b0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d910      	bls.n	800418c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416a:	4b63      	ldr	r3, [pc, #396]	; (80042f8 <HAL_RCC_ClockConfig+0x1b0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f023 0207 	bic.w	r2, r3, #7
 8004172:	4961      	ldr	r1, [pc, #388]	; (80042f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800417a:	4b5f      	ldr	r3, [pc, #380]	; (80042f8 <HAL_RCC_ClockConfig+0x1b0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d001      	beq.n	800418c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0b0      	b.n	80042ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d04c      	beq.n	8004232 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b03      	cmp	r3, #3
 800419e:	d107      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a0:	4b56      	ldr	r3, [pc, #344]	; (80042fc <HAL_RCC_ClockConfig+0x1b4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d121      	bne.n	80041f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e09e      	b.n	80042ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b8:	4b50      	ldr	r3, [pc, #320]	; (80042fc <HAL_RCC_ClockConfig+0x1b4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d115      	bne.n	80041f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e092      	b.n	80042ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041d0:	4b4a      	ldr	r3, [pc, #296]	; (80042fc <HAL_RCC_ClockConfig+0x1b4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e086      	b.n	80042ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e0:	4b46      	ldr	r3, [pc, #280]	; (80042fc <HAL_RCC_ClockConfig+0x1b4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e07e      	b.n	80042ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041f0:	4b42      	ldr	r3, [pc, #264]	; (80042fc <HAL_RCC_ClockConfig+0x1b4>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f023 0203 	bic.w	r2, r3, #3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	493f      	ldr	r1, [pc, #252]	; (80042fc <HAL_RCC_ClockConfig+0x1b4>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004202:	f7fd fac1 	bl	8001788 <HAL_GetTick>
 8004206:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004208:	e00a      	b.n	8004220 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420a:	f7fd fabd 	bl	8001788 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	; 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e066      	b.n	80042ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004220:	4b36      	ldr	r3, [pc, #216]	; (80042fc <HAL_RCC_ClockConfig+0x1b4>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 020c 	and.w	r2, r3, #12
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	429a      	cmp	r2, r3
 8004230:	d1eb      	bne.n	800420a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423e:	4b2f      	ldr	r3, [pc, #188]	; (80042fc <HAL_RCC_ClockConfig+0x1b4>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	492c      	ldr	r1, [pc, #176]	; (80042fc <HAL_RCC_ClockConfig+0x1b4>)
 800424c:	4313      	orrs	r3, r2
 800424e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004250:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d210      	bcs.n	8004280 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 0207 	bic.w	r2, r3, #7
 8004266:	4924      	ldr	r1, [pc, #144]	; (80042f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426e:	4b22      	ldr	r3, [pc, #136]	; (80042f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e036      	b.n	80042ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800428c:	4b1b      	ldr	r3, [pc, #108]	; (80042fc <HAL_RCC_ClockConfig+0x1b4>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4918      	ldr	r1, [pc, #96]	; (80042fc <HAL_RCC_ClockConfig+0x1b4>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042aa:	4b14      	ldr	r3, [pc, #80]	; (80042fc <HAL_RCC_ClockConfig+0x1b4>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4910      	ldr	r1, [pc, #64]	; (80042fc <HAL_RCC_ClockConfig+0x1b4>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042be:	f000 f825 	bl	800430c <HAL_RCC_GetSysClockFreq>
 80042c2:	4601      	mov	r1, r0
 80042c4:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <HAL_RCC_ClockConfig+0x1b4>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	4a0c      	ldr	r2, [pc, #48]	; (8004300 <HAL_RCC_ClockConfig+0x1b8>)
 80042d0:	5cd3      	ldrb	r3, [r2, r3]
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	fa21 f303 	lsr.w	r3, r1, r3
 80042da:	4a0a      	ldr	r2, [pc, #40]	; (8004304 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_RCC_ClockConfig+0x1c0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fd fa00 	bl	80016e8 <HAL_InitTick>
 80042e8:	4603      	mov	r3, r0
 80042ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80042ec:	7afb      	ldrb	r3, [r7, #11]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40022000 	.word	0x40022000
 80042fc:	40021000 	.word	0x40021000
 8004300:	080061d8 	.word	0x080061d8
 8004304:	20000000 	.word	0x20000000
 8004308:	20000004 	.word	0x20000004

0800430c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	b089      	sub	sp, #36	; 0x24
 8004310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	2300      	movs	r3, #0
 8004318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800431a:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <HAL_RCC_GetSysClockFreq+0x104>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004324:	4b3a      	ldr	r3, [pc, #232]	; (8004410 <HAL_RCC_GetSysClockFreq+0x104>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0x34>
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	2b0c      	cmp	r3, #12
 8004338:	d121      	bne.n	800437e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d11e      	bne.n	800437e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004340:	4b33      	ldr	r3, [pc, #204]	; (8004410 <HAL_RCC_GetSysClockFreq+0x104>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d107      	bne.n	800435c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800434c:	4b30      	ldr	r3, [pc, #192]	; (8004410 <HAL_RCC_GetSysClockFreq+0x104>)
 800434e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004352:	0a1b      	lsrs	r3, r3, #8
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	e005      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800435c:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <HAL_RCC_GetSysClockFreq+0x104>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004368:	4a2a      	ldr	r2, [pc, #168]	; (8004414 <HAL_RCC_GetSysClockFreq+0x108>)
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10d      	bne.n	8004394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800437c:	e00a      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b04      	cmp	r3, #4
 8004382:	d102      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004384:	4b24      	ldr	r3, [pc, #144]	; (8004418 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004386:	61bb      	str	r3, [r7, #24]
 8004388:	e004      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d101      	bne.n	8004394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004390:	4b22      	ldr	r3, [pc, #136]	; (800441c <HAL_RCC_GetSysClockFreq+0x110>)
 8004392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b0c      	cmp	r3, #12
 8004398:	d133      	bne.n	8004402 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800439a:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <HAL_RCC_GetSysClockFreq+0x104>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d002      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0xa4>
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d003      	beq.n	80043b6 <HAL_RCC_GetSysClockFreq+0xaa>
 80043ae:	e005      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043b0:	4b19      	ldr	r3, [pc, #100]	; (8004418 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043b2:	617b      	str	r3, [r7, #20]
      break;
 80043b4:	e005      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043b6:	4b19      	ldr	r3, [pc, #100]	; (800441c <HAL_RCC_GetSysClockFreq+0x110>)
 80043b8:	617b      	str	r3, [r7, #20]
      break;
 80043ba:	e002      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	617b      	str	r3, [r7, #20]
      break;
 80043c0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043c2:	4b13      	ldr	r3, [pc, #76]	; (8004410 <HAL_RCC_GetSysClockFreq+0x104>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	091b      	lsrs	r3, r3, #4
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	3301      	adds	r3, #1
 80043ce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043d0:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <HAL_RCC_GetSysClockFreq+0x104>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	0a1b      	lsrs	r3, r3, #8
 80043d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	fb02 f203 	mul.w	r2, r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043e8:	4b09      	ldr	r3, [pc, #36]	; (8004410 <HAL_RCC_GetSysClockFreq+0x104>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	0e5b      	lsrs	r3, r3, #25
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	3301      	adds	r3, #1
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004402:	69bb      	ldr	r3, [r7, #24]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3724      	adds	r7, #36	; 0x24
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40021000 	.word	0x40021000
 8004414:	080061f0 	.word	0x080061f0
 8004418:	00f42400 	.word	0x00f42400
 800441c:	007a1200 	.word	0x007a1200

08004420 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_RCC_GetHCLKFreq+0x14>)
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20000000 	.word	0x20000000

08004438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800443c:	f7ff fff0 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004440:	4601      	mov	r1, r0
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	4a04      	ldr	r2, [pc, #16]	; (8004460 <HAL_RCC_GetPCLK1Freq+0x28>)
 800444e:	5cd3      	ldrb	r3, [r2, r3]
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	080061e8 	.word	0x080061e8

08004464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004468:	f7ff ffda 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 800446c:	4601      	mov	r1, r0
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	0adb      	lsrs	r3, r3, #11
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4a04      	ldr	r2, [pc, #16]	; (800448c <HAL_RCC_GetPCLK2Freq+0x28>)
 800447a:	5cd3      	ldrb	r3, [r2, r3]
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004484:	4618      	mov	r0, r3
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	080061e8 	.word	0x080061e8

08004490 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800449c:	4b2a      	ldr	r3, [pc, #168]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044a8:	f7fe fd24 	bl	8002ef4 <HAL_PWREx_GetVoltageRange>
 80044ac:	6178      	str	r0, [r7, #20]
 80044ae:	e014      	b.n	80044da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044b0:	4b25      	ldr	r3, [pc, #148]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	4a24      	ldr	r2, [pc, #144]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ba:	6593      	str	r3, [r2, #88]	; 0x58
 80044bc:	4b22      	ldr	r3, [pc, #136]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044c8:	f7fe fd14 	bl	8002ef4 <HAL_PWREx_GetVoltageRange>
 80044cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044ce:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e0:	d10b      	bne.n	80044fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b80      	cmp	r3, #128	; 0x80
 80044e6:	d919      	bls.n	800451c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2ba0      	cmp	r3, #160	; 0xa0
 80044ec:	d902      	bls.n	80044f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ee:	2302      	movs	r3, #2
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	e013      	b.n	800451c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044f4:	2301      	movs	r3, #1
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	e010      	b.n	800451c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b80      	cmp	r3, #128	; 0x80
 80044fe:	d902      	bls.n	8004506 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004500:	2303      	movs	r3, #3
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	e00a      	b.n	800451c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b80      	cmp	r3, #128	; 0x80
 800450a:	d102      	bne.n	8004512 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800450c:	2302      	movs	r3, #2
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	e004      	b.n	800451c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b70      	cmp	r3, #112	; 0x70
 8004516:	d101      	bne.n	800451c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004518:	2301      	movs	r3, #1
 800451a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f023 0207 	bic.w	r2, r3, #7
 8004524:	4909      	ldr	r1, [pc, #36]	; (800454c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800452c:	4b07      	ldr	r3, [pc, #28]	; (800454c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	429a      	cmp	r2, r3
 8004538:	d001      	beq.n	800453e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40021000 	.word	0x40021000
 800454c:	40022000 	.word	0x40022000

08004550 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004558:	2300      	movs	r3, #0
 800455a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800455c:	2300      	movs	r3, #0
 800455e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004568:	2b00      	cmp	r3, #0
 800456a:	d03f      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004574:	d01c      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800457a:	d802      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00e      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004580:	e01f      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004582:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004586:	d003      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004588:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800458c:	d01c      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800458e:	e018      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004590:	4b85      	ldr	r3, [pc, #532]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a84      	ldr	r2, [pc, #528]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800459c:	e015      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2100      	movs	r1, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fab9 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045ae:	e00c      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3320      	adds	r3, #32
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fba0 	bl	8004cfc <RCCEx_PLLSAI2_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045c0:	e003      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	74fb      	strb	r3, [r7, #19]
      break;
 80045c6:	e000      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80045c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ca:	7cfb      	ldrb	r3, [r7, #19]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045d0:	4b75      	ldr	r3, [pc, #468]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045de:	4972      	ldr	r1, [pc, #456]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045e6:	e001      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e8:	7cfb      	ldrb	r3, [r7, #19]
 80045ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d03f      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004600:	d01c      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004602:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004606:	d802      	bhi.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00e      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800460c:	e01f      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800460e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004612:	d003      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004614:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004618:	d01c      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800461a:	e018      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800461c:	4b62      	ldr	r3, [pc, #392]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4a61      	ldr	r2, [pc, #388]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004626:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004628:	e015      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fa73 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800463a:	e00c      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3320      	adds	r3, #32
 8004640:	2100      	movs	r1, #0
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fb5a 	bl	8004cfc <RCCEx_PLLSAI2_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800464c:	e003      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	74fb      	strb	r3, [r7, #19]
      break;
 8004652:	e000      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004656:	7cfb      	ldrb	r3, [r7, #19]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10b      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800465c:	4b52      	ldr	r3, [pc, #328]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800466a:	494f      	ldr	r1, [pc, #316]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004672:	e001      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80a0 	beq.w	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004686:	2300      	movs	r3, #0
 8004688:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800468a:	4b47      	ldr	r3, [pc, #284]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800469a:	2300      	movs	r3, #0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a0:	4b41      	ldr	r3, [pc, #260]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	4a40      	ldr	r2, [pc, #256]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046aa:	6593      	str	r3, [r2, #88]	; 0x58
 80046ac:	4b3e      	ldr	r3, [pc, #248]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b8:	2301      	movs	r3, #1
 80046ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046bc:	4b3b      	ldr	r3, [pc, #236]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a3a      	ldr	r2, [pc, #232]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046c8:	f7fd f85e 	bl	8001788 <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046ce:	e009      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d0:	f7fd f85a 	bl	8001788 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d902      	bls.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	74fb      	strb	r3, [r7, #19]
        break;
 80046e2:	e005      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046e4:	4b31      	ldr	r3, [pc, #196]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0ef      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d15c      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046f6:	4b2c      	ldr	r3, [pc, #176]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004700:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01f      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	429a      	cmp	r2, r3
 8004712:	d019      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004714:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004720:	4b21      	ldr	r3, [pc, #132]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	4a20      	ldr	r2, [pc, #128]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004730:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004736:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004740:	4a19      	ldr	r2, [pc, #100]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d016      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004752:	f7fd f819 	bl	8001788 <HAL_GetTick>
 8004756:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004758:	e00b      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800475a:	f7fd f815 	bl	8001788 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	f241 3288 	movw	r2, #5000	; 0x1388
 8004768:	4293      	cmp	r3, r2
 800476a:	d902      	bls.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	74fb      	strb	r3, [r7, #19]
            break;
 8004770:	e006      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004772:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0ec      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10c      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004786:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004796:	4904      	ldr	r1, [pc, #16]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800479e:	e009      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047a0:	7cfb      	ldrb	r3, [r7, #19]
 80047a2:	74bb      	strb	r3, [r7, #18]
 80047a4:	e006      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80047a6:	bf00      	nop
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047b4:	7c7b      	ldrb	r3, [r7, #17]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d105      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ba:	4b9e      	ldr	r3, [pc, #632]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047be:	4a9d      	ldr	r2, [pc, #628]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047d2:	4b98      	ldr	r3, [pc, #608]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d8:	f023 0203 	bic.w	r2, r3, #3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	4994      	ldr	r1, [pc, #592]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047f4:	4b8f      	ldr	r3, [pc, #572]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	f023 020c 	bic.w	r2, r3, #12
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004802:	498c      	ldr	r1, [pc, #560]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004816:	4b87      	ldr	r3, [pc, #540]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	4983      	ldr	r1, [pc, #524]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004838:	4b7e      	ldr	r3, [pc, #504]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	497b      	ldr	r1, [pc, #492]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800485a:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004868:	4972      	ldr	r1, [pc, #456]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800487c:	4b6d      	ldr	r3, [pc, #436]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488a:	496a      	ldr	r1, [pc, #424]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800489e:	4b65      	ldr	r3, [pc, #404]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ac:	4961      	ldr	r1, [pc, #388]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048c0:	4b5c      	ldr	r3, [pc, #368]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ce:	4959      	ldr	r1, [pc, #356]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048e2:	4b54      	ldr	r3, [pc, #336]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f0:	4950      	ldr	r1, [pc, #320]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004904:	4b4b      	ldr	r3, [pc, #300]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004912:	4948      	ldr	r1, [pc, #288]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004926:	4b43      	ldr	r3, [pc, #268]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004934:	493f      	ldr	r1, [pc, #252]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d028      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004948:	4b3a      	ldr	r3, [pc, #232]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004956:	4937      	ldr	r1, [pc, #220]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004966:	d106      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004968:	4b32      	ldr	r3, [pc, #200]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4a31      	ldr	r2, [pc, #196]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800496e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004972:	60d3      	str	r3, [r2, #12]
 8004974:	e011      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800497a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800497e:	d10c      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3304      	adds	r3, #4
 8004984:	2101      	movs	r1, #1
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f8c8 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004990:	7cfb      	ldrb	r3, [r7, #19]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004996:	7cfb      	ldrb	r3, [r7, #19]
 8004998:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d028      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049a6:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	491f      	ldr	r1, [pc, #124]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049c4:	d106      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c6:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	4a1a      	ldr	r2, [pc, #104]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049d0:	60d3      	str	r3, [r2, #12]
 80049d2:	e011      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3304      	adds	r3, #4
 80049e2:	2101      	movs	r1, #1
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 f899 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049ee:	7cfb      	ldrb	r3, [r7, #19]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
 80049f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d02b      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a12:	4908      	ldr	r1, [pc, #32]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a22:	d109      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a24:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a02      	ldr	r2, [pc, #8]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a2e:	60d3      	str	r3, [r2, #12]
 8004a30:	e014      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004a32:	bf00      	nop
 8004a34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3304      	adds	r3, #4
 8004a46:	2101      	movs	r1, #1
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 f867 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004a58:	7cfb      	ldrb	r3, [r7, #19]
 8004a5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d02f      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a68:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a76:	4928      	ldr	r1, [pc, #160]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a86:	d10d      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f844 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a98:	7cfb      	ldrb	r3, [r7, #19]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d014      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004a9e:	7cfb      	ldrb	r3, [r7, #19]
 8004aa0:	74bb      	strb	r3, [r7, #18]
 8004aa2:	e011      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aac:	d10c      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3320      	adds	r3, #32
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 f921 	bl	8004cfc <RCCEx_PLLSAI2_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004abe:	7cfb      	ldrb	r3, [r7, #19]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004ac4:	7cfb      	ldrb	r3, [r7, #19]
 8004ac6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ad4:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae2:	490d      	ldr	r1, [pc, #52]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004af6:	4b08      	ldr	r3, [pc, #32]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b06:	4904      	ldr	r1, [pc, #16]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40021000 	.word	0x40021000

08004b1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b2a:	4b73      	ldr	r3, [pc, #460]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d018      	beq.n	8004b68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b36:	4b70      	ldr	r3, [pc, #448]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0203 	and.w	r2, r3, #3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d10d      	bne.n	8004b62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
       ||
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b4e:	4b6a      	ldr	r3, [pc, #424]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	091b      	lsrs	r3, r3, #4
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
       ||
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d044      	beq.n	8004bec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
 8004b66:	e041      	b.n	8004bec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d00c      	beq.n	8004b8a <RCCEx_PLLSAI1_Config+0x6e>
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d013      	beq.n	8004b9c <RCCEx_PLLSAI1_Config+0x80>
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d120      	bne.n	8004bba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b78:	4b5f      	ldr	r3, [pc, #380]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d11d      	bne.n	8004bc0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b88:	e01a      	b.n	8004bc0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b8a:	4b5b      	ldr	r3, [pc, #364]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d116      	bne.n	8004bc4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b9a:	e013      	b.n	8004bc4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b9c:	4b56      	ldr	r3, [pc, #344]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10f      	bne.n	8004bc8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ba8:	4b53      	ldr	r3, [pc, #332]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d109      	bne.n	8004bc8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bb8:	e006      	b.n	8004bc8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8004bbe:	e004      	b.n	8004bca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004bc0:	bf00      	nop
 8004bc2:	e002      	b.n	8004bca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004bc4:	bf00      	nop
 8004bc6:	e000      	b.n	8004bca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004bc8:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10d      	bne.n	8004bec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bd0:	4b49      	ldr	r3, [pc, #292]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6819      	ldr	r1, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	430b      	orrs	r3, r1
 8004be6:	4944      	ldr	r1, [pc, #272]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d17d      	bne.n	8004cee <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bf2:	4b41      	ldr	r3, [pc, #260]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a40      	ldr	r2, [pc, #256]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bf8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfe:	f7fc fdc3 	bl	8001788 <HAL_GetTick>
 8004c02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c04:	e009      	b.n	8004c1a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c06:	f7fc fdbf 	bl	8001788 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d902      	bls.n	8004c1a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	73fb      	strb	r3, [r7, #15]
        break;
 8004c18:	e005      	b.n	8004c26 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c1a:	4b37      	ldr	r3, [pc, #220]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1ef      	bne.n	8004c06 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d160      	bne.n	8004cee <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d111      	bne.n	8004c56 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c32:	4b31      	ldr	r3, [pc, #196]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6892      	ldr	r2, [r2, #8]
 8004c42:	0211      	lsls	r1, r2, #8
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	68d2      	ldr	r2, [r2, #12]
 8004c48:	0912      	lsrs	r2, r2, #4
 8004c4a:	0452      	lsls	r2, r2, #17
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	492a      	ldr	r1, [pc, #168]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	610b      	str	r3, [r1, #16]
 8004c54:	e027      	b.n	8004ca6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d112      	bne.n	8004c82 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c5c:	4b26      	ldr	r3, [pc, #152]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6892      	ldr	r2, [r2, #8]
 8004c6c:	0211      	lsls	r1, r2, #8
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6912      	ldr	r2, [r2, #16]
 8004c72:	0852      	lsrs	r2, r2, #1
 8004c74:	3a01      	subs	r2, #1
 8004c76:	0552      	lsls	r2, r2, #21
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	491f      	ldr	r1, [pc, #124]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	610b      	str	r3, [r1, #16]
 8004c80:	e011      	b.n	8004ca6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c82:	4b1d      	ldr	r3, [pc, #116]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6892      	ldr	r2, [r2, #8]
 8004c92:	0211      	lsls	r1, r2, #8
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6952      	ldr	r2, [r2, #20]
 8004c98:	0852      	lsrs	r2, r2, #1
 8004c9a:	3a01      	subs	r2, #1
 8004c9c:	0652      	lsls	r2, r2, #25
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	4915      	ldr	r1, [pc, #84]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ca6:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a13      	ldr	r2, [pc, #76]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cb0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb2:	f7fc fd69 	bl	8001788 <HAL_GetTick>
 8004cb6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cb8:	e009      	b.n	8004cce <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cba:	f7fc fd65 	bl	8001788 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d902      	bls.n	8004cce <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	73fb      	strb	r3, [r7, #15]
          break;
 8004ccc:	e005      	b.n	8004cda <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cce:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0ef      	beq.n	8004cba <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d106      	bne.n	8004cee <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	4903      	ldr	r1, [pc, #12]	; (8004cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40021000 	.word	0x40021000

08004cfc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d0a:	4b68      	ldr	r3, [pc, #416]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d018      	beq.n	8004d48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d16:	4b65      	ldr	r3, [pc, #404]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f003 0203 	and.w	r2, r3, #3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d10d      	bne.n	8004d42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
       ||
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d2e:	4b5f      	ldr	r3, [pc, #380]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d044      	beq.n	8004dcc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
 8004d46:	e041      	b.n	8004dcc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d00c      	beq.n	8004d6a <RCCEx_PLLSAI2_Config+0x6e>
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d013      	beq.n	8004d7c <RCCEx_PLLSAI2_Config+0x80>
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d120      	bne.n	8004d9a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d58:	4b54      	ldr	r3, [pc, #336]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d11d      	bne.n	8004da0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d68:	e01a      	b.n	8004da0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d6a:	4b50      	ldr	r3, [pc, #320]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d116      	bne.n	8004da4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d7a:	e013      	b.n	8004da4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d7c:	4b4b      	ldr	r3, [pc, #300]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10f      	bne.n	8004da8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d88:	4b48      	ldr	r3, [pc, #288]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d98:	e006      	b.n	8004da8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d9e:	e004      	b.n	8004daa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004da0:	bf00      	nop
 8004da2:	e002      	b.n	8004daa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004da4:	bf00      	nop
 8004da6:	e000      	b.n	8004daa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004da8:	bf00      	nop
    }

    if(status == HAL_OK)
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10d      	bne.n	8004dcc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004db0:	4b3e      	ldr	r3, [pc, #248]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6819      	ldr	r1, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	4939      	ldr	r1, [pc, #228]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d167      	bne.n	8004ea2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004dd2:	4b36      	ldr	r3, [pc, #216]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a35      	ldr	r2, [pc, #212]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dde:	f7fc fcd3 	bl	8001788 <HAL_GetTick>
 8004de2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004de4:	e009      	b.n	8004dfa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004de6:	f7fc fccf 	bl	8001788 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d902      	bls.n	8004dfa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	73fb      	strb	r3, [r7, #15]
        break;
 8004df8:	e005      	b.n	8004e06 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dfa:	4b2c      	ldr	r3, [pc, #176]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1ef      	bne.n	8004de6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d14a      	bne.n	8004ea2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d111      	bne.n	8004e36 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e12:	4b26      	ldr	r3, [pc, #152]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6892      	ldr	r2, [r2, #8]
 8004e22:	0211      	lsls	r1, r2, #8
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68d2      	ldr	r2, [r2, #12]
 8004e28:	0912      	lsrs	r2, r2, #4
 8004e2a:	0452      	lsls	r2, r2, #17
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	491f      	ldr	r1, [pc, #124]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	614b      	str	r3, [r1, #20]
 8004e34:	e011      	b.n	8004e5a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e36:	4b1d      	ldr	r3, [pc, #116]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6892      	ldr	r2, [r2, #8]
 8004e46:	0211      	lsls	r1, r2, #8
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6912      	ldr	r2, [r2, #16]
 8004e4c:	0852      	lsrs	r2, r2, #1
 8004e4e:	3a01      	subs	r2, #1
 8004e50:	0652      	lsls	r2, r2, #25
 8004e52:	430a      	orrs	r2, r1
 8004e54:	4915      	ldr	r1, [pc, #84]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e5a:	4b14      	ldr	r3, [pc, #80]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a13      	ldr	r2, [pc, #76]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e66:	f7fc fc8f 	bl	8001788 <HAL_GetTick>
 8004e6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e6c:	e009      	b.n	8004e82 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e6e:	f7fc fc8b 	bl	8001788 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d902      	bls.n	8004e82 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	73fb      	strb	r3, [r7, #15]
          break;
 8004e80:	e005      	b.n	8004e8e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e82:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0ef      	beq.n	8004e6e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d106      	bne.n	8004ea2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e96:	695a      	ldr	r2, [r3, #20]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	4903      	ldr	r1, [pc, #12]	; (8004eac <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40021000 	.word	0x40021000

08004eb0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d06c      	beq.n	8004f9c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fc f9f2 	bl	80012c0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	22ca      	movs	r2, #202	; 0xca
 8004eea:	625a      	str	r2, [r3, #36]	; 0x24
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2253      	movs	r2, #83	; 0x53
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f9a0 	bl	800523a <RTC_EnterInitMode>
 8004efa:	4603      	mov	r3, r0
 8004efc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d14b      	bne.n	8004f9c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f16:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6899      	ldr	r1, [r3, #8]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68d2      	ldr	r2, [r2, #12]
 8004f3e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6919      	ldr	r1, [r3, #16]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	041a      	lsls	r2, r3, #16
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f9a3 	bl	80052a0 <RTC_ExitInitMode>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d11b      	bne.n	8004f9c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0203 	bic.w	r2, r2, #3
 8004f72:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69da      	ldr	r2, [r3, #28]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	22ff      	movs	r2, #255	; 0xff
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004fa6:	b590      	push	{r4, r7, lr}
 8004fa8:	b087      	sub	sp, #28
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_RTC_SetTime+0x1a>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e08b      	b.n	80050d8 <HAL_RTC_SetTime+0x132>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	22ca      	movs	r2, #202	; 0xca
 8004fd6:	625a      	str	r2, [r3, #36]	; 0x24
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2253      	movs	r2, #83	; 0x53
 8004fde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f92a 	bl	800523a <RTC_EnterInitMode>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004fea:	7cfb      	ldrb	r3, [r7, #19]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d163      	bne.n	80050b8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d126      	bne.n	8005044 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2200      	movs	r2, #0
 8005008:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 f984 	bl	800531c <RTC_ByteToBcd2>
 8005014:	4603      	mov	r3, r0
 8005016:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	4618      	mov	r0, r3
 800501e:	f000 f97d 	bl	800531c <RTC_ByteToBcd2>
 8005022:	4603      	mov	r3, r0
 8005024:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005026:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	789b      	ldrb	r3, [r3, #2]
 800502c:	4618      	mov	r0, r3
 800502e:	f000 f975 	bl	800531c <RTC_ByteToBcd2>
 8005032:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005034:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	78db      	ldrb	r3, [r3, #3]
 800503c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	e018      	b.n	8005076 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2200      	movs	r2, #0
 8005056:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	785b      	ldrb	r3, [r3, #1]
 8005062:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005064:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800506a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	78db      	ldrb	r3, [r3, #3]
 8005070:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005080:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005084:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005094:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6899      	ldr	r1, [r3, #8]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	431a      	orrs	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f8f6 	bl	80052a0 <RTC_ExitInitMode>
 80050b4:	4603      	mov	r3, r0
 80050b6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	22ff      	movs	r2, #255	; 0xff
 80050be:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80050c0:	7cfb      	ldrb	r3, [r7, #19]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d103      	bne.n	80050ce <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80050d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	371c      	adds	r7, #28
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd90      	pop	{r4, r7, pc}

080050e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80050e0:	b590      	push	{r4, r7, lr}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_RTC_SetDate+0x1a>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e075      	b.n	80051e6 <HAL_RTC_SetDate+0x106>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2202      	movs	r2, #2
 8005106:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10e      	bne.n	800512e <HAL_RTC_SetDate+0x4e>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b00      	cmp	r3, #0
 800511a:	d008      	beq.n	800512e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	785b      	ldrb	r3, [r3, #1]
 8005120:	f023 0310 	bic.w	r3, r3, #16
 8005124:	b2db      	uxtb	r3, r3
 8005126:	330a      	adds	r3, #10
 8005128:	b2da      	uxtb	r2, r3
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d11c      	bne.n	800516e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	78db      	ldrb	r3, [r3, #3]
 8005138:	4618      	mov	r0, r3
 800513a:	f000 f8ef 	bl	800531c <RTC_ByteToBcd2>
 800513e:	4603      	mov	r3, r0
 8005140:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	785b      	ldrb	r3, [r3, #1]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 f8e8 	bl	800531c <RTC_ByteToBcd2>
 800514c:	4603      	mov	r3, r0
 800514e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005150:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	789b      	ldrb	r3, [r3, #2]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 f8e0 	bl	800531c <RTC_ByteToBcd2>
 800515c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800515e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	e00e      	b.n	800518c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	78db      	ldrb	r3, [r3, #3]
 8005172:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	785b      	ldrb	r3, [r3, #1]
 8005178:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800517a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005180:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	22ca      	movs	r2, #202	; 0xca
 8005192:	625a      	str	r2, [r3, #36]	; 0x24
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2253      	movs	r2, #83	; 0x53
 800519a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f84c 	bl	800523a <RTC_EnterInitMode>
 80051a2:	4603      	mov	r3, r0
 80051a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80051a6:	7cfb      	ldrb	r3, [r7, #19]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10c      	bne.n	80051c6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051ba:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f86f 	bl	80052a0 <RTC_ExitInitMode>
 80051c2:	4603      	mov	r3, r0
 80051c4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	22ff      	movs	r2, #255	; 0xff
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80051ce:	7cfb      	ldrb	r3, [r7, #19]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d103      	bne.n	80051dc <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80051e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd90      	pop	{r4, r7, pc}

080051ee <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b084      	sub	sp, #16
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005204:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005206:	f7fc fabf 	bl	8001788 <HAL_GetTick>
 800520a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800520c:	e009      	b.n	8005222 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800520e:	f7fc fabb 	bl	8001788 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800521c:	d901      	bls.n	8005222 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e007      	b.n	8005232 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0ee      	beq.n	800520e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d120      	bne.n	8005296 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800525c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800525e:	f7fc fa93 	bl	8001788 <HAL_GetTick>
 8005262:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005264:	e00d      	b.n	8005282 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005266:	f7fc fa8f 	bl	8001788 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005274:	d905      	bls.n	8005282 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2203      	movs	r2, #3
 800527e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <RTC_EnterInitMode+0x5c>
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	2b03      	cmp	r3, #3
 8005294:	d1e7      	bne.n	8005266 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005296:	7bfb      	ldrb	r3, [r7, #15]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80052ac:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <RTC_ExitInitMode+0x78>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	4a19      	ldr	r2, [pc, #100]	; (8005318 <RTC_ExitInitMode+0x78>)
 80052b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80052b8:	4b17      	ldr	r3, [pc, #92]	; (8005318 <RTC_ExitInitMode+0x78>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10c      	bne.n	80052de <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff ff92 	bl	80051ee <HAL_RTC_WaitForSynchro>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01e      	beq.n	800530e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2203      	movs	r2, #3
 80052d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	73fb      	strb	r3, [r7, #15]
 80052dc:	e017      	b.n	800530e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80052de:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <RTC_ExitInitMode+0x78>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	4a0d      	ldr	r2, [pc, #52]	; (8005318 <RTC_ExitInitMode+0x78>)
 80052e4:	f023 0320 	bic.w	r3, r3, #32
 80052e8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff ff7f 	bl	80051ee <HAL_RTC_WaitForSynchro>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2203      	movs	r2, #3
 80052fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005302:	4b05      	ldr	r3, [pc, #20]	; (8005318 <RTC_ExitInitMode+0x78>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	4a04      	ldr	r2, [pc, #16]	; (8005318 <RTC_ExitInitMode+0x78>)
 8005308:	f043 0320 	orr.w	r3, r3, #32
 800530c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800530e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40002800 	.word	0x40002800

0800531c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800532e:	e005      	b.n	800533c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3301      	adds	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005336:	7afb      	ldrb	r3, [r7, #11]
 8005338:	3b0a      	subs	r3, #10
 800533a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800533c:	7afb      	ldrb	r3, [r7, #11]
 800533e:	2b09      	cmp	r3, #9
 8005340:	d8f6      	bhi.n	8005330 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	b2da      	uxtb	r2, r3
 800534a:	7afb      	ldrb	r3, [r7, #11]
 800534c:	4313      	orrs	r3, r2
 800534e:	b2db      	uxtb	r3, r3
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e049      	b.n	8005402 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fc f8d6 	bl	8001534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	4619      	mov	r1, r3
 800539a:	4610      	mov	r0, r2
 800539c:	f000 f8ee 	bl	800557c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_TIM_ConfigClockSource+0x18>
 800541e:	2302      	movs	r3, #2
 8005420:	e0a8      	b.n	8005574 <HAL_TIM_ConfigClockSource+0x16a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2202      	movs	r2, #2
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005440:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005444:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800544c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d067      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x124>
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d80b      	bhi.n	800547a <HAL_TIM_ConfigClockSource+0x70>
 8005462:	2b10      	cmp	r3, #16
 8005464:	d073      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x144>
 8005466:	2b10      	cmp	r3, #16
 8005468:	d802      	bhi.n	8005470 <HAL_TIM_ConfigClockSource+0x66>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d06f      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800546e:	e078      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005470:	2b20      	cmp	r3, #32
 8005472:	d06c      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x144>
 8005474:	2b30      	cmp	r3, #48	; 0x30
 8005476:	d06a      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005478:	e073      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800547a:	2b70      	cmp	r3, #112	; 0x70
 800547c:	d00d      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x90>
 800547e:	2b70      	cmp	r3, #112	; 0x70
 8005480:	d804      	bhi.n	800548c <HAL_TIM_ConfigClockSource+0x82>
 8005482:	2b50      	cmp	r3, #80	; 0x50
 8005484:	d033      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0xe4>
 8005486:	2b60      	cmp	r3, #96	; 0x60
 8005488:	d041      	beq.n	800550e <HAL_TIM_ConfigClockSource+0x104>
      break;
 800548a:	e06a      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800548c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005490:	d066      	beq.n	8005560 <HAL_TIM_ConfigClockSource+0x156>
 8005492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005496:	d017      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005498:	e063      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6899      	ldr	r1, [r3, #8]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f000 f97b 	bl	80057a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	609a      	str	r2, [r3, #8]
      break;
 80054c6:	e04c      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6818      	ldr	r0, [r3, #0]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	6899      	ldr	r1, [r3, #8]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f000 f964 	bl	80057a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ea:	609a      	str	r2, [r3, #8]
      break;
 80054ec:	e039      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6859      	ldr	r1, [r3, #4]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	461a      	mov	r2, r3
 80054fc:	f000 f8d8 	bl	80056b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2150      	movs	r1, #80	; 0x50
 8005506:	4618      	mov	r0, r3
 8005508:	f000 f931 	bl	800576e <TIM_ITRx_SetConfig>
      break;
 800550c:	e029      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6859      	ldr	r1, [r3, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	461a      	mov	r2, r3
 800551c:	f000 f8f7 	bl	800570e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2160      	movs	r1, #96	; 0x60
 8005526:	4618      	mov	r0, r3
 8005528:	f000 f921 	bl	800576e <TIM_ITRx_SetConfig>
      break;
 800552c:	e019      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	461a      	mov	r2, r3
 800553c:	f000 f8b8 	bl	80056b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2140      	movs	r1, #64	; 0x40
 8005546:	4618      	mov	r0, r3
 8005548:	f000 f911 	bl	800576e <TIM_ITRx_SetConfig>
      break;
 800554c:	e009      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4619      	mov	r1, r3
 8005558:	4610      	mov	r0, r2
 800555a:	f000 f908 	bl	800576e <TIM_ITRx_SetConfig>
        break;
 800555e:	e000      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005560:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a40      	ldr	r2, [pc, #256]	; (8005690 <TIM_Base_SetConfig+0x114>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d013      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559a:	d00f      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a3d      	ldr	r2, [pc, #244]	; (8005694 <TIM_Base_SetConfig+0x118>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00b      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a3c      	ldr	r2, [pc, #240]	; (8005698 <TIM_Base_SetConfig+0x11c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d007      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a3b      	ldr	r2, [pc, #236]	; (800569c <TIM_Base_SetConfig+0x120>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a3a      	ldr	r2, [pc, #232]	; (80056a0 <TIM_Base_SetConfig+0x124>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d108      	bne.n	80055ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2f      	ldr	r2, [pc, #188]	; (8005690 <TIM_Base_SetConfig+0x114>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d01f      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055dc:	d01b      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2c      	ldr	r2, [pc, #176]	; (8005694 <TIM_Base_SetConfig+0x118>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d017      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <TIM_Base_SetConfig+0x11c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2a      	ldr	r2, [pc, #168]	; (800569c <TIM_Base_SetConfig+0x120>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00f      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a29      	ldr	r2, [pc, #164]	; (80056a0 <TIM_Base_SetConfig+0x124>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00b      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a28      	ldr	r2, [pc, #160]	; (80056a4 <TIM_Base_SetConfig+0x128>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d007      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <TIM_Base_SetConfig+0x12c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a26      	ldr	r2, [pc, #152]	; (80056ac <TIM_Base_SetConfig+0x130>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d108      	bne.n	8005628 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a10      	ldr	r2, [pc, #64]	; (8005690 <TIM_Base_SetConfig+0x114>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00f      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a12      	ldr	r2, [pc, #72]	; (80056a0 <TIM_Base_SetConfig+0x124>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a11      	ldr	r2, [pc, #68]	; (80056a4 <TIM_Base_SetConfig+0x128>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a10      	ldr	r2, [pc, #64]	; (80056a8 <TIM_Base_SetConfig+0x12c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a0f      	ldr	r2, [pc, #60]	; (80056ac <TIM_Base_SetConfig+0x130>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d103      	bne.n	800567c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	615a      	str	r2, [r3, #20]
}
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40012c00 	.word	0x40012c00
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800
 800569c:	40000c00 	.word	0x40000c00
 80056a0:	40013400 	.word	0x40013400
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40014400 	.word	0x40014400
 80056ac:	40014800 	.word	0x40014800

080056b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f023 0201 	bic.w	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f023 030a 	bic.w	r3, r3, #10
 80056ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800570e:	b480      	push	{r7}
 8005710:	b087      	sub	sp, #28
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f023 0210 	bic.w	r2, r3, #16
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005738:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	031b      	lsls	r3, r3, #12
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800574a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	f043 0307 	orr.w	r3, r3, #7
 8005790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	609a      	str	r2, [r3, #8]
}
 8005798:	bf00      	nop
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	021a      	lsls	r2, r3, #8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	609a      	str	r2, [r3, #8]
}
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e068      	b.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a2e      	ldr	r2, [pc, #184]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d004      	beq.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2d      	ldr	r2, [pc, #180]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d108      	bne.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005836:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005848:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1e      	ldr	r2, [pc, #120]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d01d      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586e:	d018      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1b      	ldr	r2, [pc, #108]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d013      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1a      	ldr	r2, [pc, #104]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00e      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a18      	ldr	r2, [pc, #96]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d009      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d004      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a14      	ldr	r2, [pc, #80]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d10c      	bne.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40012c00 	.word	0x40012c00
 80058e0:	40013400 	.word	0x40013400
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40000800 	.word	0x40000800
 80058ec:	40000c00 	.word	0x40000c00
 80058f0:	40014000 	.word	0x40014000

080058f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e040      	b.n	8005988 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fb fe5a 	bl	80015d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2224      	movs	r2, #36	; 0x24
 8005920:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0201 	bic.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f82c 	bl	8005990 <UART_SetConfig>
 8005938:	4603      	mov	r3, r0
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e022      	b.n	8005988 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 faaa 	bl	8005ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800595e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800596e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fb31 	bl	8005fe8 <UART_CheckIdleState>
 8005986:	4603      	mov	r3, r0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005990:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005994:	b088      	sub	sp, #32
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	4bac      	ldr	r3, [pc, #688]	; (8005c70 <UART_SetConfig+0x2e0>)
 80059be:	4013      	ands	r3, r2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	69f9      	ldr	r1, [r7, #28]
 80059c6:	430b      	orrs	r3, r1
 80059c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4aa2      	ldr	r2, [pc, #648]	; (8005c74 <UART_SetConfig+0x2e4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a99      	ldr	r2, [pc, #612]	; (8005c78 <UART_SetConfig+0x2e8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d121      	bne.n	8005a5c <UART_SetConfig+0xcc>
 8005a18:	4b98      	ldr	r3, [pc, #608]	; (8005c7c <UART_SetConfig+0x2ec>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d816      	bhi.n	8005a54 <UART_SetConfig+0xc4>
 8005a26:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <UART_SetConfig+0x9c>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a3d 	.word	0x08005a3d
 8005a30:	08005a49 	.word	0x08005a49
 8005a34:	08005a43 	.word	0x08005a43
 8005a38:	08005a4f 	.word	0x08005a4f
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	76fb      	strb	r3, [r7, #27]
 8005a40:	e0e8      	b.n	8005c14 <UART_SetConfig+0x284>
 8005a42:	2302      	movs	r3, #2
 8005a44:	76fb      	strb	r3, [r7, #27]
 8005a46:	e0e5      	b.n	8005c14 <UART_SetConfig+0x284>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	76fb      	strb	r3, [r7, #27]
 8005a4c:	e0e2      	b.n	8005c14 <UART_SetConfig+0x284>
 8005a4e:	2308      	movs	r3, #8
 8005a50:	76fb      	strb	r3, [r7, #27]
 8005a52:	e0df      	b.n	8005c14 <UART_SetConfig+0x284>
 8005a54:	2310      	movs	r3, #16
 8005a56:	76fb      	strb	r3, [r7, #27]
 8005a58:	bf00      	nop
 8005a5a:	e0db      	b.n	8005c14 <UART_SetConfig+0x284>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a87      	ldr	r2, [pc, #540]	; (8005c80 <UART_SetConfig+0x2f0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d134      	bne.n	8005ad0 <UART_SetConfig+0x140>
 8005a66:	4b85      	ldr	r3, [pc, #532]	; (8005c7c <UART_SetConfig+0x2ec>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6c:	f003 030c 	and.w	r3, r3, #12
 8005a70:	2b0c      	cmp	r3, #12
 8005a72:	d829      	bhi.n	8005ac8 <UART_SetConfig+0x138>
 8005a74:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <UART_SetConfig+0xec>)
 8005a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7a:	bf00      	nop
 8005a7c:	08005ab1 	.word	0x08005ab1
 8005a80:	08005ac9 	.word	0x08005ac9
 8005a84:	08005ac9 	.word	0x08005ac9
 8005a88:	08005ac9 	.word	0x08005ac9
 8005a8c:	08005abd 	.word	0x08005abd
 8005a90:	08005ac9 	.word	0x08005ac9
 8005a94:	08005ac9 	.word	0x08005ac9
 8005a98:	08005ac9 	.word	0x08005ac9
 8005a9c:	08005ab7 	.word	0x08005ab7
 8005aa0:	08005ac9 	.word	0x08005ac9
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ac9 	.word	0x08005ac9
 8005aac:	08005ac3 	.word	0x08005ac3
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	76fb      	strb	r3, [r7, #27]
 8005ab4:	e0ae      	b.n	8005c14 <UART_SetConfig+0x284>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	76fb      	strb	r3, [r7, #27]
 8005aba:	e0ab      	b.n	8005c14 <UART_SetConfig+0x284>
 8005abc:	2304      	movs	r3, #4
 8005abe:	76fb      	strb	r3, [r7, #27]
 8005ac0:	e0a8      	b.n	8005c14 <UART_SetConfig+0x284>
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	76fb      	strb	r3, [r7, #27]
 8005ac6:	e0a5      	b.n	8005c14 <UART_SetConfig+0x284>
 8005ac8:	2310      	movs	r3, #16
 8005aca:	76fb      	strb	r3, [r7, #27]
 8005acc:	bf00      	nop
 8005ace:	e0a1      	b.n	8005c14 <UART_SetConfig+0x284>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a6b      	ldr	r2, [pc, #428]	; (8005c84 <UART_SetConfig+0x2f4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d120      	bne.n	8005b1c <UART_SetConfig+0x18c>
 8005ada:	4b68      	ldr	r3, [pc, #416]	; (8005c7c <UART_SetConfig+0x2ec>)
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d00f      	beq.n	8005b08 <UART_SetConfig+0x178>
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d802      	bhi.n	8005af2 <UART_SetConfig+0x162>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <UART_SetConfig+0x16c>
 8005af0:	e010      	b.n	8005b14 <UART_SetConfig+0x184>
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	d005      	beq.n	8005b02 <UART_SetConfig+0x172>
 8005af6:	2b30      	cmp	r3, #48	; 0x30
 8005af8:	d009      	beq.n	8005b0e <UART_SetConfig+0x17e>
 8005afa:	e00b      	b.n	8005b14 <UART_SetConfig+0x184>
 8005afc:	2300      	movs	r3, #0
 8005afe:	76fb      	strb	r3, [r7, #27]
 8005b00:	e088      	b.n	8005c14 <UART_SetConfig+0x284>
 8005b02:	2302      	movs	r3, #2
 8005b04:	76fb      	strb	r3, [r7, #27]
 8005b06:	e085      	b.n	8005c14 <UART_SetConfig+0x284>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	76fb      	strb	r3, [r7, #27]
 8005b0c:	e082      	b.n	8005c14 <UART_SetConfig+0x284>
 8005b0e:	2308      	movs	r3, #8
 8005b10:	76fb      	strb	r3, [r7, #27]
 8005b12:	e07f      	b.n	8005c14 <UART_SetConfig+0x284>
 8005b14:	2310      	movs	r3, #16
 8005b16:	76fb      	strb	r3, [r7, #27]
 8005b18:	bf00      	nop
 8005b1a:	e07b      	b.n	8005c14 <UART_SetConfig+0x284>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a59      	ldr	r2, [pc, #356]	; (8005c88 <UART_SetConfig+0x2f8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d120      	bne.n	8005b68 <UART_SetConfig+0x1d8>
 8005b26:	4b55      	ldr	r3, [pc, #340]	; (8005c7c <UART_SetConfig+0x2ec>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d00f      	beq.n	8005b54 <UART_SetConfig+0x1c4>
 8005b34:	2b40      	cmp	r3, #64	; 0x40
 8005b36:	d802      	bhi.n	8005b3e <UART_SetConfig+0x1ae>
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <UART_SetConfig+0x1b8>
 8005b3c:	e010      	b.n	8005b60 <UART_SetConfig+0x1d0>
 8005b3e:	2b80      	cmp	r3, #128	; 0x80
 8005b40:	d005      	beq.n	8005b4e <UART_SetConfig+0x1be>
 8005b42:	2bc0      	cmp	r3, #192	; 0xc0
 8005b44:	d009      	beq.n	8005b5a <UART_SetConfig+0x1ca>
 8005b46:	e00b      	b.n	8005b60 <UART_SetConfig+0x1d0>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	76fb      	strb	r3, [r7, #27]
 8005b4c:	e062      	b.n	8005c14 <UART_SetConfig+0x284>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	76fb      	strb	r3, [r7, #27]
 8005b52:	e05f      	b.n	8005c14 <UART_SetConfig+0x284>
 8005b54:	2304      	movs	r3, #4
 8005b56:	76fb      	strb	r3, [r7, #27]
 8005b58:	e05c      	b.n	8005c14 <UART_SetConfig+0x284>
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	76fb      	strb	r3, [r7, #27]
 8005b5e:	e059      	b.n	8005c14 <UART_SetConfig+0x284>
 8005b60:	2310      	movs	r3, #16
 8005b62:	76fb      	strb	r3, [r7, #27]
 8005b64:	bf00      	nop
 8005b66:	e055      	b.n	8005c14 <UART_SetConfig+0x284>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a47      	ldr	r2, [pc, #284]	; (8005c8c <UART_SetConfig+0x2fc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d124      	bne.n	8005bbc <UART_SetConfig+0x22c>
 8005b72:	4b42      	ldr	r3, [pc, #264]	; (8005c7c <UART_SetConfig+0x2ec>)
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b80:	d012      	beq.n	8005ba8 <UART_SetConfig+0x218>
 8005b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b86:	d802      	bhi.n	8005b8e <UART_SetConfig+0x1fe>
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d007      	beq.n	8005b9c <UART_SetConfig+0x20c>
 8005b8c:	e012      	b.n	8005bb4 <UART_SetConfig+0x224>
 8005b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b92:	d006      	beq.n	8005ba2 <UART_SetConfig+0x212>
 8005b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b98:	d009      	beq.n	8005bae <UART_SetConfig+0x21e>
 8005b9a:	e00b      	b.n	8005bb4 <UART_SetConfig+0x224>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	76fb      	strb	r3, [r7, #27]
 8005ba0:	e038      	b.n	8005c14 <UART_SetConfig+0x284>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	76fb      	strb	r3, [r7, #27]
 8005ba6:	e035      	b.n	8005c14 <UART_SetConfig+0x284>
 8005ba8:	2304      	movs	r3, #4
 8005baa:	76fb      	strb	r3, [r7, #27]
 8005bac:	e032      	b.n	8005c14 <UART_SetConfig+0x284>
 8005bae:	2308      	movs	r3, #8
 8005bb0:	76fb      	strb	r3, [r7, #27]
 8005bb2:	e02f      	b.n	8005c14 <UART_SetConfig+0x284>
 8005bb4:	2310      	movs	r3, #16
 8005bb6:	76fb      	strb	r3, [r7, #27]
 8005bb8:	bf00      	nop
 8005bba:	e02b      	b.n	8005c14 <UART_SetConfig+0x284>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a2c      	ldr	r2, [pc, #176]	; (8005c74 <UART_SetConfig+0x2e4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d124      	bne.n	8005c10 <UART_SetConfig+0x280>
 8005bc6:	4b2d      	ldr	r3, [pc, #180]	; (8005c7c <UART_SetConfig+0x2ec>)
 8005bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd4:	d012      	beq.n	8005bfc <UART_SetConfig+0x26c>
 8005bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bda:	d802      	bhi.n	8005be2 <UART_SetConfig+0x252>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d007      	beq.n	8005bf0 <UART_SetConfig+0x260>
 8005be0:	e012      	b.n	8005c08 <UART_SetConfig+0x278>
 8005be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be6:	d006      	beq.n	8005bf6 <UART_SetConfig+0x266>
 8005be8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bec:	d009      	beq.n	8005c02 <UART_SetConfig+0x272>
 8005bee:	e00b      	b.n	8005c08 <UART_SetConfig+0x278>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	76fb      	strb	r3, [r7, #27]
 8005bf4:	e00e      	b.n	8005c14 <UART_SetConfig+0x284>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	76fb      	strb	r3, [r7, #27]
 8005bfa:	e00b      	b.n	8005c14 <UART_SetConfig+0x284>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	76fb      	strb	r3, [r7, #27]
 8005c00:	e008      	b.n	8005c14 <UART_SetConfig+0x284>
 8005c02:	2308      	movs	r3, #8
 8005c04:	76fb      	strb	r3, [r7, #27]
 8005c06:	e005      	b.n	8005c14 <UART_SetConfig+0x284>
 8005c08:	2310      	movs	r3, #16
 8005c0a:	76fb      	strb	r3, [r7, #27]
 8005c0c:	bf00      	nop
 8005c0e:	e001      	b.n	8005c14 <UART_SetConfig+0x284>
 8005c10:	2310      	movs	r3, #16
 8005c12:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a16      	ldr	r2, [pc, #88]	; (8005c74 <UART_SetConfig+0x2e4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	f040 8087 	bne.w	8005d2e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c20:	7efb      	ldrb	r3, [r7, #27]
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d836      	bhi.n	8005c94 <UART_SetConfig+0x304>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <UART_SetConfig+0x29c>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005c95 	.word	0x08005c95
 8005c34:	08005c59 	.word	0x08005c59
 8005c38:	08005c95 	.word	0x08005c95
 8005c3c:	08005c5f 	.word	0x08005c5f
 8005c40:	08005c95 	.word	0x08005c95
 8005c44:	08005c95 	.word	0x08005c95
 8005c48:	08005c95 	.word	0x08005c95
 8005c4c:	08005c67 	.word	0x08005c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c50:	f7fe fbf2 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 8005c54:	6178      	str	r0, [r7, #20]
        break;
 8005c56:	e022      	b.n	8005c9e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c58:	4b0d      	ldr	r3, [pc, #52]	; (8005c90 <UART_SetConfig+0x300>)
 8005c5a:	617b      	str	r3, [r7, #20]
        break;
 8005c5c:	e01f      	b.n	8005c9e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5e:	f7fe fb55 	bl	800430c <HAL_RCC_GetSysClockFreq>
 8005c62:	6178      	str	r0, [r7, #20]
        break;
 8005c64:	e01b      	b.n	8005c9e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6a:	617b      	str	r3, [r7, #20]
        break;
 8005c6c:	e017      	b.n	8005c9e <UART_SetConfig+0x30e>
 8005c6e:	bf00      	nop
 8005c70:	efff69f3 	.word	0xefff69f3
 8005c74:	40008000 	.word	0x40008000
 8005c78:	40013800 	.word	0x40013800
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	40004400 	.word	0x40004400
 8005c84:	40004800 	.word	0x40004800
 8005c88:	40004c00 	.word	0x40004c00
 8005c8c:	40005000 	.word	0x40005000
 8005c90:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	76bb      	strb	r3, [r7, #26]
        break;
 8005c9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80f1 	beq.w	8005e88 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	4613      	mov	r3, r2
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	4413      	add	r3, r2
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d305      	bcc.n	8005cc2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d902      	bls.n	8005cc8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	76bb      	strb	r3, [r7, #26]
 8005cc6:	e0df      	b.n	8005e88 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	f04f 0400 	mov.w	r4, #0
 8005cd8:	0214      	lsls	r4, r2, #8
 8005cda:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005cde:	020b      	lsls	r3, r1, #8
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6852      	ldr	r2, [r2, #4]
 8005ce4:	0852      	lsrs	r2, r2, #1
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	eb13 0b01 	adds.w	fp, r3, r1
 8005cf0:	eb44 0c02 	adc.w	ip, r4, r2
 8005cf4:	4658      	mov	r0, fp
 8005cf6:	4661      	mov	r1, ip
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f04f 0400 	mov.w	r4, #0
 8005d00:	461a      	mov	r2, r3
 8005d02:	4623      	mov	r3, r4
 8005d04:	f7fa fa60 	bl	80001c8 <__aeabi_uldivmod>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d14:	d308      	bcc.n	8005d28 <UART_SetConfig+0x398>
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d1c:	d204      	bcs.n	8005d28 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	60da      	str	r2, [r3, #12]
 8005d26:	e0af      	b.n	8005e88 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	76bb      	strb	r3, [r7, #26]
 8005d2c:	e0ac      	b.n	8005e88 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d36:	d15b      	bne.n	8005df0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005d38:	7efb      	ldrb	r3, [r7, #27]
 8005d3a:	2b08      	cmp	r3, #8
 8005d3c:	d827      	bhi.n	8005d8e <UART_SetConfig+0x3fe>
 8005d3e:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <UART_SetConfig+0x3b4>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005d69 	.word	0x08005d69
 8005d48:	08005d71 	.word	0x08005d71
 8005d4c:	08005d79 	.word	0x08005d79
 8005d50:	08005d8f 	.word	0x08005d8f
 8005d54:	08005d7f 	.word	0x08005d7f
 8005d58:	08005d8f 	.word	0x08005d8f
 8005d5c:	08005d8f 	.word	0x08005d8f
 8005d60:	08005d8f 	.word	0x08005d8f
 8005d64:	08005d87 	.word	0x08005d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d68:	f7fe fb66 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 8005d6c:	6178      	str	r0, [r7, #20]
        break;
 8005d6e:	e013      	b.n	8005d98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d70:	f7fe fb78 	bl	8004464 <HAL_RCC_GetPCLK2Freq>
 8005d74:	6178      	str	r0, [r7, #20]
        break;
 8005d76:	e00f      	b.n	8005d98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d78:	4b49      	ldr	r3, [pc, #292]	; (8005ea0 <UART_SetConfig+0x510>)
 8005d7a:	617b      	str	r3, [r7, #20]
        break;
 8005d7c:	e00c      	b.n	8005d98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d7e:	f7fe fac5 	bl	800430c <HAL_RCC_GetSysClockFreq>
 8005d82:	6178      	str	r0, [r7, #20]
        break;
 8005d84:	e008      	b.n	8005d98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8a:	617b      	str	r3, [r7, #20]
        break;
 8005d8c:	e004      	b.n	8005d98 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	76bb      	strb	r3, [r7, #26]
        break;
 8005d96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d074      	beq.n	8005e88 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	005a      	lsls	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	441a      	add	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b0f      	cmp	r3, #15
 8005dba:	d916      	bls.n	8005dea <UART_SetConfig+0x45a>
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc2:	d212      	bcs.n	8005dea <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	f023 030f 	bic.w	r3, r3, #15
 8005dcc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	085b      	lsrs	r3, r3, #1
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	89fb      	ldrh	r3, [r7, #14]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	89fa      	ldrh	r2, [r7, #14]
 8005de6:	60da      	str	r2, [r3, #12]
 8005de8:	e04e      	b.n	8005e88 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	76bb      	strb	r3, [r7, #26]
 8005dee:	e04b      	b.n	8005e88 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005df0:	7efb      	ldrb	r3, [r7, #27]
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d827      	bhi.n	8005e46 <UART_SetConfig+0x4b6>
 8005df6:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <UART_SetConfig+0x46c>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e21 	.word	0x08005e21
 8005e00:	08005e29 	.word	0x08005e29
 8005e04:	08005e31 	.word	0x08005e31
 8005e08:	08005e47 	.word	0x08005e47
 8005e0c:	08005e37 	.word	0x08005e37
 8005e10:	08005e47 	.word	0x08005e47
 8005e14:	08005e47 	.word	0x08005e47
 8005e18:	08005e47 	.word	0x08005e47
 8005e1c:	08005e3f 	.word	0x08005e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e20:	f7fe fb0a 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 8005e24:	6178      	str	r0, [r7, #20]
        break;
 8005e26:	e013      	b.n	8005e50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e28:	f7fe fb1c 	bl	8004464 <HAL_RCC_GetPCLK2Freq>
 8005e2c:	6178      	str	r0, [r7, #20]
        break;
 8005e2e:	e00f      	b.n	8005e50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e30:	4b1b      	ldr	r3, [pc, #108]	; (8005ea0 <UART_SetConfig+0x510>)
 8005e32:	617b      	str	r3, [r7, #20]
        break;
 8005e34:	e00c      	b.n	8005e50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e36:	f7fe fa69 	bl	800430c <HAL_RCC_GetSysClockFreq>
 8005e3a:	6178      	str	r0, [r7, #20]
        break;
 8005e3c:	e008      	b.n	8005e50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e42:	617b      	str	r3, [r7, #20]
        break;
 8005e44:	e004      	b.n	8005e50 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	76bb      	strb	r3, [r7, #26]
        break;
 8005e4e:	bf00      	nop
    }

    if (pclk != 0U)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d018      	beq.n	8005e88 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	085a      	lsrs	r2, r3, #1
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	441a      	add	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2b0f      	cmp	r3, #15
 8005e70:	d908      	bls.n	8005e84 <UART_SetConfig+0x4f4>
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e78:	d204      	bcs.n	8005e84 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	60da      	str	r2, [r3, #12]
 8005e82:	e001      	b.n	8005e88 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005e94:	7ebb      	ldrb	r3, [r7, #26]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3720      	adds	r7, #32
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005ea0:	00f42400 	.word	0x00f42400

08005ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	f003 0310 	and.w	r3, r3, #16
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	f003 0320 	and.w	r3, r3, #32
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01a      	beq.n	8005fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa2:	d10a      	bne.n	8005fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	605a      	str	r2, [r3, #4]
  }
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005ff6:	f7fb fbc7 	bl	8001788 <HAL_GetTick>
 8005ffa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b08      	cmp	r3, #8
 8006008:	d10e      	bne.n	8006028 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800600a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f82a 	bl	8006072 <UART_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e020      	b.n	800606a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	2b04      	cmp	r3, #4
 8006034:	d10e      	bne.n	8006054 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006036:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f814 	bl	8006072 <UART_WaitOnFlagUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e00a      	b.n	800606a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	603b      	str	r3, [r7, #0]
 800607e:	4613      	mov	r3, r2
 8006080:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006082:	e05d      	b.n	8006140 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800608a:	d059      	beq.n	8006140 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608c:	f7fb fb7c 	bl	8001788 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	429a      	cmp	r2, r3
 800609a:	d302      	bcc.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d11b      	bne.n	80060da <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0201 	bic.w	r2, r2, #1
 80060c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e042      	b.n	8006160 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d02b      	beq.n	8006140 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f6:	d123      	bne.n	8006140 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006100:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006110:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2220      	movs	r2, #32
 8006126:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e00f      	b.n	8006160 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	69da      	ldr	r2, [r3, #28]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	4013      	ands	r3, r2
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	429a      	cmp	r2, r3
 800614e:	bf0c      	ite	eq
 8006150:	2301      	moveq	r3, #1
 8006152:	2300      	movne	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	429a      	cmp	r2, r3
 800615c:	d092      	beq.n	8006084 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <__libc_init_array>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	4e0d      	ldr	r6, [pc, #52]	; (80061a0 <__libc_init_array+0x38>)
 800616c:	4c0d      	ldr	r4, [pc, #52]	; (80061a4 <__libc_init_array+0x3c>)
 800616e:	1ba4      	subs	r4, r4, r6
 8006170:	10a4      	asrs	r4, r4, #2
 8006172:	2500      	movs	r5, #0
 8006174:	42a5      	cmp	r5, r4
 8006176:	d109      	bne.n	800618c <__libc_init_array+0x24>
 8006178:	4e0b      	ldr	r6, [pc, #44]	; (80061a8 <__libc_init_array+0x40>)
 800617a:	4c0c      	ldr	r4, [pc, #48]	; (80061ac <__libc_init_array+0x44>)
 800617c:	f000 f820 	bl	80061c0 <_init>
 8006180:	1ba4      	subs	r4, r4, r6
 8006182:	10a4      	asrs	r4, r4, #2
 8006184:	2500      	movs	r5, #0
 8006186:	42a5      	cmp	r5, r4
 8006188:	d105      	bne.n	8006196 <__libc_init_array+0x2e>
 800618a:	bd70      	pop	{r4, r5, r6, pc}
 800618c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006190:	4798      	blx	r3
 8006192:	3501      	adds	r5, #1
 8006194:	e7ee      	b.n	8006174 <__libc_init_array+0xc>
 8006196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800619a:	4798      	blx	r3
 800619c:	3501      	adds	r5, #1
 800619e:	e7f2      	b.n	8006186 <__libc_init_array+0x1e>
 80061a0:	08006228 	.word	0x08006228
 80061a4:	08006228 	.word	0x08006228
 80061a8:	08006228 	.word	0x08006228
 80061ac:	0800622c 	.word	0x0800622c

080061b0 <memset>:
 80061b0:	4402      	add	r2, r0
 80061b2:	4603      	mov	r3, r0
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d100      	bne.n	80061ba <memset+0xa>
 80061b8:	4770      	bx	lr
 80061ba:	f803 1b01 	strb.w	r1, [r3], #1
 80061be:	e7f9      	b.n	80061b4 <memset+0x4>

080061c0 <_init>:
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c2:	bf00      	nop
 80061c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c6:	bc08      	pop	{r3}
 80061c8:	469e      	mov	lr, r3
 80061ca:	4770      	bx	lr

080061cc <_fini>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	bf00      	nop
 80061d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d2:	bc08      	pop	{r3}
 80061d4:	469e      	mov	lr, r3
 80061d6:	4770      	bx	lr
