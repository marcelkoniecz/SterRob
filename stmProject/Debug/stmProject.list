
stmProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e964  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  0800eaf8  0800eaf8  0001eaf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f248  0800f248  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800f248  0800f248  0001f248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f250  0800f250  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f250  0800f250  0001f250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f254  0800f254  0001f254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800f258  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000248  0800f4a0  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  0800f4a0  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd81  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ffc  00000000  00000000  0003bff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  0003fff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001740  00000000  00000000  00041940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d081  00000000  00000000  00043080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e1f6  00000000  00000000  00070101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111f1a  00000000  00000000  0008e2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a0211  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008644  00000000  00000000  001a0264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eadc 	.word	0x0800eadc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0800eadc 	.word	0x0800eadc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ce:	4b2f      	ldr	r3, [pc, #188]	; (800118c <MX_ADC1_Init+0xe0>)
 80010d0:	4a2f      	ldr	r2, [pc, #188]	; (8001190 <MX_ADC1_Init+0xe4>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <MX_ADC1_Init+0xe0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <MX_ADC1_Init+0xe0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <MX_ADC1_Init+0xe0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <MX_ADC1_Init+0xe0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <MX_ADC1_Init+0xe0>)
 80010ee:	2204      	movs	r2, #4
 80010f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <MX_ADC1_Init+0xe0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <MX_ADC1_Init+0xe0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <MX_ADC1_Init+0xe0>)
 8001100:	2201      	movs	r2, #1
 8001102:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <MX_ADC1_Init+0xe0>)
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_ADC1_Init+0xe0>)
 800110e:	2200      	movs	r2, #0
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_ADC1_Init+0xe0>)
 8001114:	2200      	movs	r2, #0
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_ADC1_Init+0xe0>)
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_ADC1_Init+0xe0>)
 8001122:	2200      	movs	r2, #0
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_ADC1_Init+0xe0>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800112e:	4817      	ldr	r0, [pc, #92]	; (800118c <MX_ADC1_Init+0xe0>)
 8001130:	f001 fdcc 	bl	8002ccc <HAL_ADC_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800113a:	f000 fac7 	bl	80016cc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4810      	ldr	r0, [pc, #64]	; (800118c <MX_ADC1_Init+0xe0>)
 800114a:	f002 fd19 	bl	8003b80 <HAL_ADCEx_MultiModeConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001154:	f000 faba 	bl	80016cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_ADC1_Init+0xe8>)
 800115a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800115c:	2306      	movs	r3, #6
 800115e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001164:	237f      	movs	r3, #127	; 0x7f
 8001166:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001168:	2304      	movs	r3, #4
 800116a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_ADC1_Init+0xe0>)
 8001176:	f002 f895 	bl	80032a4 <HAL_ADC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001180:	f000 faa4 	bl	80016cc <Error_Handler>
  }

}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000264 	.word	0x20000264
 8001190:	50040000 	.word	0x50040000
 8001194:	19200040 	.word	0x19200040

08001198 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a15      	ldr	r2, [pc, #84]	; (800120c <HAL_ADC_MspInit+0x74>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d124      	bne.n	8001204 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_ADC_MspInit+0x78>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	4a14      	ldr	r2, [pc, #80]	; (8001210 <HAL_ADC_MspInit+0x78>)
 80011c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_ADC_MspInit+0x78>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <HAL_ADC_MspInit+0x78>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <HAL_ADC_MspInit+0x78>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_ADC_MspInit+0x78>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = SIG_Pin;
 80011ea:	2302      	movs	r3, #2
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011ee:	230b      	movs	r3, #11
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SIG_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f003 f8f2 	bl	80043e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	50040000 	.word	0x50040000
 8001210:	40021000 	.word	0x40021000

08001214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_DMA_Init+0x38>)
 800121c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <MX_DMA_Init+0x38>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6493      	str	r3, [r2, #72]	; 0x48
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_DMA_Init+0x38>)
 8001228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2010      	movs	r0, #16
 8001238:	f002 fe29 	bl	8003e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800123c:	2010      	movs	r0, #16
 800123e:	f002 fe42 	bl	8003ec6 <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b44      	ldr	r3, [pc, #272]	; (8001378 <MX_GPIO_Init+0x128>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a43      	ldr	r2, [pc, #268]	; (8001378 <MX_GPIO_Init+0x128>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b41      	ldr	r3, [pc, #260]	; (8001378 <MX_GPIO_Init+0x128>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <MX_GPIO_Init+0x128>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a3d      	ldr	r2, [pc, #244]	; (8001378 <MX_GPIO_Init+0x128>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <MX_GPIO_Init+0x128>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <MX_GPIO_Init+0x128>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a37      	ldr	r2, [pc, #220]	; (8001378 <MX_GPIO_Init+0x128>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b35      	ldr	r3, [pc, #212]	; (8001378 <MX_GPIO_Init+0x128>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ae:	4b32      	ldr	r3, [pc, #200]	; (8001378 <MX_GPIO_Init+0x128>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a31      	ldr	r2, [pc, #196]	; (8001378 <MX_GPIO_Init+0x128>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <MX_GPIO_Init+0x128>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <MX_GPIO_Init+0x128>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a2b      	ldr	r2, [pc, #172]	; (8001378 <MX_GPIO_Init+0x128>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b29      	ldr	r3, [pc, #164]	; (8001378 <MX_GPIO_Init+0x128>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4b26      	ldr	r3, [pc, #152]	; (8001378 <MX_GPIO_Init+0x128>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a25      	ldr	r2, [pc, #148]	; (8001378 <MX_GPIO_Init+0x128>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <MX_GPIO_Init+0x128>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S0_Pin|S1_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2121      	movs	r1, #33	; 0x21
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f003 fb11 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001308:	481c      	ldr	r0, [pc, #112]	; (800137c <MX_GPIO_Init+0x12c>)
 800130a:	f003 fb0b 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S2_Pin|S3_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	21c0      	movs	r1, #192	; 0xc0
 8001312:	481b      	ldr	r0, [pc, #108]	; (8001380 <MX_GPIO_Init+0x130>)
 8001314:	f003 fb06 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin;
 8001318:	2321      	movs	r3, #33	; 0x21
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001332:	f003 f859 	bl	80043e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_Pin;
 8001336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	480b      	ldr	r0, [pc, #44]	; (800137c <MX_GPIO_Init+0x12c>)
 8001350:	f003 f84a 	bl	80043e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = S2_Pin|S3_Pin;
 8001354:	23c0      	movs	r3, #192	; 0xc0
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_GPIO_Init+0x130>)
 800136c:	f003 f83c 	bl	80043e8 <HAL_GPIO_Init>

}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	; 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000
 800137c:	48001000 	.word	0x48001000
 8001380:	48000400 	.word	0x48000400

08001384 <readMeasurements>:
		}
	}
}

void readMeasurements(ADC_HandleTypeDef *hadc, Measurement *m)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	uint16_t i;

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001394:	482d      	ldr	r0, [pc, #180]	; (800144c <readMeasurements+0xc8>)
 8001396:	f003 fac5 	bl	8004924 <HAL_GPIO_WritePin>

	for(i = 0; i < MEAS_NUM; ++i)
 800139a:	2300      	movs	r3, #0
 800139c:	81fb      	strh	r3, [r7, #14]
 800139e:	e047      	b.n	8001430 <readMeasurements+0xac>
	{
		HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, (i>>0) & 0x01);
 80013a0:	89fb      	ldrh	r3, [r7, #14]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	2101      	movs	r1, #1
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f003 fab7 	bl	8004924 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, (i>>1) & 0x01);
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	2120      	movs	r1, #32
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f003 faaa 	bl	8004924 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, (i>>2) & 0x01);
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	2140      	movs	r1, #64	; 0x40
 80013e2:	481b      	ldr	r0, [pc, #108]	; (8001450 <readMeasurements+0xcc>)
 80013e4:	f003 fa9e 	bl	8004924 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, (i>>3) & 0x01);
 80013e8:	89fb      	ldrh	r3, [r7, #14]
 80013ea:	08db      	lsrs	r3, r3, #3
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	4815      	ldr	r0, [pc, #84]	; (8001450 <readMeasurements+0xcc>)
 80013fc:	f003 fa92 	bl	8004924 <HAL_GPIO_WritePin>

		HAL_ADC_Start(hadc);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f001 fdb7 	bl	8002f74 <HAL_ADC_Start>

		if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 8001406:	210a      	movs	r1, #10
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f001 fe6d 	bl	80030e8 <HAL_ADC_PollForConversion>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10a      	bne.n	800142a <readMeasurements+0xa6>
		{
			m->meas[i] = HAL_ADC_GetValue(hadc);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f001 ff37 	bl	8003288 <HAL_ADC_GetValue>
 800141a:	4602      	mov	r2, r0
 800141c:	89fb      	ldrh	r3, [r7, #14]
 800141e:	b291      	uxth	r1, r2
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	460a      	mov	r2, r1
 8001428:	809a      	strh	r2, [r3, #4]
	for(i = 0; i < MEAS_NUM; ++i)
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	3301      	adds	r3, #1
 800142e:	81fb      	strh	r3, [r7, #14]
 8001430:	89fb      	ldrh	r3, [r7, #14]
 8001432:	2b08      	cmp	r3, #8
 8001434:	d9b4      	bls.n	80013a0 <readMeasurements+0x1c>
		}
	}

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143c:	4803      	ldr	r0, [pc, #12]	; (800144c <readMeasurements+0xc8>)
 800143e:	f003 fa71 	bl	8004924 <HAL_GPIO_WritePin>
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	48001000 	.word	0x48001000
 8001450:	48000400 	.word	0x48000400

08001454 <HAL_RTC_AlarmAEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	  if(f_data_ready == RESET && init_ready == SET)
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_RTC_AlarmAEventCallback+0x38>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10f      	bne.n	8001484 <HAL_RTC_AlarmAEventCallback+0x30>
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d10b      	bne.n	8001484 <HAL_RTC_AlarmAEventCallback+0x30>
	  {
		  readMeasurements(&hadc1, &mes);
 800146c:	4909      	ldr	r1, [pc, #36]	; (8001494 <HAL_RTC_AlarmAEventCallback+0x40>)
 800146e:	480a      	ldr	r0, [pc, #40]	; (8001498 <HAL_RTC_AlarmAEventCallback+0x44>)
 8001470:	f7ff ff88 	bl	8001384 <readMeasurements>
		  mes.time = getCurrTimestamp();
 8001474:	f000 fecc 	bl	8002210 <getCurrTimestamp>
 8001478:	4603      	mov	r3, r0
 800147a:	4a06      	ldr	r2, [pc, #24]	; (8001494 <HAL_RTC_AlarmAEventCallback+0x40>)
 800147c:	6013      	str	r3, [r2, #0]
		  f_data_ready = SET;
 800147e:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_RTC_AlarmAEventCallback+0x38>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
	  }

}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000348 	.word	0x20000348
 8001490:	2000032c 	.word	0x2000032c
 8001494:	20000330 	.word	0x20000330
 8001498:	20000264 	.word	0x20000264

0800149c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	parseCommand(RxBuff);
 80014a4:	4807      	ldr	r0, [pc, #28]	; (80014c4 <HAL_UART_RxCpltCallback+0x28>)
 80014a6:	f000 fa19 	bl	80018dc <parseCommand>
	HAL_UART_Receive_DMA(&huart2, RxBuff, rx_command_size);
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_UART_RxCpltCallback+0x2c>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	4904      	ldr	r1, [pc, #16]	; (80014c4 <HAL_UART_RxCpltCallback+0x28>)
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_UART_RxCpltCallback+0x30>)
 80014b6:	f006 fb79 	bl	8007bac <HAL_UART_Receive_DMA>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200002c8 	.word	0x200002c8
 80014c8:	20000000 	.word	0x20000000
 80014cc:	2000040c 	.word	0x2000040c

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d6:	f001 f975 	bl	80027c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014da:	f000 f85b 	bl	8001594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014de:	f7ff feb7 	bl	8001250 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80014e2:	f000 fa13 	bl	800190c <MX_QUADSPI_Init>
  MX_ADC1_Init();
 80014e6:	f7ff fde1 	bl	80010ac <MX_ADC1_Init>
  MX_RTC_Init();
 80014ea:	f000 fd97 	bl	800201c <MX_RTC_Init>
  MX_DMA_Init();
 80014ee:	f7ff fe91 	bl	8001214 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014f2:	f001 f85d 	bl	80025b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80014f6:	f000 ffef 	bl	80024d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


	 //Inicjalizacja

	 if (CSP_QUADSPI_Init() != HAL_OK) {
 80014fa:	f000 fa8f 	bl	8001a1c <CSP_QUADSPI_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <main+0x38>
	 Error_Handler();
 8001504:	f000 f8e2 	bl	80016cc <Error_Handler>
	 }

	 if (CSP_QSPI_Erase_Chip() != HAL_OK) {
 8001508:	f000 fabe 	bl	8001a88 <CSP_QSPI_Erase_Chip>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <main+0x46>
	 Error_Handler();
 8001512:	f000 f8db 	bl	80016cc <Error_Handler>
	 }


	 //Ustawienie daty i godziny
	 if (setDate(25, 04, 22, 1) != HAL_OK)
 8001516:	2301      	movs	r3, #1
 8001518:	2216      	movs	r2, #22
 800151a:	2104      	movs	r1, #4
 800151c:	2019      	movs	r0, #25
 800151e:	f000 fe2f 	bl	8002180 <setDate>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <main+0x5c>
		 Error_Handler();
 8001528:	f000 f8d0 	bl	80016cc <Error_Handler>

	 if (setTime(00,00,13) != HAL_OK)
 800152c:	220d      	movs	r2, #13
 800152e:	2100      	movs	r1, #0
 8001530:	2000      	movs	r0, #0
 8001532:	f000 fe4b 	bl	80021cc <setTime>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <main+0x70>
		 Error_Handler();
 800153c:	f000 f8c6 	bl	80016cc <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_UART_Receive_DMA(&huart2, RxBuff, rx_command_size);
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <main+0xac>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	490d      	ldr	r1, [pc, #52]	; (8001580 <main+0xb0>)
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <main+0xb4>)
 800154c:	f006 fb2e 	bl	8007bac <HAL_UART_Receive_DMA>
	init_ready = SET;
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <main+0xb8>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
	while (1) {
		if(f_data_ready == SET)
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <main+0xbc>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d1fb      	bne.n	8001556 <main+0x86>
		{
			storeData(mes);
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <main+0xc0>)
 8001560:	466c      	mov	r4, sp
 8001562:	f103 0210 	add.w	r2, r3, #16
 8001566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800156a:	e884 0003 	stmia.w	r4, {r0, r1}
 800156e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001570:	f000 f8b6 	bl	80016e0 <storeData>
			f_data_ready = RESET;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <main+0xbc>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
		if(f_data_ready == SET)
 800157a:	e7ec      	b.n	8001556 <main+0x86>
 800157c:	20000000 	.word	0x20000000
 8001580:	200002c8 	.word	0x200002c8
 8001584:	2000040c 	.word	0x2000040c
 8001588:	2000032c 	.word	0x2000032c
 800158c:	20000348 	.word	0x20000348
 8001590:	20000330 	.word	0x20000330

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b0b8      	sub	sp, #224	; 0xe0
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800159e:	2244      	movs	r2, #68	; 0x44
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f007 fb46 	bl	8008c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b8:	463b      	mov	r3, r7
 80015ba:	2288      	movs	r2, #136	; 0x88
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f007 fb38 	bl	8008c34 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015c4:	f003 f9c6 	bl	8004954 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015c8:	4b3e      	ldr	r3, [pc, #248]	; (80016c4 <SystemClock_Config+0x130>)
 80015ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ce:	4a3d      	ldr	r2, [pc, #244]	; (80016c4 <SystemClock_Config+0x130>)
 80015d0:	f023 0318 	bic.w	r3, r3, #24
 80015d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80015d8:	2306      	movs	r3, #6
 80015da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015de:	2301      	movs	r3, #1
 80015e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ec:	2310      	movs	r3, #16
 80015ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015f8:	2302      	movs	r3, #2
 80015fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001604:	230a      	movs	r3, #10
 8001606:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800160a:	2307      	movs	r3, #7
 800160c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001610:	2302      	movs	r3, #2
 8001612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001616:	2302      	movs	r3, #2
 8001618:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001620:	4618      	mov	r0, r3
 8001622:	f003 feeb 	bl	80053fc <HAL_RCC_OscConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800162c:	f000 f84e 	bl	80016cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001630:	230f      	movs	r3, #15
 8001632:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001636:	2303      	movs	r3, #3
 8001638:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800164e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001652:	2104      	movs	r1, #4
 8001654:	4618      	mov	r0, r3
 8001656:	f004 fab9 	bl	8005bcc <HAL_RCC_ClockConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001660:	f000 f834 	bl	80016cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <SystemClock_Config+0x134>)
 8001666:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001668:	2300      	movs	r3, #0
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800166c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001670:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800167a:	2302      	movs	r3, #2
 800167c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800167e:	2301      	movs	r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001682:	2308      	movs	r3, #8
 8001684:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001686:	2307      	movs	r3, #7
 8001688:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800168a:	2302      	movs	r3, #2
 800168c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800168e:	2302      	movs	r3, #2
 8001690:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001692:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001696:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001698:	463b      	mov	r3, r7
 800169a:	4618      	mov	r0, r3
 800169c:	f004 fc9c 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0x116>
  {
    Error_Handler();
 80016a6:	f000 f811 	bl	80016cc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016ae:	f003 f96f 	bl	8004990 <HAL_PWREx_ControlVoltageScaling>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x128>
  {
    Error_Handler();
 80016b8:	f000 f808 	bl	80016cc <Error_Handler>
  }
}
 80016bc:	bf00      	nop
 80016be:	37e0      	adds	r7, #224	; 0xe0
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40021000 	.word	0x40021000
 80016c8:	00024002 	.word	0x00024002

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("ERROR\r\n");
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <Error_Handler+0x10>)
 80016d2:	f008 fd09 	bl	800a0e8 <puts>
  /* USER CODE END Error_Handler_Debug */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	0800eaf8 	.word	0x0800eaf8

080016e0 <storeData>:

//Variable with current address
uint32_t curAddr = 0;

//Write date and data to memory
HAL_StatusTypeDef storeData(struct measurement mes) {
 80016e0:	b084      	sub	sp, #16
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	f107 0c18 	add.w	ip, r7, #24
 80016ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	if ((curAddr + 22) >= FLASH_SIZE_HERE)
 80016f0:	4b22      	ldr	r3, [pc, #136]	; (800177c <storeData+0x9c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	3316      	adds	r3, #22
 80016f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016fa:	d301      	bcc.n	8001700 <storeData+0x20>
		return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e036      	b.n	800176e <storeData+0x8e>
	uint32_t tmp2;
	tmp2 = mes.time;
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	60bb      	str	r3, [r7, #8]
	if (CSP_QSPI_Write(&tmp2, curAddr, 4) != HAL_OK)
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <storeData+0x9c>)
 8001706:	6819      	ldr	r1, [r3, #0]
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	2204      	movs	r2, #4
 800170e:	4618      	mov	r0, r3
 8001710:	f000 fbb4 	bl	8001e7c <CSP_QSPI_Write>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <storeData+0x3e>
		return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e027      	b.n	800176e <storeData+0x8e>

	curAddr = curAddr + 4;
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <storeData+0x9c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3304      	adds	r3, #4
 8001724:	4a15      	ldr	r2, [pc, #84]	; (800177c <storeData+0x9c>)
 8001726:	6013      	str	r3, [r2, #0]
	uint16_t tmp = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 9; i++) {
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e019      	b.n	8001766 <storeData+0x86>
		tmp = mes.meas[i];
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	3318      	adds	r3, #24
 8001738:	443b      	add	r3, r7
 800173a:	889b      	ldrh	r3, [r3, #4]
 800173c:	80fb      	strh	r3, [r7, #6]
		if (CSP_QSPI_Write(&tmp, curAddr, 2) != HAL_OK)
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <storeData+0x9c>)
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	1dbb      	adds	r3, r7, #6
 8001744:	2202      	movs	r2, #2
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fb98 	bl	8001e7c <CSP_QSPI_Write>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <storeData+0x76>
			return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00b      	b.n	800176e <storeData+0x8e>
		curAddr = curAddr + 2;
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <storeData+0x9c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	3302      	adds	r3, #2
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <storeData+0x9c>)
 800175e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 9; i++) {
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3301      	adds	r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b08      	cmp	r3, #8
 800176a:	dde2      	ble.n	8001732 <storeData+0x52>
	}
	return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001778:	b004      	add	sp, #16
 800177a:	4770      	bx	lr
 800177c:	2000034c 	.word	0x2000034c

08001780 <sendData>:

uint16_t sendData() {
 8001780:	b580      	push	{r7, lr}
 8001782:	b08c      	sub	sp, #48	; 0x30
 8001784:	af00      	add	r7, sp, #0
	uint16_t dataNum = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint32_t tmpCurAddr = curAddr;
 800178a:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <sendData+0xc4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	623b      	str	r3, [r7, #32]
	uint16_t readData[11];
	uint32_t timestamp;

	if (curAddr < 18)
 8001790:	4b2c      	ldr	r3, [pc, #176]	; (8001844 <sendData+0xc4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b11      	cmp	r3, #17
 8001796:	d801      	bhi.n	800179c <sendData+0x1c>
		return dataNum;
 8001798:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800179a:	e04e      	b.n	800183a <sendData+0xba>

	for (int i = 0; i < (tmpCurAddr / 22); i++) \
 800179c:	2300      	movs	r3, #0
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a0:	e039      	b.n	8001816 <sendData+0x96>
	{
		if (CSP_QSPI_Read(&readData, dataNum * 22, 22) != HAL_OK)
 80017a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017a4:	2216      	movs	r2, #22
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	4619      	mov	r1, r3
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2216      	movs	r2, #22
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fbdd 	bl	8001f70 <CSP_QSPI_Read>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <sendData+0x40>
			Error_Handler();
 80017bc:	f7ff ff86 	bl	80016cc <Error_Handler>
		dataNum++;
 80017c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017c2:	3301      	adds	r3, #1
 80017c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		curAddr -= 22;
 80017c6:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <sendData+0xc4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	3b16      	subs	r3, #22
 80017cc:	4a1d      	ldr	r2, [pc, #116]	; (8001844 <sendData+0xc4>)
 80017ce:	6013      	str	r3, [r2, #0]
		timestamp = (readData[1] << 16) | readData[0];
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	041b      	lsls	r3, r3, #16
 80017d4:	88ba      	ldrh	r2, [r7, #4]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61fb      	str	r3, [r7, #28]
		printf("%d. %lu ", i, timestamp);
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017de:	481a      	ldr	r0, [pc, #104]	; (8001848 <sendData+0xc8>)
 80017e0:	f008 fbfc 	bl	8009fdc <iprintf>

		for (int j = 2; j < 11; j++)
 80017e4:	2302      	movs	r3, #2
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
 80017e8:	e00c      	b.n	8001804 <sendData+0x84>
		{
			printf("%d ", readData[j]);
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	3330      	adds	r3, #48	; 0x30
 80017f0:	443b      	add	r3, r7
 80017f2:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80017f6:	4619      	mov	r1, r3
 80017f8:	4814      	ldr	r0, [pc, #80]	; (800184c <sendData+0xcc>)
 80017fa:	f008 fbef 	bl	8009fdc <iprintf>
		for (int j = 2; j < 11; j++)
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	3301      	adds	r3, #1
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	2b0a      	cmp	r3, #10
 8001808:	ddef      	ble.n	80017ea <sendData+0x6a>
		}
		printf("\n\r");
 800180a:	4811      	ldr	r0, [pc, #68]	; (8001850 <sendData+0xd0>)
 800180c:	f008 fbe6 	bl	8009fdc <iprintf>
	for (int i = 0; i < (tmpCurAddr / 22); i++) \
 8001810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001812:	3301      	adds	r3, #1
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <sendData+0xd4>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	091a      	lsrs	r2, r3, #4
 8001820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001822:	429a      	cmp	r2, r3
 8001824:	d8bd      	bhi.n	80017a2 <sendData+0x22>
	}

	if(CSP_QSPI_EraseSector(0, tmpCurAddr) != HAL_OK)
 8001826:	6a39      	ldr	r1, [r7, #32]
 8001828:	2000      	movs	r0, #0
 800182a:	f000 fa79 	bl	8001d20 <CSP_QSPI_EraseSector>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <sendData+0xb8>
		Error_Handler();
 8001834:	f7ff ff4a 	bl	80016cc <Error_Handler>

	return dataNum;
 8001838:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800183a:	4618      	mov	r0, r3
 800183c:	3730      	adds	r7, #48	; 0x30
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000034c 	.word	0x2000034c
 8001848:	0800eb00 	.word	0x0800eb00
 800184c:	0800eb0c 	.word	0x0800eb0c
 8001850:	0800eb10 	.word	0x0800eb10
 8001854:	ba2e8ba3 	.word	0xba2e8ba3

08001858 <printCurrTime>:

void printCurrTime()
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b092      	sub	sp, #72	; 0x48
 800185c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  time_t timestamp;
  struct tm currTime;

  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800185e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001862:	2200      	movs	r2, #0
 8001864:	4619      	mov	r1, r3
 8001866:	481b      	ldr	r0, [pc, #108]	; (80018d4 <printCurrTime+0x7c>)
 8001868:	f005 f98a 	bl	8006b80 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800186c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	4817      	ldr	r0, [pc, #92]	; (80018d4 <printCurrTime+0x7c>)
 8001876:	f005 fa66 	bl	8006d46 <HAL_RTC_GetDate>

  currTime.tm_year = currentDate.Year + 100;
 800187a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800187e:	3364      	adds	r3, #100	; 0x64
 8001880:	61bb      	str	r3, [r7, #24]
  currTime.tm_mday = currentDate.Date;
 8001882:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001886:	613b      	str	r3, [r7, #16]
  currTime.tm_mon  = currentDate.Month - 1;
 8001888:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800188c:	3b01      	subs	r3, #1
 800188e:	617b      	str	r3, [r7, #20]

  currTime.tm_hour = currentTime.Hours;
 8001890:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001894:	60fb      	str	r3, [r7, #12]
  currTime.tm_min  = currentTime.Minutes;
 8001896:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800189a:	60bb      	str	r3, [r7, #8]
  currTime.tm_sec  = currentTime.Seconds;
 800189c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80018a0:	607b      	str	r3, [r7, #4]

  timestamp = mktime(&currTime);
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	4618      	mov	r0, r3
 80018a6:	f007 faa5 	bl	8008df4 <mktime>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

  printf("%s as timestamp %lu\r\n",ctime(&timestamp), (uint32_t)timestamp);
 80018b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b6:	4618      	mov	r0, r3
 80018b8:	f007 f868 	bl	800898c <ctime>
 80018bc:	4601      	mov	r1, r0
 80018be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018c2:	4613      	mov	r3, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	4804      	ldr	r0, [pc, #16]	; (80018d8 <printCurrTime+0x80>)
 80018c8:	f008 fb88 	bl	8009fdc <iprintf>
}
 80018cc:	bf00      	nop
 80018ce:	3748      	adds	r7, #72	; 0x48
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000394 	.word	0x20000394
 80018d8:	0800eb14 	.word	0x0800eb14

080018dc <parseCommand>:

uint8_t parseCommand(uint8_t *buf)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	switch(buf[0])
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b44      	cmp	r3, #68	; 0x44
 80018ea:	d004      	beq.n	80018f6 <parseCommand+0x1a>
 80018ec:	2b54      	cmp	r3, #84	; 0x54
 80018ee:	d105      	bne.n	80018fc <parseCommand+0x20>
	{
	case 'T':
		printCurrTime();
 80018f0:	f7ff ffb2 	bl	8001858 <printCurrTime>
		break;
 80018f4:	e004      	b.n	8001900 <parseCommand+0x24>
	case 'D':
		sendData();
 80018f6:	f7ff ff43 	bl	8001780 <sendData>
		break;
 80018fa:	e001      	b.n	8001900 <parseCommand+0x24>
	default:
		return 1;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <parseCommand+0x26>
	}

	return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_QUADSPI_Init+0x44>)
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <MX_QUADSPI_Init+0x48>)
 8001914:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_QUADSPI_Init+0x44>)
 8001918:	2201      	movs	r2, #1
 800191a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_QUADSPI_Init+0x44>)
 800191e:	2204      	movs	r2, #4
 8001920:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <MX_QUADSPI_Init+0x44>)
 8001924:	2210      	movs	r2, #16
 8001926:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_QUADSPI_Init+0x44>)
 800192a:	2217      	movs	r2, #23
 800192c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MX_QUADSPI_Init+0x44>)
 8001930:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001934:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_QUADSPI_Init+0x44>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_QUADSPI_Init+0x44>)
 800193e:	f003 f87d 	bl	8004a3c <HAL_QSPI_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_QUADSPI_Init+0x40>
  {
    Error_Handler();
 8001948:	f7ff fec0 	bl	80016cc <Error_Handler>
  }

}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000350 	.word	0x20000350
 8001954:	a0001000 	.word	0xa0001000

08001958 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <HAL_QSPI_MspInit+0x7c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d128      	bne.n	80019cc <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_QSPI_MspInit+0x80>)
 800197c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800197e:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <HAL_QSPI_MspInit+0x80>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6513      	str	r3, [r2, #80]	; 0x50
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_QSPI_MspInit+0x80>)
 8001988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800198a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_QSPI_MspInit+0x80>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_QSPI_MspInit+0x80>)
 8001998:	f043 0310 	orr.w	r3, r3, #16
 800199c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_QSPI_MspInit+0x80>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80019aa:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80019ae:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019bc:	230a      	movs	r3, #10
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <HAL_QSPI_MspInit+0x84>)
 80019c8:	f002 fd0e 	bl	80043e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	; 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	a0001000 	.word	0xa0001000
 80019d8:	40021000 	.word	0x40021000
 80019dc:	48001000 	.word	0x48001000

080019e0 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <HAL_QSPI_MspDeInit+0x30>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10a      	bne.n	8001a08 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_QSPI_MspDeInit+0x34>)
 80019f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019f6:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_QSPI_MspDeInit+0x34>)
 80019f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019fc:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80019fe:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <HAL_QSPI_MspDeInit+0x38>)
 8001a04:	f002 fe9a 	bl	800473c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	a0001000 	.word	0xa0001000
 8001a14:	40021000 	.word	0x40021000
 8001a18:	48001000 	.word	0x48001000

08001a1c <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */

uint8_t CSP_QUADSPI_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <CSP_QUADSPI_Init+0x64>)
 8001a22:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <CSP_QUADSPI_Init+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8001a26:	4816      	ldr	r0, [pc, #88]	; (8001a80 <CSP_QUADSPI_Init+0x64>)
 8001a28:	f003 f87e 	bl	8004b28 <HAL_QSPI_DeInit>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <CSP_QUADSPI_Init+0x1a>
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e021      	b.n	8001a7a <CSP_QUADSPI_Init+0x5e>
    }

    MX_QUADSPI_Init();
 8001a36:	f7ff ff69 	bl	800190c <MX_QUADSPI_Init>

    if (QSPI_ResetChip() != HAL_OK) {
 8001a3a:	f000 f9c1 	bl	8001dc0 <QSPI_ResetChip>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <CSP_QUADSPI_Init+0x2c>
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e018      	b.n	8001a7a <CSP_QUADSPI_Init+0x5e>
    }

    HAL_Delay(1);
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f000 ff37 	bl	80028bc <HAL_Delay>

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8001a4e:	f000 f857 	bl	8001b00 <QSPI_AutoPollingMemReady>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <CSP_QUADSPI_Init+0x40>
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e00e      	b.n	8001a7a <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
 8001a5c:	f000 f888 	bl	8001b70 <QSPI_WriteEnable>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <CSP_QUADSPI_Init+0x4e>

        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e007      	b.n	8001a7a <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_Configuration() != HAL_OK) {
 8001a6a:	f000 f8cb 	bl	8001c04 <QSPI_Configuration>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <CSP_QUADSPI_Init+0x5c>
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <CSP_QUADSPI_Init+0x5e>
    }

    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000350 	.word	0x20000350
 8001a84:	a0001000 	.word	0xa0001000

08001a88 <CSP_QSPI_Erase_Chip>:


uint8_t CSP_QSPI_Erase_Chip(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08e      	sub	sp, #56	; 0x38
 8001a8c:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;


    if (QSPI_WriteEnable() != HAL_OK) {
 8001a8e:	f000 f86f 	bl	8001b70 <QSPI_WriteEnable>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <CSP_QSPI_Erase_Chip+0x14>
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e02b      	b.n	8001af4 <CSP_QSPI_Erase_Chip+0x6c>
    }


    /* Erasing Sequence --------------------------------- */
    sCommand.Instruction = BULK_ERASE_CMD;
 8001a9c:	23c7      	movs	r3, #199	; 0xc7
 8001a9e:	603b      	str	r3, [r7, #0]
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa4:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aaa:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    sCommand.Address = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	607b      	str	r3, [r7, #4]
    sCommand.DataMode = QSPI_DATA_NONE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DummyCycles = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]


    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_MAX_DELAY)
 8001acc:	463b      	mov	r3, r7
 8001ace:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4809      	ldr	r0, [pc, #36]	; (8001afc <CSP_QSPI_Erase_Chip+0x74>)
 8001ad6:	f003 f84b 	bl	8004b70 <HAL_QSPI_Command>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <CSP_QSPI_Erase_Chip+0x5c>
        != HAL_OK) {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e007      	b.n	8001af4 <CSP_QSPI_Erase_Chip+0x6c>
    }

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8001ae4:	f000 f80c 	bl	8001b00 <QSPI_AutoPollingMemReady>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <CSP_QSPI_Erase_Chip+0x6a>
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <CSP_QSPI_Erase_Chip+0x6c>
    }

    return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3738      	adds	r7, #56	; 0x38
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000350 	.word	0x20000350

08001b00 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b094      	sub	sp, #80	; 0x50
 8001b04:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8001b0c:	2305      	movs	r3, #5
 8001b0e:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001b18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001b26:	2300      	movs	r3, #0
 8001b28:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match = 0x00;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
    sConfig.Mask = N25Q128A_SR_WIP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8001b3e:	2310      	movs	r3, #16
 8001b40:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001b42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b46:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_MAX_DELAY) != HAL_OK)
 8001b48:	463a      	mov	r2, r7
 8001b4a:	f107 0118 	add.w	r1, r7, #24
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <QSPI_AutoPollingMemReady+0x6c>)
 8001b54:	f003 f9a3 	bl	8004e9e <HAL_QSPI_AutoPolling>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <QSPI_AutoPollingMemReady+0x62>
    {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <QSPI_AutoPollingMemReady+0x64>
    }

    return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3750      	adds	r7, #80	; 0x50
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000350 	.word	0x20000350

08001b70 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b094      	sub	sp, #80	; 0x50
 8001b74:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 8001b7c:	2306      	movs	r3, #6
 8001b7e:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001b94:	2300      	movs	r3, #0
 8001b96:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001b9c:	f107 0318 	add.w	r3, r7, #24
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4816      	ldr	r0, [pc, #88]	; (8001c00 <QSPI_WriteEnable+0x90>)
 8001ba8:	f002 ffe2 	bl	8004b70 <HAL_QSPI_Command>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e01f      	b.n	8001bf6 <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8001bc6:	2310      	movs	r3, #16
 8001bc8:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001bca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bce:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 8001bd0:	2305      	movs	r3, #5
 8001bd2:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001bda:	463a      	mov	r2, r7
 8001bdc:	f107 0118 	add.w	r1, r7, #24
 8001be0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001be4:	4806      	ldr	r0, [pc, #24]	; (8001c00 <QSPI_WriteEnable+0x90>)
 8001be6:	f003 f95a 	bl	8004e9e <HAL_QSPI_AutoPolling>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3750      	adds	r7, #80	; 0x50
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000350 	.word	0x20000350

08001c04 <QSPI_Configuration>:


/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b092      	sub	sp, #72	; 0x48
 8001c08:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    uint8_t reg;

    /*read configuration register*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c0e:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction = READ_VOL_CFG_REG_CMD;
 8001c10:	2385      	movs	r3, #133	; 0x85
 8001c12:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.NbData = 1;
 8001c32:	2301      	movs	r3, #1
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4837      	ldr	r0, [pc, #220]	; (8001d1c <QSPI_Configuration+0x118>)
 8001c40:	f002 ff96 	bl	8004b70 <HAL_QSPI_Command>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <QSPI_Configuration+0x4a>
        != HAL_OK) {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e061      	b.n	8001d12 <QSPI_Configuration+0x10e>
    }


    if (HAL_QSPI_Receive(&hqspi, &reg,
 8001c4e:	1cfb      	adds	r3, r7, #3
 8001c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c54:	4619      	mov	r1, r3
 8001c56:	4831      	ldr	r0, [pc, #196]	; (8001d1c <QSPI_Configuration+0x118>)
 8001c58:	f003 f87f 	bl	8004d5a <HAL_QSPI_Receive>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <QSPI_Configuration+0x62>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e055      	b.n	8001d12 <QSPI_Configuration+0x10e>
    }



    if (QSPI_WriteEnable() != HAL_OK) {
 8001c66:	f7ff ff83 	bl	8001b70 <QSPI_WriteEnable>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <QSPI_Configuration+0x70>

        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e04e      	b.n	8001d12 <QSPI_Configuration+0x10e>
    }


    /*set dummy cycles*/
    MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	b25b      	sxtb	r3, r3
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	b25a      	sxtb	r2, r3
 8001c7e:	23f0      	movs	r3, #240	; 0xf0
 8001c80:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c84:	fa93 f3a3 	rbit	r3, r3
 8001c88:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c8c:	647b      	str	r3, [r7, #68]	; 0x44
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <QSPI_Configuration+0x94>
  {
    return 32U;
 8001c94:	2320      	movs	r3, #32
 8001c96:	e003      	b.n	8001ca0 <QSPI_Configuration+0x9c>
  }
  return __builtin_clz(value);
 8001c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c9a:	fab3 f383 	clz	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	230a      	movs	r3, #10
 8001ca4:	408b      	lsls	r3, r1
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	70fb      	strb	r3, [r7, #3]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb4:	61fb      	str	r3, [r7, #28]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8001cc6:	2381      	movs	r3, #129	; 0x81
 8001cc8:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001cce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
    sCommand.NbData = 1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480d      	ldr	r0, [pc, #52]	; (8001d1c <QSPI_Configuration+0x118>)
 8001ce6:	f002 ff43 	bl	8004b70 <HAL_QSPI_Command>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <QSPI_Configuration+0xf0>
        != HAL_OK) {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e00e      	b.n	8001d12 <QSPI_Configuration+0x10e>
    }

    if (HAL_QSPI_Transmit(&hqspi, &reg,
 8001cf4:	1cfb      	adds	r3, r7, #3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4807      	ldr	r0, [pc, #28]	; (8001d1c <QSPI_Configuration+0x118>)
 8001cfe:	f002 ff95 	bl	8004c2c <HAL_QSPI_Transmit>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <QSPI_Configuration+0x10c>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        Error_Handler();
 8001d08:	f7ff fce0 	bl	80016cc <Error_Handler>
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <QSPI_Configuration+0x10e>
    }
    return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3748      	adds	r7, #72	; 0x48
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000350 	.word	0x20000350

08001d20 <CSP_QSPI_EraseSector>:

uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress, uint32_t EraseEndAddress)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b090      	sub	sp, #64	; 0x40
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]

    QSPI_CommandTypeDef sCommand;

    EraseStartAddress = EraseStartAddress
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	041b      	lsls	r3, r3, #16
 8001d30:	607b      	str	r3, [r7, #4]
                        - EraseStartAddress % N25Q128A_SECTOR_SIZE;

    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d36:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3c:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001d46:	2300      	movs	r3, #0
 8001d48:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.Instruction = SECTOR_ERASE_CMD;
 8001d4e:	23d8      	movs	r3, #216	; 0xd8
 8001d50:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8001d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24

    sCommand.DataMode = QSPI_DATA_NONE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]

    while (EraseEndAddress >= EraseStartAddress)
 8001d60:	e022      	b.n	8001da8 <CSP_QSPI_EraseSector+0x88>
    {
        sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d68:	60fb      	str	r3, [r7, #12]

        if (QSPI_WriteEnable() != HAL_OK) {
 8001d6a:	f7ff ff01 	bl	8001b70 <QSPI_WriteEnable>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <CSP_QSPI_EraseSector+0x58>
            return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e01c      	b.n	8001db2 <CSP_QSPI_EraseSector+0x92>
        }

        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001d78:	f107 0308 	add.w	r3, r7, #8
 8001d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d80:	4619      	mov	r1, r3
 8001d82:	480e      	ldr	r0, [pc, #56]	; (8001dbc <CSP_QSPI_EraseSector+0x9c>)
 8001d84:	f002 fef4 	bl	8004b70 <HAL_QSPI_Command>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <CSP_QSPI_EraseSector+0x72>
            != HAL_OK) {
            return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00f      	b.n	8001db2 <CSP_QSPI_EraseSector+0x92>
        }
        EraseStartAddress += N25Q128A_SECTOR_SIZE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d98:	607b      	str	r3, [r7, #4]

        if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8001d9a:	f7ff feb1 	bl	8001b00 <QSPI_AutoPollingMemReady>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <CSP_QSPI_EraseSector+0x88>
            return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e004      	b.n	8001db2 <CSP_QSPI_EraseSector+0x92>
    while (EraseEndAddress >= EraseStartAddress)
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d2d8      	bcs.n	8001d62 <CSP_QSPI_EraseSector+0x42>
        }
    }

    return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3740      	adds	r7, #64	; 0x40
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000350 	.word	0x20000350

08001dc0 <QSPI_ResetChip>:
    }
    return HAL_OK;
}

uint8_t QSPI_ResetChip()
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b090      	sub	sp, #64	; 0x40
 8001dc4:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dce:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd4:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001dde:	2300      	movs	r3, #0
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001de2:	2300      	movs	r3, #0
 8001de4:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 8001de6:	2366      	movs	r3, #102	; 0x66
 8001de8:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e00:	4619      	mov	r1, r3
 8001e02:	481d      	ldr	r0, [pc, #116]	; (8001e78 <QSPI_ResetChip+0xb8>)
 8001e04:	f002 feb4 	bl	8004b70 <HAL_QSPI_Command>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e02e      	b.n	8001e70 <QSPI_ResetChip+0xb0>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 8001e12:	2300      	movs	r3, #0
 8001e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e16:	e003      	b.n	8001e20 <QSPI_ResetChip+0x60>
        __NOP();
 8001e18:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 8001e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e22:	2b2e      	cmp	r3, #46	; 0x2e
 8001e24:	d9f8      	bls.n	8001e18 <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2a:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e30:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_MEMORY_CMD;
 8001e42:	2399      	movs	r3, #153	; 0x99
 8001e44:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4806      	ldr	r0, [pc, #24]	; (8001e78 <QSPI_ResetChip+0xb8>)
 8001e60:	f002 fe86 	bl	8004b70 <HAL_QSPI_Command>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <QSPI_ResetChip+0xb0>
    }
    return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3740      	adds	r7, #64	; 0x40
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000350 	.word	0x20000350

08001e7c <CSP_QSPI_Write>:
  return HAL_OK;
}


uint8_t CSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b096      	sub	sp, #88	; 0x58
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001e90:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8001e92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d901      	bls.n	8001e9e <CSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8001eb0:	2312      	movs	r3, #18
 8001eb2:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001eb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ebe:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001ec4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8001eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001edc:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8001ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 8001ee2:	f7ff fe45 	bl	8001b70 <QSPI_WriteEnable>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <CSP_QSPI_Write+0x74>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e038      	b.n	8001f62 <CSP_QSPI_Write+0xe6>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4619      	mov	r1, r3
 8001efa:	481c      	ldr	r0, [pc, #112]	; (8001f6c <CSP_QSPI_Write+0xf0>)
 8001efc:	f002 fe38 	bl	8004b70 <HAL_QSPI_Command>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <CSP_QSPI_Write+0x8e>
    {
      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e02b      	b.n	8001f62 <CSP_QSPI_Write+0xe6>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	68f9      	ldr	r1, [r7, #12]
 8001f10:	4816      	ldr	r0, [pc, #88]	; (8001f6c <CSP_QSPI_Write+0xf0>)
 8001f12:	f002 fe8b 	bl	8004c2c <HAL_QSPI_Transmit>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <CSP_QSPI_Write+0xa4>
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e020      	b.n	8001f62 <CSP_QSPI_Write+0xe6>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady() != HAL_OK)
 8001f20:	f7ff fdee 	bl	8001b00 <QSPI_AutoPollingMemReady>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <CSP_QSPI_Write+0xb2>
    {
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e019      	b.n	8001f62 <CSP_QSPI_Write+0xe6>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8001f2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f32:	4413      	add	r3, r2
 8001f34:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3a:	4413      	add	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8001f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d203      	bcs.n	8001f52 <CSP_QSPI_Write+0xd6>
 8001f4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	e001      	b.n	8001f56 <CSP_QSPI_Write+0xda>
 8001f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f56:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8001f58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d3bc      	bcc.n	8001eda <CSP_QSPI_Write+0x5e>

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3758      	adds	r7, #88	; 0x58
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000350 	.word	0x20000350

08001f70 <CSP_QSPI_Read>:


uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b092      	sub	sp, #72	; 0x48
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8001f82:	23eb      	movs	r3, #235	; 0xeb
 8001f84:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001f86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f90:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001f9a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8001fa0:	230a      	movs	r3, #10
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001fac:	2300      	movs	r3, #0
 8001fae:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4816      	ldr	r0, [pc, #88]	; (8002018 <CSP_QSPI_Read+0xa8>)
 8001fc0:	f002 fdd6 	bl	8004b70 <HAL_QSPI_Command>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <CSP_QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e01f      	b.n	800200e <CSP_QSPI_Read+0x9e>
  }

  /* Set S# timing for Read command */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <CSP_QSPI_Read+0xa8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <CSP_QSPI_Read+0xa8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe0:	605a      	str	r2, [r3, #4]

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe6:	68f9      	ldr	r1, [r7, #12]
 8001fe8:	480b      	ldr	r0, [pc, #44]	; (8002018 <CSP_QSPI_Read+0xa8>)
 8001fea:	f002 feb6 	bl	8004d5a <HAL_QSPI_Receive>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <CSP_QSPI_Read+0x88>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e00a      	b.n	800200e <CSP_QSPI_Read+0x9e>
  }

  /* Restore S# timing for nonRead commands */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <CSP_QSPI_Read+0xa8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <CSP_QSPI_Read+0xa8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 800200a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3748      	adds	r7, #72	; 0x48
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000350 	.word	0x20000350

0800201c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b092      	sub	sp, #72	; 0x48
 8002020:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8002022:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002032:	2300      	movs	r3, #0
 8002034:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	222c      	movs	r2, #44	; 0x2c
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f006 fdf9 	bl	8008c34 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002042:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <MX_RTC_Init+0x118>)
 8002044:	4a3c      	ldr	r2, [pc, #240]	; (8002138 <MX_RTC_Init+0x11c>)
 8002046:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002048:	4b3a      	ldr	r3, [pc, #232]	; (8002134 <MX_RTC_Init+0x118>)
 800204a:	2200      	movs	r2, #0
 800204c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800204e:	4b39      	ldr	r3, [pc, #228]	; (8002134 <MX_RTC_Init+0x118>)
 8002050:	227f      	movs	r2, #127	; 0x7f
 8002052:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002054:	4b37      	ldr	r3, [pc, #220]	; (8002134 <MX_RTC_Init+0x118>)
 8002056:	22ff      	movs	r2, #255	; 0xff
 8002058:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800205a:	4b36      	ldr	r3, [pc, #216]	; (8002134 <MX_RTC_Init+0x118>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002060:	4b34      	ldr	r3, [pc, #208]	; (8002134 <MX_RTC_Init+0x118>)
 8002062:	2200      	movs	r2, #0
 8002064:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002066:	4b33      	ldr	r3, [pc, #204]	; (8002134 <MX_RTC_Init+0x118>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800206c:	4b31      	ldr	r3, [pc, #196]	; (8002134 <MX_RTC_Init+0x118>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002072:	4830      	ldr	r0, [pc, #192]	; (8002134 <MX_RTC_Init+0x118>)
 8002074:	f004 fc6c 	bl	8006950 <HAL_RTC_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800207e:	f7ff fb25 	bl	80016cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8002082:	230c      	movs	r3, #12
 8002084:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002094:	2300      	movs	r3, #0
 8002096:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002098:	2300      	movs	r3, #0
 800209a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800209c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020a0:	2200      	movs	r2, #0
 80020a2:	4619      	mov	r1, r3
 80020a4:	4823      	ldr	r0, [pc, #140]	; (8002134 <MX_RTC_Init+0x118>)
 80020a6:	f004 fcce 	bl	8006a46 <HAL_RTC_SetTime>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80020b0:	f7ff fb0c 	bl	80016cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80020b4:	2301      	movs	r3, #1
 80020b6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_APRIL;
 80020ba:	2304      	movs	r3, #4
 80020bc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 25;
 80020c0:	2319      	movs	r3, #25
 80020c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 22;
 80020c6:	2316      	movs	r3, #22
 80020c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80020cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020d0:	2200      	movs	r2, #0
 80020d2:	4619      	mov	r1, r3
 80020d4:	4817      	ldr	r0, [pc, #92]	; (8002134 <MX_RTC_Init+0x118>)
 80020d6:	f004 fdaf 	bl	8006c38 <HAL_RTC_SetDate>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80020e0:	f7ff faf4 	bl	80016cc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 80020fc:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 8002100:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 800210a:	2301      	movs	r3, #1
 800210c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8002110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	2200      	movs	r2, #0
 800211a:	4619      	mov	r1, r3
 800211c:	4805      	ldr	r0, [pc, #20]	; (8002134 <MX_RTC_Init+0x118>)
 800211e:	f004 fe5f 	bl	8006de0 <HAL_RTC_SetAlarm_IT>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_RTC_Init+0x110>
  {
    Error_Handler();
 8002128:	f7ff fad0 	bl	80016cc <Error_Handler>
  }

}
 800212c:	bf00      	nop
 800212e:	3748      	adds	r7, #72	; 0x48
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000394 	.word	0x20000394
 8002138:	40002800 	.word	0x40002800

0800213c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <HAL_RTC_MspInit+0x3c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d10f      	bne.n	800216e <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RTC_MspInit+0x40>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002154:	4a09      	ldr	r2, [pc, #36]	; (800217c <HAL_RTC_MspInit+0x40>)
 8002156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800215e:	2200      	movs	r2, #0
 8002160:	2100      	movs	r1, #0
 8002162:	2029      	movs	r0, #41	; 0x29
 8002164:	f001 fe93 	bl	8003e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002168:	2029      	movs	r0, #41	; 0x29
 800216a:	f001 feac 	bl	8003ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40002800 	.word	0x40002800
 800217c:	40021000 	.word	0x40021000

08002180 <setDate>:
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef setDate(uint8_t day, uint8_t month, uint8_t year, uint8_t weekDay) {
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	4604      	mov	r4, r0
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4623      	mov	r3, r4
 8002190:	71fb      	strb	r3, [r7, #7]
 8002192:	4603      	mov	r3, r0
 8002194:	71bb      	strb	r3, [r7, #6]
 8002196:	460b      	mov	r3, r1
 8002198:	717b      	strb	r3, [r7, #5]
 800219a:	4613      	mov	r3, r2
 800219c:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef Date;
	Date.Date = day;
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	73bb      	strb	r3, [r7, #14]
	Date.Month = month;
 80021a2:	79bb      	ldrb	r3, [r7, #6]
 80021a4:	737b      	strb	r3, [r7, #13]
	Date.WeekDay = weekDay;
 80021a6:	793b      	ldrb	r3, [r7, #4]
 80021a8:	733b      	strb	r3, [r7, #12]
	Date.Year = year;
 80021aa:	797b      	ldrb	r3, [r7, #5]
 80021ac:	73fb      	strb	r3, [r7, #15]

	return HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80021ae:	f107 030c 	add.w	r3, r7, #12
 80021b2:	2200      	movs	r2, #0
 80021b4:	4619      	mov	r1, r3
 80021b6:	4804      	ldr	r0, [pc, #16]	; (80021c8 <setDate+0x48>)
 80021b8:	f004 fd3e 	bl	8006c38 <HAL_RTC_SetDate>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd90      	pop	{r4, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000394 	.word	0x20000394

080021cc <setTime>:
HAL_StatusTypeDef setTime(uint8_t sec, uint8_t min, uint8_t hour) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
 80021d6:	460b      	mov	r3, r1
 80021d8:	71bb      	strb	r3, [r7, #6]
 80021da:	4613      	mov	r3, r2
 80021dc:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef Time;
	Time.Seconds = sec;
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	73bb      	strb	r3, [r7, #14]
	Time.Minutes = min;
 80021e2:	79bb      	ldrb	r3, [r7, #6]
 80021e4:	737b      	strb	r3, [r7, #13]
	Time.Hours = hour;
 80021e6:	797b      	ldrb	r3, [r7, #5]
 80021e8:	733b      	strb	r3, [r7, #12]
	Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
	Time.StoreOperation = RTC_STOREOPERATION_RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]

	return HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	2200      	movs	r2, #0
 80021f8:	4619      	mov	r1, r3
 80021fa:	4804      	ldr	r0, [pc, #16]	; (800220c <setTime+0x40>)
 80021fc:	f004 fc23 	bl	8006a46 <HAL_RTC_SetTime>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000394 	.word	0x20000394

08002210 <getCurrTimestamp>:

uint32_t getCurrTimestamp()
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b092      	sub	sp, #72	; 0x48
 8002214:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef currentTime;
	  RTC_DateTypeDef currentDate;
	  time_t timestamp;
	  struct tm currTime;

	  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8002216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800221a:	2200      	movs	r2, #0
 800221c:	4619      	mov	r1, r3
 800221e:	4814      	ldr	r0, [pc, #80]	; (8002270 <getCurrTimestamp+0x60>)
 8002220:	f004 fcae 	bl	8006b80 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8002224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002228:	2200      	movs	r2, #0
 800222a:	4619      	mov	r1, r3
 800222c:	4810      	ldr	r0, [pc, #64]	; (8002270 <getCurrTimestamp+0x60>)
 800222e:	f004 fd8a 	bl	8006d46 <HAL_RTC_GetDate>

	  currTime.tm_year = currentDate.Year + 100;
 8002232:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002236:	3364      	adds	r3, #100	; 0x64
 8002238:	61bb      	str	r3, [r7, #24]
	  currTime.tm_mday = currentDate.Date;
 800223a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800223e:	613b      	str	r3, [r7, #16]
	  currTime.tm_mon  = currentDate.Month - 1;
 8002240:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002244:	3b01      	subs	r3, #1
 8002246:	617b      	str	r3, [r7, #20]

	  currTime.tm_hour = currentTime.Hours;
 8002248:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800224c:	60fb      	str	r3, [r7, #12]
	  currTime.tm_min  = currentTime.Minutes;
 800224e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002252:	60bb      	str	r3, [r7, #8]
	  currTime.tm_sec  = currentTime.Seconds;
 8002254:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002258:	607b      	str	r3, [r7, #4]

	  timestamp = mktime(&currTime);
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	4618      	mov	r0, r3
 800225e:	f006 fdc9 	bl	8008df4 <mktime>
 8002262:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

	  return (uint32_t)timestamp;
 8002266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002268:	4618      	mov	r0, r3
 800226a:	3748      	adds	r7, #72	; 0x48
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000394 	.word	0x20000394

08002274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227a:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <HAL_MspInit+0x44>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <HAL_MspInit+0x44>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6613      	str	r3, [r2, #96]	; 0x60
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <HAL_MspInit+0x44>)
 8002288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_MspInit+0x44>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	4a08      	ldr	r2, [pc, #32]	; (80022b8 <HAL_MspInit+0x44>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	6593      	str	r3, [r2, #88]	; 0x58
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_MspInit+0x44>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000

080022bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ce:	e7fe      	b.n	80022ce <HardFault_Handler+0x4>

080022d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <MemManage_Handler+0x4>

080022d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022da:	e7fe      	b.n	80022da <BusFault_Handler+0x4>

080022dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <UsageFault_Handler+0x4>

080022e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002310:	f000 fab4 	bl	800287c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}

08002318 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <DMA1_Channel6_IRQHandler+0x10>)
 800231e:	f001 ff84 	bl	800422a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000048c 	.word	0x2000048c

0800232c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <USART2_IRQHandler+0x10>)
 8002332:	f005 fcbf 	bl	8007cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000040c 	.word	0x2000040c

08002340 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <RTC_Alarm_IRQHandler+0x10>)
 8002346:	f004 fe87 	bl	8007058 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000394 	.word	0x20000394

08002354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
	return 1;
 8002358:	2301      	movs	r3, #1
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_kill>:

int _kill(int pid, int sig)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800236e:	f006 fb15 	bl	800899c <__errno>
 8002372:	4603      	mov	r3, r0
 8002374:	2216      	movs	r2, #22
 8002376:	601a      	str	r2, [r3, #0]
	return -1;
 8002378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_exit>:

void _exit (int status)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ffe7 	bl	8002364 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002396:	e7fe      	b.n	8002396 <_exit+0x12>

08002398 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	return -1;
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023c0:	605a      	str	r2, [r3, #4]
	return 0;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_isatty>:

int _isatty(int file)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	return 1;
 80023d8:	2301      	movs	r3, #1
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
	return 0;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <_sbrk+0x5c>)
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <_sbrk+0x60>)
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <_sbrk+0x64>)
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <_sbrk+0x68>)
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	429a      	cmp	r2, r3
 800242e:	d207      	bcs.n	8002440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002430:	f006 fab4 	bl	800899c <__errno>
 8002434:	4603      	mov	r3, r0
 8002436:	220c      	movs	r2, #12
 8002438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	e009      	b.n	8002454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <_sbrk+0x64>)
 8002450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20018000 	.word	0x20018000
 8002460:	00000400 	.word	0x00000400
 8002464:	200003bc 	.word	0x200003bc
 8002468:	20000510 	.word	0x20000510

0800246c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <SystemInit+0x64>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <SystemInit+0x64>)
 8002478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800247c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <SystemInit+0x68>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <SystemInit+0x68>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <SystemInit+0x68>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002492:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <SystemInit+0x68>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <SystemInit+0x68>)
 8002498:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800249c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80024a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <SystemInit+0x68>)
 80024a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <SystemInit+0x68>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <SystemInit+0x68>)
 80024b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80024b6:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <SystemInit+0x68>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <SystemInit+0x64>)
 80024be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024c2:	609a      	str	r2, [r3, #8]
#endif
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00
 80024d4:	40021000 	.word	0x40021000

080024d8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024de:	f107 0310 	add.w	r3, r7, #16
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80024f6:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <MX_TIM2_Init+0x98>)
 80024f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80024fe:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <MX_TIM2_Init+0x98>)
 8002500:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002504:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <MX_TIM2_Init+0x98>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800250c:	4b18      	ldr	r3, [pc, #96]	; (8002570 <MX_TIM2_Init+0x98>)
 800250e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002512:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <MX_TIM2_Init+0x98>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <MX_TIM2_Init+0x98>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002520:	4813      	ldr	r0, [pc, #76]	; (8002570 <MX_TIM2_Init+0x98>)
 8002522:	f004 febb 	bl	800729c <HAL_TIM_Base_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800252c:	f7ff f8ce 	bl	80016cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002534:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002536:	f107 0310 	add.w	r3, r7, #16
 800253a:	4619      	mov	r1, r3
 800253c:	480c      	ldr	r0, [pc, #48]	; (8002570 <MX_TIM2_Init+0x98>)
 800253e:	f004 ff04 	bl	800734a <HAL_TIM_ConfigClockSource>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002548:	f7ff f8c0 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800254c:	2320      	movs	r3, #32
 800254e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	4619      	mov	r1, r3
 8002558:	4805      	ldr	r0, [pc, #20]	; (8002570 <MX_TIM2_Init+0x98>)
 800255a:	f005 f8f1 	bl	8007740 <HAL_TIMEx_MasterConfigSynchronization>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002564:	f7ff f8b2 	bl	80016cc <Error_Handler>
  }

}
 8002568:	bf00      	nop
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	200003c0 	.word	0x200003c0

08002574 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002584:	d10b      	bne.n	800259e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_TIM_Base_MspInit+0x38>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	4a08      	ldr	r2, [pc, #32]	; (80025ac <HAL_TIM_Base_MspInit+0x38>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_TIM_Base_MspInit+0x38>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000

080025b0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <MX_USART2_UART_Init+0x5c>)
 80025b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025d6:	220c      	movs	r2, #12
 80025d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025f2:	4805      	ldr	r0, [pc, #20]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025f4:	f005 f92c 	bl	8007850 <HAL_UART_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80025fe:	f7ff f865 	bl	80016cc <Error_Handler>
  }

}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	2000040c 	.word	0x2000040c
 800260c:	40004400 	.word	0x40004400

08002610 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	; 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a2f      	ldr	r2, [pc, #188]	; (80026ec <HAL_UART_MspInit+0xdc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d158      	bne.n	80026e4 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002632:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <HAL_UART_MspInit+0xe0>)
 8002634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002636:	4a2e      	ldr	r2, [pc, #184]	; (80026f0 <HAL_UART_MspInit+0xe0>)
 8002638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263c:	6593      	str	r3, [r2, #88]	; 0x58
 800263e:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <HAL_UART_MspInit+0xe0>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800264a:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_UART_MspInit+0xe0>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	4a28      	ldr	r2, [pc, #160]	; (80026f0 <HAL_UART_MspInit+0xe0>)
 8002650:	f043 0308 	orr.w	r3, r3, #8
 8002654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002656:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <HAL_UART_MspInit+0xe0>)
 8002658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002662:	2360      	movs	r3, #96	; 0x60
 8002664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266e:	2303      	movs	r3, #3
 8002670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002672:	2307      	movs	r3, #7
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4619      	mov	r1, r3
 800267c:	481d      	ldr	r0, [pc, #116]	; (80026f4 <HAL_UART_MspInit+0xe4>)
 800267e:	f001 feb3 	bl	80043e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_UART_MspInit+0xe8>)
 8002684:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <HAL_UART_MspInit+0xec>)
 8002686:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_UART_MspInit+0xe8>)
 800268a:	2202      	movs	r2, #2
 800268c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <HAL_UART_MspInit+0xe8>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002694:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_UART_MspInit+0xe8>)
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <HAL_UART_MspInit+0xe8>)
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026a0:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_UART_MspInit+0xe8>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_UART_MspInit+0xe8>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_UART_MspInit+0xe8>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_UART_MspInit+0xe8>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026b8:	480f      	ldr	r0, [pc, #60]	; (80026f8 <HAL_UART_MspInit+0xe8>)
 80026ba:	f001 fc1f 	bl	8003efc <HAL_DMA_Init>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 80026c4:	f7ff f802 	bl	80016cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <HAL_UART_MspInit+0xe8>)
 80026cc:	66da      	str	r2, [r3, #108]	; 0x6c
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_UART_MspInit+0xe8>)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026d4:	2200      	movs	r2, #0
 80026d6:	2100      	movs	r1, #0
 80026d8:	2026      	movs	r0, #38	; 0x26
 80026da:	f001 fbd8 	bl	8003e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026de:	2026      	movs	r0, #38	; 0x26
 80026e0:	f001 fbf1 	bl	8003ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026e4:	bf00      	nop
 80026e6:	3728      	adds	r7, #40	; 0x28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40004400 	.word	0x40004400
 80026f0:	40021000 	.word	0x40021000
 80026f4:	48000c00 	.word	0x48000c00
 80026f8:	2000048c 	.word	0x2000048c
 80026fc:	4002006c 	.word	0x4002006c

08002700 <_read>:
  }
}

/* USER CODE BEGIN 1 */
int _read(int file, char *ptr, int len)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  /* read one byte only, according to _fstat returning character device type */
  hstatus = HAL_UART_Receive(&huart2, (uint8_t*) ptr, 1, HAL_MAX_DELAY);
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
 8002710:	2201      	movs	r2, #1
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	4807      	ldr	r0, [pc, #28]	; (8002734 <_read+0x34>)
 8002716:	f005 f97c 	bl	8007a12 <HAL_UART_Receive>
 800271a:	4603      	mov	r3, r0
 800271c:	75fb      	strb	r3, [r7, #23]
  if (hstatus == HAL_OK)
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <_read+0x28>
    return 1;
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <_read+0x2a>
  else
    return 0;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000040c 	.word	0x2000040c

08002738 <_write>:

int _write(int file, char *ptr, int len)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  /* write full string */
  hstatus = HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	b29a      	uxth	r2, r3
 8002748:	f04f 33ff 	mov.w	r3, #4294967295
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	4807      	ldr	r0, [pc, #28]	; (800276c <_write+0x34>)
 8002750:	f005 f8cc 	bl	80078ec <HAL_UART_Transmit>
 8002754:	4603      	mov	r3, r0
 8002756:	75fb      	strb	r3, [r7, #23]
  if (hstatus == HAL_OK)
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <_write+0x2a>
    return len;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	e000      	b.n	8002764 <_write+0x2c>
  else
    return 0;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	2000040c 	.word	0x2000040c

08002770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002774:	f7ff fe7a 	bl	800246c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002778:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800277a:	e003      	b.n	8002784 <LoopCopyDataInit>

0800277c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800277e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002780:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002782:	3104      	adds	r1, #4

08002784 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002784:	480a      	ldr	r0, [pc, #40]	; (80027b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002788:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800278a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800278c:	d3f6      	bcc.n	800277c <CopyDataInit>
	ldr	r2, =_sbss
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002790:	e002      	b.n	8002798 <LoopFillZerobss>

08002792 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002792:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002794:	f842 3b04 	str.w	r3, [r2], #4

08002798 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <LoopForever+0x16>)
	cmp	r2, r3
 800279a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800279c:	d3f9      	bcc.n	8002792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800279e:	f006 f903 	bl	80089a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027a2:	f7fe fe95 	bl	80014d0 <main>

080027a6 <LoopForever>:

LoopForever:
    b LoopForever
 80027a6:	e7fe      	b.n	80027a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027a8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80027ac:	0800f258 	.word	0x0800f258
	ldr	r0, =_sdata
 80027b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027b4:	20000248 	.word	0x20000248
	ldr	r2, =_sbss
 80027b8:	20000248 	.word	0x20000248
	ldr	r3, = _ebss
 80027bc:	20000510 	.word	0x20000510

080027c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027c0:	e7fe      	b.n	80027c0 <ADC1_2_IRQHandler>
	...

080027c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_Init+0x3c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <HAL_Init+0x3c>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027da:	2003      	movs	r0, #3
 80027dc:	f001 fb4c 	bl	8003e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027e0:	2000      	movs	r0, #0
 80027e2:	f000 f80f 	bl	8002804 <HAL_InitTick>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	e001      	b.n	80027f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027f2:	f7ff fd3f 	bl	8002274 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027f6:	79fb      	ldrb	r3, [r7, #7]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40022000 	.word	0x40022000

08002804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <HAL_InitTick+0x6c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d023      	beq.n	8002860 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002818:	4b16      	ldr	r3, [pc, #88]	; (8002874 <HAL_InitTick+0x70>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_InitTick+0x6c>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4619      	mov	r1, r3
 8002822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002826:	fbb3 f3f1 	udiv	r3, r3, r1
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	4618      	mov	r0, r3
 8002830:	f001 fb57 	bl	8003ee2 <HAL_SYSTICK_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b0f      	cmp	r3, #15
 800283e:	d809      	bhi.n	8002854 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002840:	2200      	movs	r2, #0
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f001 fb21 	bl	8003e8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800284c:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <HAL_InitTick+0x74>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e007      	b.n	8002864 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
 8002858:	e004      	b.n	8002864 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	e001      	b.n	8002864 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000010 	.word	0x20000010
 8002874:	20000008 	.word	0x20000008
 8002878:	2000000c 	.word	0x2000000c

0800287c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_IncTick+0x20>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_IncTick+0x24>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_IncTick+0x24>)
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000010 	.word	0x20000010
 80028a0:	200004d4 	.word	0x200004d4

080028a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return uwTick;
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <HAL_GetTick+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	200004d4 	.word	0x200004d4

080028bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff ffee 	bl	80028a4 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d005      	beq.n	80028e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_Delay+0x44>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028e2:	bf00      	nop
 80028e4:	f7ff ffde 	bl	80028a4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8f7      	bhi.n	80028e4 <HAL_Delay+0x28>
  {
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000010 	.word	0x20000010

08002904 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	609a      	str	r2, [r3, #8]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	609a      	str	r2, [r3, #8]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3360      	adds	r3, #96	; 0x60
 800297e:	461a      	mov	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <LL_ADC_SetOffset+0x44>)
 800298e:	4013      	ands	r3, r2
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	4313      	orrs	r3, r2
 800299c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	03fff000 	.word	0x03fff000

080029b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3360      	adds	r3, #96	; 0x60
 80029c2:	461a      	mov	r2, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	3360      	adds	r3, #96	; 0x60
 80029f0:	461a      	mov	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a0a:	bf00      	nop
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3330      	adds	r3, #48	; 0x30
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	4413      	add	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	211f      	movs	r1, #31
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	401a      	ands	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	f003 011f 	and.w	r1, r3, #31
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	431a      	orrs	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3314      	adds	r3, #20
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	0e5b      	lsrs	r3, r3, #25
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	4413      	add	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	0d1b      	lsrs	r3, r3, #20
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2107      	movs	r1, #7
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	401a      	ands	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	0d1b      	lsrs	r3, r3, #20
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b04:	43db      	mvns	r3, r3
 8002b06:	401a      	ands	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0318 	and.w	r3, r3, #24
 8002b0e:	4908      	ldr	r1, [pc, #32]	; (8002b30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b10:	40d9      	lsrs	r1, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	400b      	ands	r3, r1
 8002b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	0007ffff 	.word	0x0007ffff

08002b34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 031f 	and.w	r3, r3, #31
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6093      	str	r3, [r2, #8]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba4:	d101      	bne.n	8002baa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bf4:	d101      	bne.n	8002bfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <LL_ADC_IsEnabled+0x18>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <LL_ADC_IsEnabled+0x1a>
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c6a:	f043 0204 	orr.w	r2, r3, #4
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d101      	bne.n	8002c96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d101      	bne.n	8002cbc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b089      	sub	sp, #36	; 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e134      	b.n	8002f50 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7fe fa4f 	bl	8001198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff3f 	bl	8002b90 <LL_ADC_IsDeepPowerDownEnabled>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff25 	bl	8002b6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff ff5a 	bl	8002be0 <LL_ADC_IsInternalRegulatorEnabled>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d113      	bne.n	8002d5a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ff3e 	bl	8002bb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d3c:	4b86      	ldr	r3, [pc, #536]	; (8002f58 <HAL_ADC_Init+0x28c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	099b      	lsrs	r3, r3, #6
 8002d42:	4a86      	ldr	r2, [pc, #536]	; (8002f5c <HAL_ADC_Init+0x290>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	099b      	lsrs	r3, r3, #6
 8002d4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d4c:	e002      	b.n	8002d54 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f9      	bne.n	8002d4e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ff3e 	bl	8002be0 <LL_ADC_IsInternalRegulatorEnabled>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10d      	bne.n	8002d86 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f043 0210 	orr.w	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ff77 	bl	8002c7e <LL_ADC_REG_IsConversionOngoing>
 8002d90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 80cf 	bne.w	8002f3e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f040 80cb 	bne.w	8002f3e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002db0:	f043 0202 	orr.w	r2, r3, #2
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff37 	bl	8002c30 <LL_ADC_IsEnabled>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d115      	bne.n	8002df4 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dc8:	4865      	ldr	r0, [pc, #404]	; (8002f60 <HAL_ADC_Init+0x294>)
 8002dca:	f7ff ff31 	bl	8002c30 <LL_ADC_IsEnabled>
 8002dce:	4604      	mov	r4, r0
 8002dd0:	4864      	ldr	r0, [pc, #400]	; (8002f64 <HAL_ADC_Init+0x298>)
 8002dd2:	f7ff ff2d 	bl	8002c30 <LL_ADC_IsEnabled>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	431c      	orrs	r4, r3
 8002dda:	4863      	ldr	r0, [pc, #396]	; (8002f68 <HAL_ADC_Init+0x29c>)
 8002ddc:	f7ff ff28 	bl	8002c30 <LL_ADC_IsEnabled>
 8002de0:	4603      	mov	r3, r0
 8002de2:	4323      	orrs	r3, r4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d105      	bne.n	8002df4 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4619      	mov	r1, r3
 8002dee:	485f      	ldr	r0, [pc, #380]	; (8002f6c <HAL_ADC_Init+0x2a0>)
 8002df0:	f7ff fd88 	bl	8002904 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	7e5b      	ldrb	r3, [r3, #25]
 8002df8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dfe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002e04:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002e0a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e12:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d106      	bne.n	8002e30 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	3b01      	subs	r3, #1
 8002e28:	045b      	lsls	r3, r3, #17
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d009      	beq.n	8002e4c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	4b47      	ldr	r3, [pc, #284]	; (8002f70 <HAL_ADC_Init+0x2a4>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	69b9      	ldr	r1, [r7, #24]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff0a 	bl	8002c7e <LL_ADC_REG_IsConversionOngoing>
 8002e6a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff17 	bl	8002ca4 <LL_ADC_INJ_IsConversionOngoing>
 8002e76:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d13d      	bne.n	8002efa <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d13a      	bne.n	8002efa <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e88:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e90:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ea0:	f023 0302 	bic.w	r3, r3, #2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	69b9      	ldr	r1, [r7, #24]
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d118      	bne.n	8002eea <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ec2:	f023 0304 	bic.w	r3, r3, #4
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ece:	4311      	orrs	r1, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ed4:	4311      	orrs	r1, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002eda:	430a      	orrs	r2, r1
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	611a      	str	r2, [r3, #16]
 8002ee8:	e007      	b.n	8002efa <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d10c      	bne.n	8002f1c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	f023 010f 	bic.w	r1, r3, #15
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	1e5a      	subs	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
 8002f1a:	e007      	b.n	8002f2c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 020f 	bic.w	r2, r2, #15
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f30:	f023 0303 	bic.w	r3, r3, #3
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	655a      	str	r2, [r3, #84]	; 0x54
 8002f3c:	e007      	b.n	8002f4e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	f043 0210 	orr.w	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3724      	adds	r7, #36	; 0x24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd90      	pop	{r4, r7, pc}
 8002f58:	20000008 	.word	0x20000008
 8002f5c:	053e2d63 	.word	0x053e2d63
 8002f60:	50040000 	.word	0x50040000
 8002f64:	50040100 	.word	0x50040100
 8002f68:	50040200 	.word	0x50040200
 8002f6c:	50040300 	.word	0x50040300
 8002f70:	fff0c007 	.word	0xfff0c007

08002f74 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f7c:	4857      	ldr	r0, [pc, #348]	; (80030dc <HAL_ADC_Start+0x168>)
 8002f7e:	f7ff fdd9 	bl	8002b34 <LL_ADC_GetMultimode>
 8002f82:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fe78 	bl	8002c7e <LL_ADC_REG_IsConversionOngoing>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f040 809c 	bne.w	80030ce <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADC_Start+0x30>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e097      	b.n	80030d4 <HAL_ADC_Start+0x160>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fd67 	bl	8003a80 <ADC_Enable>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f040 8083 	bne.w	80030c4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a42      	ldr	r2, [pc, #264]	; (80030e0 <HAL_ADC_Start+0x16c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d002      	beq.n	8002fe2 <HAL_ADC_Start+0x6e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	e000      	b.n	8002fe4 <HAL_ADC_Start+0x70>
 8002fe2:	4b40      	ldr	r3, [pc, #256]	; (80030e4 <HAL_ADC_Start+0x170>)
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d002      	beq.n	8002ff2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d105      	bne.n	8002ffe <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300a:	d106      	bne.n	800301a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	f023 0206 	bic.w	r2, r3, #6
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	659a      	str	r2, [r3, #88]	; 0x58
 8003018:	e002      	b.n	8003020 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	221c      	movs	r2, #28
 8003026:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a2a      	ldr	r2, [pc, #168]	; (80030e0 <HAL_ADC_Start+0x16c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d002      	beq.n	8003040 <HAL_ADC_Start+0xcc>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	e000      	b.n	8003042 <HAL_ADC_Start+0xce>
 8003040:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <HAL_ADC_Start+0x170>)
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	4293      	cmp	r3, r2
 8003048:	d008      	beq.n	800305c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b05      	cmp	r3, #5
 8003054:	d002      	beq.n	800305c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b09      	cmp	r3, #9
 800305a:	d114      	bne.n	8003086 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003072:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fde9 	bl	8002c56 <LL_ADC_REG_StartConversion>
 8003084:	e025      	b.n	80030d2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <HAL_ADC_Start+0x16c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d002      	beq.n	80030a2 <HAL_ADC_Start+0x12e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	e000      	b.n	80030a4 <HAL_ADC_Start+0x130>
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_ADC_Start+0x170>)
 80030a4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00f      	beq.n	80030d2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54
 80030c2:	e006      	b.n	80030d2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80030cc:	e001      	b.n	80030d2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030ce:	2302      	movs	r3, #2
 80030d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	50040300 	.word	0x50040300
 80030e0:	50040100 	.word	0x50040100
 80030e4:	50040000 	.word	0x50040000

080030e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030f2:	4862      	ldr	r0, [pc, #392]	; (800327c <HAL_ADC_PollForConversion+0x194>)
 80030f4:	f7ff fd1e 	bl	8002b34 <LL_ADC_GetMultimode>
 80030f8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d102      	bne.n	8003108 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003102:	2308      	movs	r3, #8
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e02a      	b.n	800315e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b05      	cmp	r3, #5
 8003112:	d002      	beq.n	800311a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2b09      	cmp	r3, #9
 8003118:	d111      	bne.n	800313e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e09d      	b.n	8003274 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003138:	2304      	movs	r3, #4
 800313a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800313c:	e00f      	b.n	800315e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800313e:	484f      	ldr	r0, [pc, #316]	; (800327c <HAL_ADC_PollForConversion+0x194>)
 8003140:	f7ff fd06 	bl	8002b50 <LL_ADC_GetMultiDMATransfer>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e08c      	b.n	8003274 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800315a:	2304      	movs	r3, #4
 800315c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800315e:	f7ff fba1 	bl	80028a4 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003164:	e01a      	b.n	800319c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d016      	beq.n	800319c <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800316e:	f7ff fb99 	bl	80028a4 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d302      	bcc.n	8003184 <HAL_ADC_PollForConversion+0x9c>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10b      	bne.n	800319c <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	f043 0204 	orr.w	r2, r3, #4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e06b      	b.n	8003274 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0dd      	beq.n	8003166 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fc2b 	bl	8002a16 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d01c      	beq.n	8003200 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	7e5b      	ldrb	r3, [r3, #25]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d118      	bne.n	8003200 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d111      	bne.n	8003200 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f043 0201 	orr.w	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1e      	ldr	r2, [pc, #120]	; (8003280 <HAL_ADC_PollForConversion+0x198>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d002      	beq.n	8003210 <HAL_ADC_PollForConversion+0x128>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	e000      	b.n	8003212 <HAL_ADC_PollForConversion+0x12a>
 8003210:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <HAL_ADC_PollForConversion+0x19c>)
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	4293      	cmp	r3, r2
 8003218:	d008      	beq.n	800322c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b05      	cmp	r3, #5
 8003224:	d002      	beq.n	800322c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b09      	cmp	r3, #9
 800322a:	d104      	bne.n	8003236 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	e00c      	b.n	8003250 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a11      	ldr	r2, [pc, #68]	; (8003280 <HAL_ADC_PollForConversion+0x198>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d002      	beq.n	8003246 <HAL_ADC_PollForConversion+0x15e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	e000      	b.n	8003248 <HAL_ADC_PollForConversion+0x160>
 8003246:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <HAL_ADC_PollForConversion+0x19c>)
 8003248:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b08      	cmp	r3, #8
 8003254:	d104      	bne.n	8003260 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2208      	movs	r2, #8
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e008      	b.n	8003272 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	220c      	movs	r2, #12
 8003270:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3720      	adds	r7, #32
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	50040300 	.word	0x50040300
 8003280:	50040100 	.word	0x50040100
 8003284:	50040000 	.word	0x50040000

08003288 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b0b6      	sub	sp, #216	; 0xd8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x22>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e3c6      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x7b0>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fcd3 	bl	8002c7e <LL_ADC_REG_IsConversionOngoing>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 83a7 	bne.w	8003a2e <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d824      	bhi.n	8003332 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	3b02      	subs	r3, #2
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d81b      	bhi.n	800332a <HAL_ADC_ConfigChannel+0x86>
 80032f2:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <HAL_ADC_ConfigChannel+0x54>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	08003309 	.word	0x08003309
 80032fc:	08003311 	.word	0x08003311
 8003300:	08003319 	.word	0x08003319
 8003304:	08003321 	.word	0x08003321
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	220c      	movs	r2, #12
 800330c:	605a      	str	r2, [r3, #4]
          break;
 800330e:	e011      	b.n	8003334 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2212      	movs	r2, #18
 8003314:	605a      	str	r2, [r3, #4]
          break;
 8003316:	e00d      	b.n	8003334 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2218      	movs	r2, #24
 800331c:	605a      	str	r2, [r3, #4]
          break;
 800331e:	e009      	b.n	8003334 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003326:	605a      	str	r2, [r3, #4]
          break;
 8003328:	e004      	b.n	8003334 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2206      	movs	r2, #6
 800332e:	605a      	str	r2, [r3, #4]
          break;
 8003330:	e000      	b.n	8003334 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003332:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	f7ff fb7b 	bl	8002a3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fc97 	bl	8002c7e <LL_ADC_REG_IsConversionOngoing>
 8003350:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fca3 	bl	8002ca4 <LL_ADC_INJ_IsConversionOngoing>
 800335e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003362:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 81a6 	bne.w	80036b8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800336c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003370:	2b00      	cmp	r3, #0
 8003372:	f040 81a1 	bne.w	80036b8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6819      	ldr	r1, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	461a      	mov	r2, r3
 8003384:	f7ff fb86 	bl	8002a94 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	08db      	lsrs	r3, r3, #3
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d00a      	beq.n	80033c0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6919      	ldr	r1, [r3, #16]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033ba:	f7ff fad7 	bl	800296c <LL_ADC_SetOffset>
 80033be:	e17b      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff faf4 	bl	80029b4 <LL_ADC_GetOffsetChannel>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x148>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fae9 	bl	80029b4 <LL_ADC_GetOffsetChannel>
 80033e2:	4603      	mov	r3, r0
 80033e4:	0e9b      	lsrs	r3, r3, #26
 80033e6:	f003 021f 	and.w	r2, r3, #31
 80033ea:	e01e      	b.n	800342a <HAL_ADC_ConfigChannel+0x186>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fade 	bl	80029b4 <LL_ADC_GetOffsetChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800340a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800340e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003412:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 800341a:	2320      	movs	r3, #32
 800341c:	e004      	b.n	8003428 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 800341e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003432:	2b00      	cmp	r3, #0
 8003434:	d105      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x19e>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	0e9b      	lsrs	r3, r3, #26
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	e018      	b.n	8003474 <HAL_ADC_ConfigChannel+0x1d0>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800345a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800345e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003466:	2320      	movs	r3, #32
 8003468:	e004      	b.n	8003474 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800346a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800346e:	fab3 f383 	clz	r3, r3
 8003472:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003474:	429a      	cmp	r2, r3
 8003476:	d106      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2200      	movs	r2, #0
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff faad 	bl	80029e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2101      	movs	r1, #1
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fa91 	bl	80029b4 <LL_ADC_GetOffsetChannel>
 8003492:	4603      	mov	r3, r0
 8003494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x20e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fa86 	bl	80029b4 <LL_ADC_GetOffsetChannel>
 80034a8:	4603      	mov	r3, r0
 80034aa:	0e9b      	lsrs	r3, r3, #26
 80034ac:	f003 021f 	and.w	r2, r3, #31
 80034b0:	e01e      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x24c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2101      	movs	r1, #1
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fa7b 	bl	80029b4 <LL_ADC_GetOffsetChannel>
 80034be:	4603      	mov	r3, r0
 80034c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80034d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80034d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80034e0:	2320      	movs	r3, #32
 80034e2:	e004      	b.n	80034ee <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80034e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x264>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	0e9b      	lsrs	r3, r3, #26
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	e018      	b.n	800353a <HAL_ADC_ConfigChannel+0x296>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800351c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003520:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003524:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800352c:	2320      	movs	r3, #32
 800352e:	e004      	b.n	800353a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003534:	fab3 f383 	clz	r3, r3
 8003538:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800353a:	429a      	cmp	r2, r3
 800353c:	d106      	bne.n	800354c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2200      	movs	r2, #0
 8003544:	2101      	movs	r1, #1
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fa4a 	bl	80029e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2102      	movs	r1, #2
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fa2e 	bl	80029b4 <LL_ADC_GetOffsetChannel>
 8003558:	4603      	mov	r3, r0
 800355a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x2d4>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2102      	movs	r1, #2
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fa23 	bl	80029b4 <LL_ADC_GetOffsetChannel>
 800356e:	4603      	mov	r3, r0
 8003570:	0e9b      	lsrs	r3, r3, #26
 8003572:	f003 021f 	and.w	r2, r3, #31
 8003576:	e01e      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x312>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2102      	movs	r1, #2
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fa18 	bl	80029b4 <LL_ADC_GetOffsetChannel>
 8003584:	4603      	mov	r3, r0
 8003586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003596:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800359a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800359e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80035a6:	2320      	movs	r3, #32
 80035a8:	e004      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80035aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d105      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x32a>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	0e9b      	lsrs	r3, r3, #26
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	e016      	b.n	80035fc <HAL_ADC_ConfigChannel+0x358>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80035e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80035e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80035ee:	2320      	movs	r3, #32
 80035f0:	e004      	b.n	80035fc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80035f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d106      	bne.n	800360e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2200      	movs	r2, #0
 8003606:	2102      	movs	r1, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff f9e9 	bl	80029e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2103      	movs	r1, #3
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff f9cd 	bl	80029b4 <LL_ADC_GetOffsetChannel>
 800361a:	4603      	mov	r3, r0
 800361c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <HAL_ADC_ConfigChannel+0x396>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2103      	movs	r1, #3
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff f9c2 	bl	80029b4 <LL_ADC_GetOffsetChannel>
 8003630:	4603      	mov	r3, r0
 8003632:	0e9b      	lsrs	r3, r3, #26
 8003634:	f003 021f 	and.w	r2, r3, #31
 8003638:	e017      	b.n	800366a <HAL_ADC_ConfigChannel+0x3c6>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2103      	movs	r1, #3
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff f9b7 	bl	80029b4 <LL_ADC_GetOffsetChannel>
 8003646:	4603      	mov	r3, r0
 8003648:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003654:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800365c:	2320      	movs	r3, #32
 800365e:	e003      	b.n	8003668 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003672:	2b00      	cmp	r3, #0
 8003674:	d105      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x3de>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	0e9b      	lsrs	r3, r3, #26
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	e011      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x402>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003692:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800369a:	2320      	movs	r3, #32
 800369c:	e003      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800369e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d106      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	2103      	movs	r1, #3
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff f994 	bl	80029e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fab7 	bl	8002c30 <LL_ADC_IsEnabled>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f040 813f 	bne.w	8003948 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	461a      	mov	r2, r3
 80036d8:	f7ff fa08 	bl	8002aec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4a8e      	ldr	r2, [pc, #568]	; (800391c <HAL_ADC_ConfigChannel+0x678>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	f040 8130 	bne.w	8003948 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x46c>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	0e9b      	lsrs	r3, r3, #26
 80036fe:	3301      	adds	r3, #1
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2b09      	cmp	r3, #9
 8003706:	bf94      	ite	ls
 8003708:	2301      	movls	r3, #1
 800370a:	2300      	movhi	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	e019      	b.n	8003744 <HAL_ADC_ConfigChannel+0x4a0>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003718:	fa93 f3a3 	rbit	r3, r3
 800371c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800371e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003720:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003728:	2320      	movs	r3, #32
 800372a:	e003      	b.n	8003734 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800372c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	3301      	adds	r3, #1
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2b09      	cmp	r3, #9
 800373c:	bf94      	ite	ls
 800373e:	2301      	movls	r3, #1
 8003740:	2300      	movhi	r3, #0
 8003742:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003744:	2b00      	cmp	r3, #0
 8003746:	d079      	beq.n	800383c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003750:	2b00      	cmp	r3, #0
 8003752:	d107      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x4c0>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0e9b      	lsrs	r3, r3, #26
 800375a:	3301      	adds	r3, #1
 800375c:	069b      	lsls	r3, r3, #26
 800375e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003762:	e015      	b.n	8003790 <HAL_ADC_ConfigChannel+0x4ec>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800376c:	fa93 f3a3 	rbit	r3, r3
 8003770:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003774:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800377c:	2320      	movs	r3, #32
 800377e:	e003      	b.n	8003788 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	3301      	adds	r3, #1
 800378a:	069b      	lsls	r3, r3, #26
 800378c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x50c>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	0e9b      	lsrs	r3, r3, #26
 80037a2:	3301      	adds	r3, #1
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2101      	movs	r1, #1
 80037aa:	fa01 f303 	lsl.w	r3, r1, r3
 80037ae:	e017      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x53c>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b8:	fa93 f3a3 	rbit	r3, r3
 80037bc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80037be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80037c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80037c8:	2320      	movs	r3, #32
 80037ca:	e003      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80037cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ce:	fab3 f383 	clz	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	3301      	adds	r3, #1
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	2101      	movs	r1, #1
 80037dc:	fa01 f303 	lsl.w	r3, r1, r3
 80037e0:	ea42 0103 	orr.w	r1, r2, r3
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x562>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	0e9b      	lsrs	r3, r3, #26
 80037f6:	3301      	adds	r3, #1
 80037f8:	f003 021f 	and.w	r2, r3, #31
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	051b      	lsls	r3, r3, #20
 8003804:	e018      	b.n	8003838 <HAL_ADC_ConfigChannel+0x594>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800381e:	2320      	movs	r3, #32
 8003820:	e003      	b.n	800382a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	3301      	adds	r3, #1
 800382c:	f003 021f 	and.w	r2, r3, #31
 8003830:	4613      	mov	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4413      	add	r3, r2
 8003836:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003838:	430b      	orrs	r3, r1
 800383a:	e080      	b.n	800393e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003844:	2b00      	cmp	r3, #0
 8003846:	d107      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x5b4>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0e9b      	lsrs	r3, r3, #26
 800384e:	3301      	adds	r3, #1
 8003850:	069b      	lsls	r3, r3, #26
 8003852:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003856:	e015      	b.n	8003884 <HAL_ADC_ConfigChannel+0x5e0>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	fa93 f3a3 	rbit	r3, r3
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003870:	2320      	movs	r3, #32
 8003872:	e003      	b.n	800387c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	3301      	adds	r3, #1
 800387e:	069b      	lsls	r3, r3, #26
 8003880:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x600>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	0e9b      	lsrs	r3, r3, #26
 8003896:	3301      	adds	r3, #1
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2101      	movs	r1, #1
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	e017      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x630>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	61fb      	str	r3, [r7, #28]
  return result;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80038bc:	2320      	movs	r3, #32
 80038be:	e003      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	fab3 f383 	clz	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	f003 031f 	and.w	r3, r3, #31
 80038ce:	2101      	movs	r1, #1
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	ea42 0103 	orr.w	r1, r2, r3
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10d      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x65c>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	0e9b      	lsrs	r3, r3, #26
 80038ea:	3301      	adds	r3, #1
 80038ec:	f003 021f 	and.w	r2, r3, #31
 80038f0:	4613      	mov	r3, r2
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	4413      	add	r3, r2
 80038f6:	3b1e      	subs	r3, #30
 80038f8:	051b      	lsls	r3, r3, #20
 80038fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038fe:	e01d      	b.n	800393c <HAL_ADC_ConfigChannel+0x698>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	613b      	str	r3, [r7, #16]
  return result;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d103      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003918:	2320      	movs	r3, #32
 800391a:	e005      	b.n	8003928 <HAL_ADC_ConfigChannel+0x684>
 800391c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	3301      	adds	r3, #1
 800392a:	f003 021f 	and.w	r2, r3, #31
 800392e:	4613      	mov	r3, r2
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	4413      	add	r3, r2
 8003934:	3b1e      	subs	r3, #30
 8003936:	051b      	lsls	r3, r3, #20
 8003938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800393c:	430b      	orrs	r3, r1
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	6892      	ldr	r2, [r2, #8]
 8003942:	4619      	mov	r1, r3
 8003944:	f7ff f8a6 	bl	8002a94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b43      	ldr	r3, [pc, #268]	; (8003a5c <HAL_ADC_ConfigChannel+0x7b8>)
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d079      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003954:	4842      	ldr	r0, [pc, #264]	; (8003a60 <HAL_ADC_ConfigChannel+0x7bc>)
 8003956:	f7fe fffb 	bl	8002950 <LL_ADC_GetCommonPathInternalCh>
 800395a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a40      	ldr	r2, [pc, #256]	; (8003a64 <HAL_ADC_ConfigChannel+0x7c0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d12b      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003968:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800396c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d125      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a3b      	ldr	r2, [pc, #236]	; (8003a68 <HAL_ADC_ConfigChannel+0x7c4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_ADC_ConfigChannel+0x6e4>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a3a      	ldr	r2, [pc, #232]	; (8003a6c <HAL_ADC_ConfigChannel+0x7c8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d15c      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003988:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800398c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003990:	4619      	mov	r1, r3
 8003992:	4833      	ldr	r0, [pc, #204]	; (8003a60 <HAL_ADC_ConfigChannel+0x7bc>)
 8003994:	f7fe ffc9 	bl	800292a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003998:	4b35      	ldr	r3, [pc, #212]	; (8003a70 <HAL_ADC_ConfigChannel+0x7cc>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	099b      	lsrs	r3, r3, #6
 800399e:	4a35      	ldr	r2, [pc, #212]	; (8003a74 <HAL_ADC_ConfigChannel+0x7d0>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	099a      	lsrs	r2, r3, #6
 80039a6:	4613      	mov	r3, r2
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4413      	add	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039b0:	e002      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f9      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039be:	e040      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a2c      	ldr	r2, [pc, #176]	; (8003a78 <HAL_ADC_ConfigChannel+0x7d4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d118      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x758>
 80039ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d112      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a23      	ldr	r2, [pc, #140]	; (8003a68 <HAL_ADC_ConfigChannel+0x7c4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d004      	beq.n	80039ea <HAL_ADC_ConfigChannel+0x746>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <HAL_ADC_ConfigChannel+0x7c8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d12d      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039f2:	4619      	mov	r1, r3
 80039f4:	481a      	ldr	r0, [pc, #104]	; (8003a60 <HAL_ADC_ConfigChannel+0x7bc>)
 80039f6:	f7fe ff98 	bl	800292a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039fa:	e024      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1e      	ldr	r2, [pc, #120]	; (8003a7c <HAL_ADC_ConfigChannel+0x7d8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d120      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d11a      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d115      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a24:	4619      	mov	r1, r3
 8003a26:	480e      	ldr	r0, [pc, #56]	; (8003a60 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a28:	f7fe ff7f 	bl	800292a <LL_ADC_SetCommonPathInternalCh>
 8003a2c:	e00c      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003a40:	e002      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a46:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a50:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	37d8      	adds	r7, #216	; 0xd8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	80080000 	.word	0x80080000
 8003a60:	50040300 	.word	0x50040300
 8003a64:	c7520000 	.word	0xc7520000
 8003a68:	50040000 	.word	0x50040000
 8003a6c:	50040200 	.word	0x50040200
 8003a70:	20000008 	.word	0x20000008
 8003a74:	053e2d63 	.word	0x053e2d63
 8003a78:	cb840000 	.word	0xcb840000
 8003a7c:	80000001 	.word	0x80000001

08003a80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff f8cf 	bl	8002c30 <LL_ADC_IsEnabled>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d146      	bne.n	8003b26 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <ADC_Enable+0xb0>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00d      	beq.n	8003ac2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	f043 0210 	orr.w	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e032      	b.n	8003b28 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff f89e 	bl	8002c08 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003acc:	f7fe feea 	bl	80028a4 <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ad2:	e021      	b.n	8003b18 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff f8a9 	bl	8002c30 <LL_ADC_IsEnabled>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d104      	bne.n	8003aee <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff f88d 	bl	8002c08 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003aee:	f7fe fed9 	bl	80028a4 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d90d      	bls.n	8003b18 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f043 0210 	orr.w	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	f043 0201 	orr.w	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e007      	b.n	8003b28 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d1d6      	bne.n	8003ad4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	8000003f 	.word	0x8000003f

08003b34 <LL_ADC_IsEnabled>:
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <LL_ADC_IsEnabled+0x18>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <LL_ADC_IsEnabled+0x1a>
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_ADC_REG_IsConversionOngoing>:
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d101      	bne.n	8003b72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b09f      	sub	sp, #124	; 0x7c
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e08f      	b.n	8003cbe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a47      	ldr	r2, [pc, #284]	; (8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d102      	bne.n	8003bb6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003bb0:	4b46      	ldr	r3, [pc, #280]	; (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	e001      	b.n	8003bba <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	f043 0220 	orr.w	r2, r3, #32
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e072      	b.n	8003cbe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ffbd 	bl	8003b5a <LL_ADC_REG_IsConversionOngoing>
 8003be0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff ffb7 	bl	8003b5a <LL_ADC_REG_IsConversionOngoing>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d154      	bne.n	8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d151      	bne.n	8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bf8:	4b35      	ldr	r3, [pc, #212]	; (8003cd0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003bfa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d02c      	beq.n	8003c5e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c16:	035b      	lsls	r3, r3, #13
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c20:	4829      	ldr	r0, [pc, #164]	; (8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003c22:	f7ff ff87 	bl	8003b34 <LL_ADC_IsEnabled>
 8003c26:	4604      	mov	r4, r0
 8003c28:	4828      	ldr	r0, [pc, #160]	; (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003c2a:	f7ff ff83 	bl	8003b34 <LL_ADC_IsEnabled>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	431c      	orrs	r4, r3
 8003c32:	4828      	ldr	r0, [pc, #160]	; (8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c34:	f7ff ff7e 	bl	8003b34 <LL_ADC_IsEnabled>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4323      	orrs	r3, r4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d137      	bne.n	8003cb0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c48:	f023 030f 	bic.w	r3, r3, #15
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	6811      	ldr	r1, [r2, #0]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	6892      	ldr	r2, [r2, #8]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	431a      	orrs	r2, r3
 8003c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c5c:	e028      	b.n	8003cb0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c68:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c6a:	4817      	ldr	r0, [pc, #92]	; (8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003c6c:	f7ff ff62 	bl	8003b34 <LL_ADC_IsEnabled>
 8003c70:	4604      	mov	r4, r0
 8003c72:	4816      	ldr	r0, [pc, #88]	; (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003c74:	f7ff ff5e 	bl	8003b34 <LL_ADC_IsEnabled>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	431c      	orrs	r4, r3
 8003c7c:	4815      	ldr	r0, [pc, #84]	; (8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c7e:	f7ff ff59 	bl	8003b34 <LL_ADC_IsEnabled>
 8003c82:	4603      	mov	r3, r0
 8003c84:	4323      	orrs	r3, r4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d112      	bne.n	8003cb0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c92:	f023 030f 	bic.w	r3, r3, #15
 8003c96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c98:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c9a:	e009      	b.n	8003cb0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003cae:	e000      	b.n	8003cb2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cb0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	377c      	adds	r7, #124	; 0x7c
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd90      	pop	{r4, r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	50040000 	.word	0x50040000
 8003ccc:	50040100 	.word	0x50040100
 8003cd0:	50040300 	.word	0x50040300
 8003cd4:	50040200 	.word	0x50040200

08003cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <__NVIC_SetPriorityGrouping+0x44>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d0a:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <__NVIC_SetPriorityGrouping+0x44>)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	60d3      	str	r3, [r2, #12]
}
 8003d10:	bf00      	nop
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <__NVIC_GetPriorityGrouping+0x18>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	f003 0307 	and.w	r3, r3, #7
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	db0b      	blt.n	8003d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	f003 021f 	and.w	r2, r3, #31
 8003d54:	4907      	ldr	r1, [pc, #28]	; (8003d74 <__NVIC_EnableIRQ+0x38>)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	e000e100 	.word	0xe000e100

08003d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	db0a      	blt.n	8003da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	490c      	ldr	r1, [pc, #48]	; (8003dc4 <__NVIC_SetPriority+0x4c>)
 8003d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d96:	0112      	lsls	r2, r2, #4
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003da0:	e00a      	b.n	8003db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	4908      	ldr	r1, [pc, #32]	; (8003dc8 <__NVIC_SetPriority+0x50>)
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	3b04      	subs	r3, #4
 8003db0:	0112      	lsls	r2, r2, #4
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	440b      	add	r3, r1
 8003db6:	761a      	strb	r2, [r3, #24]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000e100 	.word	0xe000e100
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	; 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f1c3 0307 	rsb	r3, r3, #7
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	bf28      	it	cs
 8003dea:	2304      	movcs	r3, #4
 8003dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d902      	bls.n	8003dfc <NVIC_EncodePriority+0x30>
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3b03      	subs	r3, #3
 8003dfa:	e000      	b.n	8003dfe <NVIC_EncodePriority+0x32>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	401a      	ands	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e14:	f04f 31ff 	mov.w	r1, #4294967295
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	43d9      	mvns	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e24:	4313      	orrs	r3, r2
         );
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3724      	adds	r7, #36	; 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e44:	d301      	bcc.n	8003e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e46:	2301      	movs	r3, #1
 8003e48:	e00f      	b.n	8003e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <SysTick_Config+0x40>)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e52:	210f      	movs	r1, #15
 8003e54:	f04f 30ff 	mov.w	r0, #4294967295
 8003e58:	f7ff ff8e 	bl	8003d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <SysTick_Config+0x40>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e62:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <SysTick_Config+0x40>)
 8003e64:	2207      	movs	r2, #7
 8003e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	e000e010 	.word	0xe000e010

08003e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff ff29 	bl	8003cd8 <__NVIC_SetPriorityGrouping>
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	4603      	mov	r3, r0
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ea0:	f7ff ff3e 	bl	8003d20 <__NVIC_GetPriorityGrouping>
 8003ea4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	6978      	ldr	r0, [r7, #20]
 8003eac:	f7ff ff8e 	bl	8003dcc <NVIC_EncodePriority>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ff5d 	bl	8003d78 <__NVIC_SetPriority>
}
 8003ebe:	bf00      	nop
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	4603      	mov	r3, r0
 8003ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff31 	bl	8003d3c <__NVIC_EnableIRQ>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff ffa2 	bl	8003e34 <SysTick_Config>
 8003ef0:	4603      	mov	r3, r0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e098      	b.n	8004040 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	4b4d      	ldr	r3, [pc, #308]	; (800404c <HAL_DMA_Init+0x150>)
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d80f      	bhi.n	8003f3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4b4b      	ldr	r3, [pc, #300]	; (8004050 <HAL_DMA_Init+0x154>)
 8003f22:	4413      	add	r3, r2
 8003f24:	4a4b      	ldr	r2, [pc, #300]	; (8004054 <HAL_DMA_Init+0x158>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	009a      	lsls	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a48      	ldr	r2, [pc, #288]	; (8004058 <HAL_DMA_Init+0x15c>)
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
 8003f38:	e00e      	b.n	8003f58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4b46      	ldr	r3, [pc, #280]	; (800405c <HAL_DMA_Init+0x160>)
 8003f42:	4413      	add	r3, r2
 8003f44:	4a43      	ldr	r2, [pc, #268]	; (8004054 <HAL_DMA_Init+0x158>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	091b      	lsrs	r3, r3, #4
 8003f4c:	009a      	lsls	r2, r3, #2
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a42      	ldr	r2, [pc, #264]	; (8004060 <HAL_DMA_Init+0x164>)
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb2:	d039      	beq.n	8004028 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	4a27      	ldr	r2, [pc, #156]	; (8004058 <HAL_DMA_Init+0x15c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d11a      	bne.n	8003ff4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fbe:	4b29      	ldr	r3, [pc, #164]	; (8004064 <HAL_DMA_Init+0x168>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	f003 031c 	and.w	r3, r3, #28
 8003fca:	210f      	movs	r1, #15
 8003fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	4924      	ldr	r1, [pc, #144]	; (8004064 <HAL_DMA_Init+0x168>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003fd8:	4b22      	ldr	r3, [pc, #136]	; (8004064 <HAL_DMA_Init+0x168>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6859      	ldr	r1, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe4:	f003 031c 	and.w	r3, r3, #28
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	491d      	ldr	r1, [pc, #116]	; (8004064 <HAL_DMA_Init+0x168>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]
 8003ff2:	e019      	b.n	8004028 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ff4:	4b1c      	ldr	r3, [pc, #112]	; (8004068 <HAL_DMA_Init+0x16c>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffc:	f003 031c 	and.w	r3, r3, #28
 8004000:	210f      	movs	r1, #15
 8004002:	fa01 f303 	lsl.w	r3, r1, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	4917      	ldr	r1, [pc, #92]	; (8004068 <HAL_DMA_Init+0x16c>)
 800400a:	4013      	ands	r3, r2
 800400c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800400e:	4b16      	ldr	r3, [pc, #88]	; (8004068 <HAL_DMA_Init+0x16c>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6859      	ldr	r1, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	f003 031c 	and.w	r3, r3, #28
 800401e:	fa01 f303 	lsl.w	r3, r1, r3
 8004022:	4911      	ldr	r1, [pc, #68]	; (8004068 <HAL_DMA_Init+0x16c>)
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40020407 	.word	0x40020407
 8004050:	bffdfff8 	.word	0xbffdfff8
 8004054:	cccccccd 	.word	0xcccccccd
 8004058:	40020000 	.word	0x40020000
 800405c:	bffdfbf8 	.word	0xbffdfbf8
 8004060:	40020400 	.word	0x40020400
 8004064:	400200a8 	.word	0x400200a8
 8004068:	400204a8 	.word	0x400204a8

0800406c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_DMA_Start_IT+0x20>
 8004088:	2302      	movs	r3, #2
 800408a:	e04b      	b.n	8004124 <HAL_DMA_Start_IT+0xb8>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d13a      	bne.n	8004116 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f95f 	bl	8004388 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 020e 	orr.w	r2, r2, #14
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e00f      	b.n	8004104 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0204 	bic.w	r2, r2, #4
 80040f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 020a 	orr.w	r2, r2, #10
 8004102:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e005      	b.n	8004122 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800411e:	2302      	movs	r3, #2
 8004120:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004122:	7dfb      	ldrb	r3, [r7, #23]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d008      	beq.n	8004156 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2204      	movs	r2, #4
 8004148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e022      	b.n	800419c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 020e 	bic.w	r2, r2, #14
 8004164:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f003 021c 	and.w	r2, r3, #28
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2101      	movs	r1, #1
 8004184:	fa01 f202 	lsl.w	r2, r1, r2
 8004188:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800419a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d005      	beq.n	80041cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2204      	movs	r2, #4
 80041c4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
 80041ca:	e029      	b.n	8004220 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 020e 	bic.w	r2, r2, #14
 80041da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f0:	f003 021c 	and.w	r2, r3, #28
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	2101      	movs	r1, #1
 80041fa:	fa01 f202 	lsl.w	r2, r1, r2
 80041fe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4798      	blx	r3
    }
  }
  return status;
 8004220:	7bfb      	ldrb	r3, [r7, #15]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	f003 031c 	and.w	r3, r3, #28
 800424a:	2204      	movs	r2, #4
 800424c:	409a      	lsls	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4013      	ands	r3, r2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d026      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x7a>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d021      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b00      	cmp	r3, #0
 800426c:	d107      	bne.n	800427e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0204 	bic.w	r2, r2, #4
 800427c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	f003 021c 	and.w	r2, r3, #28
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	2104      	movs	r1, #4
 800428c:	fa01 f202 	lsl.w	r2, r1, r2
 8004290:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	2b00      	cmp	r3, #0
 8004298:	d071      	beq.n	800437e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80042a2:	e06c      	b.n	800437e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a8:	f003 031c 	and.w	r3, r3, #28
 80042ac:	2202      	movs	r2, #2
 80042ae:	409a      	lsls	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d02e      	beq.n	8004316 <HAL_DMA_IRQHandler+0xec>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d029      	beq.n	8004316 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 020a 	bic.w	r2, r2, #10
 80042de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ec:	f003 021c 	and.w	r2, r3, #28
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	2102      	movs	r1, #2
 80042f6:	fa01 f202 	lsl.w	r2, r1, r2
 80042fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d038      	beq.n	800437e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004314:	e033      	b.n	800437e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	f003 031c 	and.w	r3, r3, #28
 800431e:	2208      	movs	r2, #8
 8004320:	409a      	lsls	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4013      	ands	r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d02a      	beq.n	8004380 <HAL_DMA_IRQHandler+0x156>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d025      	beq.n	8004380 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 020e 	bic.w	r2, r2, #14
 8004342:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004348:	f003 021c 	and.w	r2, r3, #28
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	2101      	movs	r1, #1
 8004352:	fa01 f202 	lsl.w	r2, r1, r2
 8004356:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	2b00      	cmp	r3, #0
 8004374:	d004      	beq.n	8004380 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800437e:	bf00      	nop
 8004380:	bf00      	nop
}
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	f003 021c 	and.w	r2, r3, #28
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2101      	movs	r1, #1
 80043a4:	fa01 f202 	lsl.w	r2, r1, r2
 80043a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d108      	bne.n	80043cc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043ca:	e007      	b.n	80043dc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	60da      	str	r2, [r3, #12]
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043f6:	e17f      	b.n	80046f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2101      	movs	r1, #1
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	fa01 f303 	lsl.w	r3, r1, r3
 8004404:	4013      	ands	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8171 	beq.w	80046f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d00b      	beq.n	8004430 <HAL_GPIO_Init+0x48>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d007      	beq.n	8004430 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004424:	2b11      	cmp	r3, #17
 8004426:	d003      	beq.n	8004430 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b12      	cmp	r3, #18
 800442e:	d130      	bne.n	8004492 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	2203      	movs	r2, #3
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4013      	ands	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004466:	2201      	movs	r2, #1
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4013      	ands	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	f003 0201 	and.w	r2, r3, #1
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	2b03      	cmp	r3, #3
 800449c:	d118      	bne.n	80044d0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80044a4:	2201      	movs	r2, #1
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4013      	ands	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	08db      	lsrs	r3, r3, #3
 80044ba:	f003 0201 	and.w	r2, r3, #1
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	2203      	movs	r2, #3
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d003      	beq.n	8004510 <HAL_GPIO_Init+0x128>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b12      	cmp	r3, #18
 800450e:	d123      	bne.n	8004558 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	08da      	lsrs	r2, r3, #3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3208      	adds	r2, #8
 8004518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800451c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	220f      	movs	r2, #15
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	43db      	mvns	r3, r3
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4013      	ands	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	08da      	lsrs	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3208      	adds	r2, #8
 8004552:	6939      	ldr	r1, [r7, #16]
 8004554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	2203      	movs	r2, #3
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4013      	ands	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 0203 	and.w	r2, r3, #3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80ac 	beq.w	80046f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800459a:	4b5f      	ldr	r3, [pc, #380]	; (8004718 <HAL_GPIO_Init+0x330>)
 800459c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800459e:	4a5e      	ldr	r2, [pc, #376]	; (8004718 <HAL_GPIO_Init+0x330>)
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	6613      	str	r3, [r2, #96]	; 0x60
 80045a6:	4b5c      	ldr	r3, [pc, #368]	; (8004718 <HAL_GPIO_Init+0x330>)
 80045a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045b2:	4a5a      	ldr	r2, [pc, #360]	; (800471c <HAL_GPIO_Init+0x334>)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	089b      	lsrs	r3, r3, #2
 80045b8:	3302      	adds	r3, #2
 80045ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	220f      	movs	r2, #15
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4013      	ands	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045dc:	d025      	beq.n	800462a <HAL_GPIO_Init+0x242>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a4f      	ldr	r2, [pc, #316]	; (8004720 <HAL_GPIO_Init+0x338>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01f      	beq.n	8004626 <HAL_GPIO_Init+0x23e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a4e      	ldr	r2, [pc, #312]	; (8004724 <HAL_GPIO_Init+0x33c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d019      	beq.n	8004622 <HAL_GPIO_Init+0x23a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a4d      	ldr	r2, [pc, #308]	; (8004728 <HAL_GPIO_Init+0x340>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_GPIO_Init+0x236>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a4c      	ldr	r2, [pc, #304]	; (800472c <HAL_GPIO_Init+0x344>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00d      	beq.n	800461a <HAL_GPIO_Init+0x232>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a4b      	ldr	r2, [pc, #300]	; (8004730 <HAL_GPIO_Init+0x348>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d007      	beq.n	8004616 <HAL_GPIO_Init+0x22e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a4a      	ldr	r2, [pc, #296]	; (8004734 <HAL_GPIO_Init+0x34c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d101      	bne.n	8004612 <HAL_GPIO_Init+0x22a>
 800460e:	2306      	movs	r3, #6
 8004610:	e00c      	b.n	800462c <HAL_GPIO_Init+0x244>
 8004612:	2307      	movs	r3, #7
 8004614:	e00a      	b.n	800462c <HAL_GPIO_Init+0x244>
 8004616:	2305      	movs	r3, #5
 8004618:	e008      	b.n	800462c <HAL_GPIO_Init+0x244>
 800461a:	2304      	movs	r3, #4
 800461c:	e006      	b.n	800462c <HAL_GPIO_Init+0x244>
 800461e:	2303      	movs	r3, #3
 8004620:	e004      	b.n	800462c <HAL_GPIO_Init+0x244>
 8004622:	2302      	movs	r3, #2
 8004624:	e002      	b.n	800462c <HAL_GPIO_Init+0x244>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <HAL_GPIO_Init+0x244>
 800462a:	2300      	movs	r3, #0
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	f002 0203 	and.w	r2, r2, #3
 8004632:	0092      	lsls	r2, r2, #2
 8004634:	4093      	lsls	r3, r2
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800463c:	4937      	ldr	r1, [pc, #220]	; (800471c <HAL_GPIO_Init+0x334>)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	089b      	lsrs	r3, r3, #2
 8004642:	3302      	adds	r3, #2
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800464a:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <HAL_GPIO_Init+0x350>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	43db      	mvns	r3, r3
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4013      	ands	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800466e:	4a32      	ldr	r2, [pc, #200]	; (8004738 <HAL_GPIO_Init+0x350>)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004674:	4b30      	ldr	r3, [pc, #192]	; (8004738 <HAL_GPIO_Init+0x350>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	43db      	mvns	r3, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004698:	4a27      	ldr	r2, [pc, #156]	; (8004738 <HAL_GPIO_Init+0x350>)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800469e:	4b26      	ldr	r3, [pc, #152]	; (8004738 <HAL_GPIO_Init+0x350>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	43db      	mvns	r3, r3
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4013      	ands	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046c2:	4a1d      	ldr	r2, [pc, #116]	; (8004738 <HAL_GPIO_Init+0x350>)
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <HAL_GPIO_Init+0x350>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4013      	ands	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046ec:	4a12      	ldr	r2, [pc, #72]	; (8004738 <HAL_GPIO_Init+0x350>)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	3301      	adds	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	f47f ae78 	bne.w	80043f8 <HAL_GPIO_Init+0x10>
  }
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40021000 	.word	0x40021000
 800471c:	40010000 	.word	0x40010000
 8004720:	48000400 	.word	0x48000400
 8004724:	48000800 	.word	0x48000800
 8004728:	48000c00 	.word	0x48000c00
 800472c:	48001000 	.word	0x48001000
 8004730:	48001400 	.word	0x48001400
 8004734:	48001800 	.word	0x48001800
 8004738:	40010400 	.word	0x40010400

0800473c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800474a:	e0cd      	b.n	80048e8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800474c:	2201      	movs	r2, #1
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	4013      	ands	r3, r2
 8004758:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80c0 	beq.w	80048e2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004762:	4a68      	ldr	r2, [pc, #416]	; (8004904 <HAL_GPIO_DeInit+0x1c8>)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	089b      	lsrs	r3, r3, #2
 8004768:	3302      	adds	r3, #2
 800476a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800476e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	220f      	movs	r2, #15
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4013      	ands	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800478a:	d025      	beq.n	80047d8 <HAL_GPIO_DeInit+0x9c>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a5e      	ldr	r2, [pc, #376]	; (8004908 <HAL_GPIO_DeInit+0x1cc>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d01f      	beq.n	80047d4 <HAL_GPIO_DeInit+0x98>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a5d      	ldr	r2, [pc, #372]	; (800490c <HAL_GPIO_DeInit+0x1d0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d019      	beq.n	80047d0 <HAL_GPIO_DeInit+0x94>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a5c      	ldr	r2, [pc, #368]	; (8004910 <HAL_GPIO_DeInit+0x1d4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <HAL_GPIO_DeInit+0x90>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a5b      	ldr	r2, [pc, #364]	; (8004914 <HAL_GPIO_DeInit+0x1d8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00d      	beq.n	80047c8 <HAL_GPIO_DeInit+0x8c>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a5a      	ldr	r2, [pc, #360]	; (8004918 <HAL_GPIO_DeInit+0x1dc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d007      	beq.n	80047c4 <HAL_GPIO_DeInit+0x88>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a59      	ldr	r2, [pc, #356]	; (800491c <HAL_GPIO_DeInit+0x1e0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d101      	bne.n	80047c0 <HAL_GPIO_DeInit+0x84>
 80047bc:	2306      	movs	r3, #6
 80047be:	e00c      	b.n	80047da <HAL_GPIO_DeInit+0x9e>
 80047c0:	2307      	movs	r3, #7
 80047c2:	e00a      	b.n	80047da <HAL_GPIO_DeInit+0x9e>
 80047c4:	2305      	movs	r3, #5
 80047c6:	e008      	b.n	80047da <HAL_GPIO_DeInit+0x9e>
 80047c8:	2304      	movs	r3, #4
 80047ca:	e006      	b.n	80047da <HAL_GPIO_DeInit+0x9e>
 80047cc:	2303      	movs	r3, #3
 80047ce:	e004      	b.n	80047da <HAL_GPIO_DeInit+0x9e>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e002      	b.n	80047da <HAL_GPIO_DeInit+0x9e>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <HAL_GPIO_DeInit+0x9e>
 80047d8:	2300      	movs	r3, #0
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	f002 0203 	and.w	r2, r2, #3
 80047e0:	0092      	lsls	r2, r2, #2
 80047e2:	4093      	lsls	r3, r2
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d132      	bne.n	8004850 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80047ea:	4b4d      	ldr	r3, [pc, #308]	; (8004920 <HAL_GPIO_DeInit+0x1e4>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	43db      	mvns	r3, r3
 80047f2:	494b      	ldr	r1, [pc, #300]	; (8004920 <HAL_GPIO_DeInit+0x1e4>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80047f8:	4b49      	ldr	r3, [pc, #292]	; (8004920 <HAL_GPIO_DeInit+0x1e4>)
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	43db      	mvns	r3, r3
 8004800:	4947      	ldr	r1, [pc, #284]	; (8004920 <HAL_GPIO_DeInit+0x1e4>)
 8004802:	4013      	ands	r3, r2
 8004804:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004806:	4b46      	ldr	r3, [pc, #280]	; (8004920 <HAL_GPIO_DeInit+0x1e4>)
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	43db      	mvns	r3, r3
 800480e:	4944      	ldr	r1, [pc, #272]	; (8004920 <HAL_GPIO_DeInit+0x1e4>)
 8004810:	4013      	ands	r3, r2
 8004812:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004814:	4b42      	ldr	r3, [pc, #264]	; (8004920 <HAL_GPIO_DeInit+0x1e4>)
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	43db      	mvns	r3, r3
 800481c:	4940      	ldr	r1, [pc, #256]	; (8004920 <HAL_GPIO_DeInit+0x1e4>)
 800481e:	4013      	ands	r3, r2
 8004820:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	220f      	movs	r2, #15
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004832:	4a34      	ldr	r2, [pc, #208]	; (8004904 <HAL_GPIO_DeInit+0x1c8>)
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	089b      	lsrs	r3, r3, #2
 8004838:	3302      	adds	r3, #2
 800483a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	43da      	mvns	r2, r3
 8004842:	4830      	ldr	r0, [pc, #192]	; (8004904 <HAL_GPIO_DeInit+0x1c8>)
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	089b      	lsrs	r3, r3, #2
 8004848:	400a      	ands	r2, r1
 800484a:	3302      	adds	r3, #2
 800484c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	2103      	movs	r1, #3
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	08da      	lsrs	r2, r3, #3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3208      	adds	r2, #8
 800486c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	220f      	movs	r2, #15
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	08d2      	lsrs	r2, r2, #3
 8004884:	4019      	ands	r1, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3208      	adds	r2, #8
 800488a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	2103      	movs	r1, #3
 8004898:	fa01 f303 	lsl.w	r3, r1, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	401a      	ands	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	2101      	movs	r1, #1
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	401a      	ands	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	2103      	movs	r1, #3
 80048c2:	fa01 f303 	lsl.w	r3, r1, r3
 80048c6:	43db      	mvns	r3, r3
 80048c8:	401a      	ands	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d2:	2101      	movs	r1, #1
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	fa01 f303 	lsl.w	r3, r1, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	401a      	ands	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	3301      	adds	r3, #1
 80048e6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	fa22 f303 	lsr.w	r3, r2, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f47f af2b 	bne.w	800474c <HAL_GPIO_DeInit+0x10>
  }
}
 80048f6:	bf00      	nop
 80048f8:	bf00      	nop
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	40010000 	.word	0x40010000
 8004908:	48000400 	.word	0x48000400
 800490c:	48000800 	.word	0x48000800
 8004910:	48000c00 	.word	0x48000c00
 8004914:	48001000 	.word	0x48001000
 8004918:	48001400 	.word	0x48001400
 800491c:	48001800 	.word	0x48001800
 8004920:	40010400 	.word	0x40010400

08004924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	807b      	strh	r3, [r7, #2]
 8004930:	4613      	mov	r3, r2
 8004932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004934:	787b      	ldrb	r3, [r7, #1]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800493a:	887a      	ldrh	r2, [r7, #2]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004940:	e002      	b.n	8004948 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004942:	887a      	ldrh	r2, [r7, #2]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a04      	ldr	r2, [pc, #16]	; (8004970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800495e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004962:	6013      	str	r3, [r2, #0]
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40007000 	.word	0x40007000

08004974 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004978:	4b04      	ldr	r3, [pc, #16]	; (800498c <HAL_PWREx_GetVoltageRange+0x18>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004980:	4618      	mov	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40007000 	.word	0x40007000

08004990 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499e:	d130      	bne.n	8004a02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80049a0:	4b23      	ldr	r3, [pc, #140]	; (8004a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ac:	d038      	beq.n	8004a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049ae:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049b6:	4a1e      	ldr	r2, [pc, #120]	; (8004a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049be:	4b1d      	ldr	r3, [pc, #116]	; (8004a34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2232      	movs	r2, #50	; 0x32
 80049c4:	fb02 f303 	mul.w	r3, r2, r3
 80049c8:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	0c9b      	lsrs	r3, r3, #18
 80049d0:	3301      	adds	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049d4:	e002      	b.n	80049dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3b01      	subs	r3, #1
 80049da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049dc:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e8:	d102      	bne.n	80049f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1f2      	bne.n	80049d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fc:	d110      	bne.n	8004a20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e00f      	b.n	8004a22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a02:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a0e:	d007      	beq.n	8004a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a10:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a18:	4a05      	ldr	r2, [pc, #20]	; (8004a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40007000 	.word	0x40007000
 8004a34:	20000008 	.word	0x20000008
 8004a38:	431bde83 	.word	0x431bde83

08004a3c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004a44:	f7fd ff2e 	bl	80028a4 <HAL_GetTick>
 8004a48:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e063      	b.n	8004b1c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10b      	bne.n	8004a78 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fc ff75 	bl	8001958 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004a6e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 faf7 	bl	8005066 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	021a      	lsls	r2, r3, #8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2120      	movs	r1, #32
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 faef 	bl	8005082 <QSPI_WaitFlagStateUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004aa8:	7afb      	ldrb	r3, [r7, #11]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d131      	bne.n	8004b12 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ab8:	f023 0310 	bic.w	r3, r3, #16
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6852      	ldr	r2, [r2, #4]
 8004ac0:	0611      	lsls	r1, r2, #24
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68d2      	ldr	r2, [r2, #12]
 8004ac6:	4311      	orrs	r1, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	430b      	orrs	r3, r1
 8004ace:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <HAL_QSPI_Init+0xe8>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6912      	ldr	r2, [r2, #16]
 8004ade:	0411      	lsls	r1, r2, #16
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6952      	ldr	r2, [r2, #20]
 8004ae4:	4311      	orrs	r1, r2
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6992      	ldr	r2, [r2, #24]
 8004aea:	4311      	orrs	r1, r2
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	430b      	orrs	r3, r1
 8004af2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004b1a:	7afb      	ldrb	r3, [r7, #11]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	ffe0f8fe 	.word	0xffe0f8fe

08004b28 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e016      	b.n	8004b68 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0201 	bic.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fc ff48 	bl	80019e0 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004b7c:	f7fd fe92 	bl	80028a4 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_QSPI_Command+0x22>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e048      	b.n	8004c24 <HAL_QSPI_Command+0xb4>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d137      	bne.n	8004c16 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2120      	movs	r1, #32
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fa5f 	bl	8005082 <QSPI_WaitFlagStateUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d125      	bne.n	8004c1a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004bce:	2200      	movs	r2, #0
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 fa8c 	bl	80050f0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d115      	bne.n	8004c0c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	2201      	movs	r2, #1
 8004be8:	2102      	movs	r1, #2
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 fa49 	bl	8005082 <QSPI_WaitFlagStateUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004c0a:	e006      	b.n	8004c1a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004c14:	e001      	b.n	8004c1a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
 8004c18:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08a      	sub	sp, #40	; 0x28
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004c3c:	f7fd fe32 	bl	80028a4 <HAL_GetTick>
 8004c40:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3320      	adds	r3, #32
 8004c48:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_QSPI_Transmit+0x2e>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e07b      	b.n	8004d52 <HAL_QSPI_Transmit+0x126>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d16a      	bne.n	8004d44 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d05b      	beq.n	8004d32 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2212      	movs	r2, #18
 8004c7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004cae:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8004cb0:	e01b      	b.n	8004cea <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	2104      	movs	r1, #4
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f9e0 	bl	8005082 <QSPI_WaitFlagStateUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004cc6:	7ffb      	ldrb	r3, [r7, #31]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d113      	bne.n	8004cf4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	781a      	ldrb	r2, [r3, #0]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	1e5a      	subs	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1df      	bne.n	8004cb2 <HAL_QSPI_Transmit+0x86>
 8004cf2:	e000      	b.n	8004cf6 <HAL_QSPI_Transmit+0xca>
          break;
 8004cf4:	bf00      	nop
      }

      if (status == HAL_OK)
 8004cf6:	7ffb      	ldrb	r3, [r7, #31]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d115      	bne.n	8004d28 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2201      	movs	r2, #1
 8004d04:	2102      	movs	r1, #2
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 f9bb 	bl	8005082 <QSPI_WaitFlagStateUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004d10:	7ffb      	ldrb	r3, [r7, #31]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d108      	bne.n	8004d28 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f934 	bl	8004f8c <HAL_QSPI_Abort>
 8004d24:	4603      	mov	r3, r0
 8004d26:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004d30:	e00a      	b.n	8004d48 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d36:	f043 0208 	orr.w	r2, r3, #8
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	77fb      	strb	r3, [r7, #31]
 8004d42:	e001      	b.n	8004d48 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004d44:	2302      	movs	r3, #2
 8004d46:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004d50:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b08a      	sub	sp, #40	; 0x28
 8004d5e:	af02      	add	r7, sp, #8
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004d6a:	f7fd fd9b 	bl	80028a4 <HAL_GetTick>
 8004d6e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3320      	adds	r3, #32
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_QSPI_Receive+0x36>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e082      	b.n	8004e96 <HAL_QSPI_Receive+0x13c>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d171      	bne.n	8004e88 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d062      	beq.n	8004e76 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2222      	movs	r2, #34	; 0x22
 8004db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004de8:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004df2:	e01c      	b.n	8004e2e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	2106      	movs	r1, #6
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f93f 	bl	8005082 <QSPI_WaitFlagStateUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004e08:	7ffb      	ldrb	r3, [r7, #31]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d114      	bne.n	8004e38 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	7812      	ldrb	r2, [r2, #0]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	1e5a      	subs	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1de      	bne.n	8004df4 <HAL_QSPI_Receive+0x9a>
 8004e36:	e000      	b.n	8004e3a <HAL_QSPI_Receive+0xe0>
          break;
 8004e38:	bf00      	nop
      }

      if (status == HAL_OK)
 8004e3a:	7ffb      	ldrb	r3, [r7, #31]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d115      	bne.n	8004e6c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2201      	movs	r2, #1
 8004e48:	2102      	movs	r1, #2
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f919 	bl	8005082 <QSPI_WaitFlagStateUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004e54:	7ffb      	ldrb	r3, [r7, #31]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d108      	bne.n	8004e6c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f892 	bl	8004f8c <HAL_QSPI_Abort>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004e74:	e00a      	b.n	8004e8c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7a:	f043 0208 	orr.w	r2, r3, #8
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e001      	b.n	8004e8c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004e94:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3720      	adds	r7, #32
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b088      	sub	sp, #32
 8004ea2:	af02      	add	r7, sp, #8
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
 8004eaa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004eac:	f7fd fcfa 	bl	80028a4 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_QSPI_AutoPolling+0x24>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e060      	b.n	8004f84 <HAL_QSPI_AutoPolling+0xe6>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d14f      	bne.n	8004f76 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2242      	movs	r2, #66	; 0x42
 8004ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2200      	movs	r2, #0
 8004eec:	2120      	movs	r1, #32
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f8c7 	bl	8005082 <QSPI_WaitFlagStateUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d13d      	bne.n	8004f7a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6852      	ldr	r2, [r2, #4]
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6892      	ldr	r2, [r2, #8]
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004f34:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 f8d3 	bl	80050f0 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2201      	movs	r2, #1
 8004f52:	2108      	movs	r1, #8
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 f894 	bl	8005082 <QSPI_WaitFlagStateUntilTimeout>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10a      	bne.n	8004f7a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004f74:	e001      	b.n	8004f7a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004f76:	2302      	movs	r3, #2
 8004f78:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004f98:	f7fd fc84 	bl	80028a4 <HAL_GetTick>
 8004f9c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d056      	beq.n	800505c <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d017      	beq.n	8004ff4 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0204 	bic.w	r2, r2, #4
 8004fd2:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff f8a7 	bl	800412c <HAL_DMA_Abort>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fec:	f043 0204 	orr.w	r2, r3, #4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0202 	orr.w	r2, r2, #2
 8005002:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2201      	movs	r2, #1
 800500e:	2102      	movs	r1, #2
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f836 	bl	8005082 <QSPI_WaitFlagStateUntilTimeout>
 8005016:	4603      	mov	r3, r0
 8005018:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10e      	bne.n	800503e <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2202      	movs	r2, #2
 8005026:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2200      	movs	r2, #0
 8005032:	2120      	movs	r1, #32
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f824 	bl	8005082 <QSPI_WaitFlagStateUntilTimeout>
 800503a:	4603      	mov	r3, r0
 800503c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005052:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 800505c:	7bfb      	ldrb	r3, [r7, #15]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	603b      	str	r3, [r7, #0]
 800508e:	4613      	mov	r3, r2
 8005090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005092:	e01a      	b.n	80050ca <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	d016      	beq.n	80050ca <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509c:	f7fd fc02 	bl	80028a4 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d302      	bcc.n	80050b2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10b      	bne.n	80050ca <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2204      	movs	r2, #4
 80050b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050be:	f043 0201 	orr.w	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e00e      	b.n	80050e8 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d1d6      	bne.n	8005094 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	d009      	beq.n	8005118 <QSPI_Config+0x28>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800510a:	d005      	beq.n	8005118 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3a01      	subs	r2, #1
 8005116:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80b9 	beq.w	8005294 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d05f      	beq.n	80051ea <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	6892      	ldr	r2, [r2, #8]
 8005132:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d031      	beq.n	80051a0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	431a      	orrs	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514a:	431a      	orrs	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	431a      	orrs	r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	049b      	lsls	r3, r3, #18
 8005158:	431a      	orrs	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	431a      	orrs	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	431a      	orrs	r2, r3
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	431a      	orrs	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	431a      	orrs	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	431a      	orrs	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	ea42 0103 	orr.w	r1, r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	430a      	orrs	r2, r1
 8005188:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005190:	f000 812e 	beq.w	80053f0 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	6852      	ldr	r2, [r2, #4]
 800519c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800519e:	e127      	b.n	80053f0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	431a      	orrs	r2, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ae:	431a      	orrs	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	431a      	orrs	r2, r3
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	049b      	lsls	r3, r3, #18
 80051bc:	431a      	orrs	r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	431a      	orrs	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	431a      	orrs	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	ea42 0103 	orr.w	r1, r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	615a      	str	r2, [r3, #20]
}
 80051e8:	e102      	b.n	80053f0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d02e      	beq.n	8005250 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	431a      	orrs	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005200:	431a      	orrs	r2, r3
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	431a      	orrs	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	049b      	lsls	r3, r3, #18
 800520e:	431a      	orrs	r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	431a      	orrs	r2, r3
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	431a      	orrs	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	431a      	orrs	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	431a      	orrs	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	ea42 0103 	orr.w	r1, r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	430a      	orrs	r2, r1
 8005238:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005240:	f000 80d6 	beq.w	80053f0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	6852      	ldr	r2, [r2, #4]
 800524c:	619a      	str	r2, [r3, #24]
}
 800524e:	e0cf      	b.n	80053f0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	431a      	orrs	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525e:	431a      	orrs	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	431a      	orrs	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	049b      	lsls	r3, r3, #18
 800526c:	431a      	orrs	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	431a      	orrs	r2, r3
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	431a      	orrs	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	431a      	orrs	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	ea42 0103 	orr.w	r1, r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	430a      	orrs	r2, r1
 8005290:	615a      	str	r2, [r3, #20]
}
 8005292:	e0ad      	b.n	80053f0 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d058      	beq.n	800534e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	6892      	ldr	r2, [r2, #8]
 80052a4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d02d      	beq.n	800530a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	431a      	orrs	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052bc:	431a      	orrs	r2, r3
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	431a      	orrs	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	049b      	lsls	r3, r3, #18
 80052ca:	431a      	orrs	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	431a      	orrs	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	431a      	orrs	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	431a      	orrs	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	ea42 0103 	orr.w	r1, r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052fc:	d078      	beq.n	80053f0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	6852      	ldr	r2, [r2, #4]
 8005306:	619a      	str	r2, [r3, #24]
}
 8005308:	e072      	b.n	80053f0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	431a      	orrs	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005318:	431a      	orrs	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	431a      	orrs	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	049b      	lsls	r3, r3, #18
 8005326:	431a      	orrs	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	431a      	orrs	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	431a      	orrs	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	431a      	orrs	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	ea42 0103 	orr.w	r1, r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	430a      	orrs	r2, r1
 800534a:	615a      	str	r2, [r3, #20]
}
 800534c:	e050      	b.n	80053f0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d02a      	beq.n	80053ac <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	431a      	orrs	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005364:	431a      	orrs	r2, r3
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	431a      	orrs	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	049b      	lsls	r3, r3, #18
 8005372:	431a      	orrs	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	431a      	orrs	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	431a      	orrs	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	431a      	orrs	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	ea42 0103 	orr.w	r1, r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	430a      	orrs	r2, r1
 8005396:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800539e:	d027      	beq.n	80053f0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	6852      	ldr	r2, [r2, #4]
 80053a8:	619a      	str	r2, [r3, #24]
}
 80053aa:	e021      	b.n	80053f0 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01d      	beq.n	80053f0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	431a      	orrs	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c2:	431a      	orrs	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	431a      	orrs	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	049b      	lsls	r3, r3, #18
 80053d0:	431a      	orrs	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	431a      	orrs	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	ea42 0103 	orr.w	r1, r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	615a      	str	r2, [r3, #20]
}
 80053f0:	bf00      	nop
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e3d8      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800540e:	4b97      	ldr	r3, [pc, #604]	; (800566c <HAL_RCC_OscConfig+0x270>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 030c 	and.w	r3, r3, #12
 8005416:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005418:	4b94      	ldr	r3, [pc, #592]	; (800566c <HAL_RCC_OscConfig+0x270>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 80e4 	beq.w	80055f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d007      	beq.n	8005446 <HAL_RCC_OscConfig+0x4a>
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	2b0c      	cmp	r3, #12
 800543a:	f040 808b 	bne.w	8005554 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b01      	cmp	r3, #1
 8005442:	f040 8087 	bne.w	8005554 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005446:	4b89      	ldr	r3, [pc, #548]	; (800566c <HAL_RCC_OscConfig+0x270>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <HAL_RCC_OscConfig+0x62>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e3b0      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1a      	ldr	r2, [r3, #32]
 8005462:	4b82      	ldr	r3, [pc, #520]	; (800566c <HAL_RCC_OscConfig+0x270>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d004      	beq.n	8005478 <HAL_RCC_OscConfig+0x7c>
 800546e:	4b7f      	ldr	r3, [pc, #508]	; (800566c <HAL_RCC_OscConfig+0x270>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005476:	e005      	b.n	8005484 <HAL_RCC_OscConfig+0x88>
 8005478:	4b7c      	ldr	r3, [pc, #496]	; (800566c <HAL_RCC_OscConfig+0x270>)
 800547a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547e:	091b      	lsrs	r3, r3, #4
 8005480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005484:	4293      	cmp	r3, r2
 8005486:	d223      	bcs.n	80054d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fd43 	bl	8005f18 <RCC_SetFlashLatencyFromMSIRange>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e391      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800549c:	4b73      	ldr	r3, [pc, #460]	; (800566c <HAL_RCC_OscConfig+0x270>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a72      	ldr	r2, [pc, #456]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80054a2:	f043 0308 	orr.w	r3, r3, #8
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	4b70      	ldr	r3, [pc, #448]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	496d      	ldr	r1, [pc, #436]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054ba:	4b6c      	ldr	r3, [pc, #432]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	4968      	ldr	r1, [pc, #416]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	604b      	str	r3, [r1, #4]
 80054ce:	e025      	b.n	800551c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054d0:	4b66      	ldr	r3, [pc, #408]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a65      	ldr	r2, [pc, #404]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80054d6:	f043 0308 	orr.w	r3, r3, #8
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	4b63      	ldr	r3, [pc, #396]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	4960      	ldr	r1, [pc, #384]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054ee:	4b5f      	ldr	r3, [pc, #380]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	495b      	ldr	r1, [pc, #364]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d109      	bne.n	800551c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fd03 	bl	8005f18 <RCC_SetFlashLatencyFromMSIRange>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e351      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800551c:	f000 fc38 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8005520:	4602      	mov	r2, r0
 8005522:	4b52      	ldr	r3, [pc, #328]	; (800566c <HAL_RCC_OscConfig+0x270>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	091b      	lsrs	r3, r3, #4
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	4950      	ldr	r1, [pc, #320]	; (8005670 <HAL_RCC_OscConfig+0x274>)
 800552e:	5ccb      	ldrb	r3, [r1, r3]
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
 8005538:	4a4e      	ldr	r2, [pc, #312]	; (8005674 <HAL_RCC_OscConfig+0x278>)
 800553a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800553c:	4b4e      	ldr	r3, [pc, #312]	; (8005678 <HAL_RCC_OscConfig+0x27c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f7fd f95f 	bl	8002804 <HAL_InitTick>
 8005546:	4603      	mov	r3, r0
 8005548:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d052      	beq.n	80055f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	e335      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d032      	beq.n	80055c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800555c:	4b43      	ldr	r3, [pc, #268]	; (800566c <HAL_RCC_OscConfig+0x270>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a42      	ldr	r2, [pc, #264]	; (800566c <HAL_RCC_OscConfig+0x270>)
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005568:	f7fd f99c 	bl	80028a4 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005570:	f7fd f998 	bl	80028a4 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e31e      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005582:	4b3a      	ldr	r3, [pc, #232]	; (800566c <HAL_RCC_OscConfig+0x270>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800558e:	4b37      	ldr	r3, [pc, #220]	; (800566c <HAL_RCC_OscConfig+0x270>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a36      	ldr	r2, [pc, #216]	; (800566c <HAL_RCC_OscConfig+0x270>)
 8005594:	f043 0308 	orr.w	r3, r3, #8
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	4b34      	ldr	r3, [pc, #208]	; (800566c <HAL_RCC_OscConfig+0x270>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	4931      	ldr	r1, [pc, #196]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055ac:	4b2f      	ldr	r3, [pc, #188]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	492c      	ldr	r1, [pc, #176]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	604b      	str	r3, [r1, #4]
 80055c0:	e01a      	b.n	80055f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055c2:	4b2a      	ldr	r3, [pc, #168]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a29      	ldr	r2, [pc, #164]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055ce:	f7fd f969 	bl	80028a4 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055d6:	f7fd f965 	bl	80028a4 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e2eb      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055e8:	4b20      	ldr	r3, [pc, #128]	; (800566c <HAL_RCC_OscConfig+0x270>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f0      	bne.n	80055d6 <HAL_RCC_OscConfig+0x1da>
 80055f4:	e000      	b.n	80055f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d074      	beq.n	80056ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	2b08      	cmp	r3, #8
 8005608:	d005      	beq.n	8005616 <HAL_RCC_OscConfig+0x21a>
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2b0c      	cmp	r3, #12
 800560e:	d10e      	bne.n	800562e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2b03      	cmp	r3, #3
 8005614:	d10b      	bne.n	800562e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005616:	4b15      	ldr	r3, [pc, #84]	; (800566c <HAL_RCC_OscConfig+0x270>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d064      	beq.n	80056ec <HAL_RCC_OscConfig+0x2f0>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d160      	bne.n	80056ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e2c8      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005636:	d106      	bne.n	8005646 <HAL_RCC_OscConfig+0x24a>
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <HAL_RCC_OscConfig+0x270>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a0b      	ldr	r2, [pc, #44]	; (800566c <HAL_RCC_OscConfig+0x270>)
 800563e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	e026      	b.n	8005694 <HAL_RCC_OscConfig+0x298>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800564e:	d115      	bne.n	800567c <HAL_RCC_OscConfig+0x280>
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <HAL_RCC_OscConfig+0x270>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a05      	ldr	r2, [pc, #20]	; (800566c <HAL_RCC_OscConfig+0x270>)
 8005656:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	4b03      	ldr	r3, [pc, #12]	; (800566c <HAL_RCC_OscConfig+0x270>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a02      	ldr	r2, [pc, #8]	; (800566c <HAL_RCC_OscConfig+0x270>)
 8005662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	e014      	b.n	8005694 <HAL_RCC_OscConfig+0x298>
 800566a:	bf00      	nop
 800566c:	40021000 	.word	0x40021000
 8005670:	0800eb38 	.word	0x0800eb38
 8005674:	20000008 	.word	0x20000008
 8005678:	2000000c 	.word	0x2000000c
 800567c:	4ba0      	ldr	r3, [pc, #640]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a9f      	ldr	r2, [pc, #636]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 8005682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	4b9d      	ldr	r3, [pc, #628]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a9c      	ldr	r2, [pc, #624]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 800568e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d013      	beq.n	80056c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fd f902 	bl	80028a4 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a4:	f7fd f8fe 	bl	80028a4 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b64      	cmp	r3, #100	; 0x64
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e284      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056b6:	4b92      	ldr	r3, [pc, #584]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCC_OscConfig+0x2a8>
 80056c2:	e014      	b.n	80056ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fd f8ee 	bl	80028a4 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056cc:	f7fd f8ea 	bl	80028a4 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b64      	cmp	r3, #100	; 0x64
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e270      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056de:	4b88      	ldr	r3, [pc, #544]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x2d0>
 80056ea:	e000      	b.n	80056ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d060      	beq.n	80057bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d005      	beq.n	800570c <HAL_RCC_OscConfig+0x310>
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b0c      	cmp	r3, #12
 8005704:	d119      	bne.n	800573a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d116      	bne.n	800573a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800570c:	4b7c      	ldr	r3, [pc, #496]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <HAL_RCC_OscConfig+0x328>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e24d      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005724:	4b76      	ldr	r3, [pc, #472]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	061b      	lsls	r3, r3, #24
 8005732:	4973      	ldr	r1, [pc, #460]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 8005734:	4313      	orrs	r3, r2
 8005736:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005738:	e040      	b.n	80057bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d023      	beq.n	800578a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005742:	4b6f      	ldr	r3, [pc, #444]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a6e      	ldr	r2, [pc, #440]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 8005748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800574c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574e:	f7fd f8a9 	bl	80028a4 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005756:	f7fd f8a5 	bl	80028a4 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e22b      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005768:	4b65      	ldr	r3, [pc, #404]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f0      	beq.n	8005756 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005774:	4b62      	ldr	r3, [pc, #392]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	061b      	lsls	r3, r3, #24
 8005782:	495f      	ldr	r1, [pc, #380]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 8005784:	4313      	orrs	r3, r2
 8005786:	604b      	str	r3, [r1, #4]
 8005788:	e018      	b.n	80057bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800578a:	4b5d      	ldr	r3, [pc, #372]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a5c      	ldr	r2, [pc, #368]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 8005790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005796:	f7fd f885 	bl	80028a4 <HAL_GetTick>
 800579a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800579e:	f7fd f881 	bl	80028a4 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e207      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057b0:	4b53      	ldr	r3, [pc, #332]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f0      	bne.n	800579e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d03c      	beq.n	8005842 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01c      	beq.n	800580a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057d0:	4b4b      	ldr	r3, [pc, #300]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 80057d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d6:	4a4a      	ldr	r2, [pc, #296]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e0:	f7fd f860 	bl	80028a4 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057e8:	f7fd f85c 	bl	80028a4 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e1e2      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057fa:	4b41      	ldr	r3, [pc, #260]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 80057fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0ef      	beq.n	80057e8 <HAL_RCC_OscConfig+0x3ec>
 8005808:	e01b      	b.n	8005842 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800580a:	4b3d      	ldr	r3, [pc, #244]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 800580c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005810:	4a3b      	ldr	r2, [pc, #236]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581a:	f7fd f843 	bl	80028a4 <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005822:	f7fd f83f 	bl	80028a4 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e1c5      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005834:	4b32      	ldr	r3, [pc, #200]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 8005836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1ef      	bne.n	8005822 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 80a6 	beq.w	800599c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005850:	2300      	movs	r3, #0
 8005852:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005854:	4b2a      	ldr	r3, [pc, #168]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 8005856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10d      	bne.n	800587c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005860:	4b27      	ldr	r3, [pc, #156]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 8005862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005864:	4a26      	ldr	r2, [pc, #152]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 8005866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586a:	6593      	str	r3, [r2, #88]	; 0x58
 800586c:	4b24      	ldr	r3, [pc, #144]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 800586e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005874:	60bb      	str	r3, [r7, #8]
 8005876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005878:	2301      	movs	r3, #1
 800587a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800587c:	4b21      	ldr	r3, [pc, #132]	; (8005904 <HAL_RCC_OscConfig+0x508>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005884:	2b00      	cmp	r3, #0
 8005886:	d118      	bne.n	80058ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005888:	4b1e      	ldr	r3, [pc, #120]	; (8005904 <HAL_RCC_OscConfig+0x508>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1d      	ldr	r2, [pc, #116]	; (8005904 <HAL_RCC_OscConfig+0x508>)
 800588e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005892:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005894:	f7fd f806 	bl	80028a4 <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800589c:	f7fd f802 	bl	80028a4 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e188      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058ae:	4b15      	ldr	r3, [pc, #84]	; (8005904 <HAL_RCC_OscConfig+0x508>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0f0      	beq.n	800589c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d108      	bne.n	80058d4 <HAL_RCC_OscConfig+0x4d8>
 80058c2:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c8:	4a0d      	ldr	r2, [pc, #52]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058d2:	e029      	b.n	8005928 <HAL_RCC_OscConfig+0x52c>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b05      	cmp	r3, #5
 80058da:	d115      	bne.n	8005908 <HAL_RCC_OscConfig+0x50c>
 80058dc:	4b08      	ldr	r3, [pc, #32]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 80058de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e2:	4a07      	ldr	r2, [pc, #28]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 80058e4:	f043 0304 	orr.w	r3, r3, #4
 80058e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058ec:	4b04      	ldr	r3, [pc, #16]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f2:	4a03      	ldr	r2, [pc, #12]	; (8005900 <HAL_RCC_OscConfig+0x504>)
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058fc:	e014      	b.n	8005928 <HAL_RCC_OscConfig+0x52c>
 80058fe:	bf00      	nop
 8005900:	40021000 	.word	0x40021000
 8005904:	40007000 	.word	0x40007000
 8005908:	4b91      	ldr	r3, [pc, #580]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 800590a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590e:	4a90      	ldr	r2, [pc, #576]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005918:	4b8d      	ldr	r3, [pc, #564]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591e:	4a8c      	ldr	r2, [pc, #560]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005920:	f023 0304 	bic.w	r3, r3, #4
 8005924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d016      	beq.n	800595e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005930:	f7fc ffb8 	bl	80028a4 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005936:	e00a      	b.n	800594e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005938:	f7fc ffb4 	bl	80028a4 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	f241 3288 	movw	r2, #5000	; 0x1388
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e138      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800594e:	4b80      	ldr	r3, [pc, #512]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0ed      	beq.n	8005938 <HAL_RCC_OscConfig+0x53c>
 800595c:	e015      	b.n	800598a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595e:	f7fc ffa1 	bl	80028a4 <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005964:	e00a      	b.n	800597c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005966:	f7fc ff9d 	bl	80028a4 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	f241 3288 	movw	r2, #5000	; 0x1388
 8005974:	4293      	cmp	r3, r2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e121      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800597c:	4b74      	ldr	r3, [pc, #464]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 800597e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1ed      	bne.n	8005966 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800598a:	7ffb      	ldrb	r3, [r7, #31]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d105      	bne.n	800599c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005990:	4b6f      	ldr	r3, [pc, #444]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005994:	4a6e      	ldr	r2, [pc, #440]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800599a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 810c 	beq.w	8005bbe <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	f040 80d4 	bne.w	8005b58 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059b0:	4b67      	ldr	r3, [pc, #412]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f003 0203 	and.w	r2, r3, #3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d130      	bne.n	8005a26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	3b01      	subs	r3, #1
 80059d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d127      	bne.n	8005a26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d11f      	bne.n	8005a26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059f0:	2a07      	cmp	r2, #7
 80059f2:	bf14      	ite	ne
 80059f4:	2201      	movne	r2, #1
 80059f6:	2200      	moveq	r2, #0
 80059f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d113      	bne.n	8005a26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a08:	085b      	lsrs	r3, r3, #1
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d109      	bne.n	8005a26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d06e      	beq.n	8005b04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b0c      	cmp	r3, #12
 8005a2a:	d069      	beq.n	8005b00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a2c:	4b48      	ldr	r3, [pc, #288]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d105      	bne.n	8005a44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a38:	4b45      	ldr	r3, [pc, #276]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0bb      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a48:	4b41      	ldr	r3, [pc, #260]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a40      	ldr	r2, [pc, #256]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a54:	f7fc ff26 	bl	80028a4 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a5c:	f7fc ff22 	bl	80028a4 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e0a8      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a6e:	4b38      	ldr	r3, [pc, #224]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f0      	bne.n	8005a5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a7a:	4b35      	ldr	r3, [pc, #212]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	4b35      	ldr	r3, [pc, #212]	; (8005b54 <HAL_RCC_OscConfig+0x758>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a8a:	3a01      	subs	r2, #1
 8005a8c:	0112      	lsls	r2, r2, #4
 8005a8e:	4311      	orrs	r1, r2
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a94:	0212      	lsls	r2, r2, #8
 8005a96:	4311      	orrs	r1, r2
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a9c:	0852      	lsrs	r2, r2, #1
 8005a9e:	3a01      	subs	r2, #1
 8005aa0:	0552      	lsls	r2, r2, #21
 8005aa2:	4311      	orrs	r1, r2
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005aa8:	0852      	lsrs	r2, r2, #1
 8005aaa:	3a01      	subs	r2, #1
 8005aac:	0652      	lsls	r2, r2, #25
 8005aae:	4311      	orrs	r1, r2
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ab4:	0912      	lsrs	r2, r2, #4
 8005ab6:	0452      	lsls	r2, r2, #17
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	4925      	ldr	r1, [pc, #148]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ac0:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a22      	ldr	r2, [pc, #136]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005acc:	4b20      	ldr	r3, [pc, #128]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4a1f      	ldr	r2, [pc, #124]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ad6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ad8:	f7fc fee4 	bl	80028a4 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae0:	f7fc fee0 	bl	80028a4 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e066      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005af2:	4b17      	ldr	r3, [pc, #92]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0f0      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005afe:	e05e      	b.n	8005bbe <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e05d      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b04:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d156      	bne.n	8005bbe <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b10:	4b0f      	ldr	r3, [pc, #60]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a0e      	ldr	r2, [pc, #56]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b1c:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4a0b      	ldr	r2, [pc, #44]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b28:	f7fc febc 	bl	80028a4 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b30:	f7fc feb8 	bl	80028a4 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e03e      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b42:	4b03      	ldr	r3, [pc, #12]	; (8005b50 <HAL_RCC_OscConfig+0x754>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0f0      	beq.n	8005b30 <HAL_RCC_OscConfig+0x734>
 8005b4e:	e036      	b.n	8005bbe <HAL_RCC_OscConfig+0x7c2>
 8005b50:	40021000 	.word	0x40021000
 8005b54:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	2b0c      	cmp	r3, #12
 8005b5c:	d02d      	beq.n	8005bba <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <HAL_RCC_OscConfig+0x7cc>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a19      	ldr	r2, [pc, #100]	; (8005bc8 <HAL_RCC_OscConfig+0x7cc>)
 8005b64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b68:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005b6a:	4b17      	ldr	r3, [pc, #92]	; (8005bc8 <HAL_RCC_OscConfig+0x7cc>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d105      	bne.n	8005b82 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <HAL_RCC_OscConfig+0x7cc>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <HAL_RCC_OscConfig+0x7cc>)
 8005b7c:	f023 0303 	bic.w	r3, r3, #3
 8005b80:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005b82:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <HAL_RCC_OscConfig+0x7cc>)
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	4a10      	ldr	r2, [pc, #64]	; (8005bc8 <HAL_RCC_OscConfig+0x7cc>)
 8005b88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b90:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b92:	f7fc fe87 	bl	80028a4 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b9a:	f7fc fe83 	bl	80028a4 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e009      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <HAL_RCC_OscConfig+0x7cc>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1f0      	bne.n	8005b9a <HAL_RCC_OscConfig+0x79e>
 8005bb8:	e001      	b.n	8005bbe <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3720      	adds	r7, #32
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40021000 	.word	0x40021000

08005bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0c8      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005be0:	4b66      	ldr	r3, [pc, #408]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d910      	bls.n	8005c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bee:	4b63      	ldr	r3, [pc, #396]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f023 0207 	bic.w	r2, r3, #7
 8005bf6:	4961      	ldr	r1, [pc, #388]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfe:	4b5f      	ldr	r3, [pc, #380]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d001      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0b0      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d04c      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d107      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c24:	4b56      	ldr	r3, [pc, #344]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d121      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e09e      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d107      	bne.n	8005c4c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c3c:	4b50      	ldr	r3, [pc, #320]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d115      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e092      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d107      	bne.n	8005c64 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c54:	4b4a      	ldr	r3, [pc, #296]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e086      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c64:	4b46      	ldr	r3, [pc, #280]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e07e      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c74:	4b42      	ldr	r3, [pc, #264]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f023 0203 	bic.w	r2, r3, #3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	493f      	ldr	r1, [pc, #252]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c86:	f7fc fe0d 	bl	80028a4 <HAL_GetTick>
 8005c8a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8c:	e00a      	b.n	8005ca4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c8e:	f7fc fe09 	bl	80028a4 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e066      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca4:	4b36      	ldr	r3, [pc, #216]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 020c 	and.w	r2, r3, #12
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d1eb      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d008      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc2:	4b2f      	ldr	r3, [pc, #188]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	492c      	ldr	r1, [pc, #176]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd4:	4b29      	ldr	r3, [pc, #164]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d210      	bcs.n	8005d04 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce2:	4b26      	ldr	r3, [pc, #152]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 0207 	bic.w	r2, r3, #7
 8005cea:	4924      	ldr	r1, [pc, #144]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf2:	4b22      	ldr	r3, [pc, #136]	; (8005d7c <HAL_RCC_ClockConfig+0x1b0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e036      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d008      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d10:	4b1b      	ldr	r3, [pc, #108]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	4918      	ldr	r1, [pc, #96]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d009      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d2e:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	4910      	ldr	r1, [pc, #64]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d42:	f000 f825 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8005d46:	4602      	mov	r2, r0
 8005d48:	4b0d      	ldr	r3, [pc, #52]	; (8005d80 <HAL_RCC_ClockConfig+0x1b4>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	091b      	lsrs	r3, r3, #4
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	490c      	ldr	r1, [pc, #48]	; (8005d84 <HAL_RCC_ClockConfig+0x1b8>)
 8005d54:	5ccb      	ldrb	r3, [r1, r3]
 8005d56:	f003 031f 	and.w	r3, r3, #31
 8005d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5e:	4a0a      	ldr	r2, [pc, #40]	; (8005d88 <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d62:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <HAL_RCC_ClockConfig+0x1c0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fc fd4c 	bl	8002804 <HAL_InitTick>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005d70:	7afb      	ldrb	r3, [r7, #11]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40022000 	.word	0x40022000
 8005d80:	40021000 	.word	0x40021000
 8005d84:	0800eb38 	.word	0x0800eb38
 8005d88:	20000008 	.word	0x20000008
 8005d8c:	2000000c 	.word	0x2000000c

08005d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b089      	sub	sp, #36	; 0x24
 8005d94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d9e:	4b3e      	ldr	r3, [pc, #248]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005da8:	4b3b      	ldr	r3, [pc, #236]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2b0c      	cmp	r3, #12
 8005dbc:	d121      	bne.n	8005e02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d11e      	bne.n	8005e02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005dc4:	4b34      	ldr	r3, [pc, #208]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d107      	bne.n	8005de0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005dd0:	4b31      	ldr	r3, [pc, #196]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	e005      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005de0:	4b2d      	ldr	r3, [pc, #180]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	091b      	lsrs	r3, r3, #4
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005dec:	4a2b      	ldr	r2, [pc, #172]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e00:	e00a      	b.n	8005e18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d102      	bne.n	8005e0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e08:	4b25      	ldr	r3, [pc, #148]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	e004      	b.n	8005e18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d101      	bne.n	8005e18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e14:	4b23      	ldr	r3, [pc, #140]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b0c      	cmp	r3, #12
 8005e1c:	d134      	bne.n	8005e88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e1e:	4b1e      	ldr	r3, [pc, #120]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d003      	beq.n	8005e36 <HAL_RCC_GetSysClockFreq+0xa6>
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d003      	beq.n	8005e3c <HAL_RCC_GetSysClockFreq+0xac>
 8005e34:	e005      	b.n	8005e42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e36:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e38:	617b      	str	r3, [r7, #20]
      break;
 8005e3a:	e005      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e3c:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e3e:	617b      	str	r3, [r7, #20]
      break;
 8005e40:	e002      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	617b      	str	r3, [r7, #20]
      break;
 8005e46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e48:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	091b      	lsrs	r3, r3, #4
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	3301      	adds	r3, #1
 8005e54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e56:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	0a1b      	lsrs	r3, r3, #8
 8005e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	fb03 f202 	mul.w	r2, r3, r2
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e6e:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	0e5b      	lsrs	r3, r3, #25
 8005e74:	f003 0303 	and.w	r3, r3, #3
 8005e78:	3301      	adds	r3, #1
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e88:	69bb      	ldr	r3, [r7, #24]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3724      	adds	r7, #36	; 0x24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	0800eb50 	.word	0x0800eb50
 8005ea0:	00f42400 	.word	0x00f42400
 8005ea4:	007a1200 	.word	0x007a1200

08005ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eac:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8005eae:	681b      	ldr	r3, [r3, #0]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20000008 	.word	0x20000008

08005ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ec4:	f7ff fff0 	bl	8005ea8 <HAL_RCC_GetHCLKFreq>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	0a1b      	lsrs	r3, r3, #8
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	4904      	ldr	r1, [pc, #16]	; (8005ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ed6:	5ccb      	ldrb	r3, [r1, r3]
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	0800eb48 	.word	0x0800eb48

08005eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ef0:	f7ff ffda 	bl	8005ea8 <HAL_RCC_GetHCLKFreq>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	0adb      	lsrs	r3, r3, #11
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	4904      	ldr	r1, [pc, #16]	; (8005f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f02:	5ccb      	ldrb	r3, [r1, r3]
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40021000 	.word	0x40021000
 8005f14:	0800eb48 	.word	0x0800eb48

08005f18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f20:	2300      	movs	r3, #0
 8005f22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f24:	4b2a      	ldr	r3, [pc, #168]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f30:	f7fe fd20 	bl	8004974 <HAL_PWREx_GetVoltageRange>
 8005f34:	6178      	str	r0, [r7, #20]
 8005f36:	e014      	b.n	8005f62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f38:	4b25      	ldr	r3, [pc, #148]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3c:	4a24      	ldr	r2, [pc, #144]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f42:	6593      	str	r3, [r2, #88]	; 0x58
 8005f44:	4b22      	ldr	r3, [pc, #136]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f50:	f7fe fd10 	bl	8004974 <HAL_PWREx_GetVoltageRange>
 8005f54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f56:	4b1e      	ldr	r3, [pc, #120]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5a:	4a1d      	ldr	r2, [pc, #116]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f68:	d10b      	bne.n	8005f82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b80      	cmp	r3, #128	; 0x80
 8005f6e:	d919      	bls.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2ba0      	cmp	r3, #160	; 0xa0
 8005f74:	d902      	bls.n	8005f7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f76:	2302      	movs	r3, #2
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	e013      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	e010      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b80      	cmp	r3, #128	; 0x80
 8005f86:	d902      	bls.n	8005f8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f88:	2303      	movs	r3, #3
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	e00a      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b80      	cmp	r3, #128	; 0x80
 8005f92:	d102      	bne.n	8005f9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f94:	2302      	movs	r3, #2
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	e004      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b70      	cmp	r3, #112	; 0x70
 8005f9e:	d101      	bne.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f023 0207 	bic.w	r2, r3, #7
 8005fac:	4909      	ldr	r1, [pc, #36]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005fb4:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d001      	beq.n	8005fc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40022000 	.word	0x40022000

08005fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d041      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ffc:	d02a      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005ffe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006002:	d824      	bhi.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006004:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006008:	d008      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800600a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800600e:	d81e      	bhi.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006018:	d010      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800601a:	e018      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800601c:	4b86      	ldr	r3, [pc, #536]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	4a85      	ldr	r2, [pc, #532]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006026:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006028:	e015      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3304      	adds	r3, #4
 800602e:	2100      	movs	r1, #0
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fabb 	bl	80065ac <RCCEx_PLLSAI1_Config>
 8006036:	4603      	mov	r3, r0
 8006038:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800603a:	e00c      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3320      	adds	r3, #32
 8006040:	2100      	movs	r1, #0
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fba6 	bl	8006794 <RCCEx_PLLSAI2_Config>
 8006048:	4603      	mov	r3, r0
 800604a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800604c:	e003      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	74fb      	strb	r3, [r7, #19]
      break;
 8006052:	e000      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006056:	7cfb      	ldrb	r3, [r7, #19]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800605c:	4b76      	ldr	r3, [pc, #472]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006062:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800606a:	4973      	ldr	r1, [pc, #460]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006072:	e001      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006074:	7cfb      	ldrb	r3, [r7, #19]
 8006076:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d041      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006088:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800608c:	d02a      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800608e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006092:	d824      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006098:	d008      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800609a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800609e:	d81e      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00a      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80060a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060a8:	d010      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060aa:	e018      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060ac:	4b62      	ldr	r3, [pc, #392]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	4a61      	ldr	r2, [pc, #388]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060b8:	e015      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3304      	adds	r3, #4
 80060be:	2100      	movs	r1, #0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fa73 	bl	80065ac <RCCEx_PLLSAI1_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060ca:	e00c      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3320      	adds	r3, #32
 80060d0:	2100      	movs	r1, #0
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fb5e 	bl	8006794 <RCCEx_PLLSAI2_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060dc:	e003      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	74fb      	strb	r3, [r7, #19]
      break;
 80060e2:	e000      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80060e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060e6:	7cfb      	ldrb	r3, [r7, #19]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060ec:	4b52      	ldr	r3, [pc, #328]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060fa:	494f      	ldr	r1, [pc, #316]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006102:	e001      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006104:	7cfb      	ldrb	r3, [r7, #19]
 8006106:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80a0 	beq.w	8006256 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006116:	2300      	movs	r3, #0
 8006118:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800611a:	4b47      	ldr	r3, [pc, #284]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800611c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006126:	2301      	movs	r3, #1
 8006128:	e000      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800612a:	2300      	movs	r3, #0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00d      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006130:	4b41      	ldr	r3, [pc, #260]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006134:	4a40      	ldr	r2, [pc, #256]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800613a:	6593      	str	r3, [r2, #88]	; 0x58
 800613c:	4b3e      	ldr	r3, [pc, #248]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800613e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006144:	60bb      	str	r3, [r7, #8]
 8006146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006148:	2301      	movs	r3, #1
 800614a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800614c:	4b3b      	ldr	r3, [pc, #236]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a3a      	ldr	r2, [pc, #232]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006158:	f7fc fba4 	bl	80028a4 <HAL_GetTick>
 800615c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800615e:	e009      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006160:	f7fc fba0 	bl	80028a4 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d902      	bls.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	74fb      	strb	r3, [r7, #19]
        break;
 8006172:	e005      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006174:	4b31      	ldr	r3, [pc, #196]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ef      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006180:	7cfb      	ldrb	r3, [r7, #19]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d15c      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006186:	4b2c      	ldr	r3, [pc, #176]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006190:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01f      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d019      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061a4:	4b24      	ldr	r3, [pc, #144]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061b0:	4b21      	ldr	r3, [pc, #132]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b6:	4a20      	ldr	r2, [pc, #128]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061c0:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c6:	4a1c      	ldr	r2, [pc, #112]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061d0:	4a19      	ldr	r2, [pc, #100]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d016      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e2:	f7fc fb5f 	bl	80028a4 <HAL_GetTick>
 80061e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061e8:	e00b      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ea:	f7fc fb5b 	bl	80028a4 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d902      	bls.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	74fb      	strb	r3, [r7, #19]
            break;
 8006200:	e006      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006202:	4b0d      	ldr	r3, [pc, #52]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0ec      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006210:	7cfb      	ldrb	r3, [r7, #19]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10c      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006216:	4b08      	ldr	r3, [pc, #32]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006226:	4904      	ldr	r1, [pc, #16]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800622e:	e009      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006230:	7cfb      	ldrb	r3, [r7, #19]
 8006232:	74bb      	strb	r3, [r7, #18]
 8006234:	e006      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006236:	bf00      	nop
 8006238:	40021000 	.word	0x40021000
 800623c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006240:	7cfb      	ldrb	r3, [r7, #19]
 8006242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006244:	7c7b      	ldrb	r3, [r7, #17]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d105      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800624a:	4b9e      	ldr	r3, [pc, #632]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800624c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624e:	4a9d      	ldr	r2, [pc, #628]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006254:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006262:	4b98      	ldr	r3, [pc, #608]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006268:	f023 0203 	bic.w	r2, r3, #3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	4994      	ldr	r1, [pc, #592]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006284:	4b8f      	ldr	r3, [pc, #572]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628a:	f023 020c 	bic.w	r2, r3, #12
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006292:	498c      	ldr	r1, [pc, #560]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0304 	and.w	r3, r3, #4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062a6:	4b87      	ldr	r3, [pc, #540]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	4983      	ldr	r1, [pc, #524]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062c8:	4b7e      	ldr	r3, [pc, #504]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	497b      	ldr	r1, [pc, #492]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0310 	and.w	r3, r3, #16
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062ea:	4b76      	ldr	r3, [pc, #472]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062f8:	4972      	ldr	r1, [pc, #456]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0320 	and.w	r3, r3, #32
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800630c:	4b6d      	ldr	r3, [pc, #436]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800630e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006312:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800631a:	496a      	ldr	r1, [pc, #424]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800631c:	4313      	orrs	r3, r2
 800631e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800632e:	4b65      	ldr	r3, [pc, #404]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006334:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633c:	4961      	ldr	r1, [pc, #388]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800633e:	4313      	orrs	r3, r2
 8006340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006350:	4b5c      	ldr	r3, [pc, #368]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006356:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800635e:	4959      	ldr	r1, [pc, #356]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006360:	4313      	orrs	r3, r2
 8006362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006372:	4b54      	ldr	r3, [pc, #336]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006378:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006380:	4950      	ldr	r1, [pc, #320]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006382:	4313      	orrs	r3, r2
 8006384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00a      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006394:	4b4b      	ldr	r3, [pc, #300]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a2:	4948      	ldr	r1, [pc, #288]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063b6:	4b43      	ldr	r3, [pc, #268]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c4:	493f      	ldr	r1, [pc, #252]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d028      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063d8:	4b3a      	ldr	r3, [pc, #232]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e6:	4937      	ldr	r1, [pc, #220]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063f6:	d106      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063f8:	4b32      	ldr	r3, [pc, #200]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	4a31      	ldr	r2, [pc, #196]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006402:	60d3      	str	r3, [r2, #12]
 8006404:	e011      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800640a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800640e:	d10c      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3304      	adds	r3, #4
 8006414:	2101      	movs	r1, #1
 8006416:	4618      	mov	r0, r3
 8006418:	f000 f8c8 	bl	80065ac <RCCEx_PLLSAI1_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006420:	7cfb      	ldrb	r3, [r7, #19]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006426:	7cfb      	ldrb	r3, [r7, #19]
 8006428:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d028      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006436:	4b23      	ldr	r3, [pc, #140]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006444:	491f      	ldr	r1, [pc, #124]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006446:	4313      	orrs	r3, r2
 8006448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006454:	d106      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006456:	4b1b      	ldr	r3, [pc, #108]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800645c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006460:	60d3      	str	r3, [r2, #12]
 8006462:	e011      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800646c:	d10c      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3304      	adds	r3, #4
 8006472:	2101      	movs	r1, #1
 8006474:	4618      	mov	r0, r3
 8006476:	f000 f899 	bl	80065ac <RCCEx_PLLSAI1_Config>
 800647a:	4603      	mov	r3, r0
 800647c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800647e:	7cfb      	ldrb	r3, [r7, #19]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006484:	7cfb      	ldrb	r3, [r7, #19]
 8006486:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d02b      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a2:	4908      	ldr	r1, [pc, #32]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064b2:	d109      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064b4:	4b03      	ldr	r3, [pc, #12]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	4a02      	ldr	r2, [pc, #8]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064be:	60d3      	str	r3, [r2, #12]
 80064c0:	e014      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80064c2:	bf00      	nop
 80064c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064d0:	d10c      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3304      	adds	r3, #4
 80064d6:	2101      	movs	r1, #1
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 f867 	bl	80065ac <RCCEx_PLLSAI1_Config>
 80064de:	4603      	mov	r3, r0
 80064e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064e2:	7cfb      	ldrb	r3, [r7, #19]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80064e8:	7cfb      	ldrb	r3, [r7, #19]
 80064ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d02f      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064f8:	4b2b      	ldr	r3, [pc, #172]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006506:	4928      	ldr	r1, [pc, #160]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006508:	4313      	orrs	r3, r2
 800650a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006516:	d10d      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3304      	adds	r3, #4
 800651c:	2102      	movs	r1, #2
 800651e:	4618      	mov	r0, r3
 8006520:	f000 f844 	bl	80065ac <RCCEx_PLLSAI1_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006528:	7cfb      	ldrb	r3, [r7, #19]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d014      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800652e:	7cfb      	ldrb	r3, [r7, #19]
 8006530:	74bb      	strb	r3, [r7, #18]
 8006532:	e011      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800653c:	d10c      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3320      	adds	r3, #32
 8006542:	2102      	movs	r1, #2
 8006544:	4618      	mov	r0, r3
 8006546:	f000 f925 	bl	8006794 <RCCEx_PLLSAI2_Config>
 800654a:	4603      	mov	r3, r0
 800654c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800654e:	7cfb      	ldrb	r3, [r7, #19]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006554:	7cfb      	ldrb	r3, [r7, #19]
 8006556:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00a      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006564:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006572:	490d      	ldr	r1, [pc, #52]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006574:	4313      	orrs	r3, r2
 8006576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00b      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006586:	4b08      	ldr	r3, [pc, #32]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006596:	4904      	ldr	r1, [pc, #16]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006598:	4313      	orrs	r3, r2
 800659a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800659e:	7cbb      	ldrb	r3, [r7, #18]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40021000 	.word	0x40021000

080065ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065ba:	4b75      	ldr	r3, [pc, #468]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d018      	beq.n	80065f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80065c6:	4b72      	ldr	r3, [pc, #456]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f003 0203 	and.w	r2, r3, #3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d10d      	bne.n	80065f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
       ||
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80065de:	4b6c      	ldr	r3, [pc, #432]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	091b      	lsrs	r3, r3, #4
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
       ||
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d047      	beq.n	8006682 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	73fb      	strb	r3, [r7, #15]
 80065f6:	e044      	b.n	8006682 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d018      	beq.n	8006632 <RCCEx_PLLSAI1_Config+0x86>
 8006600:	2b03      	cmp	r3, #3
 8006602:	d825      	bhi.n	8006650 <RCCEx_PLLSAI1_Config+0xa4>
 8006604:	2b01      	cmp	r3, #1
 8006606:	d002      	beq.n	800660e <RCCEx_PLLSAI1_Config+0x62>
 8006608:	2b02      	cmp	r3, #2
 800660a:	d009      	beq.n	8006620 <RCCEx_PLLSAI1_Config+0x74>
 800660c:	e020      	b.n	8006650 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800660e:	4b60      	ldr	r3, [pc, #384]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d11d      	bne.n	8006656 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800661e:	e01a      	b.n	8006656 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006620:	4b5b      	ldr	r3, [pc, #364]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006628:	2b00      	cmp	r3, #0
 800662a:	d116      	bne.n	800665a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006630:	e013      	b.n	800665a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006632:	4b57      	ldr	r3, [pc, #348]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10f      	bne.n	800665e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800663e:	4b54      	ldr	r3, [pc, #336]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d109      	bne.n	800665e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800664e:	e006      	b.n	800665e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	73fb      	strb	r3, [r7, #15]
      break;
 8006654:	e004      	b.n	8006660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006656:	bf00      	nop
 8006658:	e002      	b.n	8006660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800665a:	bf00      	nop
 800665c:	e000      	b.n	8006660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800665e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006660:	7bfb      	ldrb	r3, [r7, #15]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10d      	bne.n	8006682 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006666:	4b4a      	ldr	r3, [pc, #296]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6819      	ldr	r1, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	3b01      	subs	r3, #1
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	430b      	orrs	r3, r1
 800667c:	4944      	ldr	r1, [pc, #272]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800667e:	4313      	orrs	r3, r2
 8006680:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d17d      	bne.n	8006784 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006688:	4b41      	ldr	r3, [pc, #260]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a40      	ldr	r2, [pc, #256]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800668e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006694:	f7fc f906 	bl	80028a4 <HAL_GetTick>
 8006698:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800669a:	e009      	b.n	80066b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800669c:	f7fc f902 	bl	80028a4 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d902      	bls.n	80066b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	73fb      	strb	r3, [r7, #15]
        break;
 80066ae:	e005      	b.n	80066bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066b0:	4b37      	ldr	r3, [pc, #220]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1ef      	bne.n	800669c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d160      	bne.n	8006784 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d111      	bne.n	80066ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066c8:	4b31      	ldr	r3, [pc, #196]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80066d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6892      	ldr	r2, [r2, #8]
 80066d8:	0211      	lsls	r1, r2, #8
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	68d2      	ldr	r2, [r2, #12]
 80066de:	0912      	lsrs	r2, r2, #4
 80066e0:	0452      	lsls	r2, r2, #17
 80066e2:	430a      	orrs	r2, r1
 80066e4:	492a      	ldr	r1, [pc, #168]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	610b      	str	r3, [r1, #16]
 80066ea:	e027      	b.n	800673c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d112      	bne.n	8006718 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066f2:	4b27      	ldr	r3, [pc, #156]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80066fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6892      	ldr	r2, [r2, #8]
 8006702:	0211      	lsls	r1, r2, #8
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6912      	ldr	r2, [r2, #16]
 8006708:	0852      	lsrs	r2, r2, #1
 800670a:	3a01      	subs	r2, #1
 800670c:	0552      	lsls	r2, r2, #21
 800670e:	430a      	orrs	r2, r1
 8006710:	491f      	ldr	r1, [pc, #124]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006712:	4313      	orrs	r3, r2
 8006714:	610b      	str	r3, [r1, #16]
 8006716:	e011      	b.n	800673c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006718:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006720:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6892      	ldr	r2, [r2, #8]
 8006728:	0211      	lsls	r1, r2, #8
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6952      	ldr	r2, [r2, #20]
 800672e:	0852      	lsrs	r2, r2, #1
 8006730:	3a01      	subs	r2, #1
 8006732:	0652      	lsls	r2, r2, #25
 8006734:	430a      	orrs	r2, r1
 8006736:	4916      	ldr	r1, [pc, #88]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006738:	4313      	orrs	r3, r2
 800673a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800673c:	4b14      	ldr	r3, [pc, #80]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a13      	ldr	r2, [pc, #76]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006748:	f7fc f8ac 	bl	80028a4 <HAL_GetTick>
 800674c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800674e:	e009      	b.n	8006764 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006750:	f7fc f8a8 	bl	80028a4 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d902      	bls.n	8006764 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	73fb      	strb	r3, [r7, #15]
          break;
 8006762:	e005      	b.n	8006770 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006764:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0ef      	beq.n	8006750 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d106      	bne.n	8006784 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006776:	4b06      	ldr	r3, [pc, #24]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	4904      	ldr	r1, [pc, #16]	; (8006790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006780:	4313      	orrs	r3, r2
 8006782:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40021000 	.word	0x40021000

08006794 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067a2:	4b6a      	ldr	r3, [pc, #424]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d018      	beq.n	80067e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80067ae:	4b67      	ldr	r3, [pc, #412]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f003 0203 	and.w	r2, r3, #3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d10d      	bne.n	80067da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
       ||
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80067c6:	4b61      	ldr	r3, [pc, #388]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	091b      	lsrs	r3, r3, #4
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
       ||
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d047      	beq.n	800686a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	73fb      	strb	r3, [r7, #15]
 80067de:	e044      	b.n	800686a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	d018      	beq.n	800681a <RCCEx_PLLSAI2_Config+0x86>
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d825      	bhi.n	8006838 <RCCEx_PLLSAI2_Config+0xa4>
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d002      	beq.n	80067f6 <RCCEx_PLLSAI2_Config+0x62>
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d009      	beq.n	8006808 <RCCEx_PLLSAI2_Config+0x74>
 80067f4:	e020      	b.n	8006838 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067f6:	4b55      	ldr	r3, [pc, #340]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d11d      	bne.n	800683e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006806:	e01a      	b.n	800683e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006808:	4b50      	ldr	r3, [pc, #320]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006810:	2b00      	cmp	r3, #0
 8006812:	d116      	bne.n	8006842 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006818:	e013      	b.n	8006842 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800681a:	4b4c      	ldr	r3, [pc, #304]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10f      	bne.n	8006846 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006826:	4b49      	ldr	r3, [pc, #292]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006836:	e006      	b.n	8006846 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	73fb      	strb	r3, [r7, #15]
      break;
 800683c:	e004      	b.n	8006848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800683e:	bf00      	nop
 8006840:	e002      	b.n	8006848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006842:	bf00      	nop
 8006844:	e000      	b.n	8006848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006846:	bf00      	nop
    }

    if(status == HAL_OK)
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10d      	bne.n	800686a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800684e:	4b3f      	ldr	r3, [pc, #252]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6819      	ldr	r1, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	3b01      	subs	r3, #1
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	430b      	orrs	r3, r1
 8006864:	4939      	ldr	r1, [pc, #228]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006866:	4313      	orrs	r3, r2
 8006868:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800686a:	7bfb      	ldrb	r3, [r7, #15]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d167      	bne.n	8006940 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006870:	4b36      	ldr	r3, [pc, #216]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a35      	ldr	r2, [pc, #212]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800687a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800687c:	f7fc f812 	bl	80028a4 <HAL_GetTick>
 8006880:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006882:	e009      	b.n	8006898 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006884:	f7fc f80e 	bl	80028a4 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d902      	bls.n	8006898 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	73fb      	strb	r3, [r7, #15]
        break;
 8006896:	e005      	b.n	80068a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006898:	4b2c      	ldr	r3, [pc, #176]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1ef      	bne.n	8006884 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d14a      	bne.n	8006940 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d111      	bne.n	80068d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068b0:	4b26      	ldr	r3, [pc, #152]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80068b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6892      	ldr	r2, [r2, #8]
 80068c0:	0211      	lsls	r1, r2, #8
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	68d2      	ldr	r2, [r2, #12]
 80068c6:	0912      	lsrs	r2, r2, #4
 80068c8:	0452      	lsls	r2, r2, #17
 80068ca:	430a      	orrs	r2, r1
 80068cc:	491f      	ldr	r1, [pc, #124]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	614b      	str	r3, [r1, #20]
 80068d2:	e011      	b.n	80068f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068d4:	4b1d      	ldr	r3, [pc, #116]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80068dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6892      	ldr	r2, [r2, #8]
 80068e4:	0211      	lsls	r1, r2, #8
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6912      	ldr	r2, [r2, #16]
 80068ea:	0852      	lsrs	r2, r2, #1
 80068ec:	3a01      	subs	r2, #1
 80068ee:	0652      	lsls	r2, r2, #25
 80068f0:	430a      	orrs	r2, r1
 80068f2:	4916      	ldr	r1, [pc, #88]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80068f8:	4b14      	ldr	r3, [pc, #80]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a13      	ldr	r2, [pc, #76]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006902:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006904:	f7fb ffce 	bl	80028a4 <HAL_GetTick>
 8006908:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800690a:	e009      	b.n	8006920 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800690c:	f7fb ffca 	bl	80028a4 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b02      	cmp	r3, #2
 8006918:	d902      	bls.n	8006920 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	73fb      	strb	r3, [r7, #15]
          break;
 800691e:	e005      	b.n	800692c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006920:	4b0a      	ldr	r3, [pc, #40]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0ef      	beq.n	800690c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006932:	4b06      	ldr	r3, [pc, #24]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006934:	695a      	ldr	r2, [r3, #20]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	4904      	ldr	r1, [pc, #16]	; (800694c <RCCEx_PLLSAI2_Config+0x1b8>)
 800693c:	4313      	orrs	r3, r2
 800693e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006940:	7bfb      	ldrb	r3, [r7, #15]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40021000 	.word	0x40021000

08006950 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d06c      	beq.n	8006a3c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fb fbe0 	bl	800213c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	22ca      	movs	r2, #202	; 0xca
 800698a:	625a      	str	r2, [r3, #36]	; 0x24
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2253      	movs	r2, #83	; 0x53
 8006992:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fbcb 	bl	8007130 <RTC_EnterInitMode>
 800699a:	4603      	mov	r3, r0
 800699c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d14b      	bne.n	8006a3c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6899      	ldr	r1, [r3, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	68d2      	ldr	r2, [r2, #12]
 80069de:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6919      	ldr	r1, [r3, #16]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	041a      	lsls	r2, r3, #16
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fbcf 	bl	8007198 <RTC_ExitInitMode>
 80069fa:	4603      	mov	r3, r0
 80069fc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d11b      	bne.n	8006a3c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0203 	bic.w	r2, r2, #3
 8006a12:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	69da      	ldr	r2, [r3, #28]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	22ff      	movs	r2, #255	; 0xff
 8006a32:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006a46:	b590      	push	{r4, r7, lr}
 8006a48:	b087      	sub	sp, #28
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <HAL_RTC_SetTime+0x1a>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e08b      	b.n	8006b78 <HAL_RTC_SetTime+0x132>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	22ca      	movs	r2, #202	; 0xca
 8006a76:	625a      	str	r2, [r3, #36]	; 0x24
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2253      	movs	r2, #83	; 0x53
 8006a7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 fb55 	bl	8007130 <RTC_EnterInitMode>
 8006a86:	4603      	mov	r3, r0
 8006a88:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006a8a:	7cfb      	ldrb	r3, [r7, #19]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d163      	bne.n	8006b58 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d126      	bne.n	8006ae4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 fbb0 	bl	8007214 <RTC_ByteToBcd2>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	785b      	ldrb	r3, [r3, #1]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 fba9 	bl	8007214 <RTC_ByteToBcd2>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006ac6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	789b      	ldrb	r3, [r3, #2]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fba1 	bl	8007214 <RTC_ByteToBcd2>
 8006ad2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ad4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	78db      	ldrb	r3, [r3, #3]
 8006adc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	e018      	b.n	8006b16 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2200      	movs	r2, #0
 8006af6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	785b      	ldrb	r3, [r3, #1]
 8006b02:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b04:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b0a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	78db      	ldrb	r3, [r3, #3]
 8006b10:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b12:	4313      	orrs	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006b20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006b24:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b34:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6899      	ldr	r1, [r3, #8]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 fb22 	bl	8007198 <RTC_ExitInitMode>
 8006b54:	4603      	mov	r3, r0
 8006b56:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	22ff      	movs	r2, #255	; 0xff
 8006b5e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006b60:	7cfb      	ldrb	r3, [r7, #19]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d103      	bne.n	8006b6e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006b76:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd90      	pop	{r4, r7, pc}

08006b80 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006bae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006bb2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	0c1b      	lsrs	r3, r3, #16
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	0a1b      	lsrs	r3, r3, #8
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	0d9b      	lsrs	r3, r3, #22
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d11a      	bne.n	8006c2e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fb29 	bl	8007254 <RTC_Bcd2ToByte>
 8006c02:	4603      	mov	r3, r0
 8006c04:	461a      	mov	r2, r3
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	785b      	ldrb	r3, [r3, #1]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fb20 	bl	8007254 <RTC_Bcd2ToByte>
 8006c14:	4603      	mov	r3, r0
 8006c16:	461a      	mov	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	789b      	ldrb	r3, [r3, #2]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fb17 	bl	8007254 <RTC_Bcd2ToByte>
 8006c26:	4603      	mov	r3, r0
 8006c28:	461a      	mov	r2, r3
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d101      	bne.n	8006c52 <HAL_RTC_SetDate+0x1a>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	e075      	b.n	8006d3e <HAL_RTC_SetDate+0x106>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10e      	bne.n	8006c86 <HAL_RTC_SetDate+0x4e>
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	785b      	ldrb	r3, [r3, #1]
 8006c6c:	f003 0310 	and.w	r3, r3, #16
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d008      	beq.n	8006c86 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	785b      	ldrb	r3, [r3, #1]
 8006c78:	f023 0310 	bic.w	r3, r3, #16
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	330a      	adds	r3, #10
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d11c      	bne.n	8006cc6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	78db      	ldrb	r3, [r3, #3]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fabf 	bl	8007214 <RTC_ByteToBcd2>
 8006c96:	4603      	mov	r3, r0
 8006c98:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	785b      	ldrb	r3, [r3, #1]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fab8 	bl	8007214 <RTC_ByteToBcd2>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006ca8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	789b      	ldrb	r3, [r3, #2]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fab0 	bl	8007214 <RTC_ByteToBcd2>
 8006cb4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006cb6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]
 8006cc4:	e00e      	b.n	8006ce4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	78db      	ldrb	r3, [r3, #3]
 8006cca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006cd2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006cd8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	22ca      	movs	r2, #202	; 0xca
 8006cea:	625a      	str	r2, [r3, #36]	; 0x24
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2253      	movs	r2, #83	; 0x53
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 fa1b 	bl	8007130 <RTC_EnterInitMode>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006cfe:	7cfb      	ldrb	r3, [r7, #19]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10c      	bne.n	8006d1e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d0e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d12:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fa3f 	bl	8007198 <RTC_ExitInitMode>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	22ff      	movs	r2, #255	; 0xff
 8006d24:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006d26:	7cfb      	ldrb	r3, [r7, #19]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d103      	bne.n	8006d34 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006d3c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	371c      	adds	r7, #28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd90      	pop	{r4, r7, pc}

08006d46 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b086      	sub	sp, #24
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d60:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	0c1b      	lsrs	r3, r3, #16
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	0a1b      	lsrs	r3, r3, #8
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	f003 031f 	and.w	r3, r3, #31
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	0b5b      	lsrs	r3, r3, #13
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d11a      	bne.n	8006dd6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	78db      	ldrb	r3, [r3, #3]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fa55 	bl	8007254 <RTC_Bcd2ToByte>
 8006daa:	4603      	mov	r3, r0
 8006dac:	461a      	mov	r2, r3
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	785b      	ldrb	r3, [r3, #1]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fa4c 	bl	8007254 <RTC_Bcd2ToByte>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	789b      	ldrb	r3, [r3, #2]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fa43 	bl	8007254 <RTC_Bcd2ToByte>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006de0:	b590      	push	{r4, r7, lr}
 8006de2:	b089      	sub	sp, #36	; 0x24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d101      	bne.n	8006dfa <HAL_RTC_SetAlarm_IT+0x1a>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e127      	b.n	800704a <HAL_RTC_SetAlarm_IT+0x26a>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2202      	movs	r2, #2
 8006e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d137      	bne.n	8006e80 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d102      	bne.n	8006e24 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2200      	movs	r2, #0
 8006e22:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 f9f3 	bl	8007214 <RTC_ByteToBcd2>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 f9ec 	bl	8007214 <RTC_ByteToBcd2>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e40:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	789b      	ldrb	r3, [r3, #2]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f9e4 	bl	8007214 <RTC_ByteToBcd2>
 8006e4c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e4e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	78db      	ldrb	r3, [r3, #3]
 8006e56:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e58:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 f9d6 	bl	8007214 <RTC_ByteToBcd2>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e6c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006e74:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	e023      	b.n	8006ec8 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d102      	bne.n	8006e94 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2200      	movs	r2, #0
 8006e92:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	785b      	ldrb	r3, [r3, #1]
 8006e9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ea0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ea6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	78db      	ldrb	r3, [r3, #3]
 8006eac:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006eae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006eb6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006eb8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ebe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	22ca      	movs	r2, #202	; 0xca
 8006eda:	625a      	str	r2, [r3, #36]	; 0x24
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2253      	movs	r2, #83	; 0x53
 8006ee2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eec:	d14a      	bne.n	8006f84 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006efc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006f0e:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8006f10:	f7fb fcc8 	bl	80028a4 <HAL_GetTick>
 8006f14:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006f16:	e015      	b.n	8006f44 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f18:	f7fb fcc4 	bl	80028a4 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f26:	d90d      	bls.n	8006f44 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	22ff      	movs	r2, #255	; 0xff
 8006f2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2203      	movs	r2, #3
 8006f34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e082      	b.n	800704a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0e2      	beq.n	8006f18 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f70:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f80:	609a      	str	r2, [r3, #8]
 8006f82:	e049      	b.n	8007018 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006f92:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006fa4:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8006fa6:	f7fb fc7d 	bl	80028a4 <HAL_GetTick>
 8006faa:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006fac:	e015      	b.n	8006fda <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fae:	f7fb fc79 	bl	80028a4 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fbc:	d90d      	bls.n	8006fda <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	22ff      	movs	r2, #255	; 0xff
 8006fc4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2203      	movs	r2, #3
 8006fca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e037      	b.n	800704a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0e2      	beq.n	8006fae <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007006:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007016:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007018:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <HAL_RTC_SetAlarm_IT+0x274>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a0d      	ldr	r2, [pc, #52]	; (8007054 <HAL_RTC_SetAlarm_IT+0x274>)
 800701e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007022:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007024:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <HAL_RTC_SetAlarm_IT+0x274>)
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	4a0a      	ldr	r2, [pc, #40]	; (8007054 <HAL_RTC_SetAlarm_IT+0x274>)
 800702a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800702e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	22ff      	movs	r2, #255	; 0xff
 8007036:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3724      	adds	r7, #36	; 0x24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd90      	pop	{r4, r7, pc}
 8007052:	bf00      	nop
 8007054:	40010400 	.word	0x40010400

08007058 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007060:	4b1f      	ldr	r3, [pc, #124]	; (80070e0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007062:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007066:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d012      	beq.n	800709c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00b      	beq.n	800709c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	b2da      	uxtb	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007094:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7fa f9dc 	bl	8001454 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d012      	beq.n	80070d0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f462 7220 	orn	r2, r2, #640	; 0x280
 80070c8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f8dc 	bl	8007288 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40010400 	.word	0x40010400

080070e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070fa:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80070fc:	f7fb fbd2 	bl	80028a4 <HAL_GetTick>
 8007100:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007102:	e009      	b.n	8007118 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007104:	f7fb fbce 	bl	80028a4 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007112:	d901      	bls.n	8007118 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e007      	b.n	8007128 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f003 0320 	and.w	r3, r3, #32
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0ee      	beq.n	8007104 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	2b00      	cmp	r3, #0
 8007148:	d120      	bne.n	800718c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f04f 32ff 	mov.w	r2, #4294967295
 8007152:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007154:	f7fb fba6 	bl	80028a4 <HAL_GetTick>
 8007158:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800715a:	e00d      	b.n	8007178 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800715c:	f7fb fba2 	bl	80028a4 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800716a:	d905      	bls.n	8007178 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2203      	movs	r2, #3
 8007174:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	d102      	bne.n	800718c <RTC_EnterInitMode+0x5c>
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	2b03      	cmp	r3, #3
 800718a:	d1e7      	bne.n	800715c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800718c:	7bfb      	ldrb	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80071a4:	4b1a      	ldr	r3, [pc, #104]	; (8007210 <RTC_ExitInitMode+0x78>)
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	4a19      	ldr	r2, [pc, #100]	; (8007210 <RTC_ExitInitMode+0x78>)
 80071aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80071b0:	4b17      	ldr	r3, [pc, #92]	; (8007210 <RTC_ExitInitMode+0x78>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10c      	bne.n	80071d6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff ff91 	bl	80070e4 <HAL_RTC_WaitForSynchro>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01e      	beq.n	8007206 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2203      	movs	r2, #3
 80071cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	73fb      	strb	r3, [r7, #15]
 80071d4:	e017      	b.n	8007206 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071d6:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <RTC_ExitInitMode+0x78>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	4a0d      	ldr	r2, [pc, #52]	; (8007210 <RTC_ExitInitMode+0x78>)
 80071dc:	f023 0320 	bic.w	r3, r3, #32
 80071e0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7ff ff7e 	bl	80070e4 <HAL_RTC_WaitForSynchro>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d005      	beq.n	80071fa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2203      	movs	r2, #3
 80071f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071fa:	4b05      	ldr	r3, [pc, #20]	; (8007210 <RTC_ExitInitMode+0x78>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	4a04      	ldr	r2, [pc, #16]	; (8007210 <RTC_ExitInitMode+0x78>)
 8007200:	f043 0320 	orr.w	r3, r3, #32
 8007204:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	40002800 	.word	0x40002800

08007214 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	4603      	mov	r3, r0
 800721c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007226:	e005      	b.n	8007234 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3301      	adds	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800722e:	7afb      	ldrb	r3, [r7, #11]
 8007230:	3b0a      	subs	r3, #10
 8007232:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007234:	7afb      	ldrb	r3, [r7, #11]
 8007236:	2b09      	cmp	r3, #9
 8007238:	d8f6      	bhi.n	8007228 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	b2da      	uxtb	r2, r3
 8007242:	7afb      	ldrb	r3, [r7, #11]
 8007244:	4313      	orrs	r3, r2
 8007246:	b2db      	uxtb	r3, r3
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	091b      	lsrs	r3, r3, #4
 8007262:	b2db      	uxtb	r3, r3
 8007264:	461a      	mov	r2, r3
 8007266:	0092      	lsls	r2, r2, #2
 8007268:	4413      	add	r3, r2
 800726a:	005b      	lsls	r3, r3, #1
 800726c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	f003 030f 	and.w	r3, r3, #15
 8007274:	b2da      	uxtb	r2, r3
 8007276:	7bfb      	ldrb	r3, [r7, #15]
 8007278:	4413      	add	r3, r2
 800727a:	b2db      	uxtb	r3, r3
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e049      	b.n	8007342 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d106      	bne.n	80072c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fb f956 	bl	8002574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f000 f8fc 	bl	80074d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800735a:	2b01      	cmp	r3, #1
 800735c:	d101      	bne.n	8007362 <HAL_TIM_ConfigClockSource+0x18>
 800735e:	2302      	movs	r3, #2
 8007360:	e0b5      	b.n	80074ce <HAL_TIM_ConfigClockSource+0x184>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2202      	movs	r2, #2
 800736e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007380:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007384:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800738c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800739e:	d03e      	beq.n	800741e <HAL_TIM_ConfigClockSource+0xd4>
 80073a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073a4:	f200 8087 	bhi.w	80074b6 <HAL_TIM_ConfigClockSource+0x16c>
 80073a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ac:	f000 8085 	beq.w	80074ba <HAL_TIM_ConfigClockSource+0x170>
 80073b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b4:	d87f      	bhi.n	80074b6 <HAL_TIM_ConfigClockSource+0x16c>
 80073b6:	2b70      	cmp	r3, #112	; 0x70
 80073b8:	d01a      	beq.n	80073f0 <HAL_TIM_ConfigClockSource+0xa6>
 80073ba:	2b70      	cmp	r3, #112	; 0x70
 80073bc:	d87b      	bhi.n	80074b6 <HAL_TIM_ConfigClockSource+0x16c>
 80073be:	2b60      	cmp	r3, #96	; 0x60
 80073c0:	d050      	beq.n	8007464 <HAL_TIM_ConfigClockSource+0x11a>
 80073c2:	2b60      	cmp	r3, #96	; 0x60
 80073c4:	d877      	bhi.n	80074b6 <HAL_TIM_ConfigClockSource+0x16c>
 80073c6:	2b50      	cmp	r3, #80	; 0x50
 80073c8:	d03c      	beq.n	8007444 <HAL_TIM_ConfigClockSource+0xfa>
 80073ca:	2b50      	cmp	r3, #80	; 0x50
 80073cc:	d873      	bhi.n	80074b6 <HAL_TIM_ConfigClockSource+0x16c>
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d058      	beq.n	8007484 <HAL_TIM_ConfigClockSource+0x13a>
 80073d2:	2b40      	cmp	r3, #64	; 0x40
 80073d4:	d86f      	bhi.n	80074b6 <HAL_TIM_ConfigClockSource+0x16c>
 80073d6:	2b30      	cmp	r3, #48	; 0x30
 80073d8:	d064      	beq.n	80074a4 <HAL_TIM_ConfigClockSource+0x15a>
 80073da:	2b30      	cmp	r3, #48	; 0x30
 80073dc:	d86b      	bhi.n	80074b6 <HAL_TIM_ConfigClockSource+0x16c>
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d060      	beq.n	80074a4 <HAL_TIM_ConfigClockSource+0x15a>
 80073e2:	2b20      	cmp	r3, #32
 80073e4:	d867      	bhi.n	80074b6 <HAL_TIM_ConfigClockSource+0x16c>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d05c      	beq.n	80074a4 <HAL_TIM_ConfigClockSource+0x15a>
 80073ea:	2b10      	cmp	r3, #16
 80073ec:	d05a      	beq.n	80074a4 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80073ee:	e062      	b.n	80074b6 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	6899      	ldr	r1, [r3, #8]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f000 f97e 	bl	8007700 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007412:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	609a      	str	r2, [r3, #8]
      break;
 800741c:	e04e      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	6899      	ldr	r1, [r3, #8]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f000 f967 	bl	8007700 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007440:	609a      	str	r2, [r3, #8]
      break;
 8007442:	e03b      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6818      	ldr	r0, [r3, #0]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	6859      	ldr	r1, [r3, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	461a      	mov	r2, r3
 8007452:	f000 f8db 	bl	800760c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2150      	movs	r1, #80	; 0x50
 800745c:	4618      	mov	r0, r3
 800745e:	f000 f934 	bl	80076ca <TIM_ITRx_SetConfig>
      break;
 8007462:	e02b      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	6859      	ldr	r1, [r3, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	461a      	mov	r2, r3
 8007472:	f000 f8fa 	bl	800766a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2160      	movs	r1, #96	; 0x60
 800747c:	4618      	mov	r0, r3
 800747e:	f000 f924 	bl	80076ca <TIM_ITRx_SetConfig>
      break;
 8007482:	e01b      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	6859      	ldr	r1, [r3, #4]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	461a      	mov	r2, r3
 8007492:	f000 f8bb 	bl	800760c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2140      	movs	r1, #64	; 0x40
 800749c:	4618      	mov	r0, r3
 800749e:	f000 f914 	bl	80076ca <TIM_ITRx_SetConfig>
      break;
 80074a2:	e00b      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4619      	mov	r1, r3
 80074ae:	4610      	mov	r0, r2
 80074b0:	f000 f90b 	bl	80076ca <TIM_ITRx_SetConfig>
        break;
 80074b4:	e002      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80074b6:	bf00      	nop
 80074b8:	e000      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80074ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a40      	ldr	r2, [pc, #256]	; (80075ec <TIM_Base_SetConfig+0x114>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d013      	beq.n	8007518 <TIM_Base_SetConfig+0x40>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f6:	d00f      	beq.n	8007518 <TIM_Base_SetConfig+0x40>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a3d      	ldr	r2, [pc, #244]	; (80075f0 <TIM_Base_SetConfig+0x118>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d00b      	beq.n	8007518 <TIM_Base_SetConfig+0x40>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a3c      	ldr	r2, [pc, #240]	; (80075f4 <TIM_Base_SetConfig+0x11c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d007      	beq.n	8007518 <TIM_Base_SetConfig+0x40>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a3b      	ldr	r2, [pc, #236]	; (80075f8 <TIM_Base_SetConfig+0x120>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d003      	beq.n	8007518 <TIM_Base_SetConfig+0x40>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a3a      	ldr	r2, [pc, #232]	; (80075fc <TIM_Base_SetConfig+0x124>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d108      	bne.n	800752a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a2f      	ldr	r2, [pc, #188]	; (80075ec <TIM_Base_SetConfig+0x114>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d01f      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007538:	d01b      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a2c      	ldr	r2, [pc, #176]	; (80075f0 <TIM_Base_SetConfig+0x118>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d017      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a2b      	ldr	r2, [pc, #172]	; (80075f4 <TIM_Base_SetConfig+0x11c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d013      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a2a      	ldr	r2, [pc, #168]	; (80075f8 <TIM_Base_SetConfig+0x120>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d00f      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a29      	ldr	r2, [pc, #164]	; (80075fc <TIM_Base_SetConfig+0x124>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d00b      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a28      	ldr	r2, [pc, #160]	; (8007600 <TIM_Base_SetConfig+0x128>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d007      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a27      	ldr	r2, [pc, #156]	; (8007604 <TIM_Base_SetConfig+0x12c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d003      	beq.n	8007572 <TIM_Base_SetConfig+0x9a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a26      	ldr	r2, [pc, #152]	; (8007608 <TIM_Base_SetConfig+0x130>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d108      	bne.n	8007584 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a10      	ldr	r2, [pc, #64]	; (80075ec <TIM_Base_SetConfig+0x114>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00f      	beq.n	80075d0 <TIM_Base_SetConfig+0xf8>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a12      	ldr	r2, [pc, #72]	; (80075fc <TIM_Base_SetConfig+0x124>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00b      	beq.n	80075d0 <TIM_Base_SetConfig+0xf8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a11      	ldr	r2, [pc, #68]	; (8007600 <TIM_Base_SetConfig+0x128>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d007      	beq.n	80075d0 <TIM_Base_SetConfig+0xf8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a10      	ldr	r2, [pc, #64]	; (8007604 <TIM_Base_SetConfig+0x12c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d003      	beq.n	80075d0 <TIM_Base_SetConfig+0xf8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a0f      	ldr	r2, [pc, #60]	; (8007608 <TIM_Base_SetConfig+0x130>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d103      	bne.n	80075d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	691a      	ldr	r2, [r3, #16]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	615a      	str	r2, [r3, #20]
}
 80075de:	bf00      	nop
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	40012c00 	.word	0x40012c00
 80075f0:	40000400 	.word	0x40000400
 80075f4:	40000800 	.word	0x40000800
 80075f8:	40000c00 	.word	0x40000c00
 80075fc:	40013400 	.word	0x40013400
 8007600:	40014000 	.word	0x40014000
 8007604:	40014400 	.word	0x40014400
 8007608:	40014800 	.word	0x40014800

0800760c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	f023 0201 	bic.w	r2, r3, #1
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	011b      	lsls	r3, r3, #4
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	4313      	orrs	r3, r2
 8007640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f023 030a 	bic.w	r3, r3, #10
 8007648:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	4313      	orrs	r3, r2
 8007650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	621a      	str	r2, [r3, #32]
}
 800765e:	bf00      	nop
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800766a:	b480      	push	{r7}
 800766c:	b087      	sub	sp, #28
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	f023 0210 	bic.w	r2, r3, #16
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	031b      	lsls	r3, r3, #12
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	621a      	str	r2, [r3, #32]
}
 80076be:	bf00      	nop
 80076c0:	371c      	adds	r7, #28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b085      	sub	sp, #20
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	f043 0307 	orr.w	r3, r3, #7
 80076ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	609a      	str	r2, [r3, #8]
}
 80076f4:	bf00      	nop
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800771a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	021a      	lsls	r2, r3, #8
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	431a      	orrs	r2, r3
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	4313      	orrs	r3, r2
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	4313      	orrs	r3, r2
 800772c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	609a      	str	r2, [r3, #8]
}
 8007734:	bf00      	nop
 8007736:	371c      	adds	r7, #28
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007750:	2b01      	cmp	r3, #1
 8007752:	d101      	bne.n	8007758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007754:	2302      	movs	r3, #2
 8007756:	e068      	b.n	800782a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a2e      	ldr	r2, [pc, #184]	; (8007838 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d004      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a2d      	ldr	r2, [pc, #180]	; (800783c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d108      	bne.n	800779e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007792:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a1e      	ldr	r2, [pc, #120]	; (8007838 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d01d      	beq.n	80077fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ca:	d018      	beq.n	80077fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a1b      	ldr	r2, [pc, #108]	; (8007840 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d013      	beq.n	80077fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a1a      	ldr	r2, [pc, #104]	; (8007844 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00e      	beq.n	80077fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a18      	ldr	r2, [pc, #96]	; (8007848 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d009      	beq.n	80077fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a13      	ldr	r2, [pc, #76]	; (800783c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d004      	beq.n	80077fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a14      	ldr	r2, [pc, #80]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d10c      	bne.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	4313      	orrs	r3, r2
 800780e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	40012c00 	.word	0x40012c00
 800783c:	40013400 	.word	0x40013400
 8007840:	40000400 	.word	0x40000400
 8007844:	40000800 	.word	0x40000800
 8007848:	40000c00 	.word	0x40000c00
 800784c:	40014000 	.word	0x40014000

08007850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e040      	b.n	80078e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7fa fecc 	bl	8002610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2224      	movs	r2, #36	; 0x24
 800787c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0201 	bic.w	r2, r2, #1
 800788c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fb74 	bl	8007f7c <UART_SetConfig>
 8007894:	4603      	mov	r3, r0
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e022      	b.n	80078e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fe22 	bl	80084f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689a      	ldr	r2, [r3, #8]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fea9 	bl	8008634 <UART_CheckIdleState>
 80078e2:	4603      	mov	r3, r0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08a      	sub	sp, #40	; 0x28
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	4613      	mov	r3, r2
 80078fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007900:	2b20      	cmp	r3, #32
 8007902:	f040 8081 	bne.w	8007a08 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <HAL_UART_Transmit+0x26>
 800790c:	88fb      	ldrh	r3, [r7, #6]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e079      	b.n	8007a0a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800791c:	2b01      	cmp	r3, #1
 800791e:	d101      	bne.n	8007924 <HAL_UART_Transmit+0x38>
 8007920:	2302      	movs	r3, #2
 8007922:	e072      	b.n	8007a0a <HAL_UART_Transmit+0x11e>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2221      	movs	r2, #33	; 0x21
 8007936:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007938:	f7fa ffb4 	bl	80028a4 <HAL_GetTick>
 800793c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	88fa      	ldrh	r2, [r7, #6]
 8007942:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	88fa      	ldrh	r2, [r7, #6]
 800794a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007956:	d108      	bne.n	800796a <HAL_UART_Transmit+0x7e>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d104      	bne.n	800796a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8007960:	2300      	movs	r3, #0
 8007962:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	61bb      	str	r3, [r7, #24]
 8007968:	e003      	b.n	8007972 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800796e:	2300      	movs	r3, #0
 8007970:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800797a:	e02d      	b.n	80079d8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2200      	movs	r2, #0
 8007984:	2180      	movs	r1, #128	; 0x80
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 fe99 	bl	80086be <UART_WaitOnFlagUntilTimeout>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e039      	b.n	8007a0a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10b      	bne.n	80079b4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	881a      	ldrh	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079a8:	b292      	uxth	r2, r2
 80079aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	3302      	adds	r3, #2
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	e008      	b.n	80079c6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	781a      	ldrb	r2, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	b292      	uxth	r2, r2
 80079be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	3301      	adds	r3, #1
 80079c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1cb      	bne.n	800797c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2200      	movs	r2, #0
 80079ec:	2140      	movs	r1, #64	; 0x40
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 fe65 	bl	80086be <UART_WaitOnFlagUntilTimeout>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e005      	b.n	8007a0a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2220      	movs	r2, #32
 8007a02:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	e000      	b.n	8007a0a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007a08:	2302      	movs	r3, #2
  }
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3720      	adds	r7, #32
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b08a      	sub	sp, #40	; 0x28
 8007a16:	af02      	add	r7, sp, #8
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	603b      	str	r3, [r7, #0]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	f040 80bb 	bne.w	8007ba2 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <HAL_UART_Receive+0x26>
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e0b3      	b.n	8007ba4 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <HAL_UART_Receive+0x38>
 8007a46:	2302      	movs	r3, #2
 8007a48:	e0ac      	b.n	8007ba4 <HAL_UART_Receive+0x192>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2222      	movs	r2, #34	; 0x22
 8007a5c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007a5e:	f7fa ff21 	bl	80028a4 <HAL_GetTick>
 8007a62:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	88fa      	ldrh	r2, [r7, #6]
 8007a68:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	88fa      	ldrh	r2, [r7, #6]
 8007a70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a7c:	d10e      	bne.n	8007a9c <HAL_UART_Receive+0x8a>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d105      	bne.n	8007a92 <HAL_UART_Receive+0x80>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a90:	e02d      	b.n	8007aee <HAL_UART_Receive+0xdc>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	22ff      	movs	r2, #255	; 0xff
 8007a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a9a:	e028      	b.n	8007aee <HAL_UART_Receive+0xdc>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10d      	bne.n	8007ac0 <HAL_UART_Receive+0xae>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d104      	bne.n	8007ab6 <HAL_UART_Receive+0xa4>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	22ff      	movs	r2, #255	; 0xff
 8007ab0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ab4:	e01b      	b.n	8007aee <HAL_UART_Receive+0xdc>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	227f      	movs	r2, #127	; 0x7f
 8007aba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007abe:	e016      	b.n	8007aee <HAL_UART_Receive+0xdc>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ac8:	d10d      	bne.n	8007ae6 <HAL_UART_Receive+0xd4>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d104      	bne.n	8007adc <HAL_UART_Receive+0xca>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	227f      	movs	r2, #127	; 0x7f
 8007ad6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ada:	e008      	b.n	8007aee <HAL_UART_Receive+0xdc>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	223f      	movs	r2, #63	; 0x3f
 8007ae0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ae4:	e003      	b.n	8007aee <HAL_UART_Receive+0xdc>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007af4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afe:	d108      	bne.n	8007b12 <HAL_UART_Receive+0x100>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	61bb      	str	r3, [r7, #24]
 8007b10:	e003      	b.n	8007b1a <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b16:	2300      	movs	r3, #0
 8007b18:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007b22:	e033      	b.n	8007b8c <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2120      	movs	r1, #32
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 fdc5 	bl	80086be <UART_WaitOnFlagUntilTimeout>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e032      	b.n	8007ba4 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10c      	bne.n	8007b5e <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	8a7b      	ldrh	r3, [r7, #18]
 8007b4e:	4013      	ands	r3, r2
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	3302      	adds	r3, #2
 8007b5a:	61bb      	str	r3, [r7, #24]
 8007b5c:	e00d      	b.n	8007b7a <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	8a7b      	ldrh	r3, [r7, #18]
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	3301      	adds	r3, #1
 8007b78:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1c5      	bne.n	8007b24 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e000      	b.n	8007ba4 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8007ba2:	2302      	movs	r3, #2
  }
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3720      	adds	r7, #32
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	d16c      	bne.n	8007c9c <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <HAL_UART_Receive_DMA+0x22>
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e065      	b.n	8007c9e <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d101      	bne.n	8007be0 <HAL_UART_Receive_DMA+0x34>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e05e      	b.n	8007c9e <HAL_UART_Receive_DMA+0xf2>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	88fa      	ldrh	r2, [r7, #6]
 8007bf2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2222      	movs	r2, #34	; 0x22
 8007c00:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d02a      	beq.n	8007c60 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c0e:	4a26      	ldr	r2, [pc, #152]	; (8007ca8 <HAL_UART_Receive_DMA+0xfc>)
 8007c10:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c16:	4a25      	ldr	r2, [pc, #148]	; (8007cac <HAL_UART_Receive_DMA+0x100>)
 8007c18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c1e:	4a24      	ldr	r2, [pc, #144]	; (8007cb0 <HAL_UART_Receive_DMA+0x104>)
 8007c20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c26:	2200      	movs	r2, #0
 8007c28:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3324      	adds	r3, #36	; 0x24
 8007c34:	4619      	mov	r1, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	88fb      	ldrh	r3, [r7, #6]
 8007c3e:	f7fc fa15 	bl	800406c <HAL_DMA_Start_IT>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00b      	beq.n	8007c60 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2210      	movs	r2, #16
 8007c4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e01e      	b.n	8007c9e <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c76:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0201 	orr.w	r2, r2, #1
 8007c86:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689a      	ldr	r2, [r3, #8]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c96:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e000      	b.n	8007c9e <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8007c9c:	2302      	movs	r3, #2
  }
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	0800881f 	.word	0x0800881f
 8007cac:	08008887 	.word	0x08008887
 8007cb0:	080088a3 	.word	0x080088a3

08007cb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007cd4:	69fa      	ldr	r2, [r7, #28]
 8007cd6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007cda:	4013      	ands	r3, r2
 8007cdc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d113      	bne.n	8007d0c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	f003 0320 	and.w	r3, r3, #32
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00e      	beq.n	8007d0c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	f003 0320 	and.w	r3, r3, #32
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d009      	beq.n	8007d0c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 8113 	beq.w	8007f28 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	4798      	blx	r3
      }
      return;
 8007d0a:	e10d      	b.n	8007f28 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 80d6 	beq.w	8007ec0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d105      	bne.n	8007d2a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	4b85      	ldr	r3, [pc, #532]	; (8007f38 <HAL_UART_IRQHandler+0x284>)
 8007d22:	4013      	ands	r3, r2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 80cb 	beq.w	8007ec0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00e      	beq.n	8007d52 <HAL_UART_IRQHandler+0x9e>
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d009      	beq.n	8007d52 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2201      	movs	r2, #1
 8007d44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d4a:	f043 0201 	orr.w	r2, r3, #1
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00e      	beq.n	8007d7a <HAL_UART_IRQHandler+0xc6>
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d009      	beq.n	8007d7a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d72:	f043 0204 	orr.w	r2, r3, #4
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00e      	beq.n	8007da2 <HAL_UART_IRQHandler+0xee>
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2204      	movs	r2, #4
 8007d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d9a:	f043 0202 	orr.w	r2, r3, #2
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d013      	beq.n	8007dd4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	f003 0320 	and.w	r3, r3, #32
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d104      	bne.n	8007dc0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d009      	beq.n	8007dd4 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dcc:	f043 0208 	orr.w	r2, r3, #8
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00f      	beq.n	8007dfe <HAL_UART_IRQHandler+0x14a>
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00a      	beq.n	8007dfe <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007df0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007df6:	f043 0220 	orr.w	r2, r3, #32
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 8092 	beq.w	8007f2c <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00c      	beq.n	8007e2c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	f003 0320 	and.w	r3, r3, #32
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d007      	beq.n	8007e2c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e30:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3c:	2b40      	cmp	r3, #64	; 0x40
 8007e3e:	d004      	beq.n	8007e4a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d031      	beq.n	8007eae <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fcc7 	bl	80087de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5a:	2b40      	cmp	r3, #64	; 0x40
 8007e5c:	d123      	bne.n	8007ea6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e6c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d013      	beq.n	8007e9e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e7a:	4a30      	ldr	r2, [pc, #192]	; (8007f3c <HAL_UART_IRQHandler+0x288>)
 8007e7c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fc f990 	bl	80041a8 <HAL_DMA_Abort_IT>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d016      	beq.n	8007ebc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007e98:	4610      	mov	r0, r2
 8007e9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e9c:	e00e      	b.n	8007ebc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f862 	bl	8007f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea4:	e00a      	b.n	8007ebc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f85e 	bl	8007f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eac:	e006      	b.n	8007ebc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f85a 	bl	8007f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007eba:	e037      	b.n	8007f2c <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ebc:	bf00      	nop
    return;
 8007ebe:	e035      	b.n	8007f2c <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00d      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x232>
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d008      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007edc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fd4a 	bl	8008978 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ee4:	e025      	b.n	8007f32 <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00d      	beq.n	8007f0c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d008      	beq.n	8007f0c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d016      	beq.n	8007f30 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	4798      	blx	r3
    }
    return;
 8007f0a:	e011      	b.n	8007f30 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00d      	beq.n	8007f32 <HAL_UART_IRQHandler+0x27e>
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d008      	beq.n	8007f32 <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fd10 	bl	8008946 <UART_EndTransmit_IT>
    return;
 8007f26:	e004      	b.n	8007f32 <HAL_UART_IRQHandler+0x27e>
      return;
 8007f28:	bf00      	nop
 8007f2a:	e002      	b.n	8007f32 <HAL_UART_IRQHandler+0x27e>
    return;
 8007f2c:	bf00      	nop
 8007f2e:	e000      	b.n	8007f32 <HAL_UART_IRQHandler+0x27e>
    return;
 8007f30:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007f32:	3720      	adds	r7, #32
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	04000120 	.word	0x04000120
 8007f3c:	0800891b 	.word	0x0800891b

08007f40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f80:	b08a      	sub	sp, #40	; 0x28
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	431a      	orrs	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	4ba4      	ldr	r3, [pc, #656]	; (800823c <UART_SetConfig+0x2c0>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	6812      	ldr	r2, [r2, #0]
 8007fb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a99      	ldr	r2, [pc, #612]	; (8008240 <UART_SetConfig+0x2c4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d004      	beq.n	8007fe8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a90      	ldr	r2, [pc, #576]	; (8008244 <UART_SetConfig+0x2c8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d126      	bne.n	8008054 <UART_SetConfig+0xd8>
 8008006:	4b90      	ldr	r3, [pc, #576]	; (8008248 <UART_SetConfig+0x2cc>)
 8008008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800c:	f003 0303 	and.w	r3, r3, #3
 8008010:	2b03      	cmp	r3, #3
 8008012:	d81b      	bhi.n	800804c <UART_SetConfig+0xd0>
 8008014:	a201      	add	r2, pc, #4	; (adr r2, 800801c <UART_SetConfig+0xa0>)
 8008016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801a:	bf00      	nop
 800801c:	0800802d 	.word	0x0800802d
 8008020:	0800803d 	.word	0x0800803d
 8008024:	08008035 	.word	0x08008035
 8008028:	08008045 	.word	0x08008045
 800802c:	2301      	movs	r3, #1
 800802e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008032:	e116      	b.n	8008262 <UART_SetConfig+0x2e6>
 8008034:	2302      	movs	r3, #2
 8008036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800803a:	e112      	b.n	8008262 <UART_SetConfig+0x2e6>
 800803c:	2304      	movs	r3, #4
 800803e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008042:	e10e      	b.n	8008262 <UART_SetConfig+0x2e6>
 8008044:	2308      	movs	r3, #8
 8008046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800804a:	e10a      	b.n	8008262 <UART_SetConfig+0x2e6>
 800804c:	2310      	movs	r3, #16
 800804e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008052:	e106      	b.n	8008262 <UART_SetConfig+0x2e6>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a7c      	ldr	r2, [pc, #496]	; (800824c <UART_SetConfig+0x2d0>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d138      	bne.n	80080d0 <UART_SetConfig+0x154>
 800805e:	4b7a      	ldr	r3, [pc, #488]	; (8008248 <UART_SetConfig+0x2cc>)
 8008060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008064:	f003 030c 	and.w	r3, r3, #12
 8008068:	2b0c      	cmp	r3, #12
 800806a:	d82d      	bhi.n	80080c8 <UART_SetConfig+0x14c>
 800806c:	a201      	add	r2, pc, #4	; (adr r2, 8008074 <UART_SetConfig+0xf8>)
 800806e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008072:	bf00      	nop
 8008074:	080080a9 	.word	0x080080a9
 8008078:	080080c9 	.word	0x080080c9
 800807c:	080080c9 	.word	0x080080c9
 8008080:	080080c9 	.word	0x080080c9
 8008084:	080080b9 	.word	0x080080b9
 8008088:	080080c9 	.word	0x080080c9
 800808c:	080080c9 	.word	0x080080c9
 8008090:	080080c9 	.word	0x080080c9
 8008094:	080080b1 	.word	0x080080b1
 8008098:	080080c9 	.word	0x080080c9
 800809c:	080080c9 	.word	0x080080c9
 80080a0:	080080c9 	.word	0x080080c9
 80080a4:	080080c1 	.word	0x080080c1
 80080a8:	2300      	movs	r3, #0
 80080aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ae:	e0d8      	b.n	8008262 <UART_SetConfig+0x2e6>
 80080b0:	2302      	movs	r3, #2
 80080b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080b6:	e0d4      	b.n	8008262 <UART_SetConfig+0x2e6>
 80080b8:	2304      	movs	r3, #4
 80080ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080be:	e0d0      	b.n	8008262 <UART_SetConfig+0x2e6>
 80080c0:	2308      	movs	r3, #8
 80080c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080c6:	e0cc      	b.n	8008262 <UART_SetConfig+0x2e6>
 80080c8:	2310      	movs	r3, #16
 80080ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ce:	e0c8      	b.n	8008262 <UART_SetConfig+0x2e6>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a5e      	ldr	r2, [pc, #376]	; (8008250 <UART_SetConfig+0x2d4>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d125      	bne.n	8008126 <UART_SetConfig+0x1aa>
 80080da:	4b5b      	ldr	r3, [pc, #364]	; (8008248 <UART_SetConfig+0x2cc>)
 80080dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080e4:	2b30      	cmp	r3, #48	; 0x30
 80080e6:	d016      	beq.n	8008116 <UART_SetConfig+0x19a>
 80080e8:	2b30      	cmp	r3, #48	; 0x30
 80080ea:	d818      	bhi.n	800811e <UART_SetConfig+0x1a2>
 80080ec:	2b20      	cmp	r3, #32
 80080ee:	d00a      	beq.n	8008106 <UART_SetConfig+0x18a>
 80080f0:	2b20      	cmp	r3, #32
 80080f2:	d814      	bhi.n	800811e <UART_SetConfig+0x1a2>
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <UART_SetConfig+0x182>
 80080f8:	2b10      	cmp	r3, #16
 80080fa:	d008      	beq.n	800810e <UART_SetConfig+0x192>
 80080fc:	e00f      	b.n	800811e <UART_SetConfig+0x1a2>
 80080fe:	2300      	movs	r3, #0
 8008100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008104:	e0ad      	b.n	8008262 <UART_SetConfig+0x2e6>
 8008106:	2302      	movs	r3, #2
 8008108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800810c:	e0a9      	b.n	8008262 <UART_SetConfig+0x2e6>
 800810e:	2304      	movs	r3, #4
 8008110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008114:	e0a5      	b.n	8008262 <UART_SetConfig+0x2e6>
 8008116:	2308      	movs	r3, #8
 8008118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800811c:	e0a1      	b.n	8008262 <UART_SetConfig+0x2e6>
 800811e:	2310      	movs	r3, #16
 8008120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008124:	e09d      	b.n	8008262 <UART_SetConfig+0x2e6>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a4a      	ldr	r2, [pc, #296]	; (8008254 <UART_SetConfig+0x2d8>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d125      	bne.n	800817c <UART_SetConfig+0x200>
 8008130:	4b45      	ldr	r3, [pc, #276]	; (8008248 <UART_SetConfig+0x2cc>)
 8008132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008136:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800813a:	2bc0      	cmp	r3, #192	; 0xc0
 800813c:	d016      	beq.n	800816c <UART_SetConfig+0x1f0>
 800813e:	2bc0      	cmp	r3, #192	; 0xc0
 8008140:	d818      	bhi.n	8008174 <UART_SetConfig+0x1f8>
 8008142:	2b80      	cmp	r3, #128	; 0x80
 8008144:	d00a      	beq.n	800815c <UART_SetConfig+0x1e0>
 8008146:	2b80      	cmp	r3, #128	; 0x80
 8008148:	d814      	bhi.n	8008174 <UART_SetConfig+0x1f8>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <UART_SetConfig+0x1d8>
 800814e:	2b40      	cmp	r3, #64	; 0x40
 8008150:	d008      	beq.n	8008164 <UART_SetConfig+0x1e8>
 8008152:	e00f      	b.n	8008174 <UART_SetConfig+0x1f8>
 8008154:	2300      	movs	r3, #0
 8008156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800815a:	e082      	b.n	8008262 <UART_SetConfig+0x2e6>
 800815c:	2302      	movs	r3, #2
 800815e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008162:	e07e      	b.n	8008262 <UART_SetConfig+0x2e6>
 8008164:	2304      	movs	r3, #4
 8008166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800816a:	e07a      	b.n	8008262 <UART_SetConfig+0x2e6>
 800816c:	2308      	movs	r3, #8
 800816e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008172:	e076      	b.n	8008262 <UART_SetConfig+0x2e6>
 8008174:	2310      	movs	r3, #16
 8008176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800817a:	e072      	b.n	8008262 <UART_SetConfig+0x2e6>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a35      	ldr	r2, [pc, #212]	; (8008258 <UART_SetConfig+0x2dc>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d12a      	bne.n	80081dc <UART_SetConfig+0x260>
 8008186:	4b30      	ldr	r3, [pc, #192]	; (8008248 <UART_SetConfig+0x2cc>)
 8008188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008194:	d01a      	beq.n	80081cc <UART_SetConfig+0x250>
 8008196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800819a:	d81b      	bhi.n	80081d4 <UART_SetConfig+0x258>
 800819c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081a0:	d00c      	beq.n	80081bc <UART_SetConfig+0x240>
 80081a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081a6:	d815      	bhi.n	80081d4 <UART_SetConfig+0x258>
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <UART_SetConfig+0x238>
 80081ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b0:	d008      	beq.n	80081c4 <UART_SetConfig+0x248>
 80081b2:	e00f      	b.n	80081d4 <UART_SetConfig+0x258>
 80081b4:	2300      	movs	r3, #0
 80081b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081ba:	e052      	b.n	8008262 <UART_SetConfig+0x2e6>
 80081bc:	2302      	movs	r3, #2
 80081be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081c2:	e04e      	b.n	8008262 <UART_SetConfig+0x2e6>
 80081c4:	2304      	movs	r3, #4
 80081c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081ca:	e04a      	b.n	8008262 <UART_SetConfig+0x2e6>
 80081cc:	2308      	movs	r3, #8
 80081ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081d2:	e046      	b.n	8008262 <UART_SetConfig+0x2e6>
 80081d4:	2310      	movs	r3, #16
 80081d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081da:	e042      	b.n	8008262 <UART_SetConfig+0x2e6>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a17      	ldr	r2, [pc, #92]	; (8008240 <UART_SetConfig+0x2c4>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d13a      	bne.n	800825c <UART_SetConfig+0x2e0>
 80081e6:	4b18      	ldr	r3, [pc, #96]	; (8008248 <UART_SetConfig+0x2cc>)
 80081e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081f4:	d01a      	beq.n	800822c <UART_SetConfig+0x2b0>
 80081f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081fa:	d81b      	bhi.n	8008234 <UART_SetConfig+0x2b8>
 80081fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008200:	d00c      	beq.n	800821c <UART_SetConfig+0x2a0>
 8008202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008206:	d815      	bhi.n	8008234 <UART_SetConfig+0x2b8>
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <UART_SetConfig+0x298>
 800820c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008210:	d008      	beq.n	8008224 <UART_SetConfig+0x2a8>
 8008212:	e00f      	b.n	8008234 <UART_SetConfig+0x2b8>
 8008214:	2300      	movs	r3, #0
 8008216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800821a:	e022      	b.n	8008262 <UART_SetConfig+0x2e6>
 800821c:	2302      	movs	r3, #2
 800821e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008222:	e01e      	b.n	8008262 <UART_SetConfig+0x2e6>
 8008224:	2304      	movs	r3, #4
 8008226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800822a:	e01a      	b.n	8008262 <UART_SetConfig+0x2e6>
 800822c:	2308      	movs	r3, #8
 800822e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008232:	e016      	b.n	8008262 <UART_SetConfig+0x2e6>
 8008234:	2310      	movs	r3, #16
 8008236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800823a:	e012      	b.n	8008262 <UART_SetConfig+0x2e6>
 800823c:	efff69f3 	.word	0xefff69f3
 8008240:	40008000 	.word	0x40008000
 8008244:	40013800 	.word	0x40013800
 8008248:	40021000 	.word	0x40021000
 800824c:	40004400 	.word	0x40004400
 8008250:	40004800 	.word	0x40004800
 8008254:	40004c00 	.word	0x40004c00
 8008258:	40005000 	.word	0x40005000
 800825c:	2310      	movs	r3, #16
 800825e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4aa0      	ldr	r2, [pc, #640]	; (80084e8 <UART_SetConfig+0x56c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d17a      	bne.n	8008362 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800826c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008270:	2b08      	cmp	r3, #8
 8008272:	d824      	bhi.n	80082be <UART_SetConfig+0x342>
 8008274:	a201      	add	r2, pc, #4	; (adr r2, 800827c <UART_SetConfig+0x300>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	080082a1 	.word	0x080082a1
 8008280:	080082bf 	.word	0x080082bf
 8008284:	080082a9 	.word	0x080082a9
 8008288:	080082bf 	.word	0x080082bf
 800828c:	080082af 	.word	0x080082af
 8008290:	080082bf 	.word	0x080082bf
 8008294:	080082bf 	.word	0x080082bf
 8008298:	080082bf 	.word	0x080082bf
 800829c:	080082b7 	.word	0x080082b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082a0:	f7fd fe0e 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 80082a4:	61f8      	str	r0, [r7, #28]
        break;
 80082a6:	e010      	b.n	80082ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082a8:	4b90      	ldr	r3, [pc, #576]	; (80084ec <UART_SetConfig+0x570>)
 80082aa:	61fb      	str	r3, [r7, #28]
        break;
 80082ac:	e00d      	b.n	80082ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ae:	f7fd fd6f 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 80082b2:	61f8      	str	r0, [r7, #28]
        break;
 80082b4:	e009      	b.n	80082ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ba:	61fb      	str	r3, [r7, #28]
        break;
 80082bc:	e005      	b.n	80082ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80082c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 80fd 	beq.w	80084cc <UART_SetConfig+0x550>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	4613      	mov	r3, r2
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	4413      	add	r3, r2
 80082dc:	69fa      	ldr	r2, [r7, #28]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d305      	bcc.n	80082ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d903      	bls.n	80082f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80082f4:	e0ea      	b.n	80084cc <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	2200      	movs	r2, #0
 80082fa:	461c      	mov	r4, r3
 80082fc:	4615      	mov	r5, r2
 80082fe:	f04f 0200 	mov.w	r2, #0
 8008302:	f04f 0300 	mov.w	r3, #0
 8008306:	022b      	lsls	r3, r5, #8
 8008308:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800830c:	0222      	lsls	r2, r4, #8
 800830e:	68f9      	ldr	r1, [r7, #12]
 8008310:	6849      	ldr	r1, [r1, #4]
 8008312:	0849      	lsrs	r1, r1, #1
 8008314:	2000      	movs	r0, #0
 8008316:	4688      	mov	r8, r1
 8008318:	4681      	mov	r9, r0
 800831a:	eb12 0a08 	adds.w	sl, r2, r8
 800831e:	eb43 0b09 	adc.w	fp, r3, r9
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	603b      	str	r3, [r7, #0]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008330:	4650      	mov	r0, sl
 8008332:	4659      	mov	r1, fp
 8008334:	f7f8 fd02 	bl	8000d3c <__aeabi_uldivmod>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4613      	mov	r3, r2
 800833e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008346:	d308      	bcc.n	800835a <UART_SetConfig+0x3de>
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800834e:	d204      	bcs.n	800835a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	69ba      	ldr	r2, [r7, #24]
 8008356:	60da      	str	r2, [r3, #12]
 8008358:	e0b8      	b.n	80084cc <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008360:	e0b4      	b.n	80084cc <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800836a:	d15f      	bne.n	800842c <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 800836c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008370:	2b08      	cmp	r3, #8
 8008372:	d828      	bhi.n	80083c6 <UART_SetConfig+0x44a>
 8008374:	a201      	add	r2, pc, #4	; (adr r2, 800837c <UART_SetConfig+0x400>)
 8008376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837a:	bf00      	nop
 800837c:	080083a1 	.word	0x080083a1
 8008380:	080083a9 	.word	0x080083a9
 8008384:	080083b1 	.word	0x080083b1
 8008388:	080083c7 	.word	0x080083c7
 800838c:	080083b7 	.word	0x080083b7
 8008390:	080083c7 	.word	0x080083c7
 8008394:	080083c7 	.word	0x080083c7
 8008398:	080083c7 	.word	0x080083c7
 800839c:	080083bf 	.word	0x080083bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083a0:	f7fd fd8e 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 80083a4:	61f8      	str	r0, [r7, #28]
        break;
 80083a6:	e014      	b.n	80083d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083a8:	f7fd fda0 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 80083ac:	61f8      	str	r0, [r7, #28]
        break;
 80083ae:	e010      	b.n	80083d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083b0:	4b4e      	ldr	r3, [pc, #312]	; (80084ec <UART_SetConfig+0x570>)
 80083b2:	61fb      	str	r3, [r7, #28]
        break;
 80083b4:	e00d      	b.n	80083d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083b6:	f7fd fceb 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 80083ba:	61f8      	str	r0, [r7, #28]
        break;
 80083bc:	e009      	b.n	80083d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083c2:	61fb      	str	r3, [r7, #28]
        break;
 80083c4:	e005      	b.n	80083d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80083d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d079      	beq.n	80084cc <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	005a      	lsls	r2, r3, #1
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	085b      	lsrs	r3, r3, #1
 80083e2:	441a      	add	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	2b0f      	cmp	r3, #15
 80083f4:	d916      	bls.n	8008424 <UART_SetConfig+0x4a8>
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083fc:	d212      	bcs.n	8008424 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	b29b      	uxth	r3, r3
 8008402:	f023 030f 	bic.w	r3, r3, #15
 8008406:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	085b      	lsrs	r3, r3, #1
 800840c:	b29b      	uxth	r3, r3
 800840e:	f003 0307 	and.w	r3, r3, #7
 8008412:	b29a      	uxth	r2, r3
 8008414:	8afb      	ldrh	r3, [r7, #22]
 8008416:	4313      	orrs	r3, r2
 8008418:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	8afa      	ldrh	r2, [r7, #22]
 8008420:	60da      	str	r2, [r3, #12]
 8008422:	e053      	b.n	80084cc <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800842a:	e04f      	b.n	80084cc <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 800842c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008430:	2b08      	cmp	r3, #8
 8008432:	d828      	bhi.n	8008486 <UART_SetConfig+0x50a>
 8008434:	a201      	add	r2, pc, #4	; (adr r2, 800843c <UART_SetConfig+0x4c0>)
 8008436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843a:	bf00      	nop
 800843c:	08008461 	.word	0x08008461
 8008440:	08008469 	.word	0x08008469
 8008444:	08008471 	.word	0x08008471
 8008448:	08008487 	.word	0x08008487
 800844c:	08008477 	.word	0x08008477
 8008450:	08008487 	.word	0x08008487
 8008454:	08008487 	.word	0x08008487
 8008458:	08008487 	.word	0x08008487
 800845c:	0800847f 	.word	0x0800847f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008460:	f7fd fd2e 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8008464:	61f8      	str	r0, [r7, #28]
        break;
 8008466:	e014      	b.n	8008492 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008468:	f7fd fd40 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 800846c:	61f8      	str	r0, [r7, #28]
        break;
 800846e:	e010      	b.n	8008492 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008470:	4b1e      	ldr	r3, [pc, #120]	; (80084ec <UART_SetConfig+0x570>)
 8008472:	61fb      	str	r3, [r7, #28]
        break;
 8008474:	e00d      	b.n	8008492 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008476:	f7fd fc8b 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 800847a:	61f8      	str	r0, [r7, #28]
        break;
 800847c:	e009      	b.n	8008492 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800847e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008482:	61fb      	str	r3, [r7, #28]
        break;
 8008484:	e005      	b.n	8008492 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008490:	bf00      	nop
    }

    if (pclk != 0U)
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d019      	beq.n	80084cc <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	085a      	lsrs	r2, r3, #1
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	441a      	add	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	2b0f      	cmp	r3, #15
 80084b2:	d908      	bls.n	80084c6 <UART_SetConfig+0x54a>
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084ba:	d204      	bcs.n	80084c6 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	60da      	str	r2, [r3, #12]
 80084c4:	e002      	b.n	80084cc <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80084d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3728      	adds	r7, #40	; 0x28
 80084e0:	46bd      	mov	sp, r7
 80084e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084e6:	bf00      	nop
 80084e8:	40008000 	.word	0x40008000
 80084ec:	00f42400 	.word	0x00f42400

080084f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00a      	beq.n	800851a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	f003 0302 	and.w	r3, r3, #2
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00a      	beq.n	800853c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	f003 0304 	and.w	r3, r3, #4
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	f003 0308 	and.w	r3, r3, #8
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	f003 0310 	and.w	r3, r3, #16
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01a      	beq.n	8008606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085ee:	d10a      	bne.n	8008606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	605a      	str	r2, [r3, #4]
  }
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af02      	add	r7, sp, #8
 800863a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008642:	f7fa f92f 	bl	80028a4 <HAL_GetTick>
 8008646:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0308 	and.w	r3, r3, #8
 8008652:	2b08      	cmp	r3, #8
 8008654:	d10e      	bne.n	8008674 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008656:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f82a 	bl	80086be <UART_WaitOnFlagUntilTimeout>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e020      	b.n	80086b6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0304 	and.w	r3, r3, #4
 800867e:	2b04      	cmp	r3, #4
 8008680:	d10e      	bne.n	80086a0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008682:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f814 	bl	80086be <UART_WaitOnFlagUntilTimeout>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d001      	beq.n	80086a0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e00a      	b.n	80086b6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2220      	movs	r2, #32
 80086a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2220      	movs	r2, #32
 80086aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	603b      	str	r3, [r7, #0]
 80086ca:	4613      	mov	r3, r2
 80086cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ce:	e05d      	b.n	800878c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d6:	d059      	beq.n	800878c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086d8:	f7fa f8e4 	bl	80028a4 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	69ba      	ldr	r2, [r7, #24]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d302      	bcc.n	80086ee <UART_WaitOnFlagUntilTimeout+0x30>
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d11b      	bne.n	8008726 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80086fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f022 0201 	bic.w	r2, r2, #1
 800870c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2220      	movs	r2, #32
 8008712:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2220      	movs	r2, #32
 8008718:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e042      	b.n	80087ac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0304 	and.w	r3, r3, #4
 8008730:	2b00      	cmp	r3, #0
 8008732:	d02b      	beq.n	800878c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800873e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008742:	d123      	bne.n	800878c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800874c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800875c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689a      	ldr	r2, [r3, #8]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 0201 	bic.w	r2, r2, #1
 800876c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2220      	movs	r2, #32
 8008772:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2220      	movs	r2, #32
 8008778:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2220      	movs	r2, #32
 800877e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e00f      	b.n	80087ac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	69da      	ldr	r2, [r3, #28]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	4013      	ands	r3, r2
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	429a      	cmp	r2, r3
 800879a:	bf0c      	ite	eq
 800879c:	2301      	moveq	r3, #1
 800879e:	2300      	movne	r3, #0
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	461a      	mov	r2, r3
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d092      	beq.n	80086d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80087ca:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2220      	movs	r2, #32
 80087d0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80087f4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 0201 	bic.w	r2, r2, #1
 8008804:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2220      	movs	r2, #32
 800880a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008812:	bf00      	nop
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0320 	and.w	r3, r3, #32
 8008836:	2b00      	cmp	r3, #0
 8008838:	d11e      	bne.n	8008878 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008850:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689a      	ldr	r2, [r3, #8]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f022 0201 	bic.w	r2, r2, #1
 8008860:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689a      	ldr	r2, [r3, #8]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008870:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2220      	movs	r2, #32
 8008876:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f7f8 fe0f 	bl	800149c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800887e:	bf00      	nop
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008892:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f7ff fb5d 	bl	8007f54 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800889a:	bf00      	nop
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b086      	sub	sp, #24
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088b4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c6:	2b80      	cmp	r3, #128	; 0x80
 80088c8:	d109      	bne.n	80088de <UART_DMAError+0x3c>
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2b21      	cmp	r3, #33	; 0x21
 80088ce:	d106      	bne.n	80088de <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80088d8:	6978      	ldr	r0, [r7, #20]
 80088da:	f7ff ff6b 	bl	80087b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e8:	2b40      	cmp	r3, #64	; 0x40
 80088ea:	d109      	bne.n	8008900 <UART_DMAError+0x5e>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b22      	cmp	r3, #34	; 0x22
 80088f0:	d106      	bne.n	8008900 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80088fa:	6978      	ldr	r0, [r7, #20]
 80088fc:	f7ff ff6f 	bl	80087de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008904:	f043 0210 	orr.w	r2, r3, #16
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800890c:	6978      	ldr	r0, [r7, #20]
 800890e:	f7ff fb2b 	bl	8007f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008912:	bf00      	nop
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008926:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f7ff fb15 	bl	8007f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800893e:	bf00      	nop
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b082      	sub	sp, #8
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800895c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2220      	movs	r2, #32
 8008962:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7ff fae8 	bl	8007f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <ctime>:
 800898c:	b508      	push	{r3, lr}
 800898e:	f000 f82f 	bl	80089f0 <localtime>
 8008992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008996:	f002 bd8f 	b.w	800b4b8 <asctime>
	...

0800899c <__errno>:
 800899c:	4b01      	ldr	r3, [pc, #4]	; (80089a4 <__errno+0x8>)
 800899e:	6818      	ldr	r0, [r3, #0]
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	20000014 	.word	0x20000014

080089a8 <__libc_init_array>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	4d0d      	ldr	r5, [pc, #52]	; (80089e0 <__libc_init_array+0x38>)
 80089ac:	4c0d      	ldr	r4, [pc, #52]	; (80089e4 <__libc_init_array+0x3c>)
 80089ae:	1b64      	subs	r4, r4, r5
 80089b0:	10a4      	asrs	r4, r4, #2
 80089b2:	2600      	movs	r6, #0
 80089b4:	42a6      	cmp	r6, r4
 80089b6:	d109      	bne.n	80089cc <__libc_init_array+0x24>
 80089b8:	4d0b      	ldr	r5, [pc, #44]	; (80089e8 <__libc_init_array+0x40>)
 80089ba:	4c0c      	ldr	r4, [pc, #48]	; (80089ec <__libc_init_array+0x44>)
 80089bc:	f006 f88e 	bl	800eadc <_init>
 80089c0:	1b64      	subs	r4, r4, r5
 80089c2:	10a4      	asrs	r4, r4, #2
 80089c4:	2600      	movs	r6, #0
 80089c6:	42a6      	cmp	r6, r4
 80089c8:	d105      	bne.n	80089d6 <__libc_init_array+0x2e>
 80089ca:	bd70      	pop	{r4, r5, r6, pc}
 80089cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d0:	4798      	blx	r3
 80089d2:	3601      	adds	r6, #1
 80089d4:	e7ee      	b.n	80089b4 <__libc_init_array+0xc>
 80089d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089da:	4798      	blx	r3
 80089dc:	3601      	adds	r6, #1
 80089de:	e7f2      	b.n	80089c6 <__libc_init_array+0x1e>
 80089e0:	0800f250 	.word	0x0800f250
 80089e4:	0800f250 	.word	0x0800f250
 80089e8:	0800f250 	.word	0x0800f250
 80089ec:	0800f254 	.word	0x0800f254

080089f0 <localtime>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <localtime+0x30>)
 80089f4:	681d      	ldr	r5, [r3, #0]
 80089f6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80089f8:	4604      	mov	r4, r0
 80089fa:	b953      	cbnz	r3, 8008a12 <localtime+0x22>
 80089fc:	2024      	movs	r0, #36	; 0x24
 80089fe:	f000 f909 	bl	8008c14 <malloc>
 8008a02:	4602      	mov	r2, r0
 8008a04:	63e8      	str	r0, [r5, #60]	; 0x3c
 8008a06:	b920      	cbnz	r0, 8008a12 <localtime+0x22>
 8008a08:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <localtime+0x34>)
 8008a0a:	4807      	ldr	r0, [pc, #28]	; (8008a28 <localtime+0x38>)
 8008a0c:	2132      	movs	r1, #50	; 0x32
 8008a0e:	f002 fd9b 	bl	800b548 <__assert_func>
 8008a12:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8008a14:	4620      	mov	r0, r4
 8008a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a1a:	f000 b807 	b.w	8008a2c <localtime_r>
 8008a1e:	bf00      	nop
 8008a20:	20000014 	.word	0x20000014
 8008a24:	0800eb84 	.word	0x0800eb84
 8008a28:	0800eb9b 	.word	0x0800eb9b

08008a2c <localtime_r>:
 8008a2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008a30:	4680      	mov	r8, r0
 8008a32:	9101      	str	r1, [sp, #4]
 8008a34:	f004 f9b2 	bl	800cd9c <__gettzinfo>
 8008a38:	9901      	ldr	r1, [sp, #4]
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	f004 f9b1 	bl	800cda4 <gmtime_r>
 8008a42:	6943      	ldr	r3, [r0, #20]
 8008a44:	0799      	lsls	r1, r3, #30
 8008a46:	4604      	mov	r4, r0
 8008a48:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8008a4c:	d105      	bne.n	8008a5a <localtime_r+0x2e>
 8008a4e:	2264      	movs	r2, #100	; 0x64
 8008a50:	fb97 f3f2 	sdiv	r3, r7, r2
 8008a54:	fb02 7313 	mls	r3, r2, r3, r7
 8008a58:	bb73      	cbnz	r3, 8008ab8 <localtime_r+0x8c>
 8008a5a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008a5e:	fb97 f6f3 	sdiv	r6, r7, r3
 8008a62:	fb03 7616 	mls	r6, r3, r6, r7
 8008a66:	fab6 f386 	clz	r3, r6
 8008a6a:	095b      	lsrs	r3, r3, #5
 8008a6c:	4e67      	ldr	r6, [pc, #412]	; (8008c0c <localtime_r+0x1e0>)
 8008a6e:	2230      	movs	r2, #48	; 0x30
 8008a70:	fb02 6603 	mla	r6, r2, r3, r6
 8008a74:	f002 face 	bl	800b014 <__tz_lock>
 8008a78:	f002 fad8 	bl	800b02c <_tzset_unlocked>
 8008a7c:	4b64      	ldr	r3, [pc, #400]	; (8008c10 <localtime_r+0x1e4>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	b34b      	cbz	r3, 8008ad6 <localtime_r+0xaa>
 8008a82:	686b      	ldr	r3, [r5, #4]
 8008a84:	42bb      	cmp	r3, r7
 8008a86:	d119      	bne.n	8008abc <localtime_r+0x90>
 8008a88:	682f      	ldr	r7, [r5, #0]
 8008a8a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008a8e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8008a92:	b9df      	cbnz	r7, 8008acc <localtime_r+0xa0>
 8008a94:	4282      	cmp	r2, r0
 8008a96:	eb73 0101 	sbcs.w	r1, r3, r1
 8008a9a:	da23      	bge.n	8008ae4 <localtime_r+0xb8>
 8008a9c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8008aa0:	4282      	cmp	r2, r0
 8008aa2:	eb73 0701 	sbcs.w	r7, r3, r1
 8008aa6:	bfb4      	ite	lt
 8008aa8:	2701      	movlt	r7, #1
 8008aaa:	2700      	movge	r7, #0
 8008aac:	4282      	cmp	r2, r0
 8008aae:	418b      	sbcs	r3, r1
 8008ab0:	6227      	str	r7, [r4, #32]
 8008ab2:	db19      	blt.n	8008ae8 <localtime_r+0xbc>
 8008ab4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008ab6:	e018      	b.n	8008aea <localtime_r+0xbe>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e7d7      	b.n	8008a6c <localtime_r+0x40>
 8008abc:	4638      	mov	r0, r7
 8008abe:	f002 f9ff 	bl	800aec0 <__tzcalc_limits>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d1e0      	bne.n	8008a88 <localtime_r+0x5c>
 8008ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aca:	e004      	b.n	8008ad6 <localtime_r+0xaa>
 8008acc:	4282      	cmp	r2, r0
 8008ace:	eb73 0101 	sbcs.w	r1, r3, r1
 8008ad2:	da02      	bge.n	8008ada <localtime_r+0xae>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	6223      	str	r3, [r4, #32]
 8008ad8:	e7ec      	b.n	8008ab4 <localtime_r+0x88>
 8008ada:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8008ade:	4282      	cmp	r2, r0
 8008ae0:	418b      	sbcs	r3, r1
 8008ae2:	daf7      	bge.n	8008ad4 <localtime_r+0xa8>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	6223      	str	r3, [r4, #32]
 8008ae8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008aea:	6861      	ldr	r1, [r4, #4]
 8008aec:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8008af0:	203c      	movs	r0, #60	; 0x3c
 8008af2:	fb93 f5f2 	sdiv	r5, r3, r2
 8008af6:	fb02 3315 	mls	r3, r2, r5, r3
 8008afa:	fb93 f2f0 	sdiv	r2, r3, r0
 8008afe:	fb00 3012 	mls	r0, r0, r2, r3
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	1a89      	subs	r1, r1, r2
 8008b06:	68a2      	ldr	r2, [r4, #8]
 8008b08:	6061      	str	r1, [r4, #4]
 8008b0a:	1a1b      	subs	r3, r3, r0
 8008b0c:	1b52      	subs	r2, r2, r5
 8008b0e:	2b3b      	cmp	r3, #59	; 0x3b
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	60a2      	str	r2, [r4, #8]
 8008b14:	dd35      	ble.n	8008b82 <localtime_r+0x156>
 8008b16:	3101      	adds	r1, #1
 8008b18:	6061      	str	r1, [r4, #4]
 8008b1a:	3b3c      	subs	r3, #60	; 0x3c
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	6863      	ldr	r3, [r4, #4]
 8008b20:	2b3b      	cmp	r3, #59	; 0x3b
 8008b22:	dd34      	ble.n	8008b8e <localtime_r+0x162>
 8008b24:	3201      	adds	r2, #1
 8008b26:	60a2      	str	r2, [r4, #8]
 8008b28:	3b3c      	subs	r3, #60	; 0x3c
 8008b2a:	6063      	str	r3, [r4, #4]
 8008b2c:	68a3      	ldr	r3, [r4, #8]
 8008b2e:	2b17      	cmp	r3, #23
 8008b30:	dd33      	ble.n	8008b9a <localtime_r+0x16e>
 8008b32:	69e2      	ldr	r2, [r4, #28]
 8008b34:	3201      	adds	r2, #1
 8008b36:	61e2      	str	r2, [r4, #28]
 8008b38:	69a2      	ldr	r2, [r4, #24]
 8008b3a:	3201      	adds	r2, #1
 8008b3c:	2a06      	cmp	r2, #6
 8008b3e:	bfc8      	it	gt
 8008b40:	2200      	movgt	r2, #0
 8008b42:	61a2      	str	r2, [r4, #24]
 8008b44:	68e2      	ldr	r2, [r4, #12]
 8008b46:	3b18      	subs	r3, #24
 8008b48:	3201      	adds	r2, #1
 8008b4a:	60a3      	str	r3, [r4, #8]
 8008b4c:	6923      	ldr	r3, [r4, #16]
 8008b4e:	60e2      	str	r2, [r4, #12]
 8008b50:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8008b54:	428a      	cmp	r2, r1
 8008b56:	dd0e      	ble.n	8008b76 <localtime_r+0x14a>
 8008b58:	2b0b      	cmp	r3, #11
 8008b5a:	eba2 0201 	sub.w	r2, r2, r1
 8008b5e:	60e2      	str	r2, [r4, #12]
 8008b60:	f103 0201 	add.w	r2, r3, #1
 8008b64:	bf09      	itett	eq
 8008b66:	6963      	ldreq	r3, [r4, #20]
 8008b68:	6122      	strne	r2, [r4, #16]
 8008b6a:	2200      	moveq	r2, #0
 8008b6c:	3301      	addeq	r3, #1
 8008b6e:	bf02      	ittt	eq
 8008b70:	6122      	streq	r2, [r4, #16]
 8008b72:	6163      	streq	r3, [r4, #20]
 8008b74:	61e2      	streq	r2, [r4, #28]
 8008b76:	f002 fa53 	bl	800b020 <__tz_unlock>
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	b002      	add	sp, #8
 8008b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	dacb      	bge.n	8008b1e <localtime_r+0xf2>
 8008b86:	3901      	subs	r1, #1
 8008b88:	6061      	str	r1, [r4, #4]
 8008b8a:	333c      	adds	r3, #60	; 0x3c
 8008b8c:	e7c6      	b.n	8008b1c <localtime_r+0xf0>
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	dacc      	bge.n	8008b2c <localtime_r+0x100>
 8008b92:	3a01      	subs	r2, #1
 8008b94:	60a2      	str	r2, [r4, #8]
 8008b96:	333c      	adds	r3, #60	; 0x3c
 8008b98:	e7c7      	b.n	8008b2a <localtime_r+0xfe>
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	daeb      	bge.n	8008b76 <localtime_r+0x14a>
 8008b9e:	69e2      	ldr	r2, [r4, #28]
 8008ba0:	3a01      	subs	r2, #1
 8008ba2:	61e2      	str	r2, [r4, #28]
 8008ba4:	69a2      	ldr	r2, [r4, #24]
 8008ba6:	3a01      	subs	r2, #1
 8008ba8:	bf48      	it	mi
 8008baa:	2206      	movmi	r2, #6
 8008bac:	61a2      	str	r2, [r4, #24]
 8008bae:	68e2      	ldr	r2, [r4, #12]
 8008bb0:	3318      	adds	r3, #24
 8008bb2:	3a01      	subs	r2, #1
 8008bb4:	60e2      	str	r2, [r4, #12]
 8008bb6:	60a3      	str	r3, [r4, #8]
 8008bb8:	2a00      	cmp	r2, #0
 8008bba:	d1dc      	bne.n	8008b76 <localtime_r+0x14a>
 8008bbc:	6923      	ldr	r3, [r4, #16]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	d405      	bmi.n	8008bce <localtime_r+0x1a2>
 8008bc2:	6123      	str	r3, [r4, #16]
 8008bc4:	6923      	ldr	r3, [r4, #16]
 8008bc6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008bca:	60e3      	str	r3, [r4, #12]
 8008bcc:	e7d3      	b.n	8008b76 <localtime_r+0x14a>
 8008bce:	230b      	movs	r3, #11
 8008bd0:	6123      	str	r3, [r4, #16]
 8008bd2:	6963      	ldr	r3, [r4, #20]
 8008bd4:	1e5a      	subs	r2, r3, #1
 8008bd6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8008bda:	6162      	str	r2, [r4, #20]
 8008bdc:	079a      	lsls	r2, r3, #30
 8008bde:	d105      	bne.n	8008bec <localtime_r+0x1c0>
 8008be0:	2164      	movs	r1, #100	; 0x64
 8008be2:	fb93 f2f1 	sdiv	r2, r3, r1
 8008be6:	fb01 3212 	mls	r2, r1, r2, r3
 8008bea:	b962      	cbnz	r2, 8008c06 <localtime_r+0x1da>
 8008bec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008bf0:	fb93 f1f2 	sdiv	r1, r3, r2
 8008bf4:	fb02 3311 	mls	r3, r2, r1, r3
 8008bf8:	fab3 f383 	clz	r3, r3
 8008bfc:	095b      	lsrs	r3, r3, #5
 8008bfe:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8008c02:	61e3      	str	r3, [r4, #28]
 8008c04:	e7de      	b.n	8008bc4 <localtime_r+0x198>
 8008c06:	2301      	movs	r3, #1
 8008c08:	e7f9      	b.n	8008bfe <localtime_r+0x1d2>
 8008c0a:	bf00      	nop
 8008c0c:	0800ec58 	.word	0x0800ec58
 8008c10:	200004fc 	.word	0x200004fc

08008c14 <malloc>:
 8008c14:	4b02      	ldr	r3, [pc, #8]	; (8008c20 <malloc+0xc>)
 8008c16:	4601      	mov	r1, r0
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	f000 baf1 	b.w	8009200 <_malloc_r>
 8008c1e:	bf00      	nop
 8008c20:	20000014 	.word	0x20000014

08008c24 <free>:
 8008c24:	4b02      	ldr	r3, [pc, #8]	; (8008c30 <free+0xc>)
 8008c26:	4601      	mov	r1, r0
 8008c28:	6818      	ldr	r0, [r3, #0]
 8008c2a:	f000 ba7d 	b.w	8009128 <_free_r>
 8008c2e:	bf00      	nop
 8008c30:	20000014 	.word	0x20000014

08008c34 <memset>:
 8008c34:	4402      	add	r2, r0
 8008c36:	4603      	mov	r3, r0
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d100      	bne.n	8008c3e <memset+0xa>
 8008c3c:	4770      	bx	lr
 8008c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c42:	e7f9      	b.n	8008c38 <memset+0x4>

08008c44 <validate_structure>:
 8008c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c46:	6801      	ldr	r1, [r0, #0]
 8008c48:	293b      	cmp	r1, #59	; 0x3b
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	d911      	bls.n	8008c72 <validate_structure+0x2e>
 8008c4e:	223c      	movs	r2, #60	; 0x3c
 8008c50:	4668      	mov	r0, sp
 8008c52:	f002 fc97 	bl	800b584 <div>
 8008c56:	9a01      	ldr	r2, [sp, #4]
 8008c58:	6863      	ldr	r3, [r4, #4]
 8008c5a:	9900      	ldr	r1, [sp, #0]
 8008c5c:	2a00      	cmp	r2, #0
 8008c5e:	440b      	add	r3, r1
 8008c60:	6063      	str	r3, [r4, #4]
 8008c62:	bfbb      	ittet	lt
 8008c64:	323c      	addlt	r2, #60	; 0x3c
 8008c66:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008c6a:	6022      	strge	r2, [r4, #0]
 8008c6c:	6022      	strlt	r2, [r4, #0]
 8008c6e:	bfb8      	it	lt
 8008c70:	6063      	strlt	r3, [r4, #4]
 8008c72:	6861      	ldr	r1, [r4, #4]
 8008c74:	293b      	cmp	r1, #59	; 0x3b
 8008c76:	d911      	bls.n	8008c9c <validate_structure+0x58>
 8008c78:	223c      	movs	r2, #60	; 0x3c
 8008c7a:	4668      	mov	r0, sp
 8008c7c:	f002 fc82 	bl	800b584 <div>
 8008c80:	9a01      	ldr	r2, [sp, #4]
 8008c82:	68a3      	ldr	r3, [r4, #8]
 8008c84:	9900      	ldr	r1, [sp, #0]
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	440b      	add	r3, r1
 8008c8a:	60a3      	str	r3, [r4, #8]
 8008c8c:	bfbb      	ittet	lt
 8008c8e:	323c      	addlt	r2, #60	; 0x3c
 8008c90:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008c94:	6062      	strge	r2, [r4, #4]
 8008c96:	6062      	strlt	r2, [r4, #4]
 8008c98:	bfb8      	it	lt
 8008c9a:	60a3      	strlt	r3, [r4, #8]
 8008c9c:	68a1      	ldr	r1, [r4, #8]
 8008c9e:	2917      	cmp	r1, #23
 8008ca0:	d911      	bls.n	8008cc6 <validate_structure+0x82>
 8008ca2:	2218      	movs	r2, #24
 8008ca4:	4668      	mov	r0, sp
 8008ca6:	f002 fc6d 	bl	800b584 <div>
 8008caa:	9a01      	ldr	r2, [sp, #4]
 8008cac:	68e3      	ldr	r3, [r4, #12]
 8008cae:	9900      	ldr	r1, [sp, #0]
 8008cb0:	2a00      	cmp	r2, #0
 8008cb2:	440b      	add	r3, r1
 8008cb4:	60e3      	str	r3, [r4, #12]
 8008cb6:	bfbb      	ittet	lt
 8008cb8:	3218      	addlt	r2, #24
 8008cba:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008cbe:	60a2      	strge	r2, [r4, #8]
 8008cc0:	60a2      	strlt	r2, [r4, #8]
 8008cc2:	bfb8      	it	lt
 8008cc4:	60e3      	strlt	r3, [r4, #12]
 8008cc6:	6921      	ldr	r1, [r4, #16]
 8008cc8:	290b      	cmp	r1, #11
 8008cca:	d911      	bls.n	8008cf0 <validate_structure+0xac>
 8008ccc:	220c      	movs	r2, #12
 8008cce:	4668      	mov	r0, sp
 8008cd0:	f002 fc58 	bl	800b584 <div>
 8008cd4:	9a01      	ldr	r2, [sp, #4]
 8008cd6:	6963      	ldr	r3, [r4, #20]
 8008cd8:	9900      	ldr	r1, [sp, #0]
 8008cda:	2a00      	cmp	r2, #0
 8008cdc:	440b      	add	r3, r1
 8008cde:	6163      	str	r3, [r4, #20]
 8008ce0:	bfbb      	ittet	lt
 8008ce2:	320c      	addlt	r2, #12
 8008ce4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008ce8:	6122      	strge	r2, [r4, #16]
 8008cea:	6122      	strlt	r2, [r4, #16]
 8008cec:	bfb8      	it	lt
 8008cee:	6163      	strlt	r3, [r4, #20]
 8008cf0:	6963      	ldr	r3, [r4, #20]
 8008cf2:	0798      	lsls	r0, r3, #30
 8008cf4:	d120      	bne.n	8008d38 <validate_structure+0xf4>
 8008cf6:	2164      	movs	r1, #100	; 0x64
 8008cf8:	fb93 f2f1 	sdiv	r2, r3, r1
 8008cfc:	fb01 3212 	mls	r2, r1, r2, r3
 8008d00:	b9e2      	cbnz	r2, 8008d3c <validate_structure+0xf8>
 8008d02:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8008d06:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008d0a:	fb93 f1f2 	sdiv	r1, r3, r2
 8008d0e:	fb02 3311 	mls	r3, r2, r1, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bf14      	ite	ne
 8008d16:	231c      	movne	r3, #28
 8008d18:	231d      	moveq	r3, #29
 8008d1a:	68e2      	ldr	r2, [r4, #12]
 8008d1c:	2a00      	cmp	r2, #0
 8008d1e:	dc0f      	bgt.n	8008d40 <validate_structure+0xfc>
 8008d20:	4f33      	ldr	r7, [pc, #204]	; (8008df0 <validate_structure+0x1ac>)
 8008d22:	260b      	movs	r6, #11
 8008d24:	2064      	movs	r0, #100	; 0x64
 8008d26:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8008d2a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008d2e:	f1bc 0f00 	cmp.w	ip, #0
 8008d32:	dd31      	ble.n	8008d98 <validate_structure+0x154>
 8008d34:	b003      	add	sp, #12
 8008d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d38:	231c      	movs	r3, #28
 8008d3a:	e7ee      	b.n	8008d1a <validate_structure+0xd6>
 8008d3c:	231d      	movs	r3, #29
 8008d3e:	e7ec      	b.n	8008d1a <validate_structure+0xd6>
 8008d40:	4e2b      	ldr	r6, [pc, #172]	; (8008df0 <validate_structure+0x1ac>)
 8008d42:	2700      	movs	r7, #0
 8008d44:	2064      	movs	r0, #100	; 0x64
 8008d46:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8008d4a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8008d4e:	2a01      	cmp	r2, #1
 8008d50:	bf14      	ite	ne
 8008d52:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8008d56:	469c      	moveq	ip, r3
 8008d58:	4561      	cmp	r1, ip
 8008d5a:	ddeb      	ble.n	8008d34 <validate_structure+0xf0>
 8008d5c:	3201      	adds	r2, #1
 8008d5e:	eba1 010c 	sub.w	r1, r1, ip
 8008d62:	2a0c      	cmp	r2, #12
 8008d64:	60e1      	str	r1, [r4, #12]
 8008d66:	6122      	str	r2, [r4, #16]
 8008d68:	d1ef      	bne.n	8008d4a <validate_structure+0x106>
 8008d6a:	6963      	ldr	r3, [r4, #20]
 8008d6c:	1c5a      	adds	r2, r3, #1
 8008d6e:	0791      	lsls	r1, r2, #30
 8008d70:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8008d74:	d137      	bne.n	8008de6 <validate_structure+0x1a2>
 8008d76:	fb92 f1f0 	sdiv	r1, r2, r0
 8008d7a:	fb00 2211 	mls	r2, r0, r1, r2
 8008d7e:	2a00      	cmp	r2, #0
 8008d80:	d133      	bne.n	8008dea <validate_structure+0x1a6>
 8008d82:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8008d86:	fb93 f2f5 	sdiv	r2, r3, r5
 8008d8a:	fb05 3312 	mls	r3, r5, r2, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	bf14      	ite	ne
 8008d92:	231c      	movne	r3, #28
 8008d94:	231d      	moveq	r3, #29
 8008d96:	e7d8      	b.n	8008d4a <validate_structure+0x106>
 8008d98:	6921      	ldr	r1, [r4, #16]
 8008d9a:	3901      	subs	r1, #1
 8008d9c:	6121      	str	r1, [r4, #16]
 8008d9e:	3101      	adds	r1, #1
 8008da0:	d114      	bne.n	8008dcc <validate_structure+0x188>
 8008da2:	6963      	ldr	r3, [r4, #20]
 8008da4:	1e5a      	subs	r2, r3, #1
 8008da6:	0791      	lsls	r1, r2, #30
 8008da8:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8008dac:	d117      	bne.n	8008dde <validate_structure+0x19a>
 8008dae:	fb92 f1f0 	sdiv	r1, r2, r0
 8008db2:	fb00 2211 	mls	r2, r0, r1, r2
 8008db6:	b9a2      	cbnz	r2, 8008de2 <validate_structure+0x19e>
 8008db8:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8008dbc:	fb93 f2f5 	sdiv	r2, r3, r5
 8008dc0:	fb05 3312 	mls	r3, r5, r2, r3
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	bf14      	ite	ne
 8008dc8:	231c      	movne	r3, #28
 8008dca:	231d      	moveq	r3, #29
 8008dcc:	6922      	ldr	r2, [r4, #16]
 8008dce:	2a01      	cmp	r2, #1
 8008dd0:	bf14      	ite	ne
 8008dd2:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8008dd6:	461a      	moveq	r2, r3
 8008dd8:	4462      	add	r2, ip
 8008dda:	60e2      	str	r2, [r4, #12]
 8008ddc:	e7a5      	b.n	8008d2a <validate_structure+0xe6>
 8008dde:	231c      	movs	r3, #28
 8008de0:	e7f4      	b.n	8008dcc <validate_structure+0x188>
 8008de2:	231d      	movs	r3, #29
 8008de4:	e7f2      	b.n	8008dcc <validate_structure+0x188>
 8008de6:	231c      	movs	r3, #28
 8008de8:	e7af      	b.n	8008d4a <validate_structure+0x106>
 8008dea:	231d      	movs	r3, #29
 8008dec:	e7ad      	b.n	8008d4a <validate_structure+0x106>
 8008dee:	bf00      	nop
 8008df0:	0800ebf8 	.word	0x0800ebf8

08008df4 <mktime>:
 8008df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df8:	b085      	sub	sp, #20
 8008dfa:	4607      	mov	r7, r0
 8008dfc:	f003 ffce 	bl	800cd9c <__gettzinfo>
 8008e00:	4681      	mov	r9, r0
 8008e02:	4638      	mov	r0, r7
 8008e04:	f7ff ff1e 	bl	8008c44 <validate_structure>
 8008e08:	e9d7 4000 	ldrd	r4, r0, [r7]
 8008e0c:	233c      	movs	r3, #60	; 0x3c
 8008e0e:	fb03 4400 	mla	r4, r3, r0, r4
 8008e12:	68b8      	ldr	r0, [r7, #8]
 8008e14:	4abc      	ldr	r2, [pc, #752]	; (8009108 <mktime+0x314>)
 8008e16:	697e      	ldr	r6, [r7, #20]
 8008e18:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008e1c:	fb03 4400 	mla	r4, r3, r0, r4
 8008e20:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8008e24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008e28:	3d01      	subs	r5, #1
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	4415      	add	r5, r2
 8008e2e:	dd11      	ble.n	8008e54 <mktime+0x60>
 8008e30:	07b1      	lsls	r1, r6, #30
 8008e32:	d10f      	bne.n	8008e54 <mktime+0x60>
 8008e34:	2264      	movs	r2, #100	; 0x64
 8008e36:	fb96 f3f2 	sdiv	r3, r6, r2
 8008e3a:	fb02 6313 	mls	r3, r2, r3, r6
 8008e3e:	b943      	cbnz	r3, 8008e52 <mktime+0x5e>
 8008e40:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8008e44:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008e48:	fb93 f1f2 	sdiv	r1, r3, r2
 8008e4c:	fb02 3311 	mls	r3, r2, r1, r3
 8008e50:	b903      	cbnz	r3, 8008e54 <mktime+0x60>
 8008e52:	3501      	adds	r5, #1
 8008e54:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8008e58:	3310      	adds	r3, #16
 8008e5a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	61fd      	str	r5, [r7, #28]
 8008e62:	f200 815d 	bhi.w	8009120 <mktime+0x32c>
 8008e66:	2e46      	cmp	r6, #70	; 0x46
 8008e68:	dd71      	ble.n	8008f4e <mktime+0x15a>
 8008e6a:	2346      	movs	r3, #70	; 0x46
 8008e6c:	f240 1c6d 	movw	ip, #365	; 0x16d
 8008e70:	2164      	movs	r1, #100	; 0x64
 8008e72:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008e76:	079a      	lsls	r2, r3, #30
 8008e78:	d163      	bne.n	8008f42 <mktime+0x14e>
 8008e7a:	fb93 f2f1 	sdiv	r2, r3, r1
 8008e7e:	fb01 3212 	mls	r2, r1, r2, r3
 8008e82:	2a00      	cmp	r2, #0
 8008e84:	d160      	bne.n	8008f48 <mktime+0x154>
 8008e86:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8008e8a:	fb92 fef0 	sdiv	lr, r2, r0
 8008e8e:	fb00 221e 	mls	r2, r0, lr, r2
 8008e92:	2a00      	cmp	r2, #0
 8008e94:	bf14      	ite	ne
 8008e96:	4662      	movne	r2, ip
 8008e98:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	429e      	cmp	r6, r3
 8008ea0:	4415      	add	r5, r2
 8008ea2:	d1e8      	bne.n	8008e76 <mktime+0x82>
 8008ea4:	4b99      	ldr	r3, [pc, #612]	; (800910c <mktime+0x318>)
 8008ea6:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8008eaa:	fbc5 4803 	smlal	r4, r8, r5, r3
 8008eae:	f002 f8b1 	bl	800b014 <__tz_lock>
 8008eb2:	f002 f8bb 	bl	800b02c <_tzset_unlocked>
 8008eb6:	4b96      	ldr	r3, [pc, #600]	; (8009110 <mktime+0x31c>)
 8008eb8:	f8d3 b000 	ldr.w	fp, [r3]
 8008ebc:	f1bb 0f00 	cmp.w	fp, #0
 8008ec0:	d039      	beq.n	8008f36 <mktime+0x142>
 8008ec2:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8008ec6:	6978      	ldr	r0, [r7, #20]
 8008ec8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008ecc:	f1bb 0f01 	cmp.w	fp, #1
 8008ed0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008ed4:	46da      	mov	sl, fp
 8008ed6:	bfa8      	it	ge
 8008ed8:	f04f 0a01 	movge.w	sl, #1
 8008edc:	4283      	cmp	r3, r0
 8008ede:	d178      	bne.n	8008fd2 <mktime+0x1de>
 8008ee0:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8008ee4:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8008ee8:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8008eec:	1a5b      	subs	r3, r3, r1
 8008eee:	9302      	str	r3, [sp, #8]
 8008ef0:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8008ef4:	9303      	str	r3, [sp, #12]
 8008ef6:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8008efa:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8008efe:	9301      	str	r3, [sp, #4]
 8008f00:	ebb3 0c02 	subs.w	ip, r3, r2
 8008f04:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8008f08:	4564      	cmp	r4, ip
 8008f0a:	eb78 0300 	sbcs.w	r3, r8, r0
 8008f0e:	da66      	bge.n	8008fde <mktime+0x1ea>
 8008f10:	f8d9 3000 	ldr.w	r3, [r9]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d06f      	beq.n	8008ff8 <mktime+0x204>
 8008f18:	9b02      	ldr	r3, [sp, #8]
 8008f1a:	429c      	cmp	r4, r3
 8008f1c:	9b03      	ldr	r3, [sp, #12]
 8008f1e:	eb78 0303 	sbcs.w	r3, r8, r3
 8008f22:	db03      	blt.n	8008f2c <mktime+0x138>
 8008f24:	4564      	cmp	r4, ip
 8008f26:	eb78 0300 	sbcs.w	r3, r8, r0
 8008f2a:	db6b      	blt.n	8009004 <mktime+0x210>
 8008f2c:	f1bb 0f00 	cmp.w	fp, #0
 8008f30:	f04f 0b00 	mov.w	fp, #0
 8008f34:	da6b      	bge.n	800900e <mktime+0x21a>
 8008f36:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8008f3a:	190c      	adds	r4, r1, r4
 8008f3c:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8008f40:	e0a9      	b.n	8009096 <mktime+0x2a2>
 8008f42:	f240 126d 	movw	r2, #365	; 0x16d
 8008f46:	e7a9      	b.n	8008e9c <mktime+0xa8>
 8008f48:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8008f4c:	e7a6      	b.n	8008e9c <mktime+0xa8>
 8008f4e:	d0a9      	beq.n	8008ea4 <mktime+0xb0>
 8008f50:	2345      	movs	r3, #69	; 0x45
 8008f52:	f240 1c6d 	movw	ip, #365	; 0x16d
 8008f56:	2164      	movs	r1, #100	; 0x64
 8008f58:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008f5c:	e012      	b.n	8008f84 <mktime+0x190>
 8008f5e:	bb62      	cbnz	r2, 8008fba <mktime+0x1c6>
 8008f60:	fb93 f2f1 	sdiv	r2, r3, r1
 8008f64:	fb01 3212 	mls	r2, r1, r2, r3
 8008f68:	bb52      	cbnz	r2, 8008fc0 <mktime+0x1cc>
 8008f6a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8008f6e:	fb92 fef0 	sdiv	lr, r2, r0
 8008f72:	fb00 221e 	mls	r2, r0, lr, r2
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	bf14      	ite	ne
 8008f7a:	4662      	movne	r2, ip
 8008f7c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8008f80:	1aad      	subs	r5, r5, r2
 8008f82:	3b01      	subs	r3, #1
 8008f84:	429e      	cmp	r6, r3
 8008f86:	f003 0203 	and.w	r2, r3, #3
 8008f8a:	dbe8      	blt.n	8008f5e <mktime+0x16a>
 8008f8c:	b9da      	cbnz	r2, 8008fc6 <mktime+0x1d2>
 8008f8e:	2264      	movs	r2, #100	; 0x64
 8008f90:	fb96 f3f2 	sdiv	r3, r6, r2
 8008f94:	fb02 6313 	mls	r3, r2, r3, r6
 8008f98:	b9c3      	cbnz	r3, 8008fcc <mktime+0x1d8>
 8008f9a:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8008f9e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008fa2:	fb93 f1f2 	sdiv	r1, r3, r2
 8008fa6:	fb02 3311 	mls	r3, r2, r1, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f240 136d 	movw	r3, #365	; 0x16d
 8008fb0:	bf08      	it	eq
 8008fb2:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8008fb6:	1aed      	subs	r5, r5, r3
 8008fb8:	e774      	b.n	8008ea4 <mktime+0xb0>
 8008fba:	f240 126d 	movw	r2, #365	; 0x16d
 8008fbe:	e7df      	b.n	8008f80 <mktime+0x18c>
 8008fc0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8008fc4:	e7dc      	b.n	8008f80 <mktime+0x18c>
 8008fc6:	f240 136d 	movw	r3, #365	; 0x16d
 8008fca:	e7f4      	b.n	8008fb6 <mktime+0x1c2>
 8008fcc:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8008fd0:	e7f1      	b.n	8008fb6 <mktime+0x1c2>
 8008fd2:	f001 ff75 	bl	800aec0 <__tzcalc_limits>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d182      	bne.n	8008ee0 <mktime+0xec>
 8008fda:	46d3      	mov	fp, sl
 8008fdc:	e050      	b.n	8009080 <mktime+0x28c>
 8008fde:	9b01      	ldr	r3, [sp, #4]
 8008fe0:	1a5b      	subs	r3, r3, r1
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8008fe8:	eb6e 0e03 	sbc.w	lr, lr, r3
 8008fec:	9b01      	ldr	r3, [sp, #4]
 8008fee:	429c      	cmp	r4, r3
 8008ff0:	eb78 030e 	sbcs.w	r3, r8, lr
 8008ff4:	dbf1      	blt.n	8008fda <mktime+0x1e6>
 8008ff6:	e78b      	b.n	8008f10 <mktime+0x11c>
 8008ff8:	9b02      	ldr	r3, [sp, #8]
 8008ffa:	429c      	cmp	r4, r3
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	eb78 0303 	sbcs.w	r3, r8, r3
 8009002:	db8f      	blt.n	8008f24 <mktime+0x130>
 8009004:	f1bb 0f00 	cmp.w	fp, #0
 8009008:	db3e      	blt.n	8009088 <mktime+0x294>
 800900a:	f04f 0b01 	mov.w	fp, #1
 800900e:	ea8a 0a0b 	eor.w	sl, sl, fp
 8009012:	f1ba 0f01 	cmp.w	sl, #1
 8009016:	d133      	bne.n	8009080 <mktime+0x28c>
 8009018:	f1bb 0f00 	cmp.w	fp, #0
 800901c:	d04e      	beq.n	80090bc <mktime+0x2c8>
 800901e:	1a52      	subs	r2, r2, r1
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8009026:	4413      	add	r3, r2
 8009028:	1914      	adds	r4, r2, r4
 800902a:	603b      	str	r3, [r7, #0]
 800902c:	4638      	mov	r0, r7
 800902e:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8009032:	f7ff fe07 	bl	8008c44 <validate_structure>
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	ebb2 020a 	subs.w	r2, r2, sl
 800903c:	d020      	beq.n	8009080 <mktime+0x28c>
 800903e:	2a01      	cmp	r2, #1
 8009040:	dc3e      	bgt.n	80090c0 <mktime+0x2cc>
 8009042:	1c90      	adds	r0, r2, #2
 8009044:	bfd8      	it	le
 8009046:	2201      	movle	r2, #1
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	18d3      	adds	r3, r2, r3
 800904c:	4415      	add	r5, r2
 800904e:	d540      	bpl.n	80090d2 <mktime+0x2de>
 8009050:	1e73      	subs	r3, r6, #1
 8009052:	0799      	lsls	r1, r3, #30
 8009054:	d137      	bne.n	80090c6 <mktime+0x2d2>
 8009056:	2264      	movs	r2, #100	; 0x64
 8009058:	fb93 f1f2 	sdiv	r1, r3, r2
 800905c:	fb02 3311 	mls	r3, r2, r1, r3
 8009060:	bba3      	cbnz	r3, 80090cc <mktime+0x2d8>
 8009062:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009066:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800906a:	fb96 f2f3 	sdiv	r2, r6, r3
 800906e:	fb03 6612 	mls	r6, r3, r2, r6
 8009072:	2e00      	cmp	r6, #0
 8009074:	f240 136d 	movw	r3, #365	; 0x16d
 8009078:	bf18      	it	ne
 800907a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800907e:	61fb      	str	r3, [r7, #28]
 8009080:	f1bb 0f01 	cmp.w	fp, #1
 8009084:	f47f af57 	bne.w	8008f36 <mktime+0x142>
 8009088:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800908c:	190c      	adds	r4, r1, r4
 800908e:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8009092:	f04f 0b01 	mov.w	fp, #1
 8009096:	f001 ffc3 	bl	800b020 <__tz_unlock>
 800909a:	3504      	adds	r5, #4
 800909c:	2307      	movs	r3, #7
 800909e:	fb95 f3f3 	sdiv	r3, r5, r3
 80090a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80090a6:	1aed      	subs	r5, r5, r3
 80090a8:	bf48      	it	mi
 80090aa:	3507      	addmi	r5, #7
 80090ac:	f8c7 b020 	str.w	fp, [r7, #32]
 80090b0:	61bd      	str	r5, [r7, #24]
 80090b2:	4620      	mov	r0, r4
 80090b4:	4641      	mov	r1, r8
 80090b6:	b005      	add	sp, #20
 80090b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090bc:	1a8a      	subs	r2, r1, r2
 80090be:	e7af      	b.n	8009020 <mktime+0x22c>
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295
 80090c4:	e7c0      	b.n	8009048 <mktime+0x254>
 80090c6:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80090ca:	e7d8      	b.n	800907e <mktime+0x28a>
 80090cc:	f240 136d 	movw	r3, #365	; 0x16d
 80090d0:	e7d5      	b.n	800907e <mktime+0x28a>
 80090d2:	07b2      	lsls	r2, r6, #30
 80090d4:	d11e      	bne.n	8009114 <mktime+0x320>
 80090d6:	2164      	movs	r1, #100	; 0x64
 80090d8:	fb96 f2f1 	sdiv	r2, r6, r1
 80090dc:	fb01 6212 	mls	r2, r1, r2, r6
 80090e0:	b9da      	cbnz	r2, 800911a <mktime+0x326>
 80090e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80090e6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80090ea:	fb96 f1f2 	sdiv	r1, r6, r2
 80090ee:	fb02 6611 	mls	r6, r2, r1, r6
 80090f2:	2e00      	cmp	r6, #0
 80090f4:	f240 126d 	movw	r2, #365	; 0x16d
 80090f8:	bf08      	it	eq
 80090fa:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80090fe:	4293      	cmp	r3, r2
 8009100:	bfa8      	it	ge
 8009102:	1a9b      	subge	r3, r3, r2
 8009104:	e7bb      	b.n	800907e <mktime+0x28a>
 8009106:	bf00      	nop
 8009108:	0800ec28 	.word	0x0800ec28
 800910c:	00015180 	.word	0x00015180
 8009110:	200004fc 	.word	0x200004fc
 8009114:	f240 126d 	movw	r2, #365	; 0x16d
 8009118:	e7f1      	b.n	80090fe <mktime+0x30a>
 800911a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800911e:	e7ee      	b.n	80090fe <mktime+0x30a>
 8009120:	f04f 34ff 	mov.w	r4, #4294967295
 8009124:	46a0      	mov	r8, r4
 8009126:	e7c4      	b.n	80090b2 <mktime+0x2be>

08009128 <_free_r>:
 8009128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800912a:	2900      	cmp	r1, #0
 800912c:	d044      	beq.n	80091b8 <_free_r+0x90>
 800912e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009132:	9001      	str	r0, [sp, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	f1a1 0404 	sub.w	r4, r1, #4
 800913a:	bfb8      	it	lt
 800913c:	18e4      	addlt	r4, r4, r3
 800913e:	f003 ff6b 	bl	800d018 <__malloc_lock>
 8009142:	4a1e      	ldr	r2, [pc, #120]	; (80091bc <_free_r+0x94>)
 8009144:	9801      	ldr	r0, [sp, #4]
 8009146:	6813      	ldr	r3, [r2, #0]
 8009148:	b933      	cbnz	r3, 8009158 <_free_r+0x30>
 800914a:	6063      	str	r3, [r4, #4]
 800914c:	6014      	str	r4, [r2, #0]
 800914e:	b003      	add	sp, #12
 8009150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009154:	f003 bf66 	b.w	800d024 <__malloc_unlock>
 8009158:	42a3      	cmp	r3, r4
 800915a:	d908      	bls.n	800916e <_free_r+0x46>
 800915c:	6825      	ldr	r5, [r4, #0]
 800915e:	1961      	adds	r1, r4, r5
 8009160:	428b      	cmp	r3, r1
 8009162:	bf01      	itttt	eq
 8009164:	6819      	ldreq	r1, [r3, #0]
 8009166:	685b      	ldreq	r3, [r3, #4]
 8009168:	1949      	addeq	r1, r1, r5
 800916a:	6021      	streq	r1, [r4, #0]
 800916c:	e7ed      	b.n	800914a <_free_r+0x22>
 800916e:	461a      	mov	r2, r3
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	b10b      	cbz	r3, 8009178 <_free_r+0x50>
 8009174:	42a3      	cmp	r3, r4
 8009176:	d9fa      	bls.n	800916e <_free_r+0x46>
 8009178:	6811      	ldr	r1, [r2, #0]
 800917a:	1855      	adds	r5, r2, r1
 800917c:	42a5      	cmp	r5, r4
 800917e:	d10b      	bne.n	8009198 <_free_r+0x70>
 8009180:	6824      	ldr	r4, [r4, #0]
 8009182:	4421      	add	r1, r4
 8009184:	1854      	adds	r4, r2, r1
 8009186:	42a3      	cmp	r3, r4
 8009188:	6011      	str	r1, [r2, #0]
 800918a:	d1e0      	bne.n	800914e <_free_r+0x26>
 800918c:	681c      	ldr	r4, [r3, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	6053      	str	r3, [r2, #4]
 8009192:	4421      	add	r1, r4
 8009194:	6011      	str	r1, [r2, #0]
 8009196:	e7da      	b.n	800914e <_free_r+0x26>
 8009198:	d902      	bls.n	80091a0 <_free_r+0x78>
 800919a:	230c      	movs	r3, #12
 800919c:	6003      	str	r3, [r0, #0]
 800919e:	e7d6      	b.n	800914e <_free_r+0x26>
 80091a0:	6825      	ldr	r5, [r4, #0]
 80091a2:	1961      	adds	r1, r4, r5
 80091a4:	428b      	cmp	r3, r1
 80091a6:	bf04      	itt	eq
 80091a8:	6819      	ldreq	r1, [r3, #0]
 80091aa:	685b      	ldreq	r3, [r3, #4]
 80091ac:	6063      	str	r3, [r4, #4]
 80091ae:	bf04      	itt	eq
 80091b0:	1949      	addeq	r1, r1, r5
 80091b2:	6021      	streq	r1, [r4, #0]
 80091b4:	6054      	str	r4, [r2, #4]
 80091b6:	e7ca      	b.n	800914e <_free_r+0x26>
 80091b8:	b003      	add	sp, #12
 80091ba:	bd30      	pop	{r4, r5, pc}
 80091bc:	200004d8 	.word	0x200004d8

080091c0 <sbrk_aligned>:
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	4e0e      	ldr	r6, [pc, #56]	; (80091fc <sbrk_aligned+0x3c>)
 80091c4:	460c      	mov	r4, r1
 80091c6:	6831      	ldr	r1, [r6, #0]
 80091c8:	4605      	mov	r5, r0
 80091ca:	b911      	cbnz	r1, 80091d2 <sbrk_aligned+0x12>
 80091cc:	f000 ff94 	bl	800a0f8 <_sbrk_r>
 80091d0:	6030      	str	r0, [r6, #0]
 80091d2:	4621      	mov	r1, r4
 80091d4:	4628      	mov	r0, r5
 80091d6:	f000 ff8f 	bl	800a0f8 <_sbrk_r>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	d00a      	beq.n	80091f4 <sbrk_aligned+0x34>
 80091de:	1cc4      	adds	r4, r0, #3
 80091e0:	f024 0403 	bic.w	r4, r4, #3
 80091e4:	42a0      	cmp	r0, r4
 80091e6:	d007      	beq.n	80091f8 <sbrk_aligned+0x38>
 80091e8:	1a21      	subs	r1, r4, r0
 80091ea:	4628      	mov	r0, r5
 80091ec:	f000 ff84 	bl	800a0f8 <_sbrk_r>
 80091f0:	3001      	adds	r0, #1
 80091f2:	d101      	bne.n	80091f8 <sbrk_aligned+0x38>
 80091f4:	f04f 34ff 	mov.w	r4, #4294967295
 80091f8:	4620      	mov	r0, r4
 80091fa:	bd70      	pop	{r4, r5, r6, pc}
 80091fc:	200004dc 	.word	0x200004dc

08009200 <_malloc_r>:
 8009200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009204:	1ccd      	adds	r5, r1, #3
 8009206:	f025 0503 	bic.w	r5, r5, #3
 800920a:	3508      	adds	r5, #8
 800920c:	2d0c      	cmp	r5, #12
 800920e:	bf38      	it	cc
 8009210:	250c      	movcc	r5, #12
 8009212:	2d00      	cmp	r5, #0
 8009214:	4607      	mov	r7, r0
 8009216:	db01      	blt.n	800921c <_malloc_r+0x1c>
 8009218:	42a9      	cmp	r1, r5
 800921a:	d905      	bls.n	8009228 <_malloc_r+0x28>
 800921c:	230c      	movs	r3, #12
 800921e:	603b      	str	r3, [r7, #0]
 8009220:	2600      	movs	r6, #0
 8009222:	4630      	mov	r0, r6
 8009224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009228:	4e2e      	ldr	r6, [pc, #184]	; (80092e4 <_malloc_r+0xe4>)
 800922a:	f003 fef5 	bl	800d018 <__malloc_lock>
 800922e:	6833      	ldr	r3, [r6, #0]
 8009230:	461c      	mov	r4, r3
 8009232:	bb34      	cbnz	r4, 8009282 <_malloc_r+0x82>
 8009234:	4629      	mov	r1, r5
 8009236:	4638      	mov	r0, r7
 8009238:	f7ff ffc2 	bl	80091c0 <sbrk_aligned>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	4604      	mov	r4, r0
 8009240:	d14d      	bne.n	80092de <_malloc_r+0xde>
 8009242:	6834      	ldr	r4, [r6, #0]
 8009244:	4626      	mov	r6, r4
 8009246:	2e00      	cmp	r6, #0
 8009248:	d140      	bne.n	80092cc <_malloc_r+0xcc>
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	4631      	mov	r1, r6
 800924e:	4638      	mov	r0, r7
 8009250:	eb04 0803 	add.w	r8, r4, r3
 8009254:	f000 ff50 	bl	800a0f8 <_sbrk_r>
 8009258:	4580      	cmp	r8, r0
 800925a:	d13a      	bne.n	80092d2 <_malloc_r+0xd2>
 800925c:	6821      	ldr	r1, [r4, #0]
 800925e:	3503      	adds	r5, #3
 8009260:	1a6d      	subs	r5, r5, r1
 8009262:	f025 0503 	bic.w	r5, r5, #3
 8009266:	3508      	adds	r5, #8
 8009268:	2d0c      	cmp	r5, #12
 800926a:	bf38      	it	cc
 800926c:	250c      	movcc	r5, #12
 800926e:	4629      	mov	r1, r5
 8009270:	4638      	mov	r0, r7
 8009272:	f7ff ffa5 	bl	80091c0 <sbrk_aligned>
 8009276:	3001      	adds	r0, #1
 8009278:	d02b      	beq.n	80092d2 <_malloc_r+0xd2>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	442b      	add	r3, r5
 800927e:	6023      	str	r3, [r4, #0]
 8009280:	e00e      	b.n	80092a0 <_malloc_r+0xa0>
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	1b52      	subs	r2, r2, r5
 8009286:	d41e      	bmi.n	80092c6 <_malloc_r+0xc6>
 8009288:	2a0b      	cmp	r2, #11
 800928a:	d916      	bls.n	80092ba <_malloc_r+0xba>
 800928c:	1961      	adds	r1, r4, r5
 800928e:	42a3      	cmp	r3, r4
 8009290:	6025      	str	r5, [r4, #0]
 8009292:	bf18      	it	ne
 8009294:	6059      	strne	r1, [r3, #4]
 8009296:	6863      	ldr	r3, [r4, #4]
 8009298:	bf08      	it	eq
 800929a:	6031      	streq	r1, [r6, #0]
 800929c:	5162      	str	r2, [r4, r5]
 800929e:	604b      	str	r3, [r1, #4]
 80092a0:	4638      	mov	r0, r7
 80092a2:	f104 060b 	add.w	r6, r4, #11
 80092a6:	f003 febd 	bl	800d024 <__malloc_unlock>
 80092aa:	f026 0607 	bic.w	r6, r6, #7
 80092ae:	1d23      	adds	r3, r4, #4
 80092b0:	1af2      	subs	r2, r6, r3
 80092b2:	d0b6      	beq.n	8009222 <_malloc_r+0x22>
 80092b4:	1b9b      	subs	r3, r3, r6
 80092b6:	50a3      	str	r3, [r4, r2]
 80092b8:	e7b3      	b.n	8009222 <_malloc_r+0x22>
 80092ba:	6862      	ldr	r2, [r4, #4]
 80092bc:	42a3      	cmp	r3, r4
 80092be:	bf0c      	ite	eq
 80092c0:	6032      	streq	r2, [r6, #0]
 80092c2:	605a      	strne	r2, [r3, #4]
 80092c4:	e7ec      	b.n	80092a0 <_malloc_r+0xa0>
 80092c6:	4623      	mov	r3, r4
 80092c8:	6864      	ldr	r4, [r4, #4]
 80092ca:	e7b2      	b.n	8009232 <_malloc_r+0x32>
 80092cc:	4634      	mov	r4, r6
 80092ce:	6876      	ldr	r6, [r6, #4]
 80092d0:	e7b9      	b.n	8009246 <_malloc_r+0x46>
 80092d2:	230c      	movs	r3, #12
 80092d4:	603b      	str	r3, [r7, #0]
 80092d6:	4638      	mov	r0, r7
 80092d8:	f003 fea4 	bl	800d024 <__malloc_unlock>
 80092dc:	e7a1      	b.n	8009222 <_malloc_r+0x22>
 80092de:	6025      	str	r5, [r4, #0]
 80092e0:	e7de      	b.n	80092a0 <_malloc_r+0xa0>
 80092e2:	bf00      	nop
 80092e4:	200004d8 	.word	0x200004d8

080092e8 <__cvt>:
 80092e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092ec:	ec55 4b10 	vmov	r4, r5, d0
 80092f0:	2d00      	cmp	r5, #0
 80092f2:	460e      	mov	r6, r1
 80092f4:	4619      	mov	r1, r3
 80092f6:	462b      	mov	r3, r5
 80092f8:	bfbb      	ittet	lt
 80092fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80092fe:	461d      	movlt	r5, r3
 8009300:	2300      	movge	r3, #0
 8009302:	232d      	movlt	r3, #45	; 0x2d
 8009304:	700b      	strb	r3, [r1, #0]
 8009306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009308:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800930c:	4691      	mov	r9, r2
 800930e:	f023 0820 	bic.w	r8, r3, #32
 8009312:	bfbc      	itt	lt
 8009314:	4622      	movlt	r2, r4
 8009316:	4614      	movlt	r4, r2
 8009318:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800931c:	d005      	beq.n	800932a <__cvt+0x42>
 800931e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009322:	d100      	bne.n	8009326 <__cvt+0x3e>
 8009324:	3601      	adds	r6, #1
 8009326:	2102      	movs	r1, #2
 8009328:	e000      	b.n	800932c <__cvt+0x44>
 800932a:	2103      	movs	r1, #3
 800932c:	ab03      	add	r3, sp, #12
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	ab02      	add	r3, sp, #8
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	ec45 4b10 	vmov	d0, r4, r5
 8009338:	4653      	mov	r3, sl
 800933a:	4632      	mov	r2, r6
 800933c:	f002 f9c4 	bl	800b6c8 <_dtoa_r>
 8009340:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009344:	4607      	mov	r7, r0
 8009346:	d102      	bne.n	800934e <__cvt+0x66>
 8009348:	f019 0f01 	tst.w	r9, #1
 800934c:	d022      	beq.n	8009394 <__cvt+0xac>
 800934e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009352:	eb07 0906 	add.w	r9, r7, r6
 8009356:	d110      	bne.n	800937a <__cvt+0x92>
 8009358:	783b      	ldrb	r3, [r7, #0]
 800935a:	2b30      	cmp	r3, #48	; 0x30
 800935c:	d10a      	bne.n	8009374 <__cvt+0x8c>
 800935e:	2200      	movs	r2, #0
 8009360:	2300      	movs	r3, #0
 8009362:	4620      	mov	r0, r4
 8009364:	4629      	mov	r1, r5
 8009366:	f7f7 fbb9 	bl	8000adc <__aeabi_dcmpeq>
 800936a:	b918      	cbnz	r0, 8009374 <__cvt+0x8c>
 800936c:	f1c6 0601 	rsb	r6, r6, #1
 8009370:	f8ca 6000 	str.w	r6, [sl]
 8009374:	f8da 3000 	ldr.w	r3, [sl]
 8009378:	4499      	add	r9, r3
 800937a:	2200      	movs	r2, #0
 800937c:	2300      	movs	r3, #0
 800937e:	4620      	mov	r0, r4
 8009380:	4629      	mov	r1, r5
 8009382:	f7f7 fbab 	bl	8000adc <__aeabi_dcmpeq>
 8009386:	b108      	cbz	r0, 800938c <__cvt+0xa4>
 8009388:	f8cd 900c 	str.w	r9, [sp, #12]
 800938c:	2230      	movs	r2, #48	; 0x30
 800938e:	9b03      	ldr	r3, [sp, #12]
 8009390:	454b      	cmp	r3, r9
 8009392:	d307      	bcc.n	80093a4 <__cvt+0xbc>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009398:	1bdb      	subs	r3, r3, r7
 800939a:	4638      	mov	r0, r7
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	b004      	add	sp, #16
 80093a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a4:	1c59      	adds	r1, r3, #1
 80093a6:	9103      	str	r1, [sp, #12]
 80093a8:	701a      	strb	r2, [r3, #0]
 80093aa:	e7f0      	b.n	800938e <__cvt+0xa6>

080093ac <__exponent>:
 80093ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ae:	4603      	mov	r3, r0
 80093b0:	2900      	cmp	r1, #0
 80093b2:	bfb8      	it	lt
 80093b4:	4249      	neglt	r1, r1
 80093b6:	f803 2b02 	strb.w	r2, [r3], #2
 80093ba:	bfb4      	ite	lt
 80093bc:	222d      	movlt	r2, #45	; 0x2d
 80093be:	222b      	movge	r2, #43	; 0x2b
 80093c0:	2909      	cmp	r1, #9
 80093c2:	7042      	strb	r2, [r0, #1]
 80093c4:	dd2a      	ble.n	800941c <__exponent+0x70>
 80093c6:	f10d 0407 	add.w	r4, sp, #7
 80093ca:	46a4      	mov	ip, r4
 80093cc:	270a      	movs	r7, #10
 80093ce:	46a6      	mov	lr, r4
 80093d0:	460a      	mov	r2, r1
 80093d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80093d6:	fb07 1516 	mls	r5, r7, r6, r1
 80093da:	3530      	adds	r5, #48	; 0x30
 80093dc:	2a63      	cmp	r2, #99	; 0x63
 80093de:	f104 34ff 	add.w	r4, r4, #4294967295
 80093e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80093e6:	4631      	mov	r1, r6
 80093e8:	dcf1      	bgt.n	80093ce <__exponent+0x22>
 80093ea:	3130      	adds	r1, #48	; 0x30
 80093ec:	f1ae 0502 	sub.w	r5, lr, #2
 80093f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80093f4:	1c44      	adds	r4, r0, #1
 80093f6:	4629      	mov	r1, r5
 80093f8:	4561      	cmp	r1, ip
 80093fa:	d30a      	bcc.n	8009412 <__exponent+0x66>
 80093fc:	f10d 0209 	add.w	r2, sp, #9
 8009400:	eba2 020e 	sub.w	r2, r2, lr
 8009404:	4565      	cmp	r5, ip
 8009406:	bf88      	it	hi
 8009408:	2200      	movhi	r2, #0
 800940a:	4413      	add	r3, r2
 800940c:	1a18      	subs	r0, r3, r0
 800940e:	b003      	add	sp, #12
 8009410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009416:	f804 2f01 	strb.w	r2, [r4, #1]!
 800941a:	e7ed      	b.n	80093f8 <__exponent+0x4c>
 800941c:	2330      	movs	r3, #48	; 0x30
 800941e:	3130      	adds	r1, #48	; 0x30
 8009420:	7083      	strb	r3, [r0, #2]
 8009422:	70c1      	strb	r1, [r0, #3]
 8009424:	1d03      	adds	r3, r0, #4
 8009426:	e7f1      	b.n	800940c <__exponent+0x60>

08009428 <_printf_float>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	ed2d 8b02 	vpush	{d8}
 8009430:	b08d      	sub	sp, #52	; 0x34
 8009432:	460c      	mov	r4, r1
 8009434:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009438:	4616      	mov	r6, r2
 800943a:	461f      	mov	r7, r3
 800943c:	4605      	mov	r5, r0
 800943e:	f003 fd5d 	bl	800cefc <_localeconv_r>
 8009442:	f8d0 a000 	ldr.w	sl, [r0]
 8009446:	4650      	mov	r0, sl
 8009448:	f7f6 fec2 	bl	80001d0 <strlen>
 800944c:	2300      	movs	r3, #0
 800944e:	930a      	str	r3, [sp, #40]	; 0x28
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	9305      	str	r3, [sp, #20]
 8009454:	f8d8 3000 	ldr.w	r3, [r8]
 8009458:	f894 b018 	ldrb.w	fp, [r4, #24]
 800945c:	3307      	adds	r3, #7
 800945e:	f023 0307 	bic.w	r3, r3, #7
 8009462:	f103 0208 	add.w	r2, r3, #8
 8009466:	f8c8 2000 	str.w	r2, [r8]
 800946a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009472:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009476:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800947a:	9307      	str	r3, [sp, #28]
 800947c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009480:	ee08 0a10 	vmov	s16, r0
 8009484:	4b9f      	ldr	r3, [pc, #636]	; (8009704 <_printf_float+0x2dc>)
 8009486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800948a:	f04f 32ff 	mov.w	r2, #4294967295
 800948e:	f7f7 fb57 	bl	8000b40 <__aeabi_dcmpun>
 8009492:	bb88      	cbnz	r0, 80094f8 <_printf_float+0xd0>
 8009494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009498:	4b9a      	ldr	r3, [pc, #616]	; (8009704 <_printf_float+0x2dc>)
 800949a:	f04f 32ff 	mov.w	r2, #4294967295
 800949e:	f7f7 fb31 	bl	8000b04 <__aeabi_dcmple>
 80094a2:	bb48      	cbnz	r0, 80094f8 <_printf_float+0xd0>
 80094a4:	2200      	movs	r2, #0
 80094a6:	2300      	movs	r3, #0
 80094a8:	4640      	mov	r0, r8
 80094aa:	4649      	mov	r1, r9
 80094ac:	f7f7 fb20 	bl	8000af0 <__aeabi_dcmplt>
 80094b0:	b110      	cbz	r0, 80094b8 <_printf_float+0x90>
 80094b2:	232d      	movs	r3, #45	; 0x2d
 80094b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094b8:	4b93      	ldr	r3, [pc, #588]	; (8009708 <_printf_float+0x2e0>)
 80094ba:	4894      	ldr	r0, [pc, #592]	; (800970c <_printf_float+0x2e4>)
 80094bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80094c0:	bf94      	ite	ls
 80094c2:	4698      	movls	r8, r3
 80094c4:	4680      	movhi	r8, r0
 80094c6:	2303      	movs	r3, #3
 80094c8:	6123      	str	r3, [r4, #16]
 80094ca:	9b05      	ldr	r3, [sp, #20]
 80094cc:	f023 0204 	bic.w	r2, r3, #4
 80094d0:	6022      	str	r2, [r4, #0]
 80094d2:	f04f 0900 	mov.w	r9, #0
 80094d6:	9700      	str	r7, [sp, #0]
 80094d8:	4633      	mov	r3, r6
 80094da:	aa0b      	add	r2, sp, #44	; 0x2c
 80094dc:	4621      	mov	r1, r4
 80094de:	4628      	mov	r0, r5
 80094e0:	f000 f9d8 	bl	8009894 <_printf_common>
 80094e4:	3001      	adds	r0, #1
 80094e6:	f040 8090 	bne.w	800960a <_printf_float+0x1e2>
 80094ea:	f04f 30ff 	mov.w	r0, #4294967295
 80094ee:	b00d      	add	sp, #52	; 0x34
 80094f0:	ecbd 8b02 	vpop	{d8}
 80094f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f8:	4642      	mov	r2, r8
 80094fa:	464b      	mov	r3, r9
 80094fc:	4640      	mov	r0, r8
 80094fe:	4649      	mov	r1, r9
 8009500:	f7f7 fb1e 	bl	8000b40 <__aeabi_dcmpun>
 8009504:	b140      	cbz	r0, 8009518 <_printf_float+0xf0>
 8009506:	464b      	mov	r3, r9
 8009508:	2b00      	cmp	r3, #0
 800950a:	bfbc      	itt	lt
 800950c:	232d      	movlt	r3, #45	; 0x2d
 800950e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009512:	487f      	ldr	r0, [pc, #508]	; (8009710 <_printf_float+0x2e8>)
 8009514:	4b7f      	ldr	r3, [pc, #508]	; (8009714 <_printf_float+0x2ec>)
 8009516:	e7d1      	b.n	80094bc <_printf_float+0x94>
 8009518:	6863      	ldr	r3, [r4, #4]
 800951a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800951e:	9206      	str	r2, [sp, #24]
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	d13f      	bne.n	80095a4 <_printf_float+0x17c>
 8009524:	2306      	movs	r3, #6
 8009526:	6063      	str	r3, [r4, #4]
 8009528:	9b05      	ldr	r3, [sp, #20]
 800952a:	6861      	ldr	r1, [r4, #4]
 800952c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009530:	2300      	movs	r3, #0
 8009532:	9303      	str	r3, [sp, #12]
 8009534:	ab0a      	add	r3, sp, #40	; 0x28
 8009536:	e9cd b301 	strd	fp, r3, [sp, #4]
 800953a:	ab09      	add	r3, sp, #36	; 0x24
 800953c:	ec49 8b10 	vmov	d0, r8, r9
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	6022      	str	r2, [r4, #0]
 8009544:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009548:	4628      	mov	r0, r5
 800954a:	f7ff fecd 	bl	80092e8 <__cvt>
 800954e:	9b06      	ldr	r3, [sp, #24]
 8009550:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009552:	2b47      	cmp	r3, #71	; 0x47
 8009554:	4680      	mov	r8, r0
 8009556:	d108      	bne.n	800956a <_printf_float+0x142>
 8009558:	1cc8      	adds	r0, r1, #3
 800955a:	db02      	blt.n	8009562 <_printf_float+0x13a>
 800955c:	6863      	ldr	r3, [r4, #4]
 800955e:	4299      	cmp	r1, r3
 8009560:	dd41      	ble.n	80095e6 <_printf_float+0x1be>
 8009562:	f1ab 0b02 	sub.w	fp, fp, #2
 8009566:	fa5f fb8b 	uxtb.w	fp, fp
 800956a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800956e:	d820      	bhi.n	80095b2 <_printf_float+0x18a>
 8009570:	3901      	subs	r1, #1
 8009572:	465a      	mov	r2, fp
 8009574:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009578:	9109      	str	r1, [sp, #36]	; 0x24
 800957a:	f7ff ff17 	bl	80093ac <__exponent>
 800957e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009580:	1813      	adds	r3, r2, r0
 8009582:	2a01      	cmp	r2, #1
 8009584:	4681      	mov	r9, r0
 8009586:	6123      	str	r3, [r4, #16]
 8009588:	dc02      	bgt.n	8009590 <_printf_float+0x168>
 800958a:	6822      	ldr	r2, [r4, #0]
 800958c:	07d2      	lsls	r2, r2, #31
 800958e:	d501      	bpl.n	8009594 <_printf_float+0x16c>
 8009590:	3301      	adds	r3, #1
 8009592:	6123      	str	r3, [r4, #16]
 8009594:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009598:	2b00      	cmp	r3, #0
 800959a:	d09c      	beq.n	80094d6 <_printf_float+0xae>
 800959c:	232d      	movs	r3, #45	; 0x2d
 800959e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095a2:	e798      	b.n	80094d6 <_printf_float+0xae>
 80095a4:	9a06      	ldr	r2, [sp, #24]
 80095a6:	2a47      	cmp	r2, #71	; 0x47
 80095a8:	d1be      	bne.n	8009528 <_printf_float+0x100>
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1bc      	bne.n	8009528 <_printf_float+0x100>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e7b9      	b.n	8009526 <_printf_float+0xfe>
 80095b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80095b6:	d118      	bne.n	80095ea <_printf_float+0x1c2>
 80095b8:	2900      	cmp	r1, #0
 80095ba:	6863      	ldr	r3, [r4, #4]
 80095bc:	dd0b      	ble.n	80095d6 <_printf_float+0x1ae>
 80095be:	6121      	str	r1, [r4, #16]
 80095c0:	b913      	cbnz	r3, 80095c8 <_printf_float+0x1a0>
 80095c2:	6822      	ldr	r2, [r4, #0]
 80095c4:	07d0      	lsls	r0, r2, #31
 80095c6:	d502      	bpl.n	80095ce <_printf_float+0x1a6>
 80095c8:	3301      	adds	r3, #1
 80095ca:	440b      	add	r3, r1
 80095cc:	6123      	str	r3, [r4, #16]
 80095ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80095d0:	f04f 0900 	mov.w	r9, #0
 80095d4:	e7de      	b.n	8009594 <_printf_float+0x16c>
 80095d6:	b913      	cbnz	r3, 80095de <_printf_float+0x1b6>
 80095d8:	6822      	ldr	r2, [r4, #0]
 80095da:	07d2      	lsls	r2, r2, #31
 80095dc:	d501      	bpl.n	80095e2 <_printf_float+0x1ba>
 80095de:	3302      	adds	r3, #2
 80095e0:	e7f4      	b.n	80095cc <_printf_float+0x1a4>
 80095e2:	2301      	movs	r3, #1
 80095e4:	e7f2      	b.n	80095cc <_printf_float+0x1a4>
 80095e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80095ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ec:	4299      	cmp	r1, r3
 80095ee:	db05      	blt.n	80095fc <_printf_float+0x1d4>
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	6121      	str	r1, [r4, #16]
 80095f4:	07d8      	lsls	r0, r3, #31
 80095f6:	d5ea      	bpl.n	80095ce <_printf_float+0x1a6>
 80095f8:	1c4b      	adds	r3, r1, #1
 80095fa:	e7e7      	b.n	80095cc <_printf_float+0x1a4>
 80095fc:	2900      	cmp	r1, #0
 80095fe:	bfd4      	ite	le
 8009600:	f1c1 0202 	rsble	r2, r1, #2
 8009604:	2201      	movgt	r2, #1
 8009606:	4413      	add	r3, r2
 8009608:	e7e0      	b.n	80095cc <_printf_float+0x1a4>
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	055a      	lsls	r2, r3, #21
 800960e:	d407      	bmi.n	8009620 <_printf_float+0x1f8>
 8009610:	6923      	ldr	r3, [r4, #16]
 8009612:	4642      	mov	r2, r8
 8009614:	4631      	mov	r1, r6
 8009616:	4628      	mov	r0, r5
 8009618:	47b8      	blx	r7
 800961a:	3001      	adds	r0, #1
 800961c:	d12c      	bne.n	8009678 <_printf_float+0x250>
 800961e:	e764      	b.n	80094ea <_printf_float+0xc2>
 8009620:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009624:	f240 80e0 	bls.w	80097e8 <_printf_float+0x3c0>
 8009628:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800962c:	2200      	movs	r2, #0
 800962e:	2300      	movs	r3, #0
 8009630:	f7f7 fa54 	bl	8000adc <__aeabi_dcmpeq>
 8009634:	2800      	cmp	r0, #0
 8009636:	d034      	beq.n	80096a2 <_printf_float+0x27a>
 8009638:	4a37      	ldr	r2, [pc, #220]	; (8009718 <_printf_float+0x2f0>)
 800963a:	2301      	movs	r3, #1
 800963c:	4631      	mov	r1, r6
 800963e:	4628      	mov	r0, r5
 8009640:	47b8      	blx	r7
 8009642:	3001      	adds	r0, #1
 8009644:	f43f af51 	beq.w	80094ea <_printf_float+0xc2>
 8009648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800964c:	429a      	cmp	r2, r3
 800964e:	db02      	blt.n	8009656 <_printf_float+0x22e>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	07d8      	lsls	r0, r3, #31
 8009654:	d510      	bpl.n	8009678 <_printf_float+0x250>
 8009656:	ee18 3a10 	vmov	r3, s16
 800965a:	4652      	mov	r2, sl
 800965c:	4631      	mov	r1, r6
 800965e:	4628      	mov	r0, r5
 8009660:	47b8      	blx	r7
 8009662:	3001      	adds	r0, #1
 8009664:	f43f af41 	beq.w	80094ea <_printf_float+0xc2>
 8009668:	f04f 0800 	mov.w	r8, #0
 800966c:	f104 091a 	add.w	r9, r4, #26
 8009670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009672:	3b01      	subs	r3, #1
 8009674:	4543      	cmp	r3, r8
 8009676:	dc09      	bgt.n	800968c <_printf_float+0x264>
 8009678:	6823      	ldr	r3, [r4, #0]
 800967a:	079b      	lsls	r3, r3, #30
 800967c:	f100 8105 	bmi.w	800988a <_printf_float+0x462>
 8009680:	68e0      	ldr	r0, [r4, #12]
 8009682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009684:	4298      	cmp	r0, r3
 8009686:	bfb8      	it	lt
 8009688:	4618      	movlt	r0, r3
 800968a:	e730      	b.n	80094ee <_printf_float+0xc6>
 800968c:	2301      	movs	r3, #1
 800968e:	464a      	mov	r2, r9
 8009690:	4631      	mov	r1, r6
 8009692:	4628      	mov	r0, r5
 8009694:	47b8      	blx	r7
 8009696:	3001      	adds	r0, #1
 8009698:	f43f af27 	beq.w	80094ea <_printf_float+0xc2>
 800969c:	f108 0801 	add.w	r8, r8, #1
 80096a0:	e7e6      	b.n	8009670 <_printf_float+0x248>
 80096a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dc39      	bgt.n	800971c <_printf_float+0x2f4>
 80096a8:	4a1b      	ldr	r2, [pc, #108]	; (8009718 <_printf_float+0x2f0>)
 80096aa:	2301      	movs	r3, #1
 80096ac:	4631      	mov	r1, r6
 80096ae:	4628      	mov	r0, r5
 80096b0:	47b8      	blx	r7
 80096b2:	3001      	adds	r0, #1
 80096b4:	f43f af19 	beq.w	80094ea <_printf_float+0xc2>
 80096b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096bc:	4313      	orrs	r3, r2
 80096be:	d102      	bne.n	80096c6 <_printf_float+0x29e>
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	07d9      	lsls	r1, r3, #31
 80096c4:	d5d8      	bpl.n	8009678 <_printf_float+0x250>
 80096c6:	ee18 3a10 	vmov	r3, s16
 80096ca:	4652      	mov	r2, sl
 80096cc:	4631      	mov	r1, r6
 80096ce:	4628      	mov	r0, r5
 80096d0:	47b8      	blx	r7
 80096d2:	3001      	adds	r0, #1
 80096d4:	f43f af09 	beq.w	80094ea <_printf_float+0xc2>
 80096d8:	f04f 0900 	mov.w	r9, #0
 80096dc:	f104 0a1a 	add.w	sl, r4, #26
 80096e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e2:	425b      	negs	r3, r3
 80096e4:	454b      	cmp	r3, r9
 80096e6:	dc01      	bgt.n	80096ec <_printf_float+0x2c4>
 80096e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ea:	e792      	b.n	8009612 <_printf_float+0x1ea>
 80096ec:	2301      	movs	r3, #1
 80096ee:	4652      	mov	r2, sl
 80096f0:	4631      	mov	r1, r6
 80096f2:	4628      	mov	r0, r5
 80096f4:	47b8      	blx	r7
 80096f6:	3001      	adds	r0, #1
 80096f8:	f43f aef7 	beq.w	80094ea <_printf_float+0xc2>
 80096fc:	f109 0901 	add.w	r9, r9, #1
 8009700:	e7ee      	b.n	80096e0 <_printf_float+0x2b8>
 8009702:	bf00      	nop
 8009704:	7fefffff 	.word	0x7fefffff
 8009708:	0800ecb8 	.word	0x0800ecb8
 800970c:	0800ecbc 	.word	0x0800ecbc
 8009710:	0800ecc4 	.word	0x0800ecc4
 8009714:	0800ecc0 	.word	0x0800ecc0
 8009718:	0800f231 	.word	0x0800f231
 800971c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800971e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009720:	429a      	cmp	r2, r3
 8009722:	bfa8      	it	ge
 8009724:	461a      	movge	r2, r3
 8009726:	2a00      	cmp	r2, #0
 8009728:	4691      	mov	r9, r2
 800972a:	dc37      	bgt.n	800979c <_printf_float+0x374>
 800972c:	f04f 0b00 	mov.w	fp, #0
 8009730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009734:	f104 021a 	add.w	r2, r4, #26
 8009738:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800973a:	9305      	str	r3, [sp, #20]
 800973c:	eba3 0309 	sub.w	r3, r3, r9
 8009740:	455b      	cmp	r3, fp
 8009742:	dc33      	bgt.n	80097ac <_printf_float+0x384>
 8009744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009748:	429a      	cmp	r2, r3
 800974a:	db3b      	blt.n	80097c4 <_printf_float+0x39c>
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	07da      	lsls	r2, r3, #31
 8009750:	d438      	bmi.n	80097c4 <_printf_float+0x39c>
 8009752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009754:	9a05      	ldr	r2, [sp, #20]
 8009756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009758:	1a9a      	subs	r2, r3, r2
 800975a:	eba3 0901 	sub.w	r9, r3, r1
 800975e:	4591      	cmp	r9, r2
 8009760:	bfa8      	it	ge
 8009762:	4691      	movge	r9, r2
 8009764:	f1b9 0f00 	cmp.w	r9, #0
 8009768:	dc35      	bgt.n	80097d6 <_printf_float+0x3ae>
 800976a:	f04f 0800 	mov.w	r8, #0
 800976e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009772:	f104 0a1a 	add.w	sl, r4, #26
 8009776:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800977a:	1a9b      	subs	r3, r3, r2
 800977c:	eba3 0309 	sub.w	r3, r3, r9
 8009780:	4543      	cmp	r3, r8
 8009782:	f77f af79 	ble.w	8009678 <_printf_float+0x250>
 8009786:	2301      	movs	r3, #1
 8009788:	4652      	mov	r2, sl
 800978a:	4631      	mov	r1, r6
 800978c:	4628      	mov	r0, r5
 800978e:	47b8      	blx	r7
 8009790:	3001      	adds	r0, #1
 8009792:	f43f aeaa 	beq.w	80094ea <_printf_float+0xc2>
 8009796:	f108 0801 	add.w	r8, r8, #1
 800979a:	e7ec      	b.n	8009776 <_printf_float+0x34e>
 800979c:	4613      	mov	r3, r2
 800979e:	4631      	mov	r1, r6
 80097a0:	4642      	mov	r2, r8
 80097a2:	4628      	mov	r0, r5
 80097a4:	47b8      	blx	r7
 80097a6:	3001      	adds	r0, #1
 80097a8:	d1c0      	bne.n	800972c <_printf_float+0x304>
 80097aa:	e69e      	b.n	80094ea <_printf_float+0xc2>
 80097ac:	2301      	movs	r3, #1
 80097ae:	4631      	mov	r1, r6
 80097b0:	4628      	mov	r0, r5
 80097b2:	9205      	str	r2, [sp, #20]
 80097b4:	47b8      	blx	r7
 80097b6:	3001      	adds	r0, #1
 80097b8:	f43f ae97 	beq.w	80094ea <_printf_float+0xc2>
 80097bc:	9a05      	ldr	r2, [sp, #20]
 80097be:	f10b 0b01 	add.w	fp, fp, #1
 80097c2:	e7b9      	b.n	8009738 <_printf_float+0x310>
 80097c4:	ee18 3a10 	vmov	r3, s16
 80097c8:	4652      	mov	r2, sl
 80097ca:	4631      	mov	r1, r6
 80097cc:	4628      	mov	r0, r5
 80097ce:	47b8      	blx	r7
 80097d0:	3001      	adds	r0, #1
 80097d2:	d1be      	bne.n	8009752 <_printf_float+0x32a>
 80097d4:	e689      	b.n	80094ea <_printf_float+0xc2>
 80097d6:	9a05      	ldr	r2, [sp, #20]
 80097d8:	464b      	mov	r3, r9
 80097da:	4442      	add	r2, r8
 80097dc:	4631      	mov	r1, r6
 80097de:	4628      	mov	r0, r5
 80097e0:	47b8      	blx	r7
 80097e2:	3001      	adds	r0, #1
 80097e4:	d1c1      	bne.n	800976a <_printf_float+0x342>
 80097e6:	e680      	b.n	80094ea <_printf_float+0xc2>
 80097e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097ea:	2a01      	cmp	r2, #1
 80097ec:	dc01      	bgt.n	80097f2 <_printf_float+0x3ca>
 80097ee:	07db      	lsls	r3, r3, #31
 80097f0:	d538      	bpl.n	8009864 <_printf_float+0x43c>
 80097f2:	2301      	movs	r3, #1
 80097f4:	4642      	mov	r2, r8
 80097f6:	4631      	mov	r1, r6
 80097f8:	4628      	mov	r0, r5
 80097fa:	47b8      	blx	r7
 80097fc:	3001      	adds	r0, #1
 80097fe:	f43f ae74 	beq.w	80094ea <_printf_float+0xc2>
 8009802:	ee18 3a10 	vmov	r3, s16
 8009806:	4652      	mov	r2, sl
 8009808:	4631      	mov	r1, r6
 800980a:	4628      	mov	r0, r5
 800980c:	47b8      	blx	r7
 800980e:	3001      	adds	r0, #1
 8009810:	f43f ae6b 	beq.w	80094ea <_printf_float+0xc2>
 8009814:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009818:	2200      	movs	r2, #0
 800981a:	2300      	movs	r3, #0
 800981c:	f7f7 f95e 	bl	8000adc <__aeabi_dcmpeq>
 8009820:	b9d8      	cbnz	r0, 800985a <_printf_float+0x432>
 8009822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009824:	f108 0201 	add.w	r2, r8, #1
 8009828:	3b01      	subs	r3, #1
 800982a:	4631      	mov	r1, r6
 800982c:	4628      	mov	r0, r5
 800982e:	47b8      	blx	r7
 8009830:	3001      	adds	r0, #1
 8009832:	d10e      	bne.n	8009852 <_printf_float+0x42a>
 8009834:	e659      	b.n	80094ea <_printf_float+0xc2>
 8009836:	2301      	movs	r3, #1
 8009838:	4652      	mov	r2, sl
 800983a:	4631      	mov	r1, r6
 800983c:	4628      	mov	r0, r5
 800983e:	47b8      	blx	r7
 8009840:	3001      	adds	r0, #1
 8009842:	f43f ae52 	beq.w	80094ea <_printf_float+0xc2>
 8009846:	f108 0801 	add.w	r8, r8, #1
 800984a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800984c:	3b01      	subs	r3, #1
 800984e:	4543      	cmp	r3, r8
 8009850:	dcf1      	bgt.n	8009836 <_printf_float+0x40e>
 8009852:	464b      	mov	r3, r9
 8009854:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009858:	e6dc      	b.n	8009614 <_printf_float+0x1ec>
 800985a:	f04f 0800 	mov.w	r8, #0
 800985e:	f104 0a1a 	add.w	sl, r4, #26
 8009862:	e7f2      	b.n	800984a <_printf_float+0x422>
 8009864:	2301      	movs	r3, #1
 8009866:	4642      	mov	r2, r8
 8009868:	e7df      	b.n	800982a <_printf_float+0x402>
 800986a:	2301      	movs	r3, #1
 800986c:	464a      	mov	r2, r9
 800986e:	4631      	mov	r1, r6
 8009870:	4628      	mov	r0, r5
 8009872:	47b8      	blx	r7
 8009874:	3001      	adds	r0, #1
 8009876:	f43f ae38 	beq.w	80094ea <_printf_float+0xc2>
 800987a:	f108 0801 	add.w	r8, r8, #1
 800987e:	68e3      	ldr	r3, [r4, #12]
 8009880:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009882:	1a5b      	subs	r3, r3, r1
 8009884:	4543      	cmp	r3, r8
 8009886:	dcf0      	bgt.n	800986a <_printf_float+0x442>
 8009888:	e6fa      	b.n	8009680 <_printf_float+0x258>
 800988a:	f04f 0800 	mov.w	r8, #0
 800988e:	f104 0919 	add.w	r9, r4, #25
 8009892:	e7f4      	b.n	800987e <_printf_float+0x456>

08009894 <_printf_common>:
 8009894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009898:	4616      	mov	r6, r2
 800989a:	4699      	mov	r9, r3
 800989c:	688a      	ldr	r2, [r1, #8]
 800989e:	690b      	ldr	r3, [r1, #16]
 80098a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098a4:	4293      	cmp	r3, r2
 80098a6:	bfb8      	it	lt
 80098a8:	4613      	movlt	r3, r2
 80098aa:	6033      	str	r3, [r6, #0]
 80098ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098b0:	4607      	mov	r7, r0
 80098b2:	460c      	mov	r4, r1
 80098b4:	b10a      	cbz	r2, 80098ba <_printf_common+0x26>
 80098b6:	3301      	adds	r3, #1
 80098b8:	6033      	str	r3, [r6, #0]
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	0699      	lsls	r1, r3, #26
 80098be:	bf42      	ittt	mi
 80098c0:	6833      	ldrmi	r3, [r6, #0]
 80098c2:	3302      	addmi	r3, #2
 80098c4:	6033      	strmi	r3, [r6, #0]
 80098c6:	6825      	ldr	r5, [r4, #0]
 80098c8:	f015 0506 	ands.w	r5, r5, #6
 80098cc:	d106      	bne.n	80098dc <_printf_common+0x48>
 80098ce:	f104 0a19 	add.w	sl, r4, #25
 80098d2:	68e3      	ldr	r3, [r4, #12]
 80098d4:	6832      	ldr	r2, [r6, #0]
 80098d6:	1a9b      	subs	r3, r3, r2
 80098d8:	42ab      	cmp	r3, r5
 80098da:	dc26      	bgt.n	800992a <_printf_common+0x96>
 80098dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098e0:	1e13      	subs	r3, r2, #0
 80098e2:	6822      	ldr	r2, [r4, #0]
 80098e4:	bf18      	it	ne
 80098e6:	2301      	movne	r3, #1
 80098e8:	0692      	lsls	r2, r2, #26
 80098ea:	d42b      	bmi.n	8009944 <_printf_common+0xb0>
 80098ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098f0:	4649      	mov	r1, r9
 80098f2:	4638      	mov	r0, r7
 80098f4:	47c0      	blx	r8
 80098f6:	3001      	adds	r0, #1
 80098f8:	d01e      	beq.n	8009938 <_printf_common+0xa4>
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	68e5      	ldr	r5, [r4, #12]
 80098fe:	6832      	ldr	r2, [r6, #0]
 8009900:	f003 0306 	and.w	r3, r3, #6
 8009904:	2b04      	cmp	r3, #4
 8009906:	bf08      	it	eq
 8009908:	1aad      	subeq	r5, r5, r2
 800990a:	68a3      	ldr	r3, [r4, #8]
 800990c:	6922      	ldr	r2, [r4, #16]
 800990e:	bf0c      	ite	eq
 8009910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009914:	2500      	movne	r5, #0
 8009916:	4293      	cmp	r3, r2
 8009918:	bfc4      	itt	gt
 800991a:	1a9b      	subgt	r3, r3, r2
 800991c:	18ed      	addgt	r5, r5, r3
 800991e:	2600      	movs	r6, #0
 8009920:	341a      	adds	r4, #26
 8009922:	42b5      	cmp	r5, r6
 8009924:	d11a      	bne.n	800995c <_printf_common+0xc8>
 8009926:	2000      	movs	r0, #0
 8009928:	e008      	b.n	800993c <_printf_common+0xa8>
 800992a:	2301      	movs	r3, #1
 800992c:	4652      	mov	r2, sl
 800992e:	4649      	mov	r1, r9
 8009930:	4638      	mov	r0, r7
 8009932:	47c0      	blx	r8
 8009934:	3001      	adds	r0, #1
 8009936:	d103      	bne.n	8009940 <_printf_common+0xac>
 8009938:	f04f 30ff 	mov.w	r0, #4294967295
 800993c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009940:	3501      	adds	r5, #1
 8009942:	e7c6      	b.n	80098d2 <_printf_common+0x3e>
 8009944:	18e1      	adds	r1, r4, r3
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	2030      	movs	r0, #48	; 0x30
 800994a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800994e:	4422      	add	r2, r4
 8009950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009958:	3302      	adds	r3, #2
 800995a:	e7c7      	b.n	80098ec <_printf_common+0x58>
 800995c:	2301      	movs	r3, #1
 800995e:	4622      	mov	r2, r4
 8009960:	4649      	mov	r1, r9
 8009962:	4638      	mov	r0, r7
 8009964:	47c0      	blx	r8
 8009966:	3001      	adds	r0, #1
 8009968:	d0e6      	beq.n	8009938 <_printf_common+0xa4>
 800996a:	3601      	adds	r6, #1
 800996c:	e7d9      	b.n	8009922 <_printf_common+0x8e>
	...

08009970 <_printf_i>:
 8009970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009974:	7e0f      	ldrb	r7, [r1, #24]
 8009976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009978:	2f78      	cmp	r7, #120	; 0x78
 800997a:	4691      	mov	r9, r2
 800997c:	4680      	mov	r8, r0
 800997e:	460c      	mov	r4, r1
 8009980:	469a      	mov	sl, r3
 8009982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009986:	d807      	bhi.n	8009998 <_printf_i+0x28>
 8009988:	2f62      	cmp	r7, #98	; 0x62
 800998a:	d80a      	bhi.n	80099a2 <_printf_i+0x32>
 800998c:	2f00      	cmp	r7, #0
 800998e:	f000 80d8 	beq.w	8009b42 <_printf_i+0x1d2>
 8009992:	2f58      	cmp	r7, #88	; 0x58
 8009994:	f000 80a3 	beq.w	8009ade <_printf_i+0x16e>
 8009998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800999c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099a0:	e03a      	b.n	8009a18 <_printf_i+0xa8>
 80099a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099a6:	2b15      	cmp	r3, #21
 80099a8:	d8f6      	bhi.n	8009998 <_printf_i+0x28>
 80099aa:	a101      	add	r1, pc, #4	; (adr r1, 80099b0 <_printf_i+0x40>)
 80099ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099b0:	08009a09 	.word	0x08009a09
 80099b4:	08009a1d 	.word	0x08009a1d
 80099b8:	08009999 	.word	0x08009999
 80099bc:	08009999 	.word	0x08009999
 80099c0:	08009999 	.word	0x08009999
 80099c4:	08009999 	.word	0x08009999
 80099c8:	08009a1d 	.word	0x08009a1d
 80099cc:	08009999 	.word	0x08009999
 80099d0:	08009999 	.word	0x08009999
 80099d4:	08009999 	.word	0x08009999
 80099d8:	08009999 	.word	0x08009999
 80099dc:	08009b29 	.word	0x08009b29
 80099e0:	08009a4d 	.word	0x08009a4d
 80099e4:	08009b0b 	.word	0x08009b0b
 80099e8:	08009999 	.word	0x08009999
 80099ec:	08009999 	.word	0x08009999
 80099f0:	08009b4b 	.word	0x08009b4b
 80099f4:	08009999 	.word	0x08009999
 80099f8:	08009a4d 	.word	0x08009a4d
 80099fc:	08009999 	.word	0x08009999
 8009a00:	08009999 	.word	0x08009999
 8009a04:	08009b13 	.word	0x08009b13
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	1d1a      	adds	r2, r3, #4
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	602a      	str	r2, [r5, #0]
 8009a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e0a3      	b.n	8009b64 <_printf_i+0x1f4>
 8009a1c:	6820      	ldr	r0, [r4, #0]
 8009a1e:	6829      	ldr	r1, [r5, #0]
 8009a20:	0606      	lsls	r6, r0, #24
 8009a22:	f101 0304 	add.w	r3, r1, #4
 8009a26:	d50a      	bpl.n	8009a3e <_printf_i+0xce>
 8009a28:	680e      	ldr	r6, [r1, #0]
 8009a2a:	602b      	str	r3, [r5, #0]
 8009a2c:	2e00      	cmp	r6, #0
 8009a2e:	da03      	bge.n	8009a38 <_printf_i+0xc8>
 8009a30:	232d      	movs	r3, #45	; 0x2d
 8009a32:	4276      	negs	r6, r6
 8009a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a38:	485e      	ldr	r0, [pc, #376]	; (8009bb4 <_printf_i+0x244>)
 8009a3a:	230a      	movs	r3, #10
 8009a3c:	e019      	b.n	8009a72 <_printf_i+0x102>
 8009a3e:	680e      	ldr	r6, [r1, #0]
 8009a40:	602b      	str	r3, [r5, #0]
 8009a42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a46:	bf18      	it	ne
 8009a48:	b236      	sxthne	r6, r6
 8009a4a:	e7ef      	b.n	8009a2c <_printf_i+0xbc>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	6820      	ldr	r0, [r4, #0]
 8009a50:	1d19      	adds	r1, r3, #4
 8009a52:	6029      	str	r1, [r5, #0]
 8009a54:	0601      	lsls	r1, r0, #24
 8009a56:	d501      	bpl.n	8009a5c <_printf_i+0xec>
 8009a58:	681e      	ldr	r6, [r3, #0]
 8009a5a:	e002      	b.n	8009a62 <_printf_i+0xf2>
 8009a5c:	0646      	lsls	r6, r0, #25
 8009a5e:	d5fb      	bpl.n	8009a58 <_printf_i+0xe8>
 8009a60:	881e      	ldrh	r6, [r3, #0]
 8009a62:	4854      	ldr	r0, [pc, #336]	; (8009bb4 <_printf_i+0x244>)
 8009a64:	2f6f      	cmp	r7, #111	; 0x6f
 8009a66:	bf0c      	ite	eq
 8009a68:	2308      	moveq	r3, #8
 8009a6a:	230a      	movne	r3, #10
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a72:	6865      	ldr	r5, [r4, #4]
 8009a74:	60a5      	str	r5, [r4, #8]
 8009a76:	2d00      	cmp	r5, #0
 8009a78:	bfa2      	ittt	ge
 8009a7a:	6821      	ldrge	r1, [r4, #0]
 8009a7c:	f021 0104 	bicge.w	r1, r1, #4
 8009a80:	6021      	strge	r1, [r4, #0]
 8009a82:	b90e      	cbnz	r6, 8009a88 <_printf_i+0x118>
 8009a84:	2d00      	cmp	r5, #0
 8009a86:	d04d      	beq.n	8009b24 <_printf_i+0x1b4>
 8009a88:	4615      	mov	r5, r2
 8009a8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a8e:	fb03 6711 	mls	r7, r3, r1, r6
 8009a92:	5dc7      	ldrb	r7, [r0, r7]
 8009a94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a98:	4637      	mov	r7, r6
 8009a9a:	42bb      	cmp	r3, r7
 8009a9c:	460e      	mov	r6, r1
 8009a9e:	d9f4      	bls.n	8009a8a <_printf_i+0x11a>
 8009aa0:	2b08      	cmp	r3, #8
 8009aa2:	d10b      	bne.n	8009abc <_printf_i+0x14c>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	07de      	lsls	r6, r3, #31
 8009aa8:	d508      	bpl.n	8009abc <_printf_i+0x14c>
 8009aaa:	6923      	ldr	r3, [r4, #16]
 8009aac:	6861      	ldr	r1, [r4, #4]
 8009aae:	4299      	cmp	r1, r3
 8009ab0:	bfde      	ittt	le
 8009ab2:	2330      	movle	r3, #48	; 0x30
 8009ab4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ab8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009abc:	1b52      	subs	r2, r2, r5
 8009abe:	6122      	str	r2, [r4, #16]
 8009ac0:	f8cd a000 	str.w	sl, [sp]
 8009ac4:	464b      	mov	r3, r9
 8009ac6:	aa03      	add	r2, sp, #12
 8009ac8:	4621      	mov	r1, r4
 8009aca:	4640      	mov	r0, r8
 8009acc:	f7ff fee2 	bl	8009894 <_printf_common>
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	d14c      	bne.n	8009b6e <_printf_i+0x1fe>
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad8:	b004      	add	sp, #16
 8009ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ade:	4835      	ldr	r0, [pc, #212]	; (8009bb4 <_printf_i+0x244>)
 8009ae0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ae4:	6829      	ldr	r1, [r5, #0]
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009aec:	6029      	str	r1, [r5, #0]
 8009aee:	061d      	lsls	r5, r3, #24
 8009af0:	d514      	bpl.n	8009b1c <_printf_i+0x1ac>
 8009af2:	07df      	lsls	r7, r3, #31
 8009af4:	bf44      	itt	mi
 8009af6:	f043 0320 	orrmi.w	r3, r3, #32
 8009afa:	6023      	strmi	r3, [r4, #0]
 8009afc:	b91e      	cbnz	r6, 8009b06 <_printf_i+0x196>
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	f023 0320 	bic.w	r3, r3, #32
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	2310      	movs	r3, #16
 8009b08:	e7b0      	b.n	8009a6c <_printf_i+0xfc>
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	f043 0320 	orr.w	r3, r3, #32
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	2378      	movs	r3, #120	; 0x78
 8009b14:	4828      	ldr	r0, [pc, #160]	; (8009bb8 <_printf_i+0x248>)
 8009b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b1a:	e7e3      	b.n	8009ae4 <_printf_i+0x174>
 8009b1c:	0659      	lsls	r1, r3, #25
 8009b1e:	bf48      	it	mi
 8009b20:	b2b6      	uxthmi	r6, r6
 8009b22:	e7e6      	b.n	8009af2 <_printf_i+0x182>
 8009b24:	4615      	mov	r5, r2
 8009b26:	e7bb      	b.n	8009aa0 <_printf_i+0x130>
 8009b28:	682b      	ldr	r3, [r5, #0]
 8009b2a:	6826      	ldr	r6, [r4, #0]
 8009b2c:	6961      	ldr	r1, [r4, #20]
 8009b2e:	1d18      	adds	r0, r3, #4
 8009b30:	6028      	str	r0, [r5, #0]
 8009b32:	0635      	lsls	r5, r6, #24
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	d501      	bpl.n	8009b3c <_printf_i+0x1cc>
 8009b38:	6019      	str	r1, [r3, #0]
 8009b3a:	e002      	b.n	8009b42 <_printf_i+0x1d2>
 8009b3c:	0670      	lsls	r0, r6, #25
 8009b3e:	d5fb      	bpl.n	8009b38 <_printf_i+0x1c8>
 8009b40:	8019      	strh	r1, [r3, #0]
 8009b42:	2300      	movs	r3, #0
 8009b44:	6123      	str	r3, [r4, #16]
 8009b46:	4615      	mov	r5, r2
 8009b48:	e7ba      	b.n	8009ac0 <_printf_i+0x150>
 8009b4a:	682b      	ldr	r3, [r5, #0]
 8009b4c:	1d1a      	adds	r2, r3, #4
 8009b4e:	602a      	str	r2, [r5, #0]
 8009b50:	681d      	ldr	r5, [r3, #0]
 8009b52:	6862      	ldr	r2, [r4, #4]
 8009b54:	2100      	movs	r1, #0
 8009b56:	4628      	mov	r0, r5
 8009b58:	f7f6 fb42 	bl	80001e0 <memchr>
 8009b5c:	b108      	cbz	r0, 8009b62 <_printf_i+0x1f2>
 8009b5e:	1b40      	subs	r0, r0, r5
 8009b60:	6060      	str	r0, [r4, #4]
 8009b62:	6863      	ldr	r3, [r4, #4]
 8009b64:	6123      	str	r3, [r4, #16]
 8009b66:	2300      	movs	r3, #0
 8009b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b6c:	e7a8      	b.n	8009ac0 <_printf_i+0x150>
 8009b6e:	6923      	ldr	r3, [r4, #16]
 8009b70:	462a      	mov	r2, r5
 8009b72:	4649      	mov	r1, r9
 8009b74:	4640      	mov	r0, r8
 8009b76:	47d0      	blx	sl
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d0ab      	beq.n	8009ad4 <_printf_i+0x164>
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	079b      	lsls	r3, r3, #30
 8009b80:	d413      	bmi.n	8009baa <_printf_i+0x23a>
 8009b82:	68e0      	ldr	r0, [r4, #12]
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	4298      	cmp	r0, r3
 8009b88:	bfb8      	it	lt
 8009b8a:	4618      	movlt	r0, r3
 8009b8c:	e7a4      	b.n	8009ad8 <_printf_i+0x168>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	4632      	mov	r2, r6
 8009b92:	4649      	mov	r1, r9
 8009b94:	4640      	mov	r0, r8
 8009b96:	47d0      	blx	sl
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d09b      	beq.n	8009ad4 <_printf_i+0x164>
 8009b9c:	3501      	adds	r5, #1
 8009b9e:	68e3      	ldr	r3, [r4, #12]
 8009ba0:	9903      	ldr	r1, [sp, #12]
 8009ba2:	1a5b      	subs	r3, r3, r1
 8009ba4:	42ab      	cmp	r3, r5
 8009ba6:	dcf2      	bgt.n	8009b8e <_printf_i+0x21e>
 8009ba8:	e7eb      	b.n	8009b82 <_printf_i+0x212>
 8009baa:	2500      	movs	r5, #0
 8009bac:	f104 0619 	add.w	r6, r4, #25
 8009bb0:	e7f5      	b.n	8009b9e <_printf_i+0x22e>
 8009bb2:	bf00      	nop
 8009bb4:	0800ecc8 	.word	0x0800ecc8
 8009bb8:	0800ecd9 	.word	0x0800ecd9

08009bbc <_scanf_float>:
 8009bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc0:	b087      	sub	sp, #28
 8009bc2:	4617      	mov	r7, r2
 8009bc4:	9303      	str	r3, [sp, #12]
 8009bc6:	688b      	ldr	r3, [r1, #8]
 8009bc8:	1e5a      	subs	r2, r3, #1
 8009bca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009bce:	bf83      	ittte	hi
 8009bd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009bd4:	195b      	addhi	r3, r3, r5
 8009bd6:	9302      	strhi	r3, [sp, #8]
 8009bd8:	2300      	movls	r3, #0
 8009bda:	bf86      	itte	hi
 8009bdc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009be0:	608b      	strhi	r3, [r1, #8]
 8009be2:	9302      	strls	r3, [sp, #8]
 8009be4:	680b      	ldr	r3, [r1, #0]
 8009be6:	468b      	mov	fp, r1
 8009be8:	2500      	movs	r5, #0
 8009bea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009bee:	f84b 3b1c 	str.w	r3, [fp], #28
 8009bf2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009bf6:	4680      	mov	r8, r0
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	465e      	mov	r6, fp
 8009bfc:	46aa      	mov	sl, r5
 8009bfe:	46a9      	mov	r9, r5
 8009c00:	9501      	str	r5, [sp, #4]
 8009c02:	68a2      	ldr	r2, [r4, #8]
 8009c04:	b152      	cbz	r2, 8009c1c <_scanf_float+0x60>
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	2b4e      	cmp	r3, #78	; 0x4e
 8009c0c:	d864      	bhi.n	8009cd8 <_scanf_float+0x11c>
 8009c0e:	2b40      	cmp	r3, #64	; 0x40
 8009c10:	d83c      	bhi.n	8009c8c <_scanf_float+0xd0>
 8009c12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009c16:	b2c8      	uxtb	r0, r1
 8009c18:	280e      	cmp	r0, #14
 8009c1a:	d93a      	bls.n	8009c92 <_scanf_float+0xd6>
 8009c1c:	f1b9 0f00 	cmp.w	r9, #0
 8009c20:	d003      	beq.n	8009c2a <_scanf_float+0x6e>
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c2e:	f1ba 0f01 	cmp.w	sl, #1
 8009c32:	f200 8113 	bhi.w	8009e5c <_scanf_float+0x2a0>
 8009c36:	455e      	cmp	r6, fp
 8009c38:	f200 8105 	bhi.w	8009e46 <_scanf_float+0x28a>
 8009c3c:	2501      	movs	r5, #1
 8009c3e:	4628      	mov	r0, r5
 8009c40:	b007      	add	sp, #28
 8009c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009c4a:	2a0d      	cmp	r2, #13
 8009c4c:	d8e6      	bhi.n	8009c1c <_scanf_float+0x60>
 8009c4e:	a101      	add	r1, pc, #4	; (adr r1, 8009c54 <_scanf_float+0x98>)
 8009c50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009c54:	08009d93 	.word	0x08009d93
 8009c58:	08009c1d 	.word	0x08009c1d
 8009c5c:	08009c1d 	.word	0x08009c1d
 8009c60:	08009c1d 	.word	0x08009c1d
 8009c64:	08009df3 	.word	0x08009df3
 8009c68:	08009dcb 	.word	0x08009dcb
 8009c6c:	08009c1d 	.word	0x08009c1d
 8009c70:	08009c1d 	.word	0x08009c1d
 8009c74:	08009da1 	.word	0x08009da1
 8009c78:	08009c1d 	.word	0x08009c1d
 8009c7c:	08009c1d 	.word	0x08009c1d
 8009c80:	08009c1d 	.word	0x08009c1d
 8009c84:	08009c1d 	.word	0x08009c1d
 8009c88:	08009d59 	.word	0x08009d59
 8009c8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009c90:	e7db      	b.n	8009c4a <_scanf_float+0x8e>
 8009c92:	290e      	cmp	r1, #14
 8009c94:	d8c2      	bhi.n	8009c1c <_scanf_float+0x60>
 8009c96:	a001      	add	r0, pc, #4	; (adr r0, 8009c9c <_scanf_float+0xe0>)
 8009c98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009c9c:	08009d4b 	.word	0x08009d4b
 8009ca0:	08009c1d 	.word	0x08009c1d
 8009ca4:	08009d4b 	.word	0x08009d4b
 8009ca8:	08009ddf 	.word	0x08009ddf
 8009cac:	08009c1d 	.word	0x08009c1d
 8009cb0:	08009cf9 	.word	0x08009cf9
 8009cb4:	08009d35 	.word	0x08009d35
 8009cb8:	08009d35 	.word	0x08009d35
 8009cbc:	08009d35 	.word	0x08009d35
 8009cc0:	08009d35 	.word	0x08009d35
 8009cc4:	08009d35 	.word	0x08009d35
 8009cc8:	08009d35 	.word	0x08009d35
 8009ccc:	08009d35 	.word	0x08009d35
 8009cd0:	08009d35 	.word	0x08009d35
 8009cd4:	08009d35 	.word	0x08009d35
 8009cd8:	2b6e      	cmp	r3, #110	; 0x6e
 8009cda:	d809      	bhi.n	8009cf0 <_scanf_float+0x134>
 8009cdc:	2b60      	cmp	r3, #96	; 0x60
 8009cde:	d8b2      	bhi.n	8009c46 <_scanf_float+0x8a>
 8009ce0:	2b54      	cmp	r3, #84	; 0x54
 8009ce2:	d077      	beq.n	8009dd4 <_scanf_float+0x218>
 8009ce4:	2b59      	cmp	r3, #89	; 0x59
 8009ce6:	d199      	bne.n	8009c1c <_scanf_float+0x60>
 8009ce8:	2d07      	cmp	r5, #7
 8009cea:	d197      	bne.n	8009c1c <_scanf_float+0x60>
 8009cec:	2508      	movs	r5, #8
 8009cee:	e029      	b.n	8009d44 <_scanf_float+0x188>
 8009cf0:	2b74      	cmp	r3, #116	; 0x74
 8009cf2:	d06f      	beq.n	8009dd4 <_scanf_float+0x218>
 8009cf4:	2b79      	cmp	r3, #121	; 0x79
 8009cf6:	e7f6      	b.n	8009ce6 <_scanf_float+0x12a>
 8009cf8:	6821      	ldr	r1, [r4, #0]
 8009cfa:	05c8      	lsls	r0, r1, #23
 8009cfc:	d51a      	bpl.n	8009d34 <_scanf_float+0x178>
 8009cfe:	9b02      	ldr	r3, [sp, #8]
 8009d00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009d04:	6021      	str	r1, [r4, #0]
 8009d06:	f109 0901 	add.w	r9, r9, #1
 8009d0a:	b11b      	cbz	r3, 8009d14 <_scanf_float+0x158>
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	3201      	adds	r2, #1
 8009d10:	9302      	str	r3, [sp, #8]
 8009d12:	60a2      	str	r2, [r4, #8]
 8009d14:	68a3      	ldr	r3, [r4, #8]
 8009d16:	3b01      	subs	r3, #1
 8009d18:	60a3      	str	r3, [r4, #8]
 8009d1a:	6923      	ldr	r3, [r4, #16]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	6123      	str	r3, [r4, #16]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3b01      	subs	r3, #1
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	607b      	str	r3, [r7, #4]
 8009d28:	f340 8084 	ble.w	8009e34 <_scanf_float+0x278>
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	603b      	str	r3, [r7, #0]
 8009d32:	e766      	b.n	8009c02 <_scanf_float+0x46>
 8009d34:	eb1a 0f05 	cmn.w	sl, r5
 8009d38:	f47f af70 	bne.w	8009c1c <_scanf_float+0x60>
 8009d3c:	6822      	ldr	r2, [r4, #0]
 8009d3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009d42:	6022      	str	r2, [r4, #0]
 8009d44:	f806 3b01 	strb.w	r3, [r6], #1
 8009d48:	e7e4      	b.n	8009d14 <_scanf_float+0x158>
 8009d4a:	6822      	ldr	r2, [r4, #0]
 8009d4c:	0610      	lsls	r0, r2, #24
 8009d4e:	f57f af65 	bpl.w	8009c1c <_scanf_float+0x60>
 8009d52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d56:	e7f4      	b.n	8009d42 <_scanf_float+0x186>
 8009d58:	f1ba 0f00 	cmp.w	sl, #0
 8009d5c:	d10e      	bne.n	8009d7c <_scanf_float+0x1c0>
 8009d5e:	f1b9 0f00 	cmp.w	r9, #0
 8009d62:	d10e      	bne.n	8009d82 <_scanf_float+0x1c6>
 8009d64:	6822      	ldr	r2, [r4, #0]
 8009d66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009d6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009d6e:	d108      	bne.n	8009d82 <_scanf_float+0x1c6>
 8009d70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009d74:	6022      	str	r2, [r4, #0]
 8009d76:	f04f 0a01 	mov.w	sl, #1
 8009d7a:	e7e3      	b.n	8009d44 <_scanf_float+0x188>
 8009d7c:	f1ba 0f02 	cmp.w	sl, #2
 8009d80:	d055      	beq.n	8009e2e <_scanf_float+0x272>
 8009d82:	2d01      	cmp	r5, #1
 8009d84:	d002      	beq.n	8009d8c <_scanf_float+0x1d0>
 8009d86:	2d04      	cmp	r5, #4
 8009d88:	f47f af48 	bne.w	8009c1c <_scanf_float+0x60>
 8009d8c:	3501      	adds	r5, #1
 8009d8e:	b2ed      	uxtb	r5, r5
 8009d90:	e7d8      	b.n	8009d44 <_scanf_float+0x188>
 8009d92:	f1ba 0f01 	cmp.w	sl, #1
 8009d96:	f47f af41 	bne.w	8009c1c <_scanf_float+0x60>
 8009d9a:	f04f 0a02 	mov.w	sl, #2
 8009d9e:	e7d1      	b.n	8009d44 <_scanf_float+0x188>
 8009da0:	b97d      	cbnz	r5, 8009dc2 <_scanf_float+0x206>
 8009da2:	f1b9 0f00 	cmp.w	r9, #0
 8009da6:	f47f af3c 	bne.w	8009c22 <_scanf_float+0x66>
 8009daa:	6822      	ldr	r2, [r4, #0]
 8009dac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009db0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009db4:	f47f af39 	bne.w	8009c2a <_scanf_float+0x6e>
 8009db8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009dbc:	6022      	str	r2, [r4, #0]
 8009dbe:	2501      	movs	r5, #1
 8009dc0:	e7c0      	b.n	8009d44 <_scanf_float+0x188>
 8009dc2:	2d03      	cmp	r5, #3
 8009dc4:	d0e2      	beq.n	8009d8c <_scanf_float+0x1d0>
 8009dc6:	2d05      	cmp	r5, #5
 8009dc8:	e7de      	b.n	8009d88 <_scanf_float+0x1cc>
 8009dca:	2d02      	cmp	r5, #2
 8009dcc:	f47f af26 	bne.w	8009c1c <_scanf_float+0x60>
 8009dd0:	2503      	movs	r5, #3
 8009dd2:	e7b7      	b.n	8009d44 <_scanf_float+0x188>
 8009dd4:	2d06      	cmp	r5, #6
 8009dd6:	f47f af21 	bne.w	8009c1c <_scanf_float+0x60>
 8009dda:	2507      	movs	r5, #7
 8009ddc:	e7b2      	b.n	8009d44 <_scanf_float+0x188>
 8009dde:	6822      	ldr	r2, [r4, #0]
 8009de0:	0591      	lsls	r1, r2, #22
 8009de2:	f57f af1b 	bpl.w	8009c1c <_scanf_float+0x60>
 8009de6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009dea:	6022      	str	r2, [r4, #0]
 8009dec:	f8cd 9004 	str.w	r9, [sp, #4]
 8009df0:	e7a8      	b.n	8009d44 <_scanf_float+0x188>
 8009df2:	6822      	ldr	r2, [r4, #0]
 8009df4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009df8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009dfc:	d006      	beq.n	8009e0c <_scanf_float+0x250>
 8009dfe:	0550      	lsls	r0, r2, #21
 8009e00:	f57f af0c 	bpl.w	8009c1c <_scanf_float+0x60>
 8009e04:	f1b9 0f00 	cmp.w	r9, #0
 8009e08:	f43f af0f 	beq.w	8009c2a <_scanf_float+0x6e>
 8009e0c:	0591      	lsls	r1, r2, #22
 8009e0e:	bf58      	it	pl
 8009e10:	9901      	ldrpl	r1, [sp, #4]
 8009e12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e16:	bf58      	it	pl
 8009e18:	eba9 0101 	subpl.w	r1, r9, r1
 8009e1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009e20:	bf58      	it	pl
 8009e22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009e26:	6022      	str	r2, [r4, #0]
 8009e28:	f04f 0900 	mov.w	r9, #0
 8009e2c:	e78a      	b.n	8009d44 <_scanf_float+0x188>
 8009e2e:	f04f 0a03 	mov.w	sl, #3
 8009e32:	e787      	b.n	8009d44 <_scanf_float+0x188>
 8009e34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009e38:	4639      	mov	r1, r7
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	4798      	blx	r3
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	f43f aedf 	beq.w	8009c02 <_scanf_float+0x46>
 8009e44:	e6ea      	b.n	8009c1c <_scanf_float+0x60>
 8009e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e4e:	463a      	mov	r2, r7
 8009e50:	4640      	mov	r0, r8
 8009e52:	4798      	blx	r3
 8009e54:	6923      	ldr	r3, [r4, #16]
 8009e56:	3b01      	subs	r3, #1
 8009e58:	6123      	str	r3, [r4, #16]
 8009e5a:	e6ec      	b.n	8009c36 <_scanf_float+0x7a>
 8009e5c:	1e6b      	subs	r3, r5, #1
 8009e5e:	2b06      	cmp	r3, #6
 8009e60:	d825      	bhi.n	8009eae <_scanf_float+0x2f2>
 8009e62:	2d02      	cmp	r5, #2
 8009e64:	d836      	bhi.n	8009ed4 <_scanf_float+0x318>
 8009e66:	455e      	cmp	r6, fp
 8009e68:	f67f aee8 	bls.w	8009c3c <_scanf_float+0x80>
 8009e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e74:	463a      	mov	r2, r7
 8009e76:	4640      	mov	r0, r8
 8009e78:	4798      	blx	r3
 8009e7a:	6923      	ldr	r3, [r4, #16]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	6123      	str	r3, [r4, #16]
 8009e80:	e7f1      	b.n	8009e66 <_scanf_float+0x2aa>
 8009e82:	9802      	ldr	r0, [sp, #8]
 8009e84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009e8c:	9002      	str	r0, [sp, #8]
 8009e8e:	463a      	mov	r2, r7
 8009e90:	4640      	mov	r0, r8
 8009e92:	4798      	blx	r3
 8009e94:	6923      	ldr	r3, [r4, #16]
 8009e96:	3b01      	subs	r3, #1
 8009e98:	6123      	str	r3, [r4, #16]
 8009e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e9e:	fa5f fa8a 	uxtb.w	sl, sl
 8009ea2:	f1ba 0f02 	cmp.w	sl, #2
 8009ea6:	d1ec      	bne.n	8009e82 <_scanf_float+0x2c6>
 8009ea8:	3d03      	subs	r5, #3
 8009eaa:	b2ed      	uxtb	r5, r5
 8009eac:	1b76      	subs	r6, r6, r5
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	05da      	lsls	r2, r3, #23
 8009eb2:	d52f      	bpl.n	8009f14 <_scanf_float+0x358>
 8009eb4:	055b      	lsls	r3, r3, #21
 8009eb6:	d510      	bpl.n	8009eda <_scanf_float+0x31e>
 8009eb8:	455e      	cmp	r6, fp
 8009eba:	f67f aebf 	bls.w	8009c3c <_scanf_float+0x80>
 8009ebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ec2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ec6:	463a      	mov	r2, r7
 8009ec8:	4640      	mov	r0, r8
 8009eca:	4798      	blx	r3
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	6123      	str	r3, [r4, #16]
 8009ed2:	e7f1      	b.n	8009eb8 <_scanf_float+0x2fc>
 8009ed4:	46aa      	mov	sl, r5
 8009ed6:	9602      	str	r6, [sp, #8]
 8009ed8:	e7df      	b.n	8009e9a <_scanf_float+0x2de>
 8009eda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009ede:	6923      	ldr	r3, [r4, #16]
 8009ee0:	2965      	cmp	r1, #101	; 0x65
 8009ee2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ee6:	f106 35ff 	add.w	r5, r6, #4294967295
 8009eea:	6123      	str	r3, [r4, #16]
 8009eec:	d00c      	beq.n	8009f08 <_scanf_float+0x34c>
 8009eee:	2945      	cmp	r1, #69	; 0x45
 8009ef0:	d00a      	beq.n	8009f08 <_scanf_float+0x34c>
 8009ef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ef6:	463a      	mov	r2, r7
 8009ef8:	4640      	mov	r0, r8
 8009efa:	4798      	blx	r3
 8009efc:	6923      	ldr	r3, [r4, #16]
 8009efe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009f02:	3b01      	subs	r3, #1
 8009f04:	1eb5      	subs	r5, r6, #2
 8009f06:	6123      	str	r3, [r4, #16]
 8009f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f0c:	463a      	mov	r2, r7
 8009f0e:	4640      	mov	r0, r8
 8009f10:	4798      	blx	r3
 8009f12:	462e      	mov	r6, r5
 8009f14:	6825      	ldr	r5, [r4, #0]
 8009f16:	f015 0510 	ands.w	r5, r5, #16
 8009f1a:	d159      	bne.n	8009fd0 <_scanf_float+0x414>
 8009f1c:	7035      	strb	r5, [r6, #0]
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f28:	d11b      	bne.n	8009f62 <_scanf_float+0x3a6>
 8009f2a:	9b01      	ldr	r3, [sp, #4]
 8009f2c:	454b      	cmp	r3, r9
 8009f2e:	eba3 0209 	sub.w	r2, r3, r9
 8009f32:	d123      	bne.n	8009f7c <_scanf_float+0x3c0>
 8009f34:	2200      	movs	r2, #0
 8009f36:	4659      	mov	r1, fp
 8009f38:	4640      	mov	r0, r8
 8009f3a:	f000 ff37 	bl	800adac <_strtod_r>
 8009f3e:	6822      	ldr	r2, [r4, #0]
 8009f40:	9b03      	ldr	r3, [sp, #12]
 8009f42:	f012 0f02 	tst.w	r2, #2
 8009f46:	ec57 6b10 	vmov	r6, r7, d0
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	d021      	beq.n	8009f92 <_scanf_float+0x3d6>
 8009f4e:	9903      	ldr	r1, [sp, #12]
 8009f50:	1d1a      	adds	r2, r3, #4
 8009f52:	600a      	str	r2, [r1, #0]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	e9c3 6700 	strd	r6, r7, [r3]
 8009f5a:	68e3      	ldr	r3, [r4, #12]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60e3      	str	r3, [r4, #12]
 8009f60:	e66d      	b.n	8009c3e <_scanf_float+0x82>
 8009f62:	9b04      	ldr	r3, [sp, #16]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d0e5      	beq.n	8009f34 <_scanf_float+0x378>
 8009f68:	9905      	ldr	r1, [sp, #20]
 8009f6a:	230a      	movs	r3, #10
 8009f6c:	462a      	mov	r2, r5
 8009f6e:	3101      	adds	r1, #1
 8009f70:	4640      	mov	r0, r8
 8009f72:	f000 ffa3 	bl	800aebc <_strtol_r>
 8009f76:	9b04      	ldr	r3, [sp, #16]
 8009f78:	9e05      	ldr	r6, [sp, #20]
 8009f7a:	1ac2      	subs	r2, r0, r3
 8009f7c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009f80:	429e      	cmp	r6, r3
 8009f82:	bf28      	it	cs
 8009f84:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009f88:	4912      	ldr	r1, [pc, #72]	; (8009fd4 <_scanf_float+0x418>)
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f000 f8ca 	bl	800a124 <siprintf>
 8009f90:	e7d0      	b.n	8009f34 <_scanf_float+0x378>
 8009f92:	9903      	ldr	r1, [sp, #12]
 8009f94:	f012 0f04 	tst.w	r2, #4
 8009f98:	f103 0204 	add.w	r2, r3, #4
 8009f9c:	600a      	str	r2, [r1, #0]
 8009f9e:	d1d9      	bne.n	8009f54 <_scanf_float+0x398>
 8009fa0:	f8d3 8000 	ldr.w	r8, [r3]
 8009fa4:	ee10 2a10 	vmov	r2, s0
 8009fa8:	ee10 0a10 	vmov	r0, s0
 8009fac:	463b      	mov	r3, r7
 8009fae:	4639      	mov	r1, r7
 8009fb0:	f7f6 fdc6 	bl	8000b40 <__aeabi_dcmpun>
 8009fb4:	b128      	cbz	r0, 8009fc2 <_scanf_float+0x406>
 8009fb6:	4808      	ldr	r0, [pc, #32]	; (8009fd8 <_scanf_float+0x41c>)
 8009fb8:	f000 f8ae 	bl	800a118 <nanf>
 8009fbc:	ed88 0a00 	vstr	s0, [r8]
 8009fc0:	e7cb      	b.n	8009f5a <_scanf_float+0x39e>
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	f7f6 fe19 	bl	8000bfc <__aeabi_d2f>
 8009fca:	f8c8 0000 	str.w	r0, [r8]
 8009fce:	e7c4      	b.n	8009f5a <_scanf_float+0x39e>
 8009fd0:	2500      	movs	r5, #0
 8009fd2:	e634      	b.n	8009c3e <_scanf_float+0x82>
 8009fd4:	0800ecea 	.word	0x0800ecea
 8009fd8:	0800edf7 	.word	0x0800edf7

08009fdc <iprintf>:
 8009fdc:	b40f      	push	{r0, r1, r2, r3}
 8009fde:	4b0a      	ldr	r3, [pc, #40]	; (800a008 <iprintf+0x2c>)
 8009fe0:	b513      	push	{r0, r1, r4, lr}
 8009fe2:	681c      	ldr	r4, [r3, #0]
 8009fe4:	b124      	cbz	r4, 8009ff0 <iprintf+0x14>
 8009fe6:	69a3      	ldr	r3, [r4, #24]
 8009fe8:	b913      	cbnz	r3, 8009ff0 <iprintf+0x14>
 8009fea:	4620      	mov	r0, r4
 8009fec:	f002 fa74 	bl	800c4d8 <__sinit>
 8009ff0:	ab05      	add	r3, sp, #20
 8009ff2:	9a04      	ldr	r2, [sp, #16]
 8009ff4:	68a1      	ldr	r1, [r4, #8]
 8009ff6:	9301      	str	r3, [sp, #4]
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f003 fe75 	bl	800dce8 <_vfiprintf_r>
 8009ffe:	b002      	add	sp, #8
 800a000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a004:	b004      	add	sp, #16
 800a006:	4770      	bx	lr
 800a008:	20000014 	.word	0x20000014

0800a00c <_puts_r>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	460e      	mov	r6, r1
 800a010:	4605      	mov	r5, r0
 800a012:	b118      	cbz	r0, 800a01c <_puts_r+0x10>
 800a014:	6983      	ldr	r3, [r0, #24]
 800a016:	b90b      	cbnz	r3, 800a01c <_puts_r+0x10>
 800a018:	f002 fa5e 	bl	800c4d8 <__sinit>
 800a01c:	69ab      	ldr	r3, [r5, #24]
 800a01e:	68ac      	ldr	r4, [r5, #8]
 800a020:	b913      	cbnz	r3, 800a028 <_puts_r+0x1c>
 800a022:	4628      	mov	r0, r5
 800a024:	f002 fa58 	bl	800c4d8 <__sinit>
 800a028:	4b2c      	ldr	r3, [pc, #176]	; (800a0dc <_puts_r+0xd0>)
 800a02a:	429c      	cmp	r4, r3
 800a02c:	d120      	bne.n	800a070 <_puts_r+0x64>
 800a02e:	686c      	ldr	r4, [r5, #4]
 800a030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a032:	07db      	lsls	r3, r3, #31
 800a034:	d405      	bmi.n	800a042 <_puts_r+0x36>
 800a036:	89a3      	ldrh	r3, [r4, #12]
 800a038:	0598      	lsls	r0, r3, #22
 800a03a:	d402      	bmi.n	800a042 <_puts_r+0x36>
 800a03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a03e:	f002 ff63 	bl	800cf08 <__retarget_lock_acquire_recursive>
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	0719      	lsls	r1, r3, #28
 800a046:	d51d      	bpl.n	800a084 <_puts_r+0x78>
 800a048:	6923      	ldr	r3, [r4, #16]
 800a04a:	b1db      	cbz	r3, 800a084 <_puts_r+0x78>
 800a04c:	3e01      	subs	r6, #1
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a054:	3b01      	subs	r3, #1
 800a056:	60a3      	str	r3, [r4, #8]
 800a058:	bb39      	cbnz	r1, 800a0aa <_puts_r+0x9e>
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	da38      	bge.n	800a0d0 <_puts_r+0xc4>
 800a05e:	4622      	mov	r2, r4
 800a060:	210a      	movs	r1, #10
 800a062:	4628      	mov	r0, r5
 800a064:	f001 f968 	bl	800b338 <__swbuf_r>
 800a068:	3001      	adds	r0, #1
 800a06a:	d011      	beq.n	800a090 <_puts_r+0x84>
 800a06c:	250a      	movs	r5, #10
 800a06e:	e011      	b.n	800a094 <_puts_r+0x88>
 800a070:	4b1b      	ldr	r3, [pc, #108]	; (800a0e0 <_puts_r+0xd4>)
 800a072:	429c      	cmp	r4, r3
 800a074:	d101      	bne.n	800a07a <_puts_r+0x6e>
 800a076:	68ac      	ldr	r4, [r5, #8]
 800a078:	e7da      	b.n	800a030 <_puts_r+0x24>
 800a07a:	4b1a      	ldr	r3, [pc, #104]	; (800a0e4 <_puts_r+0xd8>)
 800a07c:	429c      	cmp	r4, r3
 800a07e:	bf08      	it	eq
 800a080:	68ec      	ldreq	r4, [r5, #12]
 800a082:	e7d5      	b.n	800a030 <_puts_r+0x24>
 800a084:	4621      	mov	r1, r4
 800a086:	4628      	mov	r0, r5
 800a088:	f001 f9a8 	bl	800b3dc <__swsetup_r>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d0dd      	beq.n	800a04c <_puts_r+0x40>
 800a090:	f04f 35ff 	mov.w	r5, #4294967295
 800a094:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a096:	07da      	lsls	r2, r3, #31
 800a098:	d405      	bmi.n	800a0a6 <_puts_r+0x9a>
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	059b      	lsls	r3, r3, #22
 800a09e:	d402      	bmi.n	800a0a6 <_puts_r+0x9a>
 800a0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0a2:	f002 ff33 	bl	800cf0c <__retarget_lock_release_recursive>
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	bd70      	pop	{r4, r5, r6, pc}
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	da04      	bge.n	800a0b8 <_puts_r+0xac>
 800a0ae:	69a2      	ldr	r2, [r4, #24]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	dc06      	bgt.n	800a0c2 <_puts_r+0xb6>
 800a0b4:	290a      	cmp	r1, #10
 800a0b6:	d004      	beq.n	800a0c2 <_puts_r+0xb6>
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	1c5a      	adds	r2, r3, #1
 800a0bc:	6022      	str	r2, [r4, #0]
 800a0be:	7019      	strb	r1, [r3, #0]
 800a0c0:	e7c5      	b.n	800a04e <_puts_r+0x42>
 800a0c2:	4622      	mov	r2, r4
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	f001 f937 	bl	800b338 <__swbuf_r>
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	d1bf      	bne.n	800a04e <_puts_r+0x42>
 800a0ce:	e7df      	b.n	800a090 <_puts_r+0x84>
 800a0d0:	6823      	ldr	r3, [r4, #0]
 800a0d2:	250a      	movs	r5, #10
 800a0d4:	1c5a      	adds	r2, r3, #1
 800a0d6:	6022      	str	r2, [r4, #0]
 800a0d8:	701d      	strb	r5, [r3, #0]
 800a0da:	e7db      	b.n	800a094 <_puts_r+0x88>
 800a0dc:	0800f008 	.word	0x0800f008
 800a0e0:	0800f028 	.word	0x0800f028
 800a0e4:	0800efe8 	.word	0x0800efe8

0800a0e8 <puts>:
 800a0e8:	4b02      	ldr	r3, [pc, #8]	; (800a0f4 <puts+0xc>)
 800a0ea:	4601      	mov	r1, r0
 800a0ec:	6818      	ldr	r0, [r3, #0]
 800a0ee:	f7ff bf8d 	b.w	800a00c <_puts_r>
 800a0f2:	bf00      	nop
 800a0f4:	20000014 	.word	0x20000014

0800a0f8 <_sbrk_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4d06      	ldr	r5, [pc, #24]	; (800a114 <_sbrk_r+0x1c>)
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4604      	mov	r4, r0
 800a100:	4608      	mov	r0, r1
 800a102:	602b      	str	r3, [r5, #0]
 800a104:	f7f8 f97c 	bl	8002400 <_sbrk>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_sbrk_r+0x1a>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_sbrk_r+0x1a>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	2000050c 	.word	0x2000050c

0800a118 <nanf>:
 800a118:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a120 <nanf+0x8>
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	7fc00000 	.word	0x7fc00000

0800a124 <siprintf>:
 800a124:	b40e      	push	{r1, r2, r3}
 800a126:	b500      	push	{lr}
 800a128:	b09c      	sub	sp, #112	; 0x70
 800a12a:	ab1d      	add	r3, sp, #116	; 0x74
 800a12c:	9002      	str	r0, [sp, #8]
 800a12e:	9006      	str	r0, [sp, #24]
 800a130:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a134:	4809      	ldr	r0, [pc, #36]	; (800a15c <siprintf+0x38>)
 800a136:	9107      	str	r1, [sp, #28]
 800a138:	9104      	str	r1, [sp, #16]
 800a13a:	4909      	ldr	r1, [pc, #36]	; (800a160 <siprintf+0x3c>)
 800a13c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a140:	9105      	str	r1, [sp, #20]
 800a142:	6800      	ldr	r0, [r0, #0]
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	a902      	add	r1, sp, #8
 800a148:	f003 fca4 	bl	800da94 <_svfiprintf_r>
 800a14c:	9b02      	ldr	r3, [sp, #8]
 800a14e:	2200      	movs	r2, #0
 800a150:	701a      	strb	r2, [r3, #0]
 800a152:	b01c      	add	sp, #112	; 0x70
 800a154:	f85d eb04 	ldr.w	lr, [sp], #4
 800a158:	b003      	add	sp, #12
 800a15a:	4770      	bx	lr
 800a15c:	20000014 	.word	0x20000014
 800a160:	ffff0208 	.word	0xffff0208

0800a164 <sulp>:
 800a164:	b570      	push	{r4, r5, r6, lr}
 800a166:	4604      	mov	r4, r0
 800a168:	460d      	mov	r5, r1
 800a16a:	ec45 4b10 	vmov	d0, r4, r5
 800a16e:	4616      	mov	r6, r2
 800a170:	f003 fad0 	bl	800d714 <__ulp>
 800a174:	ec51 0b10 	vmov	r0, r1, d0
 800a178:	b17e      	cbz	r6, 800a19a <sulp+0x36>
 800a17a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a17e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a182:	2b00      	cmp	r3, #0
 800a184:	dd09      	ble.n	800a19a <sulp+0x36>
 800a186:	051b      	lsls	r3, r3, #20
 800a188:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a18c:	2400      	movs	r4, #0
 800a18e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a192:	4622      	mov	r2, r4
 800a194:	462b      	mov	r3, r5
 800a196:	f7f6 fa39 	bl	800060c <__aeabi_dmul>
 800a19a:	bd70      	pop	{r4, r5, r6, pc}
 800a19c:	0000      	movs	r0, r0
	...

0800a1a0 <_strtod_l>:
 800a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a4:	ed2d 8b02 	vpush	{d8}
 800a1a8:	b09d      	sub	sp, #116	; 0x74
 800a1aa:	461f      	mov	r7, r3
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9318      	str	r3, [sp, #96]	; 0x60
 800a1b0:	4ba2      	ldr	r3, [pc, #648]	; (800a43c <_strtod_l+0x29c>)
 800a1b2:	9213      	str	r2, [sp, #76]	; 0x4c
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	9305      	str	r3, [sp, #20]
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	4688      	mov	r8, r1
 800a1be:	f7f6 f807 	bl	80001d0 <strlen>
 800a1c2:	f04f 0a00 	mov.w	sl, #0
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	f04f 0b00 	mov.w	fp, #0
 800a1cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1d2:	781a      	ldrb	r2, [r3, #0]
 800a1d4:	2a2b      	cmp	r2, #43	; 0x2b
 800a1d6:	d04e      	beq.n	800a276 <_strtod_l+0xd6>
 800a1d8:	d83b      	bhi.n	800a252 <_strtod_l+0xb2>
 800a1da:	2a0d      	cmp	r2, #13
 800a1dc:	d834      	bhi.n	800a248 <_strtod_l+0xa8>
 800a1de:	2a08      	cmp	r2, #8
 800a1e0:	d834      	bhi.n	800a24c <_strtod_l+0xac>
 800a1e2:	2a00      	cmp	r2, #0
 800a1e4:	d03e      	beq.n	800a264 <_strtod_l+0xc4>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	930a      	str	r3, [sp, #40]	; 0x28
 800a1ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a1ec:	7833      	ldrb	r3, [r6, #0]
 800a1ee:	2b30      	cmp	r3, #48	; 0x30
 800a1f0:	f040 80b0 	bne.w	800a354 <_strtod_l+0x1b4>
 800a1f4:	7873      	ldrb	r3, [r6, #1]
 800a1f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a1fa:	2b58      	cmp	r3, #88	; 0x58
 800a1fc:	d168      	bne.n	800a2d0 <_strtod_l+0x130>
 800a1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a200:	9301      	str	r3, [sp, #4]
 800a202:	ab18      	add	r3, sp, #96	; 0x60
 800a204:	9702      	str	r7, [sp, #8]
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	4a8d      	ldr	r2, [pc, #564]	; (800a440 <_strtod_l+0x2a0>)
 800a20a:	ab19      	add	r3, sp, #100	; 0x64
 800a20c:	a917      	add	r1, sp, #92	; 0x5c
 800a20e:	4620      	mov	r0, r4
 800a210:	f002 fa78 	bl	800c704 <__gethex>
 800a214:	f010 0707 	ands.w	r7, r0, #7
 800a218:	4605      	mov	r5, r0
 800a21a:	d005      	beq.n	800a228 <_strtod_l+0x88>
 800a21c:	2f06      	cmp	r7, #6
 800a21e:	d12c      	bne.n	800a27a <_strtod_l+0xda>
 800a220:	3601      	adds	r6, #1
 800a222:	2300      	movs	r3, #0
 800a224:	9617      	str	r6, [sp, #92]	; 0x5c
 800a226:	930a      	str	r3, [sp, #40]	; 0x28
 800a228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f040 8590 	bne.w	800ad50 <_strtod_l+0xbb0>
 800a230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a232:	b1eb      	cbz	r3, 800a270 <_strtod_l+0xd0>
 800a234:	4652      	mov	r2, sl
 800a236:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a23a:	ec43 2b10 	vmov	d0, r2, r3
 800a23e:	b01d      	add	sp, #116	; 0x74
 800a240:	ecbd 8b02 	vpop	{d8}
 800a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a248:	2a20      	cmp	r2, #32
 800a24a:	d1cc      	bne.n	800a1e6 <_strtod_l+0x46>
 800a24c:	3301      	adds	r3, #1
 800a24e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a250:	e7be      	b.n	800a1d0 <_strtod_l+0x30>
 800a252:	2a2d      	cmp	r2, #45	; 0x2d
 800a254:	d1c7      	bne.n	800a1e6 <_strtod_l+0x46>
 800a256:	2201      	movs	r2, #1
 800a258:	920a      	str	r2, [sp, #40]	; 0x28
 800a25a:	1c5a      	adds	r2, r3, #1
 800a25c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a25e:	785b      	ldrb	r3, [r3, #1]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1c2      	bne.n	800a1ea <_strtod_l+0x4a>
 800a264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a266:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f040 856e 	bne.w	800ad4c <_strtod_l+0xbac>
 800a270:	4652      	mov	r2, sl
 800a272:	465b      	mov	r3, fp
 800a274:	e7e1      	b.n	800a23a <_strtod_l+0x9a>
 800a276:	2200      	movs	r2, #0
 800a278:	e7ee      	b.n	800a258 <_strtod_l+0xb8>
 800a27a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a27c:	b13a      	cbz	r2, 800a28e <_strtod_l+0xee>
 800a27e:	2135      	movs	r1, #53	; 0x35
 800a280:	a81a      	add	r0, sp, #104	; 0x68
 800a282:	f003 fb52 	bl	800d92a <__copybits>
 800a286:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a288:	4620      	mov	r0, r4
 800a28a:	f002 ff11 	bl	800d0b0 <_Bfree>
 800a28e:	3f01      	subs	r7, #1
 800a290:	2f04      	cmp	r7, #4
 800a292:	d806      	bhi.n	800a2a2 <_strtod_l+0x102>
 800a294:	e8df f007 	tbb	[pc, r7]
 800a298:	1714030a 	.word	0x1714030a
 800a29c:	0a          	.byte	0x0a
 800a29d:	00          	.byte	0x00
 800a29e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a2a2:	0728      	lsls	r0, r5, #28
 800a2a4:	d5c0      	bpl.n	800a228 <_strtod_l+0x88>
 800a2a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a2aa:	e7bd      	b.n	800a228 <_strtod_l+0x88>
 800a2ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a2b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a2b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a2b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a2ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a2be:	e7f0      	b.n	800a2a2 <_strtod_l+0x102>
 800a2c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a444 <_strtod_l+0x2a4>
 800a2c4:	e7ed      	b.n	800a2a2 <_strtod_l+0x102>
 800a2c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a2ca:	f04f 3aff 	mov.w	sl, #4294967295
 800a2ce:	e7e8      	b.n	800a2a2 <_strtod_l+0x102>
 800a2d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a2d6:	785b      	ldrb	r3, [r3, #1]
 800a2d8:	2b30      	cmp	r3, #48	; 0x30
 800a2da:	d0f9      	beq.n	800a2d0 <_strtod_l+0x130>
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d0a3      	beq.n	800a228 <_strtod_l+0x88>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	f04f 0900 	mov.w	r9, #0
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2ea:	9308      	str	r3, [sp, #32]
 800a2ec:	f8cd 901c 	str.w	r9, [sp, #28]
 800a2f0:	464f      	mov	r7, r9
 800a2f2:	220a      	movs	r2, #10
 800a2f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a2f6:	7806      	ldrb	r6, [r0, #0]
 800a2f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a2fc:	b2d9      	uxtb	r1, r3
 800a2fe:	2909      	cmp	r1, #9
 800a300:	d92a      	bls.n	800a358 <_strtod_l+0x1b8>
 800a302:	9905      	ldr	r1, [sp, #20]
 800a304:	462a      	mov	r2, r5
 800a306:	f003 fea0 	bl	800e04a <strncmp>
 800a30a:	b398      	cbz	r0, 800a374 <_strtod_l+0x1d4>
 800a30c:	2000      	movs	r0, #0
 800a30e:	4632      	mov	r2, r6
 800a310:	463d      	mov	r5, r7
 800a312:	9005      	str	r0, [sp, #20]
 800a314:	4603      	mov	r3, r0
 800a316:	2a65      	cmp	r2, #101	; 0x65
 800a318:	d001      	beq.n	800a31e <_strtod_l+0x17e>
 800a31a:	2a45      	cmp	r2, #69	; 0x45
 800a31c:	d118      	bne.n	800a350 <_strtod_l+0x1b0>
 800a31e:	b91d      	cbnz	r5, 800a328 <_strtod_l+0x188>
 800a320:	9a04      	ldr	r2, [sp, #16]
 800a322:	4302      	orrs	r2, r0
 800a324:	d09e      	beq.n	800a264 <_strtod_l+0xc4>
 800a326:	2500      	movs	r5, #0
 800a328:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a32c:	f108 0201 	add.w	r2, r8, #1
 800a330:	9217      	str	r2, [sp, #92]	; 0x5c
 800a332:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a336:	2a2b      	cmp	r2, #43	; 0x2b
 800a338:	d075      	beq.n	800a426 <_strtod_l+0x286>
 800a33a:	2a2d      	cmp	r2, #45	; 0x2d
 800a33c:	d07b      	beq.n	800a436 <_strtod_l+0x296>
 800a33e:	f04f 0c00 	mov.w	ip, #0
 800a342:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a346:	2909      	cmp	r1, #9
 800a348:	f240 8082 	bls.w	800a450 <_strtod_l+0x2b0>
 800a34c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a350:	2600      	movs	r6, #0
 800a352:	e09d      	b.n	800a490 <_strtod_l+0x2f0>
 800a354:	2300      	movs	r3, #0
 800a356:	e7c4      	b.n	800a2e2 <_strtod_l+0x142>
 800a358:	2f08      	cmp	r7, #8
 800a35a:	bfd8      	it	le
 800a35c:	9907      	ldrle	r1, [sp, #28]
 800a35e:	f100 0001 	add.w	r0, r0, #1
 800a362:	bfda      	itte	le
 800a364:	fb02 3301 	mlale	r3, r2, r1, r3
 800a368:	9307      	strle	r3, [sp, #28]
 800a36a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a36e:	3701      	adds	r7, #1
 800a370:	9017      	str	r0, [sp, #92]	; 0x5c
 800a372:	e7bf      	b.n	800a2f4 <_strtod_l+0x154>
 800a374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a376:	195a      	adds	r2, r3, r5
 800a378:	9217      	str	r2, [sp, #92]	; 0x5c
 800a37a:	5d5a      	ldrb	r2, [r3, r5]
 800a37c:	2f00      	cmp	r7, #0
 800a37e:	d037      	beq.n	800a3f0 <_strtod_l+0x250>
 800a380:	9005      	str	r0, [sp, #20]
 800a382:	463d      	mov	r5, r7
 800a384:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a388:	2b09      	cmp	r3, #9
 800a38a:	d912      	bls.n	800a3b2 <_strtod_l+0x212>
 800a38c:	2301      	movs	r3, #1
 800a38e:	e7c2      	b.n	800a316 <_strtod_l+0x176>
 800a390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a392:	1c5a      	adds	r2, r3, #1
 800a394:	9217      	str	r2, [sp, #92]	; 0x5c
 800a396:	785a      	ldrb	r2, [r3, #1]
 800a398:	3001      	adds	r0, #1
 800a39a:	2a30      	cmp	r2, #48	; 0x30
 800a39c:	d0f8      	beq.n	800a390 <_strtod_l+0x1f0>
 800a39e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a3a2:	2b08      	cmp	r3, #8
 800a3a4:	f200 84d9 	bhi.w	800ad5a <_strtod_l+0xbba>
 800a3a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3aa:	9005      	str	r0, [sp, #20]
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	9308      	str	r3, [sp, #32]
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	3a30      	subs	r2, #48	; 0x30
 800a3b4:	f100 0301 	add.w	r3, r0, #1
 800a3b8:	d014      	beq.n	800a3e4 <_strtod_l+0x244>
 800a3ba:	9905      	ldr	r1, [sp, #20]
 800a3bc:	4419      	add	r1, r3
 800a3be:	9105      	str	r1, [sp, #20]
 800a3c0:	462b      	mov	r3, r5
 800a3c2:	eb00 0e05 	add.w	lr, r0, r5
 800a3c6:	210a      	movs	r1, #10
 800a3c8:	4573      	cmp	r3, lr
 800a3ca:	d113      	bne.n	800a3f4 <_strtod_l+0x254>
 800a3cc:	182b      	adds	r3, r5, r0
 800a3ce:	2b08      	cmp	r3, #8
 800a3d0:	f105 0501 	add.w	r5, r5, #1
 800a3d4:	4405      	add	r5, r0
 800a3d6:	dc1c      	bgt.n	800a412 <_strtod_l+0x272>
 800a3d8:	9907      	ldr	r1, [sp, #28]
 800a3da:	230a      	movs	r3, #10
 800a3dc:	fb03 2301 	mla	r3, r3, r1, r2
 800a3e0:	9307      	str	r3, [sp, #28]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a3e6:	1c51      	adds	r1, r2, #1
 800a3e8:	9117      	str	r1, [sp, #92]	; 0x5c
 800a3ea:	7852      	ldrb	r2, [r2, #1]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	e7c9      	b.n	800a384 <_strtod_l+0x1e4>
 800a3f0:	4638      	mov	r0, r7
 800a3f2:	e7d2      	b.n	800a39a <_strtod_l+0x1fa>
 800a3f4:	2b08      	cmp	r3, #8
 800a3f6:	dc04      	bgt.n	800a402 <_strtod_l+0x262>
 800a3f8:	9e07      	ldr	r6, [sp, #28]
 800a3fa:	434e      	muls	r6, r1
 800a3fc:	9607      	str	r6, [sp, #28]
 800a3fe:	3301      	adds	r3, #1
 800a400:	e7e2      	b.n	800a3c8 <_strtod_l+0x228>
 800a402:	f103 0c01 	add.w	ip, r3, #1
 800a406:	f1bc 0f10 	cmp.w	ip, #16
 800a40a:	bfd8      	it	le
 800a40c:	fb01 f909 	mulle.w	r9, r1, r9
 800a410:	e7f5      	b.n	800a3fe <_strtod_l+0x25e>
 800a412:	2d10      	cmp	r5, #16
 800a414:	bfdc      	itt	le
 800a416:	230a      	movle	r3, #10
 800a418:	fb03 2909 	mlale	r9, r3, r9, r2
 800a41c:	e7e1      	b.n	800a3e2 <_strtod_l+0x242>
 800a41e:	2300      	movs	r3, #0
 800a420:	9305      	str	r3, [sp, #20]
 800a422:	2301      	movs	r3, #1
 800a424:	e77c      	b.n	800a320 <_strtod_l+0x180>
 800a426:	f04f 0c00 	mov.w	ip, #0
 800a42a:	f108 0202 	add.w	r2, r8, #2
 800a42e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a430:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a434:	e785      	b.n	800a342 <_strtod_l+0x1a2>
 800a436:	f04f 0c01 	mov.w	ip, #1
 800a43a:	e7f6      	b.n	800a42a <_strtod_l+0x28a>
 800a43c:	0800f0b0 	.word	0x0800f0b0
 800a440:	0800ecf0 	.word	0x0800ecf0
 800a444:	7ff00000 	.word	0x7ff00000
 800a448:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a44a:	1c51      	adds	r1, r2, #1
 800a44c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a44e:	7852      	ldrb	r2, [r2, #1]
 800a450:	2a30      	cmp	r2, #48	; 0x30
 800a452:	d0f9      	beq.n	800a448 <_strtod_l+0x2a8>
 800a454:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a458:	2908      	cmp	r1, #8
 800a45a:	f63f af79 	bhi.w	800a350 <_strtod_l+0x1b0>
 800a45e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a462:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a464:	9206      	str	r2, [sp, #24]
 800a466:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a468:	1c51      	adds	r1, r2, #1
 800a46a:	9117      	str	r1, [sp, #92]	; 0x5c
 800a46c:	7852      	ldrb	r2, [r2, #1]
 800a46e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a472:	2e09      	cmp	r6, #9
 800a474:	d937      	bls.n	800a4e6 <_strtod_l+0x346>
 800a476:	9e06      	ldr	r6, [sp, #24]
 800a478:	1b89      	subs	r1, r1, r6
 800a47a:	2908      	cmp	r1, #8
 800a47c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a480:	dc02      	bgt.n	800a488 <_strtod_l+0x2e8>
 800a482:	4576      	cmp	r6, lr
 800a484:	bfa8      	it	ge
 800a486:	4676      	movge	r6, lr
 800a488:	f1bc 0f00 	cmp.w	ip, #0
 800a48c:	d000      	beq.n	800a490 <_strtod_l+0x2f0>
 800a48e:	4276      	negs	r6, r6
 800a490:	2d00      	cmp	r5, #0
 800a492:	d14d      	bne.n	800a530 <_strtod_l+0x390>
 800a494:	9904      	ldr	r1, [sp, #16]
 800a496:	4301      	orrs	r1, r0
 800a498:	f47f aec6 	bne.w	800a228 <_strtod_l+0x88>
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f47f aee1 	bne.w	800a264 <_strtod_l+0xc4>
 800a4a2:	2a69      	cmp	r2, #105	; 0x69
 800a4a4:	d027      	beq.n	800a4f6 <_strtod_l+0x356>
 800a4a6:	dc24      	bgt.n	800a4f2 <_strtod_l+0x352>
 800a4a8:	2a49      	cmp	r2, #73	; 0x49
 800a4aa:	d024      	beq.n	800a4f6 <_strtod_l+0x356>
 800a4ac:	2a4e      	cmp	r2, #78	; 0x4e
 800a4ae:	f47f aed9 	bne.w	800a264 <_strtod_l+0xc4>
 800a4b2:	499f      	ldr	r1, [pc, #636]	; (800a730 <_strtod_l+0x590>)
 800a4b4:	a817      	add	r0, sp, #92	; 0x5c
 800a4b6:	f002 fb7d 	bl	800cbb4 <__match>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	f43f aed2 	beq.w	800a264 <_strtod_l+0xc4>
 800a4c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	2b28      	cmp	r3, #40	; 0x28
 800a4c6:	d12d      	bne.n	800a524 <_strtod_l+0x384>
 800a4c8:	499a      	ldr	r1, [pc, #616]	; (800a734 <_strtod_l+0x594>)
 800a4ca:	aa1a      	add	r2, sp, #104	; 0x68
 800a4cc:	a817      	add	r0, sp, #92	; 0x5c
 800a4ce:	f002 fb85 	bl	800cbdc <__hexnan>
 800a4d2:	2805      	cmp	r0, #5
 800a4d4:	d126      	bne.n	800a524 <_strtod_l+0x384>
 800a4d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a4dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a4e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a4e4:	e6a0      	b.n	800a228 <_strtod_l+0x88>
 800a4e6:	210a      	movs	r1, #10
 800a4e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a4ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a4f0:	e7b9      	b.n	800a466 <_strtod_l+0x2c6>
 800a4f2:	2a6e      	cmp	r2, #110	; 0x6e
 800a4f4:	e7db      	b.n	800a4ae <_strtod_l+0x30e>
 800a4f6:	4990      	ldr	r1, [pc, #576]	; (800a738 <_strtod_l+0x598>)
 800a4f8:	a817      	add	r0, sp, #92	; 0x5c
 800a4fa:	f002 fb5b 	bl	800cbb4 <__match>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	f43f aeb0 	beq.w	800a264 <_strtod_l+0xc4>
 800a504:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a506:	498d      	ldr	r1, [pc, #564]	; (800a73c <_strtod_l+0x59c>)
 800a508:	3b01      	subs	r3, #1
 800a50a:	a817      	add	r0, sp, #92	; 0x5c
 800a50c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a50e:	f002 fb51 	bl	800cbb4 <__match>
 800a512:	b910      	cbnz	r0, 800a51a <_strtod_l+0x37a>
 800a514:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a516:	3301      	adds	r3, #1
 800a518:	9317      	str	r3, [sp, #92]	; 0x5c
 800a51a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a74c <_strtod_l+0x5ac>
 800a51e:	f04f 0a00 	mov.w	sl, #0
 800a522:	e681      	b.n	800a228 <_strtod_l+0x88>
 800a524:	4886      	ldr	r0, [pc, #536]	; (800a740 <_strtod_l+0x5a0>)
 800a526:	f003 fd0f 	bl	800df48 <nan>
 800a52a:	ec5b ab10 	vmov	sl, fp, d0
 800a52e:	e67b      	b.n	800a228 <_strtod_l+0x88>
 800a530:	9b05      	ldr	r3, [sp, #20]
 800a532:	9807      	ldr	r0, [sp, #28]
 800a534:	1af3      	subs	r3, r6, r3
 800a536:	2f00      	cmp	r7, #0
 800a538:	bf08      	it	eq
 800a53a:	462f      	moveq	r7, r5
 800a53c:	2d10      	cmp	r5, #16
 800a53e:	9306      	str	r3, [sp, #24]
 800a540:	46a8      	mov	r8, r5
 800a542:	bfa8      	it	ge
 800a544:	f04f 0810 	movge.w	r8, #16
 800a548:	f7f5 ffe6 	bl	8000518 <__aeabi_ui2d>
 800a54c:	2d09      	cmp	r5, #9
 800a54e:	4682      	mov	sl, r0
 800a550:	468b      	mov	fp, r1
 800a552:	dd13      	ble.n	800a57c <_strtod_l+0x3dc>
 800a554:	4b7b      	ldr	r3, [pc, #492]	; (800a744 <_strtod_l+0x5a4>)
 800a556:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a55a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a55e:	f7f6 f855 	bl	800060c <__aeabi_dmul>
 800a562:	4682      	mov	sl, r0
 800a564:	4648      	mov	r0, r9
 800a566:	468b      	mov	fp, r1
 800a568:	f7f5 ffd6 	bl	8000518 <__aeabi_ui2d>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	4650      	mov	r0, sl
 800a572:	4659      	mov	r1, fp
 800a574:	f7f5 fe94 	bl	80002a0 <__adddf3>
 800a578:	4682      	mov	sl, r0
 800a57a:	468b      	mov	fp, r1
 800a57c:	2d0f      	cmp	r5, #15
 800a57e:	dc38      	bgt.n	800a5f2 <_strtod_l+0x452>
 800a580:	9b06      	ldr	r3, [sp, #24]
 800a582:	2b00      	cmp	r3, #0
 800a584:	f43f ae50 	beq.w	800a228 <_strtod_l+0x88>
 800a588:	dd24      	ble.n	800a5d4 <_strtod_l+0x434>
 800a58a:	2b16      	cmp	r3, #22
 800a58c:	dc0b      	bgt.n	800a5a6 <_strtod_l+0x406>
 800a58e:	496d      	ldr	r1, [pc, #436]	; (800a744 <_strtod_l+0x5a4>)
 800a590:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a594:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a598:	4652      	mov	r2, sl
 800a59a:	465b      	mov	r3, fp
 800a59c:	f7f6 f836 	bl	800060c <__aeabi_dmul>
 800a5a0:	4682      	mov	sl, r0
 800a5a2:	468b      	mov	fp, r1
 800a5a4:	e640      	b.n	800a228 <_strtod_l+0x88>
 800a5a6:	9a06      	ldr	r2, [sp, #24]
 800a5a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	db20      	blt.n	800a5f2 <_strtod_l+0x452>
 800a5b0:	4c64      	ldr	r4, [pc, #400]	; (800a744 <_strtod_l+0x5a4>)
 800a5b2:	f1c5 050f 	rsb	r5, r5, #15
 800a5b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	465b      	mov	r3, fp
 800a5be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5c2:	f7f6 f823 	bl	800060c <__aeabi_dmul>
 800a5c6:	9b06      	ldr	r3, [sp, #24]
 800a5c8:	1b5d      	subs	r5, r3, r5
 800a5ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a5ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a5d2:	e7e3      	b.n	800a59c <_strtod_l+0x3fc>
 800a5d4:	9b06      	ldr	r3, [sp, #24]
 800a5d6:	3316      	adds	r3, #22
 800a5d8:	db0b      	blt.n	800a5f2 <_strtod_l+0x452>
 800a5da:	9b05      	ldr	r3, [sp, #20]
 800a5dc:	1b9e      	subs	r6, r3, r6
 800a5de:	4b59      	ldr	r3, [pc, #356]	; (800a744 <_strtod_l+0x5a4>)
 800a5e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a5e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5e8:	4650      	mov	r0, sl
 800a5ea:	4659      	mov	r1, fp
 800a5ec:	f7f6 f938 	bl	8000860 <__aeabi_ddiv>
 800a5f0:	e7d6      	b.n	800a5a0 <_strtod_l+0x400>
 800a5f2:	9b06      	ldr	r3, [sp, #24]
 800a5f4:	eba5 0808 	sub.w	r8, r5, r8
 800a5f8:	4498      	add	r8, r3
 800a5fa:	f1b8 0f00 	cmp.w	r8, #0
 800a5fe:	dd74      	ble.n	800a6ea <_strtod_l+0x54a>
 800a600:	f018 030f 	ands.w	r3, r8, #15
 800a604:	d00a      	beq.n	800a61c <_strtod_l+0x47c>
 800a606:	494f      	ldr	r1, [pc, #316]	; (800a744 <_strtod_l+0x5a4>)
 800a608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a60c:	4652      	mov	r2, sl
 800a60e:	465b      	mov	r3, fp
 800a610:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a614:	f7f5 fffa 	bl	800060c <__aeabi_dmul>
 800a618:	4682      	mov	sl, r0
 800a61a:	468b      	mov	fp, r1
 800a61c:	f038 080f 	bics.w	r8, r8, #15
 800a620:	d04f      	beq.n	800a6c2 <_strtod_l+0x522>
 800a622:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a626:	dd22      	ble.n	800a66e <_strtod_l+0x4ce>
 800a628:	2500      	movs	r5, #0
 800a62a:	462e      	mov	r6, r5
 800a62c:	9507      	str	r5, [sp, #28]
 800a62e:	9505      	str	r5, [sp, #20]
 800a630:	2322      	movs	r3, #34	; 0x22
 800a632:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a74c <_strtod_l+0x5ac>
 800a636:	6023      	str	r3, [r4, #0]
 800a638:	f04f 0a00 	mov.w	sl, #0
 800a63c:	9b07      	ldr	r3, [sp, #28]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f43f adf2 	beq.w	800a228 <_strtod_l+0x88>
 800a644:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a646:	4620      	mov	r0, r4
 800a648:	f002 fd32 	bl	800d0b0 <_Bfree>
 800a64c:	9905      	ldr	r1, [sp, #20]
 800a64e:	4620      	mov	r0, r4
 800a650:	f002 fd2e 	bl	800d0b0 <_Bfree>
 800a654:	4631      	mov	r1, r6
 800a656:	4620      	mov	r0, r4
 800a658:	f002 fd2a 	bl	800d0b0 <_Bfree>
 800a65c:	9907      	ldr	r1, [sp, #28]
 800a65e:	4620      	mov	r0, r4
 800a660:	f002 fd26 	bl	800d0b0 <_Bfree>
 800a664:	4629      	mov	r1, r5
 800a666:	4620      	mov	r0, r4
 800a668:	f002 fd22 	bl	800d0b0 <_Bfree>
 800a66c:	e5dc      	b.n	800a228 <_strtod_l+0x88>
 800a66e:	4b36      	ldr	r3, [pc, #216]	; (800a748 <_strtod_l+0x5a8>)
 800a670:	9304      	str	r3, [sp, #16]
 800a672:	2300      	movs	r3, #0
 800a674:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a678:	4650      	mov	r0, sl
 800a67a:	4659      	mov	r1, fp
 800a67c:	4699      	mov	r9, r3
 800a67e:	f1b8 0f01 	cmp.w	r8, #1
 800a682:	dc21      	bgt.n	800a6c8 <_strtod_l+0x528>
 800a684:	b10b      	cbz	r3, 800a68a <_strtod_l+0x4ea>
 800a686:	4682      	mov	sl, r0
 800a688:	468b      	mov	fp, r1
 800a68a:	4b2f      	ldr	r3, [pc, #188]	; (800a748 <_strtod_l+0x5a8>)
 800a68c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a690:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a694:	4652      	mov	r2, sl
 800a696:	465b      	mov	r3, fp
 800a698:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a69c:	f7f5 ffb6 	bl	800060c <__aeabi_dmul>
 800a6a0:	4b2a      	ldr	r3, [pc, #168]	; (800a74c <_strtod_l+0x5ac>)
 800a6a2:	460a      	mov	r2, r1
 800a6a4:	400b      	ands	r3, r1
 800a6a6:	492a      	ldr	r1, [pc, #168]	; (800a750 <_strtod_l+0x5b0>)
 800a6a8:	428b      	cmp	r3, r1
 800a6aa:	4682      	mov	sl, r0
 800a6ac:	d8bc      	bhi.n	800a628 <_strtod_l+0x488>
 800a6ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a6b2:	428b      	cmp	r3, r1
 800a6b4:	bf86      	itte	hi
 800a6b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a754 <_strtod_l+0x5b4>
 800a6ba:	f04f 3aff 	movhi.w	sl, #4294967295
 800a6be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	9304      	str	r3, [sp, #16]
 800a6c6:	e084      	b.n	800a7d2 <_strtod_l+0x632>
 800a6c8:	f018 0f01 	tst.w	r8, #1
 800a6cc:	d005      	beq.n	800a6da <_strtod_l+0x53a>
 800a6ce:	9b04      	ldr	r3, [sp, #16]
 800a6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d4:	f7f5 ff9a 	bl	800060c <__aeabi_dmul>
 800a6d8:	2301      	movs	r3, #1
 800a6da:	9a04      	ldr	r2, [sp, #16]
 800a6dc:	3208      	adds	r2, #8
 800a6de:	f109 0901 	add.w	r9, r9, #1
 800a6e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a6e6:	9204      	str	r2, [sp, #16]
 800a6e8:	e7c9      	b.n	800a67e <_strtod_l+0x4de>
 800a6ea:	d0ea      	beq.n	800a6c2 <_strtod_l+0x522>
 800a6ec:	f1c8 0800 	rsb	r8, r8, #0
 800a6f0:	f018 020f 	ands.w	r2, r8, #15
 800a6f4:	d00a      	beq.n	800a70c <_strtod_l+0x56c>
 800a6f6:	4b13      	ldr	r3, [pc, #76]	; (800a744 <_strtod_l+0x5a4>)
 800a6f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6fc:	4650      	mov	r0, sl
 800a6fe:	4659      	mov	r1, fp
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	f7f6 f8ac 	bl	8000860 <__aeabi_ddiv>
 800a708:	4682      	mov	sl, r0
 800a70a:	468b      	mov	fp, r1
 800a70c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a710:	d0d7      	beq.n	800a6c2 <_strtod_l+0x522>
 800a712:	f1b8 0f1f 	cmp.w	r8, #31
 800a716:	dd1f      	ble.n	800a758 <_strtod_l+0x5b8>
 800a718:	2500      	movs	r5, #0
 800a71a:	462e      	mov	r6, r5
 800a71c:	9507      	str	r5, [sp, #28]
 800a71e:	9505      	str	r5, [sp, #20]
 800a720:	2322      	movs	r3, #34	; 0x22
 800a722:	f04f 0a00 	mov.w	sl, #0
 800a726:	f04f 0b00 	mov.w	fp, #0
 800a72a:	6023      	str	r3, [r4, #0]
 800a72c:	e786      	b.n	800a63c <_strtod_l+0x49c>
 800a72e:	bf00      	nop
 800a730:	0800ecc5 	.word	0x0800ecc5
 800a734:	0800ed04 	.word	0x0800ed04
 800a738:	0800ecbd 	.word	0x0800ecbd
 800a73c:	0800ef71 	.word	0x0800ef71
 800a740:	0800edf7 	.word	0x0800edf7
 800a744:	0800f148 	.word	0x0800f148
 800a748:	0800f120 	.word	0x0800f120
 800a74c:	7ff00000 	.word	0x7ff00000
 800a750:	7ca00000 	.word	0x7ca00000
 800a754:	7fefffff 	.word	0x7fefffff
 800a758:	f018 0310 	ands.w	r3, r8, #16
 800a75c:	bf18      	it	ne
 800a75e:	236a      	movne	r3, #106	; 0x6a
 800a760:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ab10 <_strtod_l+0x970>
 800a764:	9304      	str	r3, [sp, #16]
 800a766:	4650      	mov	r0, sl
 800a768:	4659      	mov	r1, fp
 800a76a:	2300      	movs	r3, #0
 800a76c:	f018 0f01 	tst.w	r8, #1
 800a770:	d004      	beq.n	800a77c <_strtod_l+0x5dc>
 800a772:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a776:	f7f5 ff49 	bl	800060c <__aeabi_dmul>
 800a77a:	2301      	movs	r3, #1
 800a77c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a780:	f109 0908 	add.w	r9, r9, #8
 800a784:	d1f2      	bne.n	800a76c <_strtod_l+0x5cc>
 800a786:	b10b      	cbz	r3, 800a78c <_strtod_l+0x5ec>
 800a788:	4682      	mov	sl, r0
 800a78a:	468b      	mov	fp, r1
 800a78c:	9b04      	ldr	r3, [sp, #16]
 800a78e:	b1c3      	cbz	r3, 800a7c2 <_strtod_l+0x622>
 800a790:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a794:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a798:	2b00      	cmp	r3, #0
 800a79a:	4659      	mov	r1, fp
 800a79c:	dd11      	ble.n	800a7c2 <_strtod_l+0x622>
 800a79e:	2b1f      	cmp	r3, #31
 800a7a0:	f340 8124 	ble.w	800a9ec <_strtod_l+0x84c>
 800a7a4:	2b34      	cmp	r3, #52	; 0x34
 800a7a6:	bfde      	ittt	le
 800a7a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a7ac:	f04f 33ff 	movle.w	r3, #4294967295
 800a7b0:	fa03 f202 	lslle.w	r2, r3, r2
 800a7b4:	f04f 0a00 	mov.w	sl, #0
 800a7b8:	bfcc      	ite	gt
 800a7ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a7be:	ea02 0b01 	andle.w	fp, r2, r1
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4650      	mov	r0, sl
 800a7c8:	4659      	mov	r1, fp
 800a7ca:	f7f6 f987 	bl	8000adc <__aeabi_dcmpeq>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d1a2      	bne.n	800a718 <_strtod_l+0x578>
 800a7d2:	9b07      	ldr	r3, [sp, #28]
 800a7d4:	9300      	str	r3, [sp, #0]
 800a7d6:	9908      	ldr	r1, [sp, #32]
 800a7d8:	462b      	mov	r3, r5
 800a7da:	463a      	mov	r2, r7
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f002 fccf 	bl	800d180 <__s2b>
 800a7e2:	9007      	str	r0, [sp, #28]
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	f43f af1f 	beq.w	800a628 <_strtod_l+0x488>
 800a7ea:	9b05      	ldr	r3, [sp, #20]
 800a7ec:	1b9e      	subs	r6, r3, r6
 800a7ee:	9b06      	ldr	r3, [sp, #24]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	bfb4      	ite	lt
 800a7f4:	4633      	movlt	r3, r6
 800a7f6:	2300      	movge	r3, #0
 800a7f8:	930c      	str	r3, [sp, #48]	; 0x30
 800a7fa:	9b06      	ldr	r3, [sp, #24]
 800a7fc:	2500      	movs	r5, #0
 800a7fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a802:	9312      	str	r3, [sp, #72]	; 0x48
 800a804:	462e      	mov	r6, r5
 800a806:	9b07      	ldr	r3, [sp, #28]
 800a808:	4620      	mov	r0, r4
 800a80a:	6859      	ldr	r1, [r3, #4]
 800a80c:	f002 fc10 	bl	800d030 <_Balloc>
 800a810:	9005      	str	r0, [sp, #20]
 800a812:	2800      	cmp	r0, #0
 800a814:	f43f af0c 	beq.w	800a630 <_strtod_l+0x490>
 800a818:	9b07      	ldr	r3, [sp, #28]
 800a81a:	691a      	ldr	r2, [r3, #16]
 800a81c:	3202      	adds	r2, #2
 800a81e:	f103 010c 	add.w	r1, r3, #12
 800a822:	0092      	lsls	r2, r2, #2
 800a824:	300c      	adds	r0, #12
 800a826:	f002 fbe9 	bl	800cffc <memcpy>
 800a82a:	ec4b ab10 	vmov	d0, sl, fp
 800a82e:	aa1a      	add	r2, sp, #104	; 0x68
 800a830:	a919      	add	r1, sp, #100	; 0x64
 800a832:	4620      	mov	r0, r4
 800a834:	f002 ffea 	bl	800d80c <__d2b>
 800a838:	ec4b ab18 	vmov	d8, sl, fp
 800a83c:	9018      	str	r0, [sp, #96]	; 0x60
 800a83e:	2800      	cmp	r0, #0
 800a840:	f43f aef6 	beq.w	800a630 <_strtod_l+0x490>
 800a844:	2101      	movs	r1, #1
 800a846:	4620      	mov	r0, r4
 800a848:	f002 fd34 	bl	800d2b4 <__i2b>
 800a84c:	4606      	mov	r6, r0
 800a84e:	2800      	cmp	r0, #0
 800a850:	f43f aeee 	beq.w	800a630 <_strtod_l+0x490>
 800a854:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a856:	9904      	ldr	r1, [sp, #16]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	bfab      	itete	ge
 800a85c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a85e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a860:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a862:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a866:	bfac      	ite	ge
 800a868:	eb03 0902 	addge.w	r9, r3, r2
 800a86c:	1ad7      	sublt	r7, r2, r3
 800a86e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a870:	eba3 0801 	sub.w	r8, r3, r1
 800a874:	4490      	add	r8, r2
 800a876:	4ba1      	ldr	r3, [pc, #644]	; (800aafc <_strtod_l+0x95c>)
 800a878:	f108 38ff 	add.w	r8, r8, #4294967295
 800a87c:	4598      	cmp	r8, r3
 800a87e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a882:	f280 80c7 	bge.w	800aa14 <_strtod_l+0x874>
 800a886:	eba3 0308 	sub.w	r3, r3, r8
 800a88a:	2b1f      	cmp	r3, #31
 800a88c:	eba2 0203 	sub.w	r2, r2, r3
 800a890:	f04f 0101 	mov.w	r1, #1
 800a894:	f300 80b1 	bgt.w	800a9fa <_strtod_l+0x85a>
 800a898:	fa01 f303 	lsl.w	r3, r1, r3
 800a89c:	930d      	str	r3, [sp, #52]	; 0x34
 800a89e:	2300      	movs	r3, #0
 800a8a0:	9308      	str	r3, [sp, #32]
 800a8a2:	eb09 0802 	add.w	r8, r9, r2
 800a8a6:	9b04      	ldr	r3, [sp, #16]
 800a8a8:	45c1      	cmp	r9, r8
 800a8aa:	4417      	add	r7, r2
 800a8ac:	441f      	add	r7, r3
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	bfa8      	it	ge
 800a8b2:	4643      	movge	r3, r8
 800a8b4:	42bb      	cmp	r3, r7
 800a8b6:	bfa8      	it	ge
 800a8b8:	463b      	movge	r3, r7
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	bfc2      	ittt	gt
 800a8be:	eba8 0803 	subgt.w	r8, r8, r3
 800a8c2:	1aff      	subgt	r7, r7, r3
 800a8c4:	eba9 0903 	subgt.w	r9, r9, r3
 800a8c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	dd17      	ble.n	800a8fe <_strtod_l+0x75e>
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f002 fdae 	bl	800d434 <__pow5mult>
 800a8d8:	4606      	mov	r6, r0
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	f43f aea8 	beq.w	800a630 <_strtod_l+0x490>
 800a8e0:	4601      	mov	r1, r0
 800a8e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f002 fcfb 	bl	800d2e0 <__multiply>
 800a8ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	f43f ae9f 	beq.w	800a630 <_strtod_l+0x490>
 800a8f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f002 fbdb 	bl	800d0b0 <_Bfree>
 800a8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8fc:	9318      	str	r3, [sp, #96]	; 0x60
 800a8fe:	f1b8 0f00 	cmp.w	r8, #0
 800a902:	f300 808c 	bgt.w	800aa1e <_strtod_l+0x87e>
 800a906:	9b06      	ldr	r3, [sp, #24]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	dd08      	ble.n	800a91e <_strtod_l+0x77e>
 800a90c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a90e:	9905      	ldr	r1, [sp, #20]
 800a910:	4620      	mov	r0, r4
 800a912:	f002 fd8f 	bl	800d434 <__pow5mult>
 800a916:	9005      	str	r0, [sp, #20]
 800a918:	2800      	cmp	r0, #0
 800a91a:	f43f ae89 	beq.w	800a630 <_strtod_l+0x490>
 800a91e:	2f00      	cmp	r7, #0
 800a920:	dd08      	ble.n	800a934 <_strtod_l+0x794>
 800a922:	9905      	ldr	r1, [sp, #20]
 800a924:	463a      	mov	r2, r7
 800a926:	4620      	mov	r0, r4
 800a928:	f002 fdde 	bl	800d4e8 <__lshift>
 800a92c:	9005      	str	r0, [sp, #20]
 800a92e:	2800      	cmp	r0, #0
 800a930:	f43f ae7e 	beq.w	800a630 <_strtod_l+0x490>
 800a934:	f1b9 0f00 	cmp.w	r9, #0
 800a938:	dd08      	ble.n	800a94c <_strtod_l+0x7ac>
 800a93a:	4631      	mov	r1, r6
 800a93c:	464a      	mov	r2, r9
 800a93e:	4620      	mov	r0, r4
 800a940:	f002 fdd2 	bl	800d4e8 <__lshift>
 800a944:	4606      	mov	r6, r0
 800a946:	2800      	cmp	r0, #0
 800a948:	f43f ae72 	beq.w	800a630 <_strtod_l+0x490>
 800a94c:	9a05      	ldr	r2, [sp, #20]
 800a94e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a950:	4620      	mov	r0, r4
 800a952:	f002 fe55 	bl	800d600 <__mdiff>
 800a956:	4605      	mov	r5, r0
 800a958:	2800      	cmp	r0, #0
 800a95a:	f43f ae69 	beq.w	800a630 <_strtod_l+0x490>
 800a95e:	68c3      	ldr	r3, [r0, #12]
 800a960:	930b      	str	r3, [sp, #44]	; 0x2c
 800a962:	2300      	movs	r3, #0
 800a964:	60c3      	str	r3, [r0, #12]
 800a966:	4631      	mov	r1, r6
 800a968:	f002 fe2e 	bl	800d5c8 <__mcmp>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	da60      	bge.n	800aa32 <_strtod_l+0x892>
 800a970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a972:	ea53 030a 	orrs.w	r3, r3, sl
 800a976:	f040 8082 	bne.w	800aa7e <_strtod_l+0x8de>
 800a97a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d17d      	bne.n	800aa7e <_strtod_l+0x8de>
 800a982:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a986:	0d1b      	lsrs	r3, r3, #20
 800a988:	051b      	lsls	r3, r3, #20
 800a98a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a98e:	d976      	bls.n	800aa7e <_strtod_l+0x8de>
 800a990:	696b      	ldr	r3, [r5, #20]
 800a992:	b913      	cbnz	r3, 800a99a <_strtod_l+0x7fa>
 800a994:	692b      	ldr	r3, [r5, #16]
 800a996:	2b01      	cmp	r3, #1
 800a998:	dd71      	ble.n	800aa7e <_strtod_l+0x8de>
 800a99a:	4629      	mov	r1, r5
 800a99c:	2201      	movs	r2, #1
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f002 fda2 	bl	800d4e8 <__lshift>
 800a9a4:	4631      	mov	r1, r6
 800a9a6:	4605      	mov	r5, r0
 800a9a8:	f002 fe0e 	bl	800d5c8 <__mcmp>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	dd66      	ble.n	800aa7e <_strtod_l+0x8de>
 800a9b0:	9904      	ldr	r1, [sp, #16]
 800a9b2:	4a53      	ldr	r2, [pc, #332]	; (800ab00 <_strtod_l+0x960>)
 800a9b4:	465b      	mov	r3, fp
 800a9b6:	2900      	cmp	r1, #0
 800a9b8:	f000 8081 	beq.w	800aabe <_strtod_l+0x91e>
 800a9bc:	ea02 010b 	and.w	r1, r2, fp
 800a9c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a9c4:	dc7b      	bgt.n	800aabe <_strtod_l+0x91e>
 800a9c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a9ca:	f77f aea9 	ble.w	800a720 <_strtod_l+0x580>
 800a9ce:	4b4d      	ldr	r3, [pc, #308]	; (800ab04 <_strtod_l+0x964>)
 800a9d0:	4650      	mov	r0, sl
 800a9d2:	4659      	mov	r1, fp
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f7f5 fe19 	bl	800060c <__aeabi_dmul>
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4303      	orrs	r3, r0
 800a9de:	bf08      	it	eq
 800a9e0:	2322      	moveq	r3, #34	; 0x22
 800a9e2:	4682      	mov	sl, r0
 800a9e4:	468b      	mov	fp, r1
 800a9e6:	bf08      	it	eq
 800a9e8:	6023      	streq	r3, [r4, #0]
 800a9ea:	e62b      	b.n	800a644 <_strtod_l+0x4a4>
 800a9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f4:	ea03 0a0a 	and.w	sl, r3, sl
 800a9f8:	e6e3      	b.n	800a7c2 <_strtod_l+0x622>
 800a9fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a9fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800aa02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800aa06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800aa0a:	fa01 f308 	lsl.w	r3, r1, r8
 800aa0e:	9308      	str	r3, [sp, #32]
 800aa10:	910d      	str	r1, [sp, #52]	; 0x34
 800aa12:	e746      	b.n	800a8a2 <_strtod_l+0x702>
 800aa14:	2300      	movs	r3, #0
 800aa16:	9308      	str	r3, [sp, #32]
 800aa18:	2301      	movs	r3, #1
 800aa1a:	930d      	str	r3, [sp, #52]	; 0x34
 800aa1c:	e741      	b.n	800a8a2 <_strtod_l+0x702>
 800aa1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa20:	4642      	mov	r2, r8
 800aa22:	4620      	mov	r0, r4
 800aa24:	f002 fd60 	bl	800d4e8 <__lshift>
 800aa28:	9018      	str	r0, [sp, #96]	; 0x60
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	f47f af6b 	bne.w	800a906 <_strtod_l+0x766>
 800aa30:	e5fe      	b.n	800a630 <_strtod_l+0x490>
 800aa32:	465f      	mov	r7, fp
 800aa34:	d16e      	bne.n	800ab14 <_strtod_l+0x974>
 800aa36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa3c:	b342      	cbz	r2, 800aa90 <_strtod_l+0x8f0>
 800aa3e:	4a32      	ldr	r2, [pc, #200]	; (800ab08 <_strtod_l+0x968>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d128      	bne.n	800aa96 <_strtod_l+0x8f6>
 800aa44:	9b04      	ldr	r3, [sp, #16]
 800aa46:	4651      	mov	r1, sl
 800aa48:	b1eb      	cbz	r3, 800aa86 <_strtod_l+0x8e6>
 800aa4a:	4b2d      	ldr	r3, [pc, #180]	; (800ab00 <_strtod_l+0x960>)
 800aa4c:	403b      	ands	r3, r7
 800aa4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aa52:	f04f 32ff 	mov.w	r2, #4294967295
 800aa56:	d819      	bhi.n	800aa8c <_strtod_l+0x8ec>
 800aa58:	0d1b      	lsrs	r3, r3, #20
 800aa5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa5e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa62:	4299      	cmp	r1, r3
 800aa64:	d117      	bne.n	800aa96 <_strtod_l+0x8f6>
 800aa66:	4b29      	ldr	r3, [pc, #164]	; (800ab0c <_strtod_l+0x96c>)
 800aa68:	429f      	cmp	r7, r3
 800aa6a:	d102      	bne.n	800aa72 <_strtod_l+0x8d2>
 800aa6c:	3101      	adds	r1, #1
 800aa6e:	f43f addf 	beq.w	800a630 <_strtod_l+0x490>
 800aa72:	4b23      	ldr	r3, [pc, #140]	; (800ab00 <_strtod_l+0x960>)
 800aa74:	403b      	ands	r3, r7
 800aa76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800aa7a:	f04f 0a00 	mov.w	sl, #0
 800aa7e:	9b04      	ldr	r3, [sp, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1a4      	bne.n	800a9ce <_strtod_l+0x82e>
 800aa84:	e5de      	b.n	800a644 <_strtod_l+0x4a4>
 800aa86:	f04f 33ff 	mov.w	r3, #4294967295
 800aa8a:	e7ea      	b.n	800aa62 <_strtod_l+0x8c2>
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	e7e8      	b.n	800aa62 <_strtod_l+0x8c2>
 800aa90:	ea53 030a 	orrs.w	r3, r3, sl
 800aa94:	d08c      	beq.n	800a9b0 <_strtod_l+0x810>
 800aa96:	9b08      	ldr	r3, [sp, #32]
 800aa98:	b1db      	cbz	r3, 800aad2 <_strtod_l+0x932>
 800aa9a:	423b      	tst	r3, r7
 800aa9c:	d0ef      	beq.n	800aa7e <_strtod_l+0x8de>
 800aa9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaa0:	9a04      	ldr	r2, [sp, #16]
 800aaa2:	4650      	mov	r0, sl
 800aaa4:	4659      	mov	r1, fp
 800aaa6:	b1c3      	cbz	r3, 800aada <_strtod_l+0x93a>
 800aaa8:	f7ff fb5c 	bl	800a164 <sulp>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	ec51 0b18 	vmov	r0, r1, d8
 800aab4:	f7f5 fbf4 	bl	80002a0 <__adddf3>
 800aab8:	4682      	mov	sl, r0
 800aaba:	468b      	mov	fp, r1
 800aabc:	e7df      	b.n	800aa7e <_strtod_l+0x8de>
 800aabe:	4013      	ands	r3, r2
 800aac0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aac4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aac8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aacc:	f04f 3aff 	mov.w	sl, #4294967295
 800aad0:	e7d5      	b.n	800aa7e <_strtod_l+0x8de>
 800aad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aad4:	ea13 0f0a 	tst.w	r3, sl
 800aad8:	e7e0      	b.n	800aa9c <_strtod_l+0x8fc>
 800aada:	f7ff fb43 	bl	800a164 <sulp>
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	ec51 0b18 	vmov	r0, r1, d8
 800aae6:	f7f5 fbd9 	bl	800029c <__aeabi_dsub>
 800aaea:	2200      	movs	r2, #0
 800aaec:	2300      	movs	r3, #0
 800aaee:	4682      	mov	sl, r0
 800aaf0:	468b      	mov	fp, r1
 800aaf2:	f7f5 fff3 	bl	8000adc <__aeabi_dcmpeq>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d0c1      	beq.n	800aa7e <_strtod_l+0x8de>
 800aafa:	e611      	b.n	800a720 <_strtod_l+0x580>
 800aafc:	fffffc02 	.word	0xfffffc02
 800ab00:	7ff00000 	.word	0x7ff00000
 800ab04:	39500000 	.word	0x39500000
 800ab08:	000fffff 	.word	0x000fffff
 800ab0c:	7fefffff 	.word	0x7fefffff
 800ab10:	0800ed18 	.word	0x0800ed18
 800ab14:	4631      	mov	r1, r6
 800ab16:	4628      	mov	r0, r5
 800ab18:	f002 fed4 	bl	800d8c4 <__ratio>
 800ab1c:	ec59 8b10 	vmov	r8, r9, d0
 800ab20:	ee10 0a10 	vmov	r0, s0
 800ab24:	2200      	movs	r2, #0
 800ab26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab2a:	4649      	mov	r1, r9
 800ab2c:	f7f5 ffea 	bl	8000b04 <__aeabi_dcmple>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d07a      	beq.n	800ac2a <_strtod_l+0xa8a>
 800ab34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d04a      	beq.n	800abd0 <_strtod_l+0xa30>
 800ab3a:	4b95      	ldr	r3, [pc, #596]	; (800ad90 <_strtod_l+0xbf0>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ab42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ad90 <_strtod_l+0xbf0>
 800ab46:	f04f 0800 	mov.w	r8, #0
 800ab4a:	4b92      	ldr	r3, [pc, #584]	; (800ad94 <_strtod_l+0xbf4>)
 800ab4c:	403b      	ands	r3, r7
 800ab4e:	930d      	str	r3, [sp, #52]	; 0x34
 800ab50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab52:	4b91      	ldr	r3, [pc, #580]	; (800ad98 <_strtod_l+0xbf8>)
 800ab54:	429a      	cmp	r2, r3
 800ab56:	f040 80b0 	bne.w	800acba <_strtod_l+0xb1a>
 800ab5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab5e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ab62:	ec4b ab10 	vmov	d0, sl, fp
 800ab66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ab6a:	f002 fdd3 	bl	800d714 <__ulp>
 800ab6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab72:	ec53 2b10 	vmov	r2, r3, d0
 800ab76:	f7f5 fd49 	bl	800060c <__aeabi_dmul>
 800ab7a:	4652      	mov	r2, sl
 800ab7c:	465b      	mov	r3, fp
 800ab7e:	f7f5 fb8f 	bl	80002a0 <__adddf3>
 800ab82:	460b      	mov	r3, r1
 800ab84:	4983      	ldr	r1, [pc, #524]	; (800ad94 <_strtod_l+0xbf4>)
 800ab86:	4a85      	ldr	r2, [pc, #532]	; (800ad9c <_strtod_l+0xbfc>)
 800ab88:	4019      	ands	r1, r3
 800ab8a:	4291      	cmp	r1, r2
 800ab8c:	4682      	mov	sl, r0
 800ab8e:	d960      	bls.n	800ac52 <_strtod_l+0xab2>
 800ab90:	ee18 3a90 	vmov	r3, s17
 800ab94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d104      	bne.n	800aba6 <_strtod_l+0xa06>
 800ab9c:	ee18 3a10 	vmov	r3, s16
 800aba0:	3301      	adds	r3, #1
 800aba2:	f43f ad45 	beq.w	800a630 <_strtod_l+0x490>
 800aba6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ada8 <_strtod_l+0xc08>
 800abaa:	f04f 3aff 	mov.w	sl, #4294967295
 800abae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800abb0:	4620      	mov	r0, r4
 800abb2:	f002 fa7d 	bl	800d0b0 <_Bfree>
 800abb6:	9905      	ldr	r1, [sp, #20]
 800abb8:	4620      	mov	r0, r4
 800abba:	f002 fa79 	bl	800d0b0 <_Bfree>
 800abbe:	4631      	mov	r1, r6
 800abc0:	4620      	mov	r0, r4
 800abc2:	f002 fa75 	bl	800d0b0 <_Bfree>
 800abc6:	4629      	mov	r1, r5
 800abc8:	4620      	mov	r0, r4
 800abca:	f002 fa71 	bl	800d0b0 <_Bfree>
 800abce:	e61a      	b.n	800a806 <_strtod_l+0x666>
 800abd0:	f1ba 0f00 	cmp.w	sl, #0
 800abd4:	d11b      	bne.n	800ac0e <_strtod_l+0xa6e>
 800abd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abda:	b9f3      	cbnz	r3, 800ac1a <_strtod_l+0xa7a>
 800abdc:	4b6c      	ldr	r3, [pc, #432]	; (800ad90 <_strtod_l+0xbf0>)
 800abde:	2200      	movs	r2, #0
 800abe0:	4640      	mov	r0, r8
 800abe2:	4649      	mov	r1, r9
 800abe4:	f7f5 ff84 	bl	8000af0 <__aeabi_dcmplt>
 800abe8:	b9d0      	cbnz	r0, 800ac20 <_strtod_l+0xa80>
 800abea:	4640      	mov	r0, r8
 800abec:	4649      	mov	r1, r9
 800abee:	4b6c      	ldr	r3, [pc, #432]	; (800ada0 <_strtod_l+0xc00>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	f7f5 fd0b 	bl	800060c <__aeabi_dmul>
 800abf6:	4680      	mov	r8, r0
 800abf8:	4689      	mov	r9, r1
 800abfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800abfe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ac02:	9315      	str	r3, [sp, #84]	; 0x54
 800ac04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ac08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac0c:	e79d      	b.n	800ab4a <_strtod_l+0x9aa>
 800ac0e:	f1ba 0f01 	cmp.w	sl, #1
 800ac12:	d102      	bne.n	800ac1a <_strtod_l+0xa7a>
 800ac14:	2f00      	cmp	r7, #0
 800ac16:	f43f ad83 	beq.w	800a720 <_strtod_l+0x580>
 800ac1a:	4b62      	ldr	r3, [pc, #392]	; (800ada4 <_strtod_l+0xc04>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	e78e      	b.n	800ab3e <_strtod_l+0x99e>
 800ac20:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ada0 <_strtod_l+0xc00>
 800ac24:	f04f 0800 	mov.w	r8, #0
 800ac28:	e7e7      	b.n	800abfa <_strtod_l+0xa5a>
 800ac2a:	4b5d      	ldr	r3, [pc, #372]	; (800ada0 <_strtod_l+0xc00>)
 800ac2c:	4640      	mov	r0, r8
 800ac2e:	4649      	mov	r1, r9
 800ac30:	2200      	movs	r2, #0
 800ac32:	f7f5 fceb 	bl	800060c <__aeabi_dmul>
 800ac36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac38:	4680      	mov	r8, r0
 800ac3a:	4689      	mov	r9, r1
 800ac3c:	b933      	cbnz	r3, 800ac4c <_strtod_l+0xaac>
 800ac3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac42:	900e      	str	r0, [sp, #56]	; 0x38
 800ac44:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ac4a:	e7dd      	b.n	800ac08 <_strtod_l+0xa68>
 800ac4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ac50:	e7f9      	b.n	800ac46 <_strtod_l+0xaa6>
 800ac52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ac56:	9b04      	ldr	r3, [sp, #16]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1a8      	bne.n	800abae <_strtod_l+0xa0e>
 800ac5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac62:	0d1b      	lsrs	r3, r3, #20
 800ac64:	051b      	lsls	r3, r3, #20
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d1a1      	bne.n	800abae <_strtod_l+0xa0e>
 800ac6a:	4640      	mov	r0, r8
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	f7f6 f87d 	bl	8000d6c <__aeabi_d2lz>
 800ac72:	f7f5 fc9d 	bl	80005b0 <__aeabi_l2d>
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	4640      	mov	r0, r8
 800ac7c:	4649      	mov	r1, r9
 800ac7e:	f7f5 fb0d 	bl	800029c <__aeabi_dsub>
 800ac82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac88:	ea43 030a 	orr.w	r3, r3, sl
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	4680      	mov	r8, r0
 800ac90:	4689      	mov	r9, r1
 800ac92:	d055      	beq.n	800ad40 <_strtod_l+0xba0>
 800ac94:	a336      	add	r3, pc, #216	; (adr r3, 800ad70 <_strtod_l+0xbd0>)
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	f7f5 ff29 	bl	8000af0 <__aeabi_dcmplt>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f47f acd0 	bne.w	800a644 <_strtod_l+0x4a4>
 800aca4:	a334      	add	r3, pc, #208	; (adr r3, 800ad78 <_strtod_l+0xbd8>)
 800aca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acaa:	4640      	mov	r0, r8
 800acac:	4649      	mov	r1, r9
 800acae:	f7f5 ff3d 	bl	8000b2c <__aeabi_dcmpgt>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	f43f af7b 	beq.w	800abae <_strtod_l+0xa0e>
 800acb8:	e4c4      	b.n	800a644 <_strtod_l+0x4a4>
 800acba:	9b04      	ldr	r3, [sp, #16]
 800acbc:	b333      	cbz	r3, 800ad0c <_strtod_l+0xb6c>
 800acbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800acc4:	d822      	bhi.n	800ad0c <_strtod_l+0xb6c>
 800acc6:	a32e      	add	r3, pc, #184	; (adr r3, 800ad80 <_strtod_l+0xbe0>)
 800acc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800accc:	4640      	mov	r0, r8
 800acce:	4649      	mov	r1, r9
 800acd0:	f7f5 ff18 	bl	8000b04 <__aeabi_dcmple>
 800acd4:	b1a0      	cbz	r0, 800ad00 <_strtod_l+0xb60>
 800acd6:	4649      	mov	r1, r9
 800acd8:	4640      	mov	r0, r8
 800acda:	f7f5 ff6f 	bl	8000bbc <__aeabi_d2uiz>
 800acde:	2801      	cmp	r0, #1
 800ace0:	bf38      	it	cc
 800ace2:	2001      	movcc	r0, #1
 800ace4:	f7f5 fc18 	bl	8000518 <__aeabi_ui2d>
 800ace8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acea:	4680      	mov	r8, r0
 800acec:	4689      	mov	r9, r1
 800acee:	bb23      	cbnz	r3, 800ad3a <_strtod_l+0xb9a>
 800acf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acf4:	9010      	str	r0, [sp, #64]	; 0x40
 800acf6:	9311      	str	r3, [sp, #68]	; 0x44
 800acf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800acfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ad00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad04:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ad08:	1a9b      	subs	r3, r3, r2
 800ad0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad10:	eeb0 0a48 	vmov.f32	s0, s16
 800ad14:	eef0 0a68 	vmov.f32	s1, s17
 800ad18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad1c:	f002 fcfa 	bl	800d714 <__ulp>
 800ad20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad24:	ec53 2b10 	vmov	r2, r3, d0
 800ad28:	f7f5 fc70 	bl	800060c <__aeabi_dmul>
 800ad2c:	ec53 2b18 	vmov	r2, r3, d8
 800ad30:	f7f5 fab6 	bl	80002a0 <__adddf3>
 800ad34:	4682      	mov	sl, r0
 800ad36:	468b      	mov	fp, r1
 800ad38:	e78d      	b.n	800ac56 <_strtod_l+0xab6>
 800ad3a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ad3e:	e7db      	b.n	800acf8 <_strtod_l+0xb58>
 800ad40:	a311      	add	r3, pc, #68	; (adr r3, 800ad88 <_strtod_l+0xbe8>)
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f7f5 fed3 	bl	8000af0 <__aeabi_dcmplt>
 800ad4a:	e7b2      	b.n	800acb2 <_strtod_l+0xb12>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ad50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad54:	6013      	str	r3, [r2, #0]
 800ad56:	f7ff ba6b 	b.w	800a230 <_strtod_l+0x90>
 800ad5a:	2a65      	cmp	r2, #101	; 0x65
 800ad5c:	f43f ab5f 	beq.w	800a41e <_strtod_l+0x27e>
 800ad60:	2a45      	cmp	r2, #69	; 0x45
 800ad62:	f43f ab5c 	beq.w	800a41e <_strtod_l+0x27e>
 800ad66:	2301      	movs	r3, #1
 800ad68:	f7ff bb94 	b.w	800a494 <_strtod_l+0x2f4>
 800ad6c:	f3af 8000 	nop.w
 800ad70:	94a03595 	.word	0x94a03595
 800ad74:	3fdfffff 	.word	0x3fdfffff
 800ad78:	35afe535 	.word	0x35afe535
 800ad7c:	3fe00000 	.word	0x3fe00000
 800ad80:	ffc00000 	.word	0xffc00000
 800ad84:	41dfffff 	.word	0x41dfffff
 800ad88:	94a03595 	.word	0x94a03595
 800ad8c:	3fcfffff 	.word	0x3fcfffff
 800ad90:	3ff00000 	.word	0x3ff00000
 800ad94:	7ff00000 	.word	0x7ff00000
 800ad98:	7fe00000 	.word	0x7fe00000
 800ad9c:	7c9fffff 	.word	0x7c9fffff
 800ada0:	3fe00000 	.word	0x3fe00000
 800ada4:	bff00000 	.word	0xbff00000
 800ada8:	7fefffff 	.word	0x7fefffff

0800adac <_strtod_r>:
 800adac:	4b01      	ldr	r3, [pc, #4]	; (800adb4 <_strtod_r+0x8>)
 800adae:	f7ff b9f7 	b.w	800a1a0 <_strtod_l>
 800adb2:	bf00      	nop
 800adb4:	200000dc 	.word	0x200000dc

0800adb8 <_strtol_l.constprop.0>:
 800adb8:	2b01      	cmp	r3, #1
 800adba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adbe:	d001      	beq.n	800adc4 <_strtol_l.constprop.0+0xc>
 800adc0:	2b24      	cmp	r3, #36	; 0x24
 800adc2:	d906      	bls.n	800add2 <_strtol_l.constprop.0+0x1a>
 800adc4:	f7fd fdea 	bl	800899c <__errno>
 800adc8:	2316      	movs	r3, #22
 800adca:	6003      	str	r3, [r0, #0]
 800adcc:	2000      	movs	r0, #0
 800adce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800aeb8 <_strtol_l.constprop.0+0x100>
 800add6:	460d      	mov	r5, r1
 800add8:	462e      	mov	r6, r5
 800adda:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adde:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ade2:	f017 0708 	ands.w	r7, r7, #8
 800ade6:	d1f7      	bne.n	800add8 <_strtol_l.constprop.0+0x20>
 800ade8:	2c2d      	cmp	r4, #45	; 0x2d
 800adea:	d132      	bne.n	800ae52 <_strtol_l.constprop.0+0x9a>
 800adec:	782c      	ldrb	r4, [r5, #0]
 800adee:	2701      	movs	r7, #1
 800adf0:	1cb5      	adds	r5, r6, #2
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d05b      	beq.n	800aeae <_strtol_l.constprop.0+0xf6>
 800adf6:	2b10      	cmp	r3, #16
 800adf8:	d109      	bne.n	800ae0e <_strtol_l.constprop.0+0x56>
 800adfa:	2c30      	cmp	r4, #48	; 0x30
 800adfc:	d107      	bne.n	800ae0e <_strtol_l.constprop.0+0x56>
 800adfe:	782c      	ldrb	r4, [r5, #0]
 800ae00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ae04:	2c58      	cmp	r4, #88	; 0x58
 800ae06:	d14d      	bne.n	800aea4 <_strtol_l.constprop.0+0xec>
 800ae08:	786c      	ldrb	r4, [r5, #1]
 800ae0a:	2310      	movs	r3, #16
 800ae0c:	3502      	adds	r5, #2
 800ae0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ae12:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae16:	f04f 0c00 	mov.w	ip, #0
 800ae1a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ae1e:	4666      	mov	r6, ip
 800ae20:	fb03 8a19 	mls	sl, r3, r9, r8
 800ae24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ae28:	f1be 0f09 	cmp.w	lr, #9
 800ae2c:	d816      	bhi.n	800ae5c <_strtol_l.constprop.0+0xa4>
 800ae2e:	4674      	mov	r4, lr
 800ae30:	42a3      	cmp	r3, r4
 800ae32:	dd24      	ble.n	800ae7e <_strtol_l.constprop.0+0xc6>
 800ae34:	f1bc 0f00 	cmp.w	ip, #0
 800ae38:	db1e      	blt.n	800ae78 <_strtol_l.constprop.0+0xc0>
 800ae3a:	45b1      	cmp	r9, r6
 800ae3c:	d31c      	bcc.n	800ae78 <_strtol_l.constprop.0+0xc0>
 800ae3e:	d101      	bne.n	800ae44 <_strtol_l.constprop.0+0x8c>
 800ae40:	45a2      	cmp	sl, r4
 800ae42:	db19      	blt.n	800ae78 <_strtol_l.constprop.0+0xc0>
 800ae44:	fb06 4603 	mla	r6, r6, r3, r4
 800ae48:	f04f 0c01 	mov.w	ip, #1
 800ae4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae50:	e7e8      	b.n	800ae24 <_strtol_l.constprop.0+0x6c>
 800ae52:	2c2b      	cmp	r4, #43	; 0x2b
 800ae54:	bf04      	itt	eq
 800ae56:	782c      	ldrbeq	r4, [r5, #0]
 800ae58:	1cb5      	addeq	r5, r6, #2
 800ae5a:	e7ca      	b.n	800adf2 <_strtol_l.constprop.0+0x3a>
 800ae5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ae60:	f1be 0f19 	cmp.w	lr, #25
 800ae64:	d801      	bhi.n	800ae6a <_strtol_l.constprop.0+0xb2>
 800ae66:	3c37      	subs	r4, #55	; 0x37
 800ae68:	e7e2      	b.n	800ae30 <_strtol_l.constprop.0+0x78>
 800ae6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ae6e:	f1be 0f19 	cmp.w	lr, #25
 800ae72:	d804      	bhi.n	800ae7e <_strtol_l.constprop.0+0xc6>
 800ae74:	3c57      	subs	r4, #87	; 0x57
 800ae76:	e7db      	b.n	800ae30 <_strtol_l.constprop.0+0x78>
 800ae78:	f04f 3cff 	mov.w	ip, #4294967295
 800ae7c:	e7e6      	b.n	800ae4c <_strtol_l.constprop.0+0x94>
 800ae7e:	f1bc 0f00 	cmp.w	ip, #0
 800ae82:	da05      	bge.n	800ae90 <_strtol_l.constprop.0+0xd8>
 800ae84:	2322      	movs	r3, #34	; 0x22
 800ae86:	6003      	str	r3, [r0, #0]
 800ae88:	4646      	mov	r6, r8
 800ae8a:	b942      	cbnz	r2, 800ae9e <_strtol_l.constprop.0+0xe6>
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	e79e      	b.n	800adce <_strtol_l.constprop.0+0x16>
 800ae90:	b107      	cbz	r7, 800ae94 <_strtol_l.constprop.0+0xdc>
 800ae92:	4276      	negs	r6, r6
 800ae94:	2a00      	cmp	r2, #0
 800ae96:	d0f9      	beq.n	800ae8c <_strtol_l.constprop.0+0xd4>
 800ae98:	f1bc 0f00 	cmp.w	ip, #0
 800ae9c:	d000      	beq.n	800aea0 <_strtol_l.constprop.0+0xe8>
 800ae9e:	1e69      	subs	r1, r5, #1
 800aea0:	6011      	str	r1, [r2, #0]
 800aea2:	e7f3      	b.n	800ae8c <_strtol_l.constprop.0+0xd4>
 800aea4:	2430      	movs	r4, #48	; 0x30
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1b1      	bne.n	800ae0e <_strtol_l.constprop.0+0x56>
 800aeaa:	2308      	movs	r3, #8
 800aeac:	e7af      	b.n	800ae0e <_strtol_l.constprop.0+0x56>
 800aeae:	2c30      	cmp	r4, #48	; 0x30
 800aeb0:	d0a5      	beq.n	800adfe <_strtol_l.constprop.0+0x46>
 800aeb2:	230a      	movs	r3, #10
 800aeb4:	e7ab      	b.n	800ae0e <_strtol_l.constprop.0+0x56>
 800aeb6:	bf00      	nop
 800aeb8:	0800ee6e 	.word	0x0800ee6e

0800aebc <_strtol_r>:
 800aebc:	f7ff bf7c 	b.w	800adb8 <_strtol_l.constprop.0>

0800aec0 <__tzcalc_limits>:
 800aec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	4605      	mov	r5, r0
 800aec6:	f001 ff69 	bl	800cd9c <__gettzinfo>
 800aeca:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800aece:	429d      	cmp	r5, r3
 800aed0:	f340 8099 	ble.w	800b006 <__tzcalc_limits+0x146>
 800aed4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800aed8:	18ac      	adds	r4, r5, r2
 800aeda:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800aede:	f240 126d 	movw	r2, #365	; 0x16d
 800aee2:	10a4      	asrs	r4, r4, #2
 800aee4:	fb02 4403 	mla	r4, r2, r3, r4
 800aee8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800aeec:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800aef0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aef4:	441c      	add	r4, r3
 800aef6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800aefa:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800aefe:	fb95 fcf3 	sdiv	ip, r5, r3
 800af02:	fb03 5c1c 	mls	ip, r3, ip, r5
 800af06:	186a      	adds	r2, r5, r1
 800af08:	fabc f68c 	clz	r6, ip
 800af0c:	fbb2 f2f3 	udiv	r2, r2, r3
 800af10:	f005 0303 	and.w	r3, r5, #3
 800af14:	4414      	add	r4, r2
 800af16:	2264      	movs	r2, #100	; 0x64
 800af18:	6045      	str	r5, [r0, #4]
 800af1a:	fb95 f7f2 	sdiv	r7, r5, r2
 800af1e:	0976      	lsrs	r6, r6, #5
 800af20:	fb02 5717 	mls	r7, r2, r7, r5
 800af24:	4601      	mov	r1, r0
 800af26:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	f04f 0a07 	mov.w	sl, #7
 800af30:	7a0d      	ldrb	r5, [r1, #8]
 800af32:	694b      	ldr	r3, [r1, #20]
 800af34:	2d4a      	cmp	r5, #74	; 0x4a
 800af36:	d12d      	bne.n	800af94 <__tzcalc_limits+0xd4>
 800af38:	9a00      	ldr	r2, [sp, #0]
 800af3a:	eb04 0e03 	add.w	lr, r4, r3
 800af3e:	b902      	cbnz	r2, 800af42 <__tzcalc_limits+0x82>
 800af40:	b917      	cbnz	r7, 800af48 <__tzcalc_limits+0x88>
 800af42:	f1bc 0f00 	cmp.w	ip, #0
 800af46:	d123      	bne.n	800af90 <__tzcalc_limits+0xd0>
 800af48:	2b3b      	cmp	r3, #59	; 0x3b
 800af4a:	bfd4      	ite	le
 800af4c:	2300      	movle	r3, #0
 800af4e:	2301      	movgt	r3, #1
 800af50:	4473      	add	r3, lr
 800af52:	3b01      	subs	r3, #1
 800af54:	698d      	ldr	r5, [r1, #24]
 800af56:	4a2d      	ldr	r2, [pc, #180]	; (800b00c <__tzcalc_limits+0x14c>)
 800af58:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800af5c:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800af60:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800af62:	18ed      	adds	r5, r5, r3
 800af64:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800af68:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800af6c:	3128      	adds	r1, #40	; 0x28
 800af6e:	458b      	cmp	fp, r1
 800af70:	d1de      	bne.n	800af30 <__tzcalc_limits+0x70>
 800af72:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800af76:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800af7a:	428c      	cmp	r4, r1
 800af7c:	eb72 0303 	sbcs.w	r3, r2, r3
 800af80:	bfb4      	ite	lt
 800af82:	2301      	movlt	r3, #1
 800af84:	2300      	movge	r3, #0
 800af86:	6003      	str	r3, [r0, #0]
 800af88:	2001      	movs	r0, #1
 800af8a:	b003      	add	sp, #12
 800af8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af90:	2300      	movs	r3, #0
 800af92:	e7dd      	b.n	800af50 <__tzcalc_limits+0x90>
 800af94:	2d44      	cmp	r5, #68	; 0x44
 800af96:	d101      	bne.n	800af9c <__tzcalc_limits+0xdc>
 800af98:	4423      	add	r3, r4
 800af9a:	e7db      	b.n	800af54 <__tzcalc_limits+0x94>
 800af9c:	9a00      	ldr	r2, [sp, #0]
 800af9e:	bb62      	cbnz	r2, 800affa <__tzcalc_limits+0x13a>
 800afa0:	2f00      	cmp	r7, #0
 800afa2:	bf0c      	ite	eq
 800afa4:	4635      	moveq	r5, r6
 800afa6:	2501      	movne	r5, #1
 800afa8:	68ca      	ldr	r2, [r1, #12]
 800afaa:	9201      	str	r2, [sp, #4]
 800afac:	4a18      	ldr	r2, [pc, #96]	; (800b010 <__tzcalc_limits+0x150>)
 800afae:	f04f 0930 	mov.w	r9, #48	; 0x30
 800afb2:	fb09 2505 	mla	r5, r9, r5, r2
 800afb6:	46a6      	mov	lr, r4
 800afb8:	f04f 0800 	mov.w	r8, #0
 800afbc:	3d04      	subs	r5, #4
 800afbe:	9a01      	ldr	r2, [sp, #4]
 800afc0:	f108 0801 	add.w	r8, r8, #1
 800afc4:	4542      	cmp	r2, r8
 800afc6:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800afca:	dc18      	bgt.n	800affe <__tzcalc_limits+0x13e>
 800afcc:	f10e 0504 	add.w	r5, lr, #4
 800afd0:	fb95 f8fa 	sdiv	r8, r5, sl
 800afd4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800afd8:	eba5 0808 	sub.w	r8, r5, r8
 800afdc:	ebb3 0808 	subs.w	r8, r3, r8
 800afe0:	690b      	ldr	r3, [r1, #16]
 800afe2:	f103 33ff 	add.w	r3, r3, #4294967295
 800afe6:	bf48      	it	mi
 800afe8:	f108 0807 	addmi.w	r8, r8, #7
 800afec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800aff0:	4443      	add	r3, r8
 800aff2:	454b      	cmp	r3, r9
 800aff4:	da05      	bge.n	800b002 <__tzcalc_limits+0x142>
 800aff6:	4473      	add	r3, lr
 800aff8:	e7ac      	b.n	800af54 <__tzcalc_limits+0x94>
 800affa:	4635      	mov	r5, r6
 800affc:	e7d4      	b.n	800afa8 <__tzcalc_limits+0xe8>
 800affe:	44ce      	add	lr, r9
 800b000:	e7dd      	b.n	800afbe <__tzcalc_limits+0xfe>
 800b002:	3b07      	subs	r3, #7
 800b004:	e7f5      	b.n	800aff2 <__tzcalc_limits+0x132>
 800b006:	2000      	movs	r0, #0
 800b008:	e7bf      	b.n	800af8a <__tzcalc_limits+0xca>
 800b00a:	bf00      	nop
 800b00c:	00015180 	.word	0x00015180
 800b010:	0800ec58 	.word	0x0800ec58

0800b014 <__tz_lock>:
 800b014:	4801      	ldr	r0, [pc, #4]	; (800b01c <__tz_lock+0x8>)
 800b016:	f001 bf76 	b.w	800cf06 <__retarget_lock_acquire>
 800b01a:	bf00      	nop
 800b01c:	20000508 	.word	0x20000508

0800b020 <__tz_unlock>:
 800b020:	4801      	ldr	r0, [pc, #4]	; (800b028 <__tz_unlock+0x8>)
 800b022:	f001 bf72 	b.w	800cf0a <__retarget_lock_release>
 800b026:	bf00      	nop
 800b028:	20000508 	.word	0x20000508

0800b02c <_tzset_unlocked>:
 800b02c:	4b01      	ldr	r3, [pc, #4]	; (800b034 <_tzset_unlocked+0x8>)
 800b02e:	6818      	ldr	r0, [r3, #0]
 800b030:	f000 b802 	b.w	800b038 <_tzset_unlocked_r>
 800b034:	20000014 	.word	0x20000014

0800b038 <_tzset_unlocked_r>:
 800b038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03c:	b08d      	sub	sp, #52	; 0x34
 800b03e:	4607      	mov	r7, r0
 800b040:	f001 feac 	bl	800cd9c <__gettzinfo>
 800b044:	49b0      	ldr	r1, [pc, #704]	; (800b308 <_tzset_unlocked_r+0x2d0>)
 800b046:	4eb1      	ldr	r6, [pc, #708]	; (800b30c <_tzset_unlocked_r+0x2d4>)
 800b048:	4605      	mov	r5, r0
 800b04a:	4638      	mov	r0, r7
 800b04c:	f001 fe9e 	bl	800cd8c <_getenv_r>
 800b050:	4604      	mov	r4, r0
 800b052:	b970      	cbnz	r0, 800b072 <_tzset_unlocked_r+0x3a>
 800b054:	4bae      	ldr	r3, [pc, #696]	; (800b310 <_tzset_unlocked_r+0x2d8>)
 800b056:	4aaf      	ldr	r2, [pc, #700]	; (800b314 <_tzset_unlocked_r+0x2dc>)
 800b058:	6018      	str	r0, [r3, #0]
 800b05a:	4baf      	ldr	r3, [pc, #700]	; (800b318 <_tzset_unlocked_r+0x2e0>)
 800b05c:	6018      	str	r0, [r3, #0]
 800b05e:	4baf      	ldr	r3, [pc, #700]	; (800b31c <_tzset_unlocked_r+0x2e4>)
 800b060:	6830      	ldr	r0, [r6, #0]
 800b062:	e9c3 2200 	strd	r2, r2, [r3]
 800b066:	f7fd fddd 	bl	8008c24 <free>
 800b06a:	6034      	str	r4, [r6, #0]
 800b06c:	b00d      	add	sp, #52	; 0x34
 800b06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b072:	6831      	ldr	r1, [r6, #0]
 800b074:	2900      	cmp	r1, #0
 800b076:	d162      	bne.n	800b13e <_tzset_unlocked_r+0x106>
 800b078:	6830      	ldr	r0, [r6, #0]
 800b07a:	f7fd fdd3 	bl	8008c24 <free>
 800b07e:	4620      	mov	r0, r4
 800b080:	f7f5 f8a6 	bl	80001d0 <strlen>
 800b084:	1c41      	adds	r1, r0, #1
 800b086:	4638      	mov	r0, r7
 800b088:	f7fe f8ba 	bl	8009200 <_malloc_r>
 800b08c:	6030      	str	r0, [r6, #0]
 800b08e:	2800      	cmp	r0, #0
 800b090:	d15a      	bne.n	800b148 <_tzset_unlocked_r+0x110>
 800b092:	7823      	ldrb	r3, [r4, #0]
 800b094:	4aa2      	ldr	r2, [pc, #648]	; (800b320 <_tzset_unlocked_r+0x2e8>)
 800b096:	49a3      	ldr	r1, [pc, #652]	; (800b324 <_tzset_unlocked_r+0x2ec>)
 800b098:	2b3a      	cmp	r3, #58	; 0x3a
 800b09a:	bf08      	it	eq
 800b09c:	3401      	addeq	r4, #1
 800b09e:	ae0a      	add	r6, sp, #40	; 0x28
 800b0a0:	4633      	mov	r3, r6
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f002 ff58 	bl	800df58 <siscanf>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	dddf      	ble.n	800b06c <_tzset_unlocked_r+0x34>
 800b0ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ae:	18e7      	adds	r7, r4, r3
 800b0b0:	5ce3      	ldrb	r3, [r4, r3]
 800b0b2:	2b2d      	cmp	r3, #45	; 0x2d
 800b0b4:	d14c      	bne.n	800b150 <_tzset_unlocked_r+0x118>
 800b0b6:	3701      	adds	r7, #1
 800b0b8:	f04f 38ff 	mov.w	r8, #4294967295
 800b0bc:	f10d 0a20 	add.w	sl, sp, #32
 800b0c0:	f10d 0b1e 	add.w	fp, sp, #30
 800b0c4:	2400      	movs	r4, #0
 800b0c6:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800b0ca:	4997      	ldr	r1, [pc, #604]	; (800b328 <_tzset_unlocked_r+0x2f0>)
 800b0cc:	9603      	str	r6, [sp, #12]
 800b0ce:	f8cd b000 	str.w	fp, [sp]
 800b0d2:	4633      	mov	r3, r6
 800b0d4:	aa07      	add	r2, sp, #28
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	f8ad 401e 	strh.w	r4, [sp, #30]
 800b0dc:	f8ad 4020 	strh.w	r4, [sp, #32]
 800b0e0:	f002 ff3a 	bl	800df58 <siscanf>
 800b0e4:	42a0      	cmp	r0, r4
 800b0e6:	ddc1      	ble.n	800b06c <_tzset_unlocked_r+0x34>
 800b0e8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b0ec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b0f0:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800b334 <_tzset_unlocked_r+0x2fc>
 800b0f4:	213c      	movs	r1, #60	; 0x3c
 800b0f6:	fb01 3302 	mla	r3, r1, r2, r3
 800b0fa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b0fe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b102:	fb01 3302 	mla	r3, r1, r2, r3
 800b106:	fb08 f303 	mul.w	r3, r8, r3
 800b10a:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800b31c <_tzset_unlocked_r+0x2e4>
 800b10e:	62ab      	str	r3, [r5, #40]	; 0x28
 800b110:	4b83      	ldr	r3, [pc, #524]	; (800b320 <_tzset_unlocked_r+0x2e8>)
 800b112:	f8c8 3000 	str.w	r3, [r8]
 800b116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b118:	4982      	ldr	r1, [pc, #520]	; (800b324 <_tzset_unlocked_r+0x2ec>)
 800b11a:	441f      	add	r7, r3
 800b11c:	464a      	mov	r2, r9
 800b11e:	4633      	mov	r3, r6
 800b120:	4638      	mov	r0, r7
 800b122:	f002 ff19 	bl	800df58 <siscanf>
 800b126:	42a0      	cmp	r0, r4
 800b128:	dc18      	bgt.n	800b15c <_tzset_unlocked_r+0x124>
 800b12a:	f8d8 3000 	ldr.w	r3, [r8]
 800b12e:	f8c8 3004 	str.w	r3, [r8, #4]
 800b132:	4b77      	ldr	r3, [pc, #476]	; (800b310 <_tzset_unlocked_r+0x2d8>)
 800b134:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b136:	601a      	str	r2, [r3, #0]
 800b138:	4b77      	ldr	r3, [pc, #476]	; (800b318 <_tzset_unlocked_r+0x2e0>)
 800b13a:	601c      	str	r4, [r3, #0]
 800b13c:	e796      	b.n	800b06c <_tzset_unlocked_r+0x34>
 800b13e:	f7f5 f89f 	bl	8000280 <strcmp>
 800b142:	2800      	cmp	r0, #0
 800b144:	d198      	bne.n	800b078 <_tzset_unlocked_r+0x40>
 800b146:	e791      	b.n	800b06c <_tzset_unlocked_r+0x34>
 800b148:	4621      	mov	r1, r4
 800b14a:	f002 ff76 	bl	800e03a <strcpy>
 800b14e:	e7a0      	b.n	800b092 <_tzset_unlocked_r+0x5a>
 800b150:	2b2b      	cmp	r3, #43	; 0x2b
 800b152:	bf08      	it	eq
 800b154:	3701      	addeq	r7, #1
 800b156:	f04f 0801 	mov.w	r8, #1
 800b15a:	e7af      	b.n	800b0bc <_tzset_unlocked_r+0x84>
 800b15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b15e:	f8c8 9004 	str.w	r9, [r8, #4]
 800b162:	18fc      	adds	r4, r7, r3
 800b164:	5cfb      	ldrb	r3, [r7, r3]
 800b166:	2b2d      	cmp	r3, #45	; 0x2d
 800b168:	f040 808b 	bne.w	800b282 <_tzset_unlocked_r+0x24a>
 800b16c:	3401      	adds	r4, #1
 800b16e:	f04f 37ff 	mov.w	r7, #4294967295
 800b172:	2300      	movs	r3, #0
 800b174:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b178:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b17c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b180:	930a      	str	r3, [sp, #40]	; 0x28
 800b182:	e9cd a602 	strd	sl, r6, [sp, #8]
 800b186:	e9cd b600 	strd	fp, r6, [sp]
 800b18a:	4967      	ldr	r1, [pc, #412]	; (800b328 <_tzset_unlocked_r+0x2f0>)
 800b18c:	4633      	mov	r3, r6
 800b18e:	aa07      	add	r2, sp, #28
 800b190:	4620      	mov	r0, r4
 800b192:	f002 fee1 	bl	800df58 <siscanf>
 800b196:	2800      	cmp	r0, #0
 800b198:	dc78      	bgt.n	800b28c <_tzset_unlocked_r+0x254>
 800b19a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b19c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800b1a0:	652b      	str	r3, [r5, #80]	; 0x50
 800b1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1a4:	462f      	mov	r7, r5
 800b1a6:	441c      	add	r4, r3
 800b1a8:	f04f 0900 	mov.w	r9, #0
 800b1ac:	7823      	ldrb	r3, [r4, #0]
 800b1ae:	2b2c      	cmp	r3, #44	; 0x2c
 800b1b0:	bf08      	it	eq
 800b1b2:	3401      	addeq	r4, #1
 800b1b4:	f894 8000 	ldrb.w	r8, [r4]
 800b1b8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800b1bc:	d178      	bne.n	800b2b0 <_tzset_unlocked_r+0x278>
 800b1be:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800b1c2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800b1c6:	ab09      	add	r3, sp, #36	; 0x24
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	4958      	ldr	r1, [pc, #352]	; (800b32c <_tzset_unlocked_r+0x2f4>)
 800b1cc:	9603      	str	r6, [sp, #12]
 800b1ce:	4633      	mov	r3, r6
 800b1d0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f002 febf 	bl	800df58 <siscanf>
 800b1da:	2803      	cmp	r0, #3
 800b1dc:	f47f af46 	bne.w	800b06c <_tzset_unlocked_r+0x34>
 800b1e0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800b1e4:	1e4b      	subs	r3, r1, #1
 800b1e6:	2b0b      	cmp	r3, #11
 800b1e8:	f63f af40 	bhi.w	800b06c <_tzset_unlocked_r+0x34>
 800b1ec:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800b1f0:	1e53      	subs	r3, r2, #1
 800b1f2:	2b04      	cmp	r3, #4
 800b1f4:	f63f af3a 	bhi.w	800b06c <_tzset_unlocked_r+0x34>
 800b1f8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800b1fc:	2b06      	cmp	r3, #6
 800b1fe:	f63f af35 	bhi.w	800b06c <_tzset_unlocked_r+0x34>
 800b202:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800b206:	f887 8008 	strb.w	r8, [r7, #8]
 800b20a:	617b      	str	r3, [r7, #20]
 800b20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b20e:	eb04 0803 	add.w	r8, r4, r3
 800b212:	2302      	movs	r3, #2
 800b214:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b218:	2300      	movs	r3, #0
 800b21a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b21e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b222:	930a      	str	r3, [sp, #40]	; 0x28
 800b224:	f898 3000 	ldrb.w	r3, [r8]
 800b228:	2b2f      	cmp	r3, #47	; 0x2f
 800b22a:	d109      	bne.n	800b240 <_tzset_unlocked_r+0x208>
 800b22c:	e9cd a602 	strd	sl, r6, [sp, #8]
 800b230:	e9cd b600 	strd	fp, r6, [sp]
 800b234:	493e      	ldr	r1, [pc, #248]	; (800b330 <_tzset_unlocked_r+0x2f8>)
 800b236:	4633      	mov	r3, r6
 800b238:	aa07      	add	r2, sp, #28
 800b23a:	4640      	mov	r0, r8
 800b23c:	f002 fe8c 	bl	800df58 <siscanf>
 800b240:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b244:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b248:	213c      	movs	r1, #60	; 0x3c
 800b24a:	fb01 3302 	mla	r3, r1, r2, r3
 800b24e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b252:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b256:	fb01 3302 	mla	r3, r1, r2, r3
 800b25a:	61bb      	str	r3, [r7, #24]
 800b25c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b25e:	3728      	adds	r7, #40	; 0x28
 800b260:	4444      	add	r4, r8
 800b262:	f1b9 0f00 	cmp.w	r9, #0
 800b266:	d020      	beq.n	800b2aa <_tzset_unlocked_r+0x272>
 800b268:	6868      	ldr	r0, [r5, #4]
 800b26a:	f7ff fe29 	bl	800aec0 <__tzcalc_limits>
 800b26e:	4b28      	ldr	r3, [pc, #160]	; (800b310 <_tzset_unlocked_r+0x2d8>)
 800b270:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b272:	601a      	str	r2, [r3, #0]
 800b274:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800b276:	1a9b      	subs	r3, r3, r2
 800b278:	4a27      	ldr	r2, [pc, #156]	; (800b318 <_tzset_unlocked_r+0x2e0>)
 800b27a:	bf18      	it	ne
 800b27c:	2301      	movne	r3, #1
 800b27e:	6013      	str	r3, [r2, #0]
 800b280:	e6f4      	b.n	800b06c <_tzset_unlocked_r+0x34>
 800b282:	2b2b      	cmp	r3, #43	; 0x2b
 800b284:	bf08      	it	eq
 800b286:	3401      	addeq	r4, #1
 800b288:	2701      	movs	r7, #1
 800b28a:	e772      	b.n	800b172 <_tzset_unlocked_r+0x13a>
 800b28c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b290:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b294:	213c      	movs	r1, #60	; 0x3c
 800b296:	fb01 3302 	mla	r3, r1, r2, r3
 800b29a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b29e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b2a2:	fb01 3302 	mla	r3, r1, r2, r3
 800b2a6:	437b      	muls	r3, r7
 800b2a8:	e77a      	b.n	800b1a0 <_tzset_unlocked_r+0x168>
 800b2aa:	f04f 0901 	mov.w	r9, #1
 800b2ae:	e77d      	b.n	800b1ac <_tzset_unlocked_r+0x174>
 800b2b0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800b2b4:	bf06      	itte	eq
 800b2b6:	3401      	addeq	r4, #1
 800b2b8:	4643      	moveq	r3, r8
 800b2ba:	2344      	movne	r3, #68	; 0x44
 800b2bc:	220a      	movs	r2, #10
 800b2be:	a90b      	add	r1, sp, #44	; 0x2c
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	9305      	str	r3, [sp, #20]
 800b2c4:	f002 ff4a 	bl	800e15c <strtoul>
 800b2c8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b2cc:	9b05      	ldr	r3, [sp, #20]
 800b2ce:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800b2d2:	45a0      	cmp	r8, r4
 800b2d4:	d114      	bne.n	800b300 <_tzset_unlocked_r+0x2c8>
 800b2d6:	234d      	movs	r3, #77	; 0x4d
 800b2d8:	f1b9 0f00 	cmp.w	r9, #0
 800b2dc:	d107      	bne.n	800b2ee <_tzset_unlocked_r+0x2b6>
 800b2de:	722b      	strb	r3, [r5, #8]
 800b2e0:	2103      	movs	r1, #3
 800b2e2:	2302      	movs	r3, #2
 800b2e4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800b2e8:	f8c5 9014 	str.w	r9, [r5, #20]
 800b2ec:	e791      	b.n	800b212 <_tzset_unlocked_r+0x1da>
 800b2ee:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800b2f2:	220b      	movs	r2, #11
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	63eb      	str	r3, [r5, #60]	; 0x3c
 800b2fe:	e788      	b.n	800b212 <_tzset_unlocked_r+0x1da>
 800b300:	b280      	uxth	r0, r0
 800b302:	723b      	strb	r3, [r7, #8]
 800b304:	6178      	str	r0, [r7, #20]
 800b306:	e784      	b.n	800b212 <_tzset_unlocked_r+0x1da>
 800b308:	0800ed40 	.word	0x0800ed40
 800b30c:	200004f8 	.word	0x200004f8
 800b310:	20000500 	.word	0x20000500
 800b314:	0800ed43 	.word	0x0800ed43
 800b318:	200004fc 	.word	0x200004fc
 800b31c:	20000078 	.word	0x20000078
 800b320:	200004eb 	.word	0x200004eb
 800b324:	0800ed47 	.word	0x0800ed47
 800b328:	0800ed6a 	.word	0x0800ed6a
 800b32c:	0800ed56 	.word	0x0800ed56
 800b330:	0800ed69 	.word	0x0800ed69
 800b334:	200004e0 	.word	0x200004e0

0800b338 <__swbuf_r>:
 800b338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b33a:	460e      	mov	r6, r1
 800b33c:	4614      	mov	r4, r2
 800b33e:	4605      	mov	r5, r0
 800b340:	b118      	cbz	r0, 800b34a <__swbuf_r+0x12>
 800b342:	6983      	ldr	r3, [r0, #24]
 800b344:	b90b      	cbnz	r3, 800b34a <__swbuf_r+0x12>
 800b346:	f001 f8c7 	bl	800c4d8 <__sinit>
 800b34a:	4b21      	ldr	r3, [pc, #132]	; (800b3d0 <__swbuf_r+0x98>)
 800b34c:	429c      	cmp	r4, r3
 800b34e:	d12b      	bne.n	800b3a8 <__swbuf_r+0x70>
 800b350:	686c      	ldr	r4, [r5, #4]
 800b352:	69a3      	ldr	r3, [r4, #24]
 800b354:	60a3      	str	r3, [r4, #8]
 800b356:	89a3      	ldrh	r3, [r4, #12]
 800b358:	071a      	lsls	r2, r3, #28
 800b35a:	d52f      	bpl.n	800b3bc <__swbuf_r+0x84>
 800b35c:	6923      	ldr	r3, [r4, #16]
 800b35e:	b36b      	cbz	r3, 800b3bc <__swbuf_r+0x84>
 800b360:	6923      	ldr	r3, [r4, #16]
 800b362:	6820      	ldr	r0, [r4, #0]
 800b364:	1ac0      	subs	r0, r0, r3
 800b366:	6963      	ldr	r3, [r4, #20]
 800b368:	b2f6      	uxtb	r6, r6
 800b36a:	4283      	cmp	r3, r0
 800b36c:	4637      	mov	r7, r6
 800b36e:	dc04      	bgt.n	800b37a <__swbuf_r+0x42>
 800b370:	4621      	mov	r1, r4
 800b372:	4628      	mov	r0, r5
 800b374:	f001 f81c 	bl	800c3b0 <_fflush_r>
 800b378:	bb30      	cbnz	r0, 800b3c8 <__swbuf_r+0x90>
 800b37a:	68a3      	ldr	r3, [r4, #8]
 800b37c:	3b01      	subs	r3, #1
 800b37e:	60a3      	str	r3, [r4, #8]
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	1c5a      	adds	r2, r3, #1
 800b384:	6022      	str	r2, [r4, #0]
 800b386:	701e      	strb	r6, [r3, #0]
 800b388:	6963      	ldr	r3, [r4, #20]
 800b38a:	3001      	adds	r0, #1
 800b38c:	4283      	cmp	r3, r0
 800b38e:	d004      	beq.n	800b39a <__swbuf_r+0x62>
 800b390:	89a3      	ldrh	r3, [r4, #12]
 800b392:	07db      	lsls	r3, r3, #31
 800b394:	d506      	bpl.n	800b3a4 <__swbuf_r+0x6c>
 800b396:	2e0a      	cmp	r6, #10
 800b398:	d104      	bne.n	800b3a4 <__swbuf_r+0x6c>
 800b39a:	4621      	mov	r1, r4
 800b39c:	4628      	mov	r0, r5
 800b39e:	f001 f807 	bl	800c3b0 <_fflush_r>
 800b3a2:	b988      	cbnz	r0, 800b3c8 <__swbuf_r+0x90>
 800b3a4:	4638      	mov	r0, r7
 800b3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3a8:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <__swbuf_r+0x9c>)
 800b3aa:	429c      	cmp	r4, r3
 800b3ac:	d101      	bne.n	800b3b2 <__swbuf_r+0x7a>
 800b3ae:	68ac      	ldr	r4, [r5, #8]
 800b3b0:	e7cf      	b.n	800b352 <__swbuf_r+0x1a>
 800b3b2:	4b09      	ldr	r3, [pc, #36]	; (800b3d8 <__swbuf_r+0xa0>)
 800b3b4:	429c      	cmp	r4, r3
 800b3b6:	bf08      	it	eq
 800b3b8:	68ec      	ldreq	r4, [r5, #12]
 800b3ba:	e7ca      	b.n	800b352 <__swbuf_r+0x1a>
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4628      	mov	r0, r5
 800b3c0:	f000 f80c 	bl	800b3dc <__swsetup_r>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d0cb      	beq.n	800b360 <__swbuf_r+0x28>
 800b3c8:	f04f 37ff 	mov.w	r7, #4294967295
 800b3cc:	e7ea      	b.n	800b3a4 <__swbuf_r+0x6c>
 800b3ce:	bf00      	nop
 800b3d0:	0800f008 	.word	0x0800f008
 800b3d4:	0800f028 	.word	0x0800f028
 800b3d8:	0800efe8 	.word	0x0800efe8

0800b3dc <__swsetup_r>:
 800b3dc:	4b32      	ldr	r3, [pc, #200]	; (800b4a8 <__swsetup_r+0xcc>)
 800b3de:	b570      	push	{r4, r5, r6, lr}
 800b3e0:	681d      	ldr	r5, [r3, #0]
 800b3e2:	4606      	mov	r6, r0
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	b125      	cbz	r5, 800b3f2 <__swsetup_r+0x16>
 800b3e8:	69ab      	ldr	r3, [r5, #24]
 800b3ea:	b913      	cbnz	r3, 800b3f2 <__swsetup_r+0x16>
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	f001 f873 	bl	800c4d8 <__sinit>
 800b3f2:	4b2e      	ldr	r3, [pc, #184]	; (800b4ac <__swsetup_r+0xd0>)
 800b3f4:	429c      	cmp	r4, r3
 800b3f6:	d10f      	bne.n	800b418 <__swsetup_r+0x3c>
 800b3f8:	686c      	ldr	r4, [r5, #4]
 800b3fa:	89a3      	ldrh	r3, [r4, #12]
 800b3fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b400:	0719      	lsls	r1, r3, #28
 800b402:	d42c      	bmi.n	800b45e <__swsetup_r+0x82>
 800b404:	06dd      	lsls	r5, r3, #27
 800b406:	d411      	bmi.n	800b42c <__swsetup_r+0x50>
 800b408:	2309      	movs	r3, #9
 800b40a:	6033      	str	r3, [r6, #0]
 800b40c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b410:	81a3      	strh	r3, [r4, #12]
 800b412:	f04f 30ff 	mov.w	r0, #4294967295
 800b416:	e03e      	b.n	800b496 <__swsetup_r+0xba>
 800b418:	4b25      	ldr	r3, [pc, #148]	; (800b4b0 <__swsetup_r+0xd4>)
 800b41a:	429c      	cmp	r4, r3
 800b41c:	d101      	bne.n	800b422 <__swsetup_r+0x46>
 800b41e:	68ac      	ldr	r4, [r5, #8]
 800b420:	e7eb      	b.n	800b3fa <__swsetup_r+0x1e>
 800b422:	4b24      	ldr	r3, [pc, #144]	; (800b4b4 <__swsetup_r+0xd8>)
 800b424:	429c      	cmp	r4, r3
 800b426:	bf08      	it	eq
 800b428:	68ec      	ldreq	r4, [r5, #12]
 800b42a:	e7e6      	b.n	800b3fa <__swsetup_r+0x1e>
 800b42c:	0758      	lsls	r0, r3, #29
 800b42e:	d512      	bpl.n	800b456 <__swsetup_r+0x7a>
 800b430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b432:	b141      	cbz	r1, 800b446 <__swsetup_r+0x6a>
 800b434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b438:	4299      	cmp	r1, r3
 800b43a:	d002      	beq.n	800b442 <__swsetup_r+0x66>
 800b43c:	4630      	mov	r0, r6
 800b43e:	f7fd fe73 	bl	8009128 <_free_r>
 800b442:	2300      	movs	r3, #0
 800b444:	6363      	str	r3, [r4, #52]	; 0x34
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b44c:	81a3      	strh	r3, [r4, #12]
 800b44e:	2300      	movs	r3, #0
 800b450:	6063      	str	r3, [r4, #4]
 800b452:	6923      	ldr	r3, [r4, #16]
 800b454:	6023      	str	r3, [r4, #0]
 800b456:	89a3      	ldrh	r3, [r4, #12]
 800b458:	f043 0308 	orr.w	r3, r3, #8
 800b45c:	81a3      	strh	r3, [r4, #12]
 800b45e:	6923      	ldr	r3, [r4, #16]
 800b460:	b94b      	cbnz	r3, 800b476 <__swsetup_r+0x9a>
 800b462:	89a3      	ldrh	r3, [r4, #12]
 800b464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b46c:	d003      	beq.n	800b476 <__swsetup_r+0x9a>
 800b46e:	4621      	mov	r1, r4
 800b470:	4630      	mov	r0, r6
 800b472:	f001 fd71 	bl	800cf58 <__smakebuf_r>
 800b476:	89a0      	ldrh	r0, [r4, #12]
 800b478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b47c:	f010 0301 	ands.w	r3, r0, #1
 800b480:	d00a      	beq.n	800b498 <__swsetup_r+0xbc>
 800b482:	2300      	movs	r3, #0
 800b484:	60a3      	str	r3, [r4, #8]
 800b486:	6963      	ldr	r3, [r4, #20]
 800b488:	425b      	negs	r3, r3
 800b48a:	61a3      	str	r3, [r4, #24]
 800b48c:	6923      	ldr	r3, [r4, #16]
 800b48e:	b943      	cbnz	r3, 800b4a2 <__swsetup_r+0xc6>
 800b490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b494:	d1ba      	bne.n	800b40c <__swsetup_r+0x30>
 800b496:	bd70      	pop	{r4, r5, r6, pc}
 800b498:	0781      	lsls	r1, r0, #30
 800b49a:	bf58      	it	pl
 800b49c:	6963      	ldrpl	r3, [r4, #20]
 800b49e:	60a3      	str	r3, [r4, #8]
 800b4a0:	e7f4      	b.n	800b48c <__swsetup_r+0xb0>
 800b4a2:	2000      	movs	r0, #0
 800b4a4:	e7f7      	b.n	800b496 <__swsetup_r+0xba>
 800b4a6:	bf00      	nop
 800b4a8:	20000014 	.word	0x20000014
 800b4ac:	0800f008 	.word	0x0800f008
 800b4b0:	0800f028 	.word	0x0800f028
 800b4b4:	0800efe8 	.word	0x0800efe8

0800b4b8 <asctime>:
 800b4b8:	4b0d      	ldr	r3, [pc, #52]	; (800b4f0 <asctime+0x38>)
 800b4ba:	b570      	push	{r4, r5, r6, lr}
 800b4bc:	681d      	ldr	r5, [r3, #0]
 800b4be:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	b976      	cbnz	r6, 800b4e2 <asctime+0x2a>
 800b4c4:	201a      	movs	r0, #26
 800b4c6:	f7fd fba5 	bl	8008c14 <malloc>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	6428      	str	r0, [r5, #64]	; 0x40
 800b4ce:	b920      	cbnz	r0, 800b4da <asctime+0x22>
 800b4d0:	4b08      	ldr	r3, [pc, #32]	; (800b4f4 <asctime+0x3c>)
 800b4d2:	4809      	ldr	r0, [pc, #36]	; (800b4f8 <asctime+0x40>)
 800b4d4:	2137      	movs	r1, #55	; 0x37
 800b4d6:	f000 f837 	bl	800b548 <__assert_func>
 800b4da:	221a      	movs	r2, #26
 800b4dc:	4631      	mov	r1, r6
 800b4de:	f7fd fba9 	bl	8008c34 <memset>
 800b4e2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b4ea:	f000 b807 	b.w	800b4fc <asctime_r>
 800b4ee:	bf00      	nop
 800b4f0:	20000014 	.word	0x20000014
 800b4f4:	0800eb84 	.word	0x0800eb84
 800b4f8:	0800ed7c 	.word	0x0800ed7c

0800b4fc <asctime_r>:
 800b4fc:	b510      	push	{r4, lr}
 800b4fe:	460c      	mov	r4, r1
 800b500:	6941      	ldr	r1, [r0, #20]
 800b502:	6903      	ldr	r3, [r0, #16]
 800b504:	6982      	ldr	r2, [r0, #24]
 800b506:	b086      	sub	sp, #24
 800b508:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800b50c:	9104      	str	r1, [sp, #16]
 800b50e:	6801      	ldr	r1, [r0, #0]
 800b510:	9103      	str	r1, [sp, #12]
 800b512:	6841      	ldr	r1, [r0, #4]
 800b514:	9102      	str	r1, [sp, #8]
 800b516:	6881      	ldr	r1, [r0, #8]
 800b518:	9101      	str	r1, [sp, #4]
 800b51a:	68c1      	ldr	r1, [r0, #12]
 800b51c:	9100      	str	r1, [sp, #0]
 800b51e:	4907      	ldr	r1, [pc, #28]	; (800b53c <asctime_r+0x40>)
 800b520:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b524:	440b      	add	r3, r1
 800b526:	4906      	ldr	r1, [pc, #24]	; (800b540 <asctime_r+0x44>)
 800b528:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b52c:	440a      	add	r2, r1
 800b52e:	4620      	mov	r0, r4
 800b530:	4904      	ldr	r1, [pc, #16]	; (800b544 <asctime_r+0x48>)
 800b532:	f7fe fdf7 	bl	800a124 <siprintf>
 800b536:	4620      	mov	r0, r4
 800b538:	b006      	add	sp, #24
 800b53a:	bd10      	pop	{r4, pc}
 800b53c:	0800ee0d 	.word	0x0800ee0d
 800b540:	0800edf8 	.word	0x0800edf8
 800b544:	0800edd8 	.word	0x0800edd8

0800b548 <__assert_func>:
 800b548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b54a:	4614      	mov	r4, r2
 800b54c:	461a      	mov	r2, r3
 800b54e:	4b09      	ldr	r3, [pc, #36]	; (800b574 <__assert_func+0x2c>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4605      	mov	r5, r0
 800b554:	68d8      	ldr	r0, [r3, #12]
 800b556:	b14c      	cbz	r4, 800b56c <__assert_func+0x24>
 800b558:	4b07      	ldr	r3, [pc, #28]	; (800b578 <__assert_func+0x30>)
 800b55a:	9100      	str	r1, [sp, #0]
 800b55c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b560:	4906      	ldr	r1, [pc, #24]	; (800b57c <__assert_func+0x34>)
 800b562:	462b      	mov	r3, r5
 800b564:	f001 f836 	bl	800c5d4 <fiprintf>
 800b568:	f002 fe22 	bl	800e1b0 <abort>
 800b56c:	4b04      	ldr	r3, [pc, #16]	; (800b580 <__assert_func+0x38>)
 800b56e:	461c      	mov	r4, r3
 800b570:	e7f3      	b.n	800b55a <__assert_func+0x12>
 800b572:	bf00      	nop
 800b574:	20000014 	.word	0x20000014
 800b578:	0800ee31 	.word	0x0800ee31
 800b57c:	0800ee3e 	.word	0x0800ee3e
 800b580:	0800edf7 	.word	0x0800edf7

0800b584 <div>:
 800b584:	2900      	cmp	r1, #0
 800b586:	b510      	push	{r4, lr}
 800b588:	fb91 f4f2 	sdiv	r4, r1, r2
 800b58c:	fb02 1314 	mls	r3, r2, r4, r1
 800b590:	db06      	blt.n	800b5a0 <div+0x1c>
 800b592:	2b00      	cmp	r3, #0
 800b594:	da01      	bge.n	800b59a <div+0x16>
 800b596:	3401      	adds	r4, #1
 800b598:	1a9b      	subs	r3, r3, r2
 800b59a:	e9c0 4300 	strd	r4, r3, [r0]
 800b59e:	bd10      	pop	{r4, pc}
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	bfc4      	itt	gt
 800b5a4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800b5a8:	189b      	addgt	r3, r3, r2
 800b5aa:	e7f6      	b.n	800b59a <div+0x16>

0800b5ac <quorem>:
 800b5ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	6903      	ldr	r3, [r0, #16]
 800b5b2:	690c      	ldr	r4, [r1, #16]
 800b5b4:	42a3      	cmp	r3, r4
 800b5b6:	4607      	mov	r7, r0
 800b5b8:	f2c0 8081 	blt.w	800b6be <quorem+0x112>
 800b5bc:	3c01      	subs	r4, #1
 800b5be:	f101 0814 	add.w	r8, r1, #20
 800b5c2:	f100 0514 	add.w	r5, r0, #20
 800b5c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5ca:	9301      	str	r3, [sp, #4]
 800b5cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b5dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5e4:	d331      	bcc.n	800b64a <quorem+0x9e>
 800b5e6:	f04f 0e00 	mov.w	lr, #0
 800b5ea:	4640      	mov	r0, r8
 800b5ec:	46ac      	mov	ip, r5
 800b5ee:	46f2      	mov	sl, lr
 800b5f0:	f850 2b04 	ldr.w	r2, [r0], #4
 800b5f4:	b293      	uxth	r3, r2
 800b5f6:	fb06 e303 	mla	r3, r6, r3, lr
 800b5fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	ebaa 0303 	sub.w	r3, sl, r3
 800b604:	f8dc a000 	ldr.w	sl, [ip]
 800b608:	0c12      	lsrs	r2, r2, #16
 800b60a:	fa13 f38a 	uxtah	r3, r3, sl
 800b60e:	fb06 e202 	mla	r2, r6, r2, lr
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	9b00      	ldr	r3, [sp, #0]
 800b616:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b61a:	b292      	uxth	r2, r2
 800b61c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b620:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b624:	f8bd 3000 	ldrh.w	r3, [sp]
 800b628:	4581      	cmp	r9, r0
 800b62a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b62e:	f84c 3b04 	str.w	r3, [ip], #4
 800b632:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b636:	d2db      	bcs.n	800b5f0 <quorem+0x44>
 800b638:	f855 300b 	ldr.w	r3, [r5, fp]
 800b63c:	b92b      	cbnz	r3, 800b64a <quorem+0x9e>
 800b63e:	9b01      	ldr	r3, [sp, #4]
 800b640:	3b04      	subs	r3, #4
 800b642:	429d      	cmp	r5, r3
 800b644:	461a      	mov	r2, r3
 800b646:	d32e      	bcc.n	800b6a6 <quorem+0xfa>
 800b648:	613c      	str	r4, [r7, #16]
 800b64a:	4638      	mov	r0, r7
 800b64c:	f001 ffbc 	bl	800d5c8 <__mcmp>
 800b650:	2800      	cmp	r0, #0
 800b652:	db24      	blt.n	800b69e <quorem+0xf2>
 800b654:	3601      	adds	r6, #1
 800b656:	4628      	mov	r0, r5
 800b658:	f04f 0c00 	mov.w	ip, #0
 800b65c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b660:	f8d0 e000 	ldr.w	lr, [r0]
 800b664:	b293      	uxth	r3, r2
 800b666:	ebac 0303 	sub.w	r3, ip, r3
 800b66a:	0c12      	lsrs	r2, r2, #16
 800b66c:	fa13 f38e 	uxtah	r3, r3, lr
 800b670:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b674:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b678:	b29b      	uxth	r3, r3
 800b67a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b67e:	45c1      	cmp	r9, r8
 800b680:	f840 3b04 	str.w	r3, [r0], #4
 800b684:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b688:	d2e8      	bcs.n	800b65c <quorem+0xb0>
 800b68a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b68e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b692:	b922      	cbnz	r2, 800b69e <quorem+0xf2>
 800b694:	3b04      	subs	r3, #4
 800b696:	429d      	cmp	r5, r3
 800b698:	461a      	mov	r2, r3
 800b69a:	d30a      	bcc.n	800b6b2 <quorem+0x106>
 800b69c:	613c      	str	r4, [r7, #16]
 800b69e:	4630      	mov	r0, r6
 800b6a0:	b003      	add	sp, #12
 800b6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a6:	6812      	ldr	r2, [r2, #0]
 800b6a8:	3b04      	subs	r3, #4
 800b6aa:	2a00      	cmp	r2, #0
 800b6ac:	d1cc      	bne.n	800b648 <quorem+0x9c>
 800b6ae:	3c01      	subs	r4, #1
 800b6b0:	e7c7      	b.n	800b642 <quorem+0x96>
 800b6b2:	6812      	ldr	r2, [r2, #0]
 800b6b4:	3b04      	subs	r3, #4
 800b6b6:	2a00      	cmp	r2, #0
 800b6b8:	d1f0      	bne.n	800b69c <quorem+0xf0>
 800b6ba:	3c01      	subs	r4, #1
 800b6bc:	e7eb      	b.n	800b696 <quorem+0xea>
 800b6be:	2000      	movs	r0, #0
 800b6c0:	e7ee      	b.n	800b6a0 <quorem+0xf4>
 800b6c2:	0000      	movs	r0, r0
 800b6c4:	0000      	movs	r0, r0
	...

0800b6c8 <_dtoa_r>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	ed2d 8b04 	vpush	{d8-d9}
 800b6d0:	ec57 6b10 	vmov	r6, r7, d0
 800b6d4:	b093      	sub	sp, #76	; 0x4c
 800b6d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b6d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b6dc:	9106      	str	r1, [sp, #24]
 800b6de:	ee10 aa10 	vmov	sl, s0
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b6e6:	930c      	str	r3, [sp, #48]	; 0x30
 800b6e8:	46bb      	mov	fp, r7
 800b6ea:	b975      	cbnz	r5, 800b70a <_dtoa_r+0x42>
 800b6ec:	2010      	movs	r0, #16
 800b6ee:	f7fd fa91 	bl	8008c14 <malloc>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	6260      	str	r0, [r4, #36]	; 0x24
 800b6f6:	b920      	cbnz	r0, 800b702 <_dtoa_r+0x3a>
 800b6f8:	4ba7      	ldr	r3, [pc, #668]	; (800b998 <_dtoa_r+0x2d0>)
 800b6fa:	21ea      	movs	r1, #234	; 0xea
 800b6fc:	48a7      	ldr	r0, [pc, #668]	; (800b99c <_dtoa_r+0x2d4>)
 800b6fe:	f7ff ff23 	bl	800b548 <__assert_func>
 800b702:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b706:	6005      	str	r5, [r0, #0]
 800b708:	60c5      	str	r5, [r0, #12]
 800b70a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b70c:	6819      	ldr	r1, [r3, #0]
 800b70e:	b151      	cbz	r1, 800b726 <_dtoa_r+0x5e>
 800b710:	685a      	ldr	r2, [r3, #4]
 800b712:	604a      	str	r2, [r1, #4]
 800b714:	2301      	movs	r3, #1
 800b716:	4093      	lsls	r3, r2
 800b718:	608b      	str	r3, [r1, #8]
 800b71a:	4620      	mov	r0, r4
 800b71c:	f001 fcc8 	bl	800d0b0 <_Bfree>
 800b720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
 800b726:	1e3b      	subs	r3, r7, #0
 800b728:	bfaa      	itet	ge
 800b72a:	2300      	movge	r3, #0
 800b72c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b730:	f8c8 3000 	strge.w	r3, [r8]
 800b734:	4b9a      	ldr	r3, [pc, #616]	; (800b9a0 <_dtoa_r+0x2d8>)
 800b736:	bfbc      	itt	lt
 800b738:	2201      	movlt	r2, #1
 800b73a:	f8c8 2000 	strlt.w	r2, [r8]
 800b73e:	ea33 030b 	bics.w	r3, r3, fp
 800b742:	d11b      	bne.n	800b77c <_dtoa_r+0xb4>
 800b744:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b746:	f242 730f 	movw	r3, #9999	; 0x270f
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b750:	4333      	orrs	r3, r6
 800b752:	f000 8592 	beq.w	800c27a <_dtoa_r+0xbb2>
 800b756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b758:	b963      	cbnz	r3, 800b774 <_dtoa_r+0xac>
 800b75a:	4b92      	ldr	r3, [pc, #584]	; (800b9a4 <_dtoa_r+0x2dc>)
 800b75c:	e022      	b.n	800b7a4 <_dtoa_r+0xdc>
 800b75e:	4b92      	ldr	r3, [pc, #584]	; (800b9a8 <_dtoa_r+0x2e0>)
 800b760:	9301      	str	r3, [sp, #4]
 800b762:	3308      	adds	r3, #8
 800b764:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b766:	6013      	str	r3, [r2, #0]
 800b768:	9801      	ldr	r0, [sp, #4]
 800b76a:	b013      	add	sp, #76	; 0x4c
 800b76c:	ecbd 8b04 	vpop	{d8-d9}
 800b770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b774:	4b8b      	ldr	r3, [pc, #556]	; (800b9a4 <_dtoa_r+0x2dc>)
 800b776:	9301      	str	r3, [sp, #4]
 800b778:	3303      	adds	r3, #3
 800b77a:	e7f3      	b.n	800b764 <_dtoa_r+0x9c>
 800b77c:	2200      	movs	r2, #0
 800b77e:	2300      	movs	r3, #0
 800b780:	4650      	mov	r0, sl
 800b782:	4659      	mov	r1, fp
 800b784:	f7f5 f9aa 	bl	8000adc <__aeabi_dcmpeq>
 800b788:	ec4b ab19 	vmov	d9, sl, fp
 800b78c:	4680      	mov	r8, r0
 800b78e:	b158      	cbz	r0, 800b7a8 <_dtoa_r+0xe0>
 800b790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b792:	2301      	movs	r3, #1
 800b794:	6013      	str	r3, [r2, #0]
 800b796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b798:	2b00      	cmp	r3, #0
 800b79a:	f000 856b 	beq.w	800c274 <_dtoa_r+0xbac>
 800b79e:	4883      	ldr	r0, [pc, #524]	; (800b9ac <_dtoa_r+0x2e4>)
 800b7a0:	6018      	str	r0, [r3, #0]
 800b7a2:	1e43      	subs	r3, r0, #1
 800b7a4:	9301      	str	r3, [sp, #4]
 800b7a6:	e7df      	b.n	800b768 <_dtoa_r+0xa0>
 800b7a8:	ec4b ab10 	vmov	d0, sl, fp
 800b7ac:	aa10      	add	r2, sp, #64	; 0x40
 800b7ae:	a911      	add	r1, sp, #68	; 0x44
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f002 f82b 	bl	800d80c <__d2b>
 800b7b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b7ba:	ee08 0a10 	vmov	s16, r0
 800b7be:	2d00      	cmp	r5, #0
 800b7c0:	f000 8084 	beq.w	800b8cc <_dtoa_r+0x204>
 800b7c4:	ee19 3a90 	vmov	r3, s19
 800b7c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b7d0:	4656      	mov	r6, sl
 800b7d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b7d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b7da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b7de:	4b74      	ldr	r3, [pc, #464]	; (800b9b0 <_dtoa_r+0x2e8>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	f7f4 fd59 	bl	800029c <__aeabi_dsub>
 800b7ea:	a365      	add	r3, pc, #404	; (adr r3, 800b980 <_dtoa_r+0x2b8>)
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	f7f4 ff0c 	bl	800060c <__aeabi_dmul>
 800b7f4:	a364      	add	r3, pc, #400	; (adr r3, 800b988 <_dtoa_r+0x2c0>)
 800b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fa:	f7f4 fd51 	bl	80002a0 <__adddf3>
 800b7fe:	4606      	mov	r6, r0
 800b800:	4628      	mov	r0, r5
 800b802:	460f      	mov	r7, r1
 800b804:	f7f4 fe98 	bl	8000538 <__aeabi_i2d>
 800b808:	a361      	add	r3, pc, #388	; (adr r3, 800b990 <_dtoa_r+0x2c8>)
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	f7f4 fefd 	bl	800060c <__aeabi_dmul>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	4630      	mov	r0, r6
 800b818:	4639      	mov	r1, r7
 800b81a:	f7f4 fd41 	bl	80002a0 <__adddf3>
 800b81e:	4606      	mov	r6, r0
 800b820:	460f      	mov	r7, r1
 800b822:	f7f5 f9a3 	bl	8000b6c <__aeabi_d2iz>
 800b826:	2200      	movs	r2, #0
 800b828:	9000      	str	r0, [sp, #0]
 800b82a:	2300      	movs	r3, #0
 800b82c:	4630      	mov	r0, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	f7f5 f95e 	bl	8000af0 <__aeabi_dcmplt>
 800b834:	b150      	cbz	r0, 800b84c <_dtoa_r+0x184>
 800b836:	9800      	ldr	r0, [sp, #0]
 800b838:	f7f4 fe7e 	bl	8000538 <__aeabi_i2d>
 800b83c:	4632      	mov	r2, r6
 800b83e:	463b      	mov	r3, r7
 800b840:	f7f5 f94c 	bl	8000adc <__aeabi_dcmpeq>
 800b844:	b910      	cbnz	r0, 800b84c <_dtoa_r+0x184>
 800b846:	9b00      	ldr	r3, [sp, #0]
 800b848:	3b01      	subs	r3, #1
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	9b00      	ldr	r3, [sp, #0]
 800b84e:	2b16      	cmp	r3, #22
 800b850:	d85a      	bhi.n	800b908 <_dtoa_r+0x240>
 800b852:	9a00      	ldr	r2, [sp, #0]
 800b854:	4b57      	ldr	r3, [pc, #348]	; (800b9b4 <_dtoa_r+0x2ec>)
 800b856:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	ec51 0b19 	vmov	r0, r1, d9
 800b862:	f7f5 f945 	bl	8000af0 <__aeabi_dcmplt>
 800b866:	2800      	cmp	r0, #0
 800b868:	d050      	beq.n	800b90c <_dtoa_r+0x244>
 800b86a:	9b00      	ldr	r3, [sp, #0]
 800b86c:	3b01      	subs	r3, #1
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	2300      	movs	r3, #0
 800b872:	930b      	str	r3, [sp, #44]	; 0x2c
 800b874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b876:	1b5d      	subs	r5, r3, r5
 800b878:	1e6b      	subs	r3, r5, #1
 800b87a:	9305      	str	r3, [sp, #20]
 800b87c:	bf45      	ittet	mi
 800b87e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b882:	9304      	strmi	r3, [sp, #16]
 800b884:	2300      	movpl	r3, #0
 800b886:	2300      	movmi	r3, #0
 800b888:	bf4c      	ite	mi
 800b88a:	9305      	strmi	r3, [sp, #20]
 800b88c:	9304      	strpl	r3, [sp, #16]
 800b88e:	9b00      	ldr	r3, [sp, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	db3d      	blt.n	800b910 <_dtoa_r+0x248>
 800b894:	9b05      	ldr	r3, [sp, #20]
 800b896:	9a00      	ldr	r2, [sp, #0]
 800b898:	920a      	str	r2, [sp, #40]	; 0x28
 800b89a:	4413      	add	r3, r2
 800b89c:	9305      	str	r3, [sp, #20]
 800b89e:	2300      	movs	r3, #0
 800b8a0:	9307      	str	r3, [sp, #28]
 800b8a2:	9b06      	ldr	r3, [sp, #24]
 800b8a4:	2b09      	cmp	r3, #9
 800b8a6:	f200 8089 	bhi.w	800b9bc <_dtoa_r+0x2f4>
 800b8aa:	2b05      	cmp	r3, #5
 800b8ac:	bfc4      	itt	gt
 800b8ae:	3b04      	subgt	r3, #4
 800b8b0:	9306      	strgt	r3, [sp, #24]
 800b8b2:	9b06      	ldr	r3, [sp, #24]
 800b8b4:	f1a3 0302 	sub.w	r3, r3, #2
 800b8b8:	bfcc      	ite	gt
 800b8ba:	2500      	movgt	r5, #0
 800b8bc:	2501      	movle	r5, #1
 800b8be:	2b03      	cmp	r3, #3
 800b8c0:	f200 8087 	bhi.w	800b9d2 <_dtoa_r+0x30a>
 800b8c4:	e8df f003 	tbb	[pc, r3]
 800b8c8:	59383a2d 	.word	0x59383a2d
 800b8cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b8d0:	441d      	add	r5, r3
 800b8d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b8d6:	2b20      	cmp	r3, #32
 800b8d8:	bfc1      	itttt	gt
 800b8da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b8de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b8e2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b8e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b8ea:	bfda      	itte	le
 800b8ec:	f1c3 0320 	rsble	r3, r3, #32
 800b8f0:	fa06 f003 	lslle.w	r0, r6, r3
 800b8f4:	4318      	orrgt	r0, r3
 800b8f6:	f7f4 fe0f 	bl	8000518 <__aeabi_ui2d>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b902:	3d01      	subs	r5, #1
 800b904:	930e      	str	r3, [sp, #56]	; 0x38
 800b906:	e76a      	b.n	800b7de <_dtoa_r+0x116>
 800b908:	2301      	movs	r3, #1
 800b90a:	e7b2      	b.n	800b872 <_dtoa_r+0x1aa>
 800b90c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b90e:	e7b1      	b.n	800b874 <_dtoa_r+0x1ac>
 800b910:	9b04      	ldr	r3, [sp, #16]
 800b912:	9a00      	ldr	r2, [sp, #0]
 800b914:	1a9b      	subs	r3, r3, r2
 800b916:	9304      	str	r3, [sp, #16]
 800b918:	4253      	negs	r3, r2
 800b91a:	9307      	str	r3, [sp, #28]
 800b91c:	2300      	movs	r3, #0
 800b91e:	930a      	str	r3, [sp, #40]	; 0x28
 800b920:	e7bf      	b.n	800b8a2 <_dtoa_r+0x1da>
 800b922:	2300      	movs	r3, #0
 800b924:	9308      	str	r3, [sp, #32]
 800b926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b928:	2b00      	cmp	r3, #0
 800b92a:	dc55      	bgt.n	800b9d8 <_dtoa_r+0x310>
 800b92c:	2301      	movs	r3, #1
 800b92e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b932:	461a      	mov	r2, r3
 800b934:	9209      	str	r2, [sp, #36]	; 0x24
 800b936:	e00c      	b.n	800b952 <_dtoa_r+0x28a>
 800b938:	2301      	movs	r3, #1
 800b93a:	e7f3      	b.n	800b924 <_dtoa_r+0x25c>
 800b93c:	2300      	movs	r3, #0
 800b93e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b940:	9308      	str	r3, [sp, #32]
 800b942:	9b00      	ldr	r3, [sp, #0]
 800b944:	4413      	add	r3, r2
 800b946:	9302      	str	r3, [sp, #8]
 800b948:	3301      	adds	r3, #1
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	9303      	str	r3, [sp, #12]
 800b94e:	bfb8      	it	lt
 800b950:	2301      	movlt	r3, #1
 800b952:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b954:	2200      	movs	r2, #0
 800b956:	6042      	str	r2, [r0, #4]
 800b958:	2204      	movs	r2, #4
 800b95a:	f102 0614 	add.w	r6, r2, #20
 800b95e:	429e      	cmp	r6, r3
 800b960:	6841      	ldr	r1, [r0, #4]
 800b962:	d93d      	bls.n	800b9e0 <_dtoa_r+0x318>
 800b964:	4620      	mov	r0, r4
 800b966:	f001 fb63 	bl	800d030 <_Balloc>
 800b96a:	9001      	str	r0, [sp, #4]
 800b96c:	2800      	cmp	r0, #0
 800b96e:	d13b      	bne.n	800b9e8 <_dtoa_r+0x320>
 800b970:	4b11      	ldr	r3, [pc, #68]	; (800b9b8 <_dtoa_r+0x2f0>)
 800b972:	4602      	mov	r2, r0
 800b974:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b978:	e6c0      	b.n	800b6fc <_dtoa_r+0x34>
 800b97a:	2301      	movs	r3, #1
 800b97c:	e7df      	b.n	800b93e <_dtoa_r+0x276>
 800b97e:	bf00      	nop
 800b980:	636f4361 	.word	0x636f4361
 800b984:	3fd287a7 	.word	0x3fd287a7
 800b988:	8b60c8b3 	.word	0x8b60c8b3
 800b98c:	3fc68a28 	.word	0x3fc68a28
 800b990:	509f79fb 	.word	0x509f79fb
 800b994:	3fd34413 	.word	0x3fd34413
 800b998:	0800eb84 	.word	0x0800eb84
 800b99c:	0800ef7b 	.word	0x0800ef7b
 800b9a0:	7ff00000 	.word	0x7ff00000
 800b9a4:	0800ef77 	.word	0x0800ef77
 800b9a8:	0800ef6e 	.word	0x0800ef6e
 800b9ac:	0800f232 	.word	0x0800f232
 800b9b0:	3ff80000 	.word	0x3ff80000
 800b9b4:	0800f148 	.word	0x0800f148
 800b9b8:	0800efd6 	.word	0x0800efd6
 800b9bc:	2501      	movs	r5, #1
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9306      	str	r3, [sp, #24]
 800b9c2:	9508      	str	r5, [sp, #32]
 800b9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2312      	movs	r3, #18
 800b9d0:	e7b0      	b.n	800b934 <_dtoa_r+0x26c>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	9308      	str	r3, [sp, #32]
 800b9d6:	e7f5      	b.n	800b9c4 <_dtoa_r+0x2fc>
 800b9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9de:	e7b8      	b.n	800b952 <_dtoa_r+0x28a>
 800b9e0:	3101      	adds	r1, #1
 800b9e2:	6041      	str	r1, [r0, #4]
 800b9e4:	0052      	lsls	r2, r2, #1
 800b9e6:	e7b8      	b.n	800b95a <_dtoa_r+0x292>
 800b9e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9ea:	9a01      	ldr	r2, [sp, #4]
 800b9ec:	601a      	str	r2, [r3, #0]
 800b9ee:	9b03      	ldr	r3, [sp, #12]
 800b9f0:	2b0e      	cmp	r3, #14
 800b9f2:	f200 809d 	bhi.w	800bb30 <_dtoa_r+0x468>
 800b9f6:	2d00      	cmp	r5, #0
 800b9f8:	f000 809a 	beq.w	800bb30 <_dtoa_r+0x468>
 800b9fc:	9b00      	ldr	r3, [sp, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	dd32      	ble.n	800ba68 <_dtoa_r+0x3a0>
 800ba02:	4ab7      	ldr	r2, [pc, #732]	; (800bce0 <_dtoa_r+0x618>)
 800ba04:	f003 030f 	and.w	r3, r3, #15
 800ba08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba10:	9b00      	ldr	r3, [sp, #0]
 800ba12:	05d8      	lsls	r0, r3, #23
 800ba14:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ba18:	d516      	bpl.n	800ba48 <_dtoa_r+0x380>
 800ba1a:	4bb2      	ldr	r3, [pc, #712]	; (800bce4 <_dtoa_r+0x61c>)
 800ba1c:	ec51 0b19 	vmov	r0, r1, d9
 800ba20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba24:	f7f4 ff1c 	bl	8000860 <__aeabi_ddiv>
 800ba28:	f007 070f 	and.w	r7, r7, #15
 800ba2c:	4682      	mov	sl, r0
 800ba2e:	468b      	mov	fp, r1
 800ba30:	2503      	movs	r5, #3
 800ba32:	4eac      	ldr	r6, [pc, #688]	; (800bce4 <_dtoa_r+0x61c>)
 800ba34:	b957      	cbnz	r7, 800ba4c <_dtoa_r+0x384>
 800ba36:	4642      	mov	r2, r8
 800ba38:	464b      	mov	r3, r9
 800ba3a:	4650      	mov	r0, sl
 800ba3c:	4659      	mov	r1, fp
 800ba3e:	f7f4 ff0f 	bl	8000860 <__aeabi_ddiv>
 800ba42:	4682      	mov	sl, r0
 800ba44:	468b      	mov	fp, r1
 800ba46:	e028      	b.n	800ba9a <_dtoa_r+0x3d2>
 800ba48:	2502      	movs	r5, #2
 800ba4a:	e7f2      	b.n	800ba32 <_dtoa_r+0x36a>
 800ba4c:	07f9      	lsls	r1, r7, #31
 800ba4e:	d508      	bpl.n	800ba62 <_dtoa_r+0x39a>
 800ba50:	4640      	mov	r0, r8
 800ba52:	4649      	mov	r1, r9
 800ba54:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba58:	f7f4 fdd8 	bl	800060c <__aeabi_dmul>
 800ba5c:	3501      	adds	r5, #1
 800ba5e:	4680      	mov	r8, r0
 800ba60:	4689      	mov	r9, r1
 800ba62:	107f      	asrs	r7, r7, #1
 800ba64:	3608      	adds	r6, #8
 800ba66:	e7e5      	b.n	800ba34 <_dtoa_r+0x36c>
 800ba68:	f000 809b 	beq.w	800bba2 <_dtoa_r+0x4da>
 800ba6c:	9b00      	ldr	r3, [sp, #0]
 800ba6e:	4f9d      	ldr	r7, [pc, #628]	; (800bce4 <_dtoa_r+0x61c>)
 800ba70:	425e      	negs	r6, r3
 800ba72:	4b9b      	ldr	r3, [pc, #620]	; (800bce0 <_dtoa_r+0x618>)
 800ba74:	f006 020f 	and.w	r2, r6, #15
 800ba78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	ec51 0b19 	vmov	r0, r1, d9
 800ba84:	f7f4 fdc2 	bl	800060c <__aeabi_dmul>
 800ba88:	1136      	asrs	r6, r6, #4
 800ba8a:	4682      	mov	sl, r0
 800ba8c:	468b      	mov	fp, r1
 800ba8e:	2300      	movs	r3, #0
 800ba90:	2502      	movs	r5, #2
 800ba92:	2e00      	cmp	r6, #0
 800ba94:	d17a      	bne.n	800bb8c <_dtoa_r+0x4c4>
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1d3      	bne.n	800ba42 <_dtoa_r+0x37a>
 800ba9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 8082 	beq.w	800bba6 <_dtoa_r+0x4de>
 800baa2:	4b91      	ldr	r3, [pc, #580]	; (800bce8 <_dtoa_r+0x620>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	4650      	mov	r0, sl
 800baa8:	4659      	mov	r1, fp
 800baaa:	f7f5 f821 	bl	8000af0 <__aeabi_dcmplt>
 800baae:	2800      	cmp	r0, #0
 800bab0:	d079      	beq.n	800bba6 <_dtoa_r+0x4de>
 800bab2:	9b03      	ldr	r3, [sp, #12]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d076      	beq.n	800bba6 <_dtoa_r+0x4de>
 800bab8:	9b02      	ldr	r3, [sp, #8]
 800baba:	2b00      	cmp	r3, #0
 800babc:	dd36      	ble.n	800bb2c <_dtoa_r+0x464>
 800babe:	9b00      	ldr	r3, [sp, #0]
 800bac0:	4650      	mov	r0, sl
 800bac2:	4659      	mov	r1, fp
 800bac4:	1e5f      	subs	r7, r3, #1
 800bac6:	2200      	movs	r2, #0
 800bac8:	4b88      	ldr	r3, [pc, #544]	; (800bcec <_dtoa_r+0x624>)
 800baca:	f7f4 fd9f 	bl	800060c <__aeabi_dmul>
 800bace:	9e02      	ldr	r6, [sp, #8]
 800bad0:	4682      	mov	sl, r0
 800bad2:	468b      	mov	fp, r1
 800bad4:	3501      	adds	r5, #1
 800bad6:	4628      	mov	r0, r5
 800bad8:	f7f4 fd2e 	bl	8000538 <__aeabi_i2d>
 800badc:	4652      	mov	r2, sl
 800bade:	465b      	mov	r3, fp
 800bae0:	f7f4 fd94 	bl	800060c <__aeabi_dmul>
 800bae4:	4b82      	ldr	r3, [pc, #520]	; (800bcf0 <_dtoa_r+0x628>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	f7f4 fbda 	bl	80002a0 <__adddf3>
 800baec:	46d0      	mov	r8, sl
 800baee:	46d9      	mov	r9, fp
 800baf0:	4682      	mov	sl, r0
 800baf2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800baf6:	2e00      	cmp	r6, #0
 800baf8:	d158      	bne.n	800bbac <_dtoa_r+0x4e4>
 800bafa:	4b7e      	ldr	r3, [pc, #504]	; (800bcf4 <_dtoa_r+0x62c>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	4640      	mov	r0, r8
 800bb00:	4649      	mov	r1, r9
 800bb02:	f7f4 fbcb 	bl	800029c <__aeabi_dsub>
 800bb06:	4652      	mov	r2, sl
 800bb08:	465b      	mov	r3, fp
 800bb0a:	4680      	mov	r8, r0
 800bb0c:	4689      	mov	r9, r1
 800bb0e:	f7f5 f80d 	bl	8000b2c <__aeabi_dcmpgt>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	f040 8295 	bne.w	800c042 <_dtoa_r+0x97a>
 800bb18:	4652      	mov	r2, sl
 800bb1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bb1e:	4640      	mov	r0, r8
 800bb20:	4649      	mov	r1, r9
 800bb22:	f7f4 ffe5 	bl	8000af0 <__aeabi_dcmplt>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	f040 8289 	bne.w	800c03e <_dtoa_r+0x976>
 800bb2c:	ec5b ab19 	vmov	sl, fp, d9
 800bb30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f2c0 8148 	blt.w	800bdc8 <_dtoa_r+0x700>
 800bb38:	9a00      	ldr	r2, [sp, #0]
 800bb3a:	2a0e      	cmp	r2, #14
 800bb3c:	f300 8144 	bgt.w	800bdc8 <_dtoa_r+0x700>
 800bb40:	4b67      	ldr	r3, [pc, #412]	; (800bce0 <_dtoa_r+0x618>)
 800bb42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb46:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f280 80d5 	bge.w	800bcfc <_dtoa_r+0x634>
 800bb52:	9b03      	ldr	r3, [sp, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f300 80d1 	bgt.w	800bcfc <_dtoa_r+0x634>
 800bb5a:	f040 826f 	bne.w	800c03c <_dtoa_r+0x974>
 800bb5e:	4b65      	ldr	r3, [pc, #404]	; (800bcf4 <_dtoa_r+0x62c>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	4640      	mov	r0, r8
 800bb64:	4649      	mov	r1, r9
 800bb66:	f7f4 fd51 	bl	800060c <__aeabi_dmul>
 800bb6a:	4652      	mov	r2, sl
 800bb6c:	465b      	mov	r3, fp
 800bb6e:	f7f4 ffd3 	bl	8000b18 <__aeabi_dcmpge>
 800bb72:	9e03      	ldr	r6, [sp, #12]
 800bb74:	4637      	mov	r7, r6
 800bb76:	2800      	cmp	r0, #0
 800bb78:	f040 8245 	bne.w	800c006 <_dtoa_r+0x93e>
 800bb7c:	9d01      	ldr	r5, [sp, #4]
 800bb7e:	2331      	movs	r3, #49	; 0x31
 800bb80:	f805 3b01 	strb.w	r3, [r5], #1
 800bb84:	9b00      	ldr	r3, [sp, #0]
 800bb86:	3301      	adds	r3, #1
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	e240      	b.n	800c00e <_dtoa_r+0x946>
 800bb8c:	07f2      	lsls	r2, r6, #31
 800bb8e:	d505      	bpl.n	800bb9c <_dtoa_r+0x4d4>
 800bb90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb94:	f7f4 fd3a 	bl	800060c <__aeabi_dmul>
 800bb98:	3501      	adds	r5, #1
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	1076      	asrs	r6, r6, #1
 800bb9e:	3708      	adds	r7, #8
 800bba0:	e777      	b.n	800ba92 <_dtoa_r+0x3ca>
 800bba2:	2502      	movs	r5, #2
 800bba4:	e779      	b.n	800ba9a <_dtoa_r+0x3d2>
 800bba6:	9f00      	ldr	r7, [sp, #0]
 800bba8:	9e03      	ldr	r6, [sp, #12]
 800bbaa:	e794      	b.n	800bad6 <_dtoa_r+0x40e>
 800bbac:	9901      	ldr	r1, [sp, #4]
 800bbae:	4b4c      	ldr	r3, [pc, #304]	; (800bce0 <_dtoa_r+0x618>)
 800bbb0:	4431      	add	r1, r6
 800bbb2:	910d      	str	r1, [sp, #52]	; 0x34
 800bbb4:	9908      	ldr	r1, [sp, #32]
 800bbb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bbba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbbe:	2900      	cmp	r1, #0
 800bbc0:	d043      	beq.n	800bc4a <_dtoa_r+0x582>
 800bbc2:	494d      	ldr	r1, [pc, #308]	; (800bcf8 <_dtoa_r+0x630>)
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	f7f4 fe4b 	bl	8000860 <__aeabi_ddiv>
 800bbca:	4652      	mov	r2, sl
 800bbcc:	465b      	mov	r3, fp
 800bbce:	f7f4 fb65 	bl	800029c <__aeabi_dsub>
 800bbd2:	9d01      	ldr	r5, [sp, #4]
 800bbd4:	4682      	mov	sl, r0
 800bbd6:	468b      	mov	fp, r1
 800bbd8:	4649      	mov	r1, r9
 800bbda:	4640      	mov	r0, r8
 800bbdc:	f7f4 ffc6 	bl	8000b6c <__aeabi_d2iz>
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	f7f4 fca9 	bl	8000538 <__aeabi_i2d>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	460b      	mov	r3, r1
 800bbea:	4640      	mov	r0, r8
 800bbec:	4649      	mov	r1, r9
 800bbee:	f7f4 fb55 	bl	800029c <__aeabi_dsub>
 800bbf2:	3630      	adds	r6, #48	; 0x30
 800bbf4:	f805 6b01 	strb.w	r6, [r5], #1
 800bbf8:	4652      	mov	r2, sl
 800bbfa:	465b      	mov	r3, fp
 800bbfc:	4680      	mov	r8, r0
 800bbfe:	4689      	mov	r9, r1
 800bc00:	f7f4 ff76 	bl	8000af0 <__aeabi_dcmplt>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	d163      	bne.n	800bcd0 <_dtoa_r+0x608>
 800bc08:	4642      	mov	r2, r8
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	4936      	ldr	r1, [pc, #216]	; (800bce8 <_dtoa_r+0x620>)
 800bc0e:	2000      	movs	r0, #0
 800bc10:	f7f4 fb44 	bl	800029c <__aeabi_dsub>
 800bc14:	4652      	mov	r2, sl
 800bc16:	465b      	mov	r3, fp
 800bc18:	f7f4 ff6a 	bl	8000af0 <__aeabi_dcmplt>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	f040 80b5 	bne.w	800bd8c <_dtoa_r+0x6c4>
 800bc22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc24:	429d      	cmp	r5, r3
 800bc26:	d081      	beq.n	800bb2c <_dtoa_r+0x464>
 800bc28:	4b30      	ldr	r3, [pc, #192]	; (800bcec <_dtoa_r+0x624>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	4650      	mov	r0, sl
 800bc2e:	4659      	mov	r1, fp
 800bc30:	f7f4 fcec 	bl	800060c <__aeabi_dmul>
 800bc34:	4b2d      	ldr	r3, [pc, #180]	; (800bcec <_dtoa_r+0x624>)
 800bc36:	4682      	mov	sl, r0
 800bc38:	468b      	mov	fp, r1
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	4649      	mov	r1, r9
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f7f4 fce4 	bl	800060c <__aeabi_dmul>
 800bc44:	4680      	mov	r8, r0
 800bc46:	4689      	mov	r9, r1
 800bc48:	e7c6      	b.n	800bbd8 <_dtoa_r+0x510>
 800bc4a:	4650      	mov	r0, sl
 800bc4c:	4659      	mov	r1, fp
 800bc4e:	f7f4 fcdd 	bl	800060c <__aeabi_dmul>
 800bc52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc54:	9d01      	ldr	r5, [sp, #4]
 800bc56:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc58:	4682      	mov	sl, r0
 800bc5a:	468b      	mov	fp, r1
 800bc5c:	4649      	mov	r1, r9
 800bc5e:	4640      	mov	r0, r8
 800bc60:	f7f4 ff84 	bl	8000b6c <__aeabi_d2iz>
 800bc64:	4606      	mov	r6, r0
 800bc66:	f7f4 fc67 	bl	8000538 <__aeabi_i2d>
 800bc6a:	3630      	adds	r6, #48	; 0x30
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	460b      	mov	r3, r1
 800bc70:	4640      	mov	r0, r8
 800bc72:	4649      	mov	r1, r9
 800bc74:	f7f4 fb12 	bl	800029c <__aeabi_dsub>
 800bc78:	f805 6b01 	strb.w	r6, [r5], #1
 800bc7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc7e:	429d      	cmp	r5, r3
 800bc80:	4680      	mov	r8, r0
 800bc82:	4689      	mov	r9, r1
 800bc84:	f04f 0200 	mov.w	r2, #0
 800bc88:	d124      	bne.n	800bcd4 <_dtoa_r+0x60c>
 800bc8a:	4b1b      	ldr	r3, [pc, #108]	; (800bcf8 <_dtoa_r+0x630>)
 800bc8c:	4650      	mov	r0, sl
 800bc8e:	4659      	mov	r1, fp
 800bc90:	f7f4 fb06 	bl	80002a0 <__adddf3>
 800bc94:	4602      	mov	r2, r0
 800bc96:	460b      	mov	r3, r1
 800bc98:	4640      	mov	r0, r8
 800bc9a:	4649      	mov	r1, r9
 800bc9c:	f7f4 ff46 	bl	8000b2c <__aeabi_dcmpgt>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d173      	bne.n	800bd8c <_dtoa_r+0x6c4>
 800bca4:	4652      	mov	r2, sl
 800bca6:	465b      	mov	r3, fp
 800bca8:	4913      	ldr	r1, [pc, #76]	; (800bcf8 <_dtoa_r+0x630>)
 800bcaa:	2000      	movs	r0, #0
 800bcac:	f7f4 faf6 	bl	800029c <__aeabi_dsub>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4640      	mov	r0, r8
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	f7f4 ff1a 	bl	8000af0 <__aeabi_dcmplt>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	f43f af35 	beq.w	800bb2c <_dtoa_r+0x464>
 800bcc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bcc4:	1e6b      	subs	r3, r5, #1
 800bcc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bccc:	2b30      	cmp	r3, #48	; 0x30
 800bcce:	d0f8      	beq.n	800bcc2 <_dtoa_r+0x5fa>
 800bcd0:	9700      	str	r7, [sp, #0]
 800bcd2:	e049      	b.n	800bd68 <_dtoa_r+0x6a0>
 800bcd4:	4b05      	ldr	r3, [pc, #20]	; (800bcec <_dtoa_r+0x624>)
 800bcd6:	f7f4 fc99 	bl	800060c <__aeabi_dmul>
 800bcda:	4680      	mov	r8, r0
 800bcdc:	4689      	mov	r9, r1
 800bcde:	e7bd      	b.n	800bc5c <_dtoa_r+0x594>
 800bce0:	0800f148 	.word	0x0800f148
 800bce4:	0800f120 	.word	0x0800f120
 800bce8:	3ff00000 	.word	0x3ff00000
 800bcec:	40240000 	.word	0x40240000
 800bcf0:	401c0000 	.word	0x401c0000
 800bcf4:	40140000 	.word	0x40140000
 800bcf8:	3fe00000 	.word	0x3fe00000
 800bcfc:	9d01      	ldr	r5, [sp, #4]
 800bcfe:	4656      	mov	r6, sl
 800bd00:	465f      	mov	r7, fp
 800bd02:	4642      	mov	r2, r8
 800bd04:	464b      	mov	r3, r9
 800bd06:	4630      	mov	r0, r6
 800bd08:	4639      	mov	r1, r7
 800bd0a:	f7f4 fda9 	bl	8000860 <__aeabi_ddiv>
 800bd0e:	f7f4 ff2d 	bl	8000b6c <__aeabi_d2iz>
 800bd12:	4682      	mov	sl, r0
 800bd14:	f7f4 fc10 	bl	8000538 <__aeabi_i2d>
 800bd18:	4642      	mov	r2, r8
 800bd1a:	464b      	mov	r3, r9
 800bd1c:	f7f4 fc76 	bl	800060c <__aeabi_dmul>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	4630      	mov	r0, r6
 800bd26:	4639      	mov	r1, r7
 800bd28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bd2c:	f7f4 fab6 	bl	800029c <__aeabi_dsub>
 800bd30:	f805 6b01 	strb.w	r6, [r5], #1
 800bd34:	9e01      	ldr	r6, [sp, #4]
 800bd36:	9f03      	ldr	r7, [sp, #12]
 800bd38:	1bae      	subs	r6, r5, r6
 800bd3a:	42b7      	cmp	r7, r6
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	d135      	bne.n	800bdae <_dtoa_r+0x6e6>
 800bd42:	f7f4 faad 	bl	80002a0 <__adddf3>
 800bd46:	4642      	mov	r2, r8
 800bd48:	464b      	mov	r3, r9
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	460f      	mov	r7, r1
 800bd4e:	f7f4 feed 	bl	8000b2c <__aeabi_dcmpgt>
 800bd52:	b9d0      	cbnz	r0, 800bd8a <_dtoa_r+0x6c2>
 800bd54:	4642      	mov	r2, r8
 800bd56:	464b      	mov	r3, r9
 800bd58:	4630      	mov	r0, r6
 800bd5a:	4639      	mov	r1, r7
 800bd5c:	f7f4 febe 	bl	8000adc <__aeabi_dcmpeq>
 800bd60:	b110      	cbz	r0, 800bd68 <_dtoa_r+0x6a0>
 800bd62:	f01a 0f01 	tst.w	sl, #1
 800bd66:	d110      	bne.n	800bd8a <_dtoa_r+0x6c2>
 800bd68:	4620      	mov	r0, r4
 800bd6a:	ee18 1a10 	vmov	r1, s16
 800bd6e:	f001 f99f 	bl	800d0b0 <_Bfree>
 800bd72:	2300      	movs	r3, #0
 800bd74:	9800      	ldr	r0, [sp, #0]
 800bd76:	702b      	strb	r3, [r5, #0]
 800bd78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd7a:	3001      	adds	r0, #1
 800bd7c:	6018      	str	r0, [r3, #0]
 800bd7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	f43f acf1 	beq.w	800b768 <_dtoa_r+0xa0>
 800bd86:	601d      	str	r5, [r3, #0]
 800bd88:	e4ee      	b.n	800b768 <_dtoa_r+0xa0>
 800bd8a:	9f00      	ldr	r7, [sp, #0]
 800bd8c:	462b      	mov	r3, r5
 800bd8e:	461d      	mov	r5, r3
 800bd90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd94:	2a39      	cmp	r2, #57	; 0x39
 800bd96:	d106      	bne.n	800bda6 <_dtoa_r+0x6de>
 800bd98:	9a01      	ldr	r2, [sp, #4]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d1f7      	bne.n	800bd8e <_dtoa_r+0x6c6>
 800bd9e:	9901      	ldr	r1, [sp, #4]
 800bda0:	2230      	movs	r2, #48	; 0x30
 800bda2:	3701      	adds	r7, #1
 800bda4:	700a      	strb	r2, [r1, #0]
 800bda6:	781a      	ldrb	r2, [r3, #0]
 800bda8:	3201      	adds	r2, #1
 800bdaa:	701a      	strb	r2, [r3, #0]
 800bdac:	e790      	b.n	800bcd0 <_dtoa_r+0x608>
 800bdae:	4ba6      	ldr	r3, [pc, #664]	; (800c048 <_dtoa_r+0x980>)
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f7f4 fc2b 	bl	800060c <__aeabi_dmul>
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	2300      	movs	r3, #0
 800bdba:	4606      	mov	r6, r0
 800bdbc:	460f      	mov	r7, r1
 800bdbe:	f7f4 fe8d 	bl	8000adc <__aeabi_dcmpeq>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d09d      	beq.n	800bd02 <_dtoa_r+0x63a>
 800bdc6:	e7cf      	b.n	800bd68 <_dtoa_r+0x6a0>
 800bdc8:	9a08      	ldr	r2, [sp, #32]
 800bdca:	2a00      	cmp	r2, #0
 800bdcc:	f000 80d7 	beq.w	800bf7e <_dtoa_r+0x8b6>
 800bdd0:	9a06      	ldr	r2, [sp, #24]
 800bdd2:	2a01      	cmp	r2, #1
 800bdd4:	f300 80ba 	bgt.w	800bf4c <_dtoa_r+0x884>
 800bdd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdda:	2a00      	cmp	r2, #0
 800bddc:	f000 80b2 	beq.w	800bf44 <_dtoa_r+0x87c>
 800bde0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bde4:	9e07      	ldr	r6, [sp, #28]
 800bde6:	9d04      	ldr	r5, [sp, #16]
 800bde8:	9a04      	ldr	r2, [sp, #16]
 800bdea:	441a      	add	r2, r3
 800bdec:	9204      	str	r2, [sp, #16]
 800bdee:	9a05      	ldr	r2, [sp, #20]
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	441a      	add	r2, r3
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	9205      	str	r2, [sp, #20]
 800bdf8:	f001 fa5c 	bl	800d2b4 <__i2b>
 800bdfc:	4607      	mov	r7, r0
 800bdfe:	2d00      	cmp	r5, #0
 800be00:	dd0c      	ble.n	800be1c <_dtoa_r+0x754>
 800be02:	9b05      	ldr	r3, [sp, #20]
 800be04:	2b00      	cmp	r3, #0
 800be06:	dd09      	ble.n	800be1c <_dtoa_r+0x754>
 800be08:	42ab      	cmp	r3, r5
 800be0a:	9a04      	ldr	r2, [sp, #16]
 800be0c:	bfa8      	it	ge
 800be0e:	462b      	movge	r3, r5
 800be10:	1ad2      	subs	r2, r2, r3
 800be12:	9204      	str	r2, [sp, #16]
 800be14:	9a05      	ldr	r2, [sp, #20]
 800be16:	1aed      	subs	r5, r5, r3
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	9305      	str	r3, [sp, #20]
 800be1c:	9b07      	ldr	r3, [sp, #28]
 800be1e:	b31b      	cbz	r3, 800be68 <_dtoa_r+0x7a0>
 800be20:	9b08      	ldr	r3, [sp, #32]
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 80af 	beq.w	800bf86 <_dtoa_r+0x8be>
 800be28:	2e00      	cmp	r6, #0
 800be2a:	dd13      	ble.n	800be54 <_dtoa_r+0x78c>
 800be2c:	4639      	mov	r1, r7
 800be2e:	4632      	mov	r2, r6
 800be30:	4620      	mov	r0, r4
 800be32:	f001 faff 	bl	800d434 <__pow5mult>
 800be36:	ee18 2a10 	vmov	r2, s16
 800be3a:	4601      	mov	r1, r0
 800be3c:	4607      	mov	r7, r0
 800be3e:	4620      	mov	r0, r4
 800be40:	f001 fa4e 	bl	800d2e0 <__multiply>
 800be44:	ee18 1a10 	vmov	r1, s16
 800be48:	4680      	mov	r8, r0
 800be4a:	4620      	mov	r0, r4
 800be4c:	f001 f930 	bl	800d0b0 <_Bfree>
 800be50:	ee08 8a10 	vmov	s16, r8
 800be54:	9b07      	ldr	r3, [sp, #28]
 800be56:	1b9a      	subs	r2, r3, r6
 800be58:	d006      	beq.n	800be68 <_dtoa_r+0x7a0>
 800be5a:	ee18 1a10 	vmov	r1, s16
 800be5e:	4620      	mov	r0, r4
 800be60:	f001 fae8 	bl	800d434 <__pow5mult>
 800be64:	ee08 0a10 	vmov	s16, r0
 800be68:	2101      	movs	r1, #1
 800be6a:	4620      	mov	r0, r4
 800be6c:	f001 fa22 	bl	800d2b4 <__i2b>
 800be70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be72:	2b00      	cmp	r3, #0
 800be74:	4606      	mov	r6, r0
 800be76:	f340 8088 	ble.w	800bf8a <_dtoa_r+0x8c2>
 800be7a:	461a      	mov	r2, r3
 800be7c:	4601      	mov	r1, r0
 800be7e:	4620      	mov	r0, r4
 800be80:	f001 fad8 	bl	800d434 <__pow5mult>
 800be84:	9b06      	ldr	r3, [sp, #24]
 800be86:	2b01      	cmp	r3, #1
 800be88:	4606      	mov	r6, r0
 800be8a:	f340 8081 	ble.w	800bf90 <_dtoa_r+0x8c8>
 800be8e:	f04f 0800 	mov.w	r8, #0
 800be92:	6933      	ldr	r3, [r6, #16]
 800be94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800be98:	6918      	ldr	r0, [r3, #16]
 800be9a:	f001 f9bb 	bl	800d214 <__hi0bits>
 800be9e:	f1c0 0020 	rsb	r0, r0, #32
 800bea2:	9b05      	ldr	r3, [sp, #20]
 800bea4:	4418      	add	r0, r3
 800bea6:	f010 001f 	ands.w	r0, r0, #31
 800beaa:	f000 8092 	beq.w	800bfd2 <_dtoa_r+0x90a>
 800beae:	f1c0 0320 	rsb	r3, r0, #32
 800beb2:	2b04      	cmp	r3, #4
 800beb4:	f340 808a 	ble.w	800bfcc <_dtoa_r+0x904>
 800beb8:	f1c0 001c 	rsb	r0, r0, #28
 800bebc:	9b04      	ldr	r3, [sp, #16]
 800bebe:	4403      	add	r3, r0
 800bec0:	9304      	str	r3, [sp, #16]
 800bec2:	9b05      	ldr	r3, [sp, #20]
 800bec4:	4403      	add	r3, r0
 800bec6:	4405      	add	r5, r0
 800bec8:	9305      	str	r3, [sp, #20]
 800beca:	9b04      	ldr	r3, [sp, #16]
 800becc:	2b00      	cmp	r3, #0
 800bece:	dd07      	ble.n	800bee0 <_dtoa_r+0x818>
 800bed0:	ee18 1a10 	vmov	r1, s16
 800bed4:	461a      	mov	r2, r3
 800bed6:	4620      	mov	r0, r4
 800bed8:	f001 fb06 	bl	800d4e8 <__lshift>
 800bedc:	ee08 0a10 	vmov	s16, r0
 800bee0:	9b05      	ldr	r3, [sp, #20]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	dd05      	ble.n	800bef2 <_dtoa_r+0x82a>
 800bee6:	4631      	mov	r1, r6
 800bee8:	461a      	mov	r2, r3
 800beea:	4620      	mov	r0, r4
 800beec:	f001 fafc 	bl	800d4e8 <__lshift>
 800bef0:	4606      	mov	r6, r0
 800bef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d06e      	beq.n	800bfd6 <_dtoa_r+0x90e>
 800bef8:	ee18 0a10 	vmov	r0, s16
 800befc:	4631      	mov	r1, r6
 800befe:	f001 fb63 	bl	800d5c8 <__mcmp>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	da67      	bge.n	800bfd6 <_dtoa_r+0x90e>
 800bf06:	9b00      	ldr	r3, [sp, #0]
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	ee18 1a10 	vmov	r1, s16
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	220a      	movs	r2, #10
 800bf12:	2300      	movs	r3, #0
 800bf14:	4620      	mov	r0, r4
 800bf16:	f001 f8ed 	bl	800d0f4 <__multadd>
 800bf1a:	9b08      	ldr	r3, [sp, #32]
 800bf1c:	ee08 0a10 	vmov	s16, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f000 81b1 	beq.w	800c288 <_dtoa_r+0xbc0>
 800bf26:	2300      	movs	r3, #0
 800bf28:	4639      	mov	r1, r7
 800bf2a:	220a      	movs	r2, #10
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f001 f8e1 	bl	800d0f4 <__multadd>
 800bf32:	9b02      	ldr	r3, [sp, #8]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	4607      	mov	r7, r0
 800bf38:	f300 808e 	bgt.w	800c058 <_dtoa_r+0x990>
 800bf3c:	9b06      	ldr	r3, [sp, #24]
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	dc51      	bgt.n	800bfe6 <_dtoa_r+0x91e>
 800bf42:	e089      	b.n	800c058 <_dtoa_r+0x990>
 800bf44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf4a:	e74b      	b.n	800bde4 <_dtoa_r+0x71c>
 800bf4c:	9b03      	ldr	r3, [sp, #12]
 800bf4e:	1e5e      	subs	r6, r3, #1
 800bf50:	9b07      	ldr	r3, [sp, #28]
 800bf52:	42b3      	cmp	r3, r6
 800bf54:	bfbf      	itttt	lt
 800bf56:	9b07      	ldrlt	r3, [sp, #28]
 800bf58:	9607      	strlt	r6, [sp, #28]
 800bf5a:	1af2      	sublt	r2, r6, r3
 800bf5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bf5e:	bfb6      	itet	lt
 800bf60:	189b      	addlt	r3, r3, r2
 800bf62:	1b9e      	subge	r6, r3, r6
 800bf64:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bf66:	9b03      	ldr	r3, [sp, #12]
 800bf68:	bfb8      	it	lt
 800bf6a:	2600      	movlt	r6, #0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	bfb7      	itett	lt
 800bf70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bf74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bf78:	1a9d      	sublt	r5, r3, r2
 800bf7a:	2300      	movlt	r3, #0
 800bf7c:	e734      	b.n	800bde8 <_dtoa_r+0x720>
 800bf7e:	9e07      	ldr	r6, [sp, #28]
 800bf80:	9d04      	ldr	r5, [sp, #16]
 800bf82:	9f08      	ldr	r7, [sp, #32]
 800bf84:	e73b      	b.n	800bdfe <_dtoa_r+0x736>
 800bf86:	9a07      	ldr	r2, [sp, #28]
 800bf88:	e767      	b.n	800be5a <_dtoa_r+0x792>
 800bf8a:	9b06      	ldr	r3, [sp, #24]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	dc18      	bgt.n	800bfc2 <_dtoa_r+0x8fa>
 800bf90:	f1ba 0f00 	cmp.w	sl, #0
 800bf94:	d115      	bne.n	800bfc2 <_dtoa_r+0x8fa>
 800bf96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf9a:	b993      	cbnz	r3, 800bfc2 <_dtoa_r+0x8fa>
 800bf9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bfa0:	0d1b      	lsrs	r3, r3, #20
 800bfa2:	051b      	lsls	r3, r3, #20
 800bfa4:	b183      	cbz	r3, 800bfc8 <_dtoa_r+0x900>
 800bfa6:	9b04      	ldr	r3, [sp, #16]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	9304      	str	r3, [sp, #16]
 800bfac:	9b05      	ldr	r3, [sp, #20]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	9305      	str	r3, [sp, #20]
 800bfb2:	f04f 0801 	mov.w	r8, #1
 800bfb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f47f af6a 	bne.w	800be92 <_dtoa_r+0x7ca>
 800bfbe:	2001      	movs	r0, #1
 800bfc0:	e76f      	b.n	800bea2 <_dtoa_r+0x7da>
 800bfc2:	f04f 0800 	mov.w	r8, #0
 800bfc6:	e7f6      	b.n	800bfb6 <_dtoa_r+0x8ee>
 800bfc8:	4698      	mov	r8, r3
 800bfca:	e7f4      	b.n	800bfb6 <_dtoa_r+0x8ee>
 800bfcc:	f43f af7d 	beq.w	800beca <_dtoa_r+0x802>
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	301c      	adds	r0, #28
 800bfd4:	e772      	b.n	800bebc <_dtoa_r+0x7f4>
 800bfd6:	9b03      	ldr	r3, [sp, #12]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	dc37      	bgt.n	800c04c <_dtoa_r+0x984>
 800bfdc:	9b06      	ldr	r3, [sp, #24]
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	dd34      	ble.n	800c04c <_dtoa_r+0x984>
 800bfe2:	9b03      	ldr	r3, [sp, #12]
 800bfe4:	9302      	str	r3, [sp, #8]
 800bfe6:	9b02      	ldr	r3, [sp, #8]
 800bfe8:	b96b      	cbnz	r3, 800c006 <_dtoa_r+0x93e>
 800bfea:	4631      	mov	r1, r6
 800bfec:	2205      	movs	r2, #5
 800bfee:	4620      	mov	r0, r4
 800bff0:	f001 f880 	bl	800d0f4 <__multadd>
 800bff4:	4601      	mov	r1, r0
 800bff6:	4606      	mov	r6, r0
 800bff8:	ee18 0a10 	vmov	r0, s16
 800bffc:	f001 fae4 	bl	800d5c8 <__mcmp>
 800c000:	2800      	cmp	r0, #0
 800c002:	f73f adbb 	bgt.w	800bb7c <_dtoa_r+0x4b4>
 800c006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c008:	9d01      	ldr	r5, [sp, #4]
 800c00a:	43db      	mvns	r3, r3
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	f04f 0800 	mov.w	r8, #0
 800c012:	4631      	mov	r1, r6
 800c014:	4620      	mov	r0, r4
 800c016:	f001 f84b 	bl	800d0b0 <_Bfree>
 800c01a:	2f00      	cmp	r7, #0
 800c01c:	f43f aea4 	beq.w	800bd68 <_dtoa_r+0x6a0>
 800c020:	f1b8 0f00 	cmp.w	r8, #0
 800c024:	d005      	beq.n	800c032 <_dtoa_r+0x96a>
 800c026:	45b8      	cmp	r8, r7
 800c028:	d003      	beq.n	800c032 <_dtoa_r+0x96a>
 800c02a:	4641      	mov	r1, r8
 800c02c:	4620      	mov	r0, r4
 800c02e:	f001 f83f 	bl	800d0b0 <_Bfree>
 800c032:	4639      	mov	r1, r7
 800c034:	4620      	mov	r0, r4
 800c036:	f001 f83b 	bl	800d0b0 <_Bfree>
 800c03a:	e695      	b.n	800bd68 <_dtoa_r+0x6a0>
 800c03c:	2600      	movs	r6, #0
 800c03e:	4637      	mov	r7, r6
 800c040:	e7e1      	b.n	800c006 <_dtoa_r+0x93e>
 800c042:	9700      	str	r7, [sp, #0]
 800c044:	4637      	mov	r7, r6
 800c046:	e599      	b.n	800bb7c <_dtoa_r+0x4b4>
 800c048:	40240000 	.word	0x40240000
 800c04c:	9b08      	ldr	r3, [sp, #32]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f000 80ca 	beq.w	800c1e8 <_dtoa_r+0xb20>
 800c054:	9b03      	ldr	r3, [sp, #12]
 800c056:	9302      	str	r3, [sp, #8]
 800c058:	2d00      	cmp	r5, #0
 800c05a:	dd05      	ble.n	800c068 <_dtoa_r+0x9a0>
 800c05c:	4639      	mov	r1, r7
 800c05e:	462a      	mov	r2, r5
 800c060:	4620      	mov	r0, r4
 800c062:	f001 fa41 	bl	800d4e8 <__lshift>
 800c066:	4607      	mov	r7, r0
 800c068:	f1b8 0f00 	cmp.w	r8, #0
 800c06c:	d05b      	beq.n	800c126 <_dtoa_r+0xa5e>
 800c06e:	6879      	ldr	r1, [r7, #4]
 800c070:	4620      	mov	r0, r4
 800c072:	f000 ffdd 	bl	800d030 <_Balloc>
 800c076:	4605      	mov	r5, r0
 800c078:	b928      	cbnz	r0, 800c086 <_dtoa_r+0x9be>
 800c07a:	4b87      	ldr	r3, [pc, #540]	; (800c298 <_dtoa_r+0xbd0>)
 800c07c:	4602      	mov	r2, r0
 800c07e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c082:	f7ff bb3b 	b.w	800b6fc <_dtoa_r+0x34>
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	3202      	adds	r2, #2
 800c08a:	0092      	lsls	r2, r2, #2
 800c08c:	f107 010c 	add.w	r1, r7, #12
 800c090:	300c      	adds	r0, #12
 800c092:	f000 ffb3 	bl	800cffc <memcpy>
 800c096:	2201      	movs	r2, #1
 800c098:	4629      	mov	r1, r5
 800c09a:	4620      	mov	r0, r4
 800c09c:	f001 fa24 	bl	800d4e8 <__lshift>
 800c0a0:	9b01      	ldr	r3, [sp, #4]
 800c0a2:	f103 0901 	add.w	r9, r3, #1
 800c0a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	9305      	str	r3, [sp, #20]
 800c0ae:	f00a 0301 	and.w	r3, sl, #1
 800c0b2:	46b8      	mov	r8, r7
 800c0b4:	9304      	str	r3, [sp, #16]
 800c0b6:	4607      	mov	r7, r0
 800c0b8:	4631      	mov	r1, r6
 800c0ba:	ee18 0a10 	vmov	r0, s16
 800c0be:	f7ff fa75 	bl	800b5ac <quorem>
 800c0c2:	4641      	mov	r1, r8
 800c0c4:	9002      	str	r0, [sp, #8]
 800c0c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c0ca:	ee18 0a10 	vmov	r0, s16
 800c0ce:	f001 fa7b 	bl	800d5c8 <__mcmp>
 800c0d2:	463a      	mov	r2, r7
 800c0d4:	9003      	str	r0, [sp, #12]
 800c0d6:	4631      	mov	r1, r6
 800c0d8:	4620      	mov	r0, r4
 800c0da:	f001 fa91 	bl	800d600 <__mdiff>
 800c0de:	68c2      	ldr	r2, [r0, #12]
 800c0e0:	f109 3bff 	add.w	fp, r9, #4294967295
 800c0e4:	4605      	mov	r5, r0
 800c0e6:	bb02      	cbnz	r2, 800c12a <_dtoa_r+0xa62>
 800c0e8:	4601      	mov	r1, r0
 800c0ea:	ee18 0a10 	vmov	r0, s16
 800c0ee:	f001 fa6b 	bl	800d5c8 <__mcmp>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	4629      	mov	r1, r5
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	9207      	str	r2, [sp, #28]
 800c0fa:	f000 ffd9 	bl	800d0b0 <_Bfree>
 800c0fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c102:	ea43 0102 	orr.w	r1, r3, r2
 800c106:	9b04      	ldr	r3, [sp, #16]
 800c108:	430b      	orrs	r3, r1
 800c10a:	464d      	mov	r5, r9
 800c10c:	d10f      	bne.n	800c12e <_dtoa_r+0xa66>
 800c10e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c112:	d02a      	beq.n	800c16a <_dtoa_r+0xaa2>
 800c114:	9b03      	ldr	r3, [sp, #12]
 800c116:	2b00      	cmp	r3, #0
 800c118:	dd02      	ble.n	800c120 <_dtoa_r+0xa58>
 800c11a:	9b02      	ldr	r3, [sp, #8]
 800c11c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c120:	f88b a000 	strb.w	sl, [fp]
 800c124:	e775      	b.n	800c012 <_dtoa_r+0x94a>
 800c126:	4638      	mov	r0, r7
 800c128:	e7ba      	b.n	800c0a0 <_dtoa_r+0x9d8>
 800c12a:	2201      	movs	r2, #1
 800c12c:	e7e2      	b.n	800c0f4 <_dtoa_r+0xa2c>
 800c12e:	9b03      	ldr	r3, [sp, #12]
 800c130:	2b00      	cmp	r3, #0
 800c132:	db04      	blt.n	800c13e <_dtoa_r+0xa76>
 800c134:	9906      	ldr	r1, [sp, #24]
 800c136:	430b      	orrs	r3, r1
 800c138:	9904      	ldr	r1, [sp, #16]
 800c13a:	430b      	orrs	r3, r1
 800c13c:	d122      	bne.n	800c184 <_dtoa_r+0xabc>
 800c13e:	2a00      	cmp	r2, #0
 800c140:	ddee      	ble.n	800c120 <_dtoa_r+0xa58>
 800c142:	ee18 1a10 	vmov	r1, s16
 800c146:	2201      	movs	r2, #1
 800c148:	4620      	mov	r0, r4
 800c14a:	f001 f9cd 	bl	800d4e8 <__lshift>
 800c14e:	4631      	mov	r1, r6
 800c150:	ee08 0a10 	vmov	s16, r0
 800c154:	f001 fa38 	bl	800d5c8 <__mcmp>
 800c158:	2800      	cmp	r0, #0
 800c15a:	dc03      	bgt.n	800c164 <_dtoa_r+0xa9c>
 800c15c:	d1e0      	bne.n	800c120 <_dtoa_r+0xa58>
 800c15e:	f01a 0f01 	tst.w	sl, #1
 800c162:	d0dd      	beq.n	800c120 <_dtoa_r+0xa58>
 800c164:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c168:	d1d7      	bne.n	800c11a <_dtoa_r+0xa52>
 800c16a:	2339      	movs	r3, #57	; 0x39
 800c16c:	f88b 3000 	strb.w	r3, [fp]
 800c170:	462b      	mov	r3, r5
 800c172:	461d      	mov	r5, r3
 800c174:	3b01      	subs	r3, #1
 800c176:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c17a:	2a39      	cmp	r2, #57	; 0x39
 800c17c:	d071      	beq.n	800c262 <_dtoa_r+0xb9a>
 800c17e:	3201      	adds	r2, #1
 800c180:	701a      	strb	r2, [r3, #0]
 800c182:	e746      	b.n	800c012 <_dtoa_r+0x94a>
 800c184:	2a00      	cmp	r2, #0
 800c186:	dd07      	ble.n	800c198 <_dtoa_r+0xad0>
 800c188:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c18c:	d0ed      	beq.n	800c16a <_dtoa_r+0xaa2>
 800c18e:	f10a 0301 	add.w	r3, sl, #1
 800c192:	f88b 3000 	strb.w	r3, [fp]
 800c196:	e73c      	b.n	800c012 <_dtoa_r+0x94a>
 800c198:	9b05      	ldr	r3, [sp, #20]
 800c19a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c19e:	4599      	cmp	r9, r3
 800c1a0:	d047      	beq.n	800c232 <_dtoa_r+0xb6a>
 800c1a2:	ee18 1a10 	vmov	r1, s16
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	220a      	movs	r2, #10
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	f000 ffa2 	bl	800d0f4 <__multadd>
 800c1b0:	45b8      	cmp	r8, r7
 800c1b2:	ee08 0a10 	vmov	s16, r0
 800c1b6:	f04f 0300 	mov.w	r3, #0
 800c1ba:	f04f 020a 	mov.w	r2, #10
 800c1be:	4641      	mov	r1, r8
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	d106      	bne.n	800c1d2 <_dtoa_r+0xb0a>
 800c1c4:	f000 ff96 	bl	800d0f4 <__multadd>
 800c1c8:	4680      	mov	r8, r0
 800c1ca:	4607      	mov	r7, r0
 800c1cc:	f109 0901 	add.w	r9, r9, #1
 800c1d0:	e772      	b.n	800c0b8 <_dtoa_r+0x9f0>
 800c1d2:	f000 ff8f 	bl	800d0f4 <__multadd>
 800c1d6:	4639      	mov	r1, r7
 800c1d8:	4680      	mov	r8, r0
 800c1da:	2300      	movs	r3, #0
 800c1dc:	220a      	movs	r2, #10
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f000 ff88 	bl	800d0f4 <__multadd>
 800c1e4:	4607      	mov	r7, r0
 800c1e6:	e7f1      	b.n	800c1cc <_dtoa_r+0xb04>
 800c1e8:	9b03      	ldr	r3, [sp, #12]
 800c1ea:	9302      	str	r3, [sp, #8]
 800c1ec:	9d01      	ldr	r5, [sp, #4]
 800c1ee:	ee18 0a10 	vmov	r0, s16
 800c1f2:	4631      	mov	r1, r6
 800c1f4:	f7ff f9da 	bl	800b5ac <quorem>
 800c1f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c1fc:	9b01      	ldr	r3, [sp, #4]
 800c1fe:	f805 ab01 	strb.w	sl, [r5], #1
 800c202:	1aea      	subs	r2, r5, r3
 800c204:	9b02      	ldr	r3, [sp, #8]
 800c206:	4293      	cmp	r3, r2
 800c208:	dd09      	ble.n	800c21e <_dtoa_r+0xb56>
 800c20a:	ee18 1a10 	vmov	r1, s16
 800c20e:	2300      	movs	r3, #0
 800c210:	220a      	movs	r2, #10
 800c212:	4620      	mov	r0, r4
 800c214:	f000 ff6e 	bl	800d0f4 <__multadd>
 800c218:	ee08 0a10 	vmov	s16, r0
 800c21c:	e7e7      	b.n	800c1ee <_dtoa_r+0xb26>
 800c21e:	9b02      	ldr	r3, [sp, #8]
 800c220:	2b00      	cmp	r3, #0
 800c222:	bfc8      	it	gt
 800c224:	461d      	movgt	r5, r3
 800c226:	9b01      	ldr	r3, [sp, #4]
 800c228:	bfd8      	it	le
 800c22a:	2501      	movle	r5, #1
 800c22c:	441d      	add	r5, r3
 800c22e:	f04f 0800 	mov.w	r8, #0
 800c232:	ee18 1a10 	vmov	r1, s16
 800c236:	2201      	movs	r2, #1
 800c238:	4620      	mov	r0, r4
 800c23a:	f001 f955 	bl	800d4e8 <__lshift>
 800c23e:	4631      	mov	r1, r6
 800c240:	ee08 0a10 	vmov	s16, r0
 800c244:	f001 f9c0 	bl	800d5c8 <__mcmp>
 800c248:	2800      	cmp	r0, #0
 800c24a:	dc91      	bgt.n	800c170 <_dtoa_r+0xaa8>
 800c24c:	d102      	bne.n	800c254 <_dtoa_r+0xb8c>
 800c24e:	f01a 0f01 	tst.w	sl, #1
 800c252:	d18d      	bne.n	800c170 <_dtoa_r+0xaa8>
 800c254:	462b      	mov	r3, r5
 800c256:	461d      	mov	r5, r3
 800c258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c25c:	2a30      	cmp	r2, #48	; 0x30
 800c25e:	d0fa      	beq.n	800c256 <_dtoa_r+0xb8e>
 800c260:	e6d7      	b.n	800c012 <_dtoa_r+0x94a>
 800c262:	9a01      	ldr	r2, [sp, #4]
 800c264:	429a      	cmp	r2, r3
 800c266:	d184      	bne.n	800c172 <_dtoa_r+0xaaa>
 800c268:	9b00      	ldr	r3, [sp, #0]
 800c26a:	3301      	adds	r3, #1
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	2331      	movs	r3, #49	; 0x31
 800c270:	7013      	strb	r3, [r2, #0]
 800c272:	e6ce      	b.n	800c012 <_dtoa_r+0x94a>
 800c274:	4b09      	ldr	r3, [pc, #36]	; (800c29c <_dtoa_r+0xbd4>)
 800c276:	f7ff ba95 	b.w	800b7a4 <_dtoa_r+0xdc>
 800c27a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f47f aa6e 	bne.w	800b75e <_dtoa_r+0x96>
 800c282:	4b07      	ldr	r3, [pc, #28]	; (800c2a0 <_dtoa_r+0xbd8>)
 800c284:	f7ff ba8e 	b.w	800b7a4 <_dtoa_r+0xdc>
 800c288:	9b02      	ldr	r3, [sp, #8]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	dcae      	bgt.n	800c1ec <_dtoa_r+0xb24>
 800c28e:	9b06      	ldr	r3, [sp, #24]
 800c290:	2b02      	cmp	r3, #2
 800c292:	f73f aea8 	bgt.w	800bfe6 <_dtoa_r+0x91e>
 800c296:	e7a9      	b.n	800c1ec <_dtoa_r+0xb24>
 800c298:	0800efd6 	.word	0x0800efd6
 800c29c:	0800f231 	.word	0x0800f231
 800c2a0:	0800ef6e 	.word	0x0800ef6e

0800c2a4 <__sflush_r>:
 800c2a4:	898a      	ldrh	r2, [r1, #12]
 800c2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2aa:	4605      	mov	r5, r0
 800c2ac:	0710      	lsls	r0, r2, #28
 800c2ae:	460c      	mov	r4, r1
 800c2b0:	d458      	bmi.n	800c364 <__sflush_r+0xc0>
 800c2b2:	684b      	ldr	r3, [r1, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	dc05      	bgt.n	800c2c4 <__sflush_r+0x20>
 800c2b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	dc02      	bgt.n	800c2c4 <__sflush_r+0x20>
 800c2be:	2000      	movs	r0, #0
 800c2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2c6:	2e00      	cmp	r6, #0
 800c2c8:	d0f9      	beq.n	800c2be <__sflush_r+0x1a>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2d0:	682f      	ldr	r7, [r5, #0]
 800c2d2:	602b      	str	r3, [r5, #0]
 800c2d4:	d032      	beq.n	800c33c <__sflush_r+0x98>
 800c2d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	075a      	lsls	r2, r3, #29
 800c2dc:	d505      	bpl.n	800c2ea <__sflush_r+0x46>
 800c2de:	6863      	ldr	r3, [r4, #4]
 800c2e0:	1ac0      	subs	r0, r0, r3
 800c2e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2e4:	b10b      	cbz	r3, 800c2ea <__sflush_r+0x46>
 800c2e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2e8:	1ac0      	subs	r0, r0, r3
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2f0:	6a21      	ldr	r1, [r4, #32]
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	47b0      	blx	r6
 800c2f6:	1c43      	adds	r3, r0, #1
 800c2f8:	89a3      	ldrh	r3, [r4, #12]
 800c2fa:	d106      	bne.n	800c30a <__sflush_r+0x66>
 800c2fc:	6829      	ldr	r1, [r5, #0]
 800c2fe:	291d      	cmp	r1, #29
 800c300:	d82c      	bhi.n	800c35c <__sflush_r+0xb8>
 800c302:	4a2a      	ldr	r2, [pc, #168]	; (800c3ac <__sflush_r+0x108>)
 800c304:	40ca      	lsrs	r2, r1
 800c306:	07d6      	lsls	r6, r2, #31
 800c308:	d528      	bpl.n	800c35c <__sflush_r+0xb8>
 800c30a:	2200      	movs	r2, #0
 800c30c:	6062      	str	r2, [r4, #4]
 800c30e:	04d9      	lsls	r1, r3, #19
 800c310:	6922      	ldr	r2, [r4, #16]
 800c312:	6022      	str	r2, [r4, #0]
 800c314:	d504      	bpl.n	800c320 <__sflush_r+0x7c>
 800c316:	1c42      	adds	r2, r0, #1
 800c318:	d101      	bne.n	800c31e <__sflush_r+0x7a>
 800c31a:	682b      	ldr	r3, [r5, #0]
 800c31c:	b903      	cbnz	r3, 800c320 <__sflush_r+0x7c>
 800c31e:	6560      	str	r0, [r4, #84]	; 0x54
 800c320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c322:	602f      	str	r7, [r5, #0]
 800c324:	2900      	cmp	r1, #0
 800c326:	d0ca      	beq.n	800c2be <__sflush_r+0x1a>
 800c328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c32c:	4299      	cmp	r1, r3
 800c32e:	d002      	beq.n	800c336 <__sflush_r+0x92>
 800c330:	4628      	mov	r0, r5
 800c332:	f7fc fef9 	bl	8009128 <_free_r>
 800c336:	2000      	movs	r0, #0
 800c338:	6360      	str	r0, [r4, #52]	; 0x34
 800c33a:	e7c1      	b.n	800c2c0 <__sflush_r+0x1c>
 800c33c:	6a21      	ldr	r1, [r4, #32]
 800c33e:	2301      	movs	r3, #1
 800c340:	4628      	mov	r0, r5
 800c342:	47b0      	blx	r6
 800c344:	1c41      	adds	r1, r0, #1
 800c346:	d1c7      	bne.n	800c2d8 <__sflush_r+0x34>
 800c348:	682b      	ldr	r3, [r5, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d0c4      	beq.n	800c2d8 <__sflush_r+0x34>
 800c34e:	2b1d      	cmp	r3, #29
 800c350:	d001      	beq.n	800c356 <__sflush_r+0xb2>
 800c352:	2b16      	cmp	r3, #22
 800c354:	d101      	bne.n	800c35a <__sflush_r+0xb6>
 800c356:	602f      	str	r7, [r5, #0]
 800c358:	e7b1      	b.n	800c2be <__sflush_r+0x1a>
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c360:	81a3      	strh	r3, [r4, #12]
 800c362:	e7ad      	b.n	800c2c0 <__sflush_r+0x1c>
 800c364:	690f      	ldr	r7, [r1, #16]
 800c366:	2f00      	cmp	r7, #0
 800c368:	d0a9      	beq.n	800c2be <__sflush_r+0x1a>
 800c36a:	0793      	lsls	r3, r2, #30
 800c36c:	680e      	ldr	r6, [r1, #0]
 800c36e:	bf08      	it	eq
 800c370:	694b      	ldreq	r3, [r1, #20]
 800c372:	600f      	str	r7, [r1, #0]
 800c374:	bf18      	it	ne
 800c376:	2300      	movne	r3, #0
 800c378:	eba6 0807 	sub.w	r8, r6, r7
 800c37c:	608b      	str	r3, [r1, #8]
 800c37e:	f1b8 0f00 	cmp.w	r8, #0
 800c382:	dd9c      	ble.n	800c2be <__sflush_r+0x1a>
 800c384:	6a21      	ldr	r1, [r4, #32]
 800c386:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c388:	4643      	mov	r3, r8
 800c38a:	463a      	mov	r2, r7
 800c38c:	4628      	mov	r0, r5
 800c38e:	47b0      	blx	r6
 800c390:	2800      	cmp	r0, #0
 800c392:	dc06      	bgt.n	800c3a2 <__sflush_r+0xfe>
 800c394:	89a3      	ldrh	r3, [r4, #12]
 800c396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c39a:	81a3      	strh	r3, [r4, #12]
 800c39c:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a0:	e78e      	b.n	800c2c0 <__sflush_r+0x1c>
 800c3a2:	4407      	add	r7, r0
 800c3a4:	eba8 0800 	sub.w	r8, r8, r0
 800c3a8:	e7e9      	b.n	800c37e <__sflush_r+0xda>
 800c3aa:	bf00      	nop
 800c3ac:	20400001 	.word	0x20400001

0800c3b0 <_fflush_r>:
 800c3b0:	b538      	push	{r3, r4, r5, lr}
 800c3b2:	690b      	ldr	r3, [r1, #16]
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	b913      	cbnz	r3, 800c3c0 <_fflush_r+0x10>
 800c3ba:	2500      	movs	r5, #0
 800c3bc:	4628      	mov	r0, r5
 800c3be:	bd38      	pop	{r3, r4, r5, pc}
 800c3c0:	b118      	cbz	r0, 800c3ca <_fflush_r+0x1a>
 800c3c2:	6983      	ldr	r3, [r0, #24]
 800c3c4:	b90b      	cbnz	r3, 800c3ca <_fflush_r+0x1a>
 800c3c6:	f000 f887 	bl	800c4d8 <__sinit>
 800c3ca:	4b14      	ldr	r3, [pc, #80]	; (800c41c <_fflush_r+0x6c>)
 800c3cc:	429c      	cmp	r4, r3
 800c3ce:	d11b      	bne.n	800c408 <_fflush_r+0x58>
 800c3d0:	686c      	ldr	r4, [r5, #4]
 800c3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d0ef      	beq.n	800c3ba <_fflush_r+0xa>
 800c3da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3dc:	07d0      	lsls	r0, r2, #31
 800c3de:	d404      	bmi.n	800c3ea <_fflush_r+0x3a>
 800c3e0:	0599      	lsls	r1, r3, #22
 800c3e2:	d402      	bmi.n	800c3ea <_fflush_r+0x3a>
 800c3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3e6:	f000 fd8f 	bl	800cf08 <__retarget_lock_acquire_recursive>
 800c3ea:	4628      	mov	r0, r5
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	f7ff ff59 	bl	800c2a4 <__sflush_r>
 800c3f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3f4:	07da      	lsls	r2, r3, #31
 800c3f6:	4605      	mov	r5, r0
 800c3f8:	d4e0      	bmi.n	800c3bc <_fflush_r+0xc>
 800c3fa:	89a3      	ldrh	r3, [r4, #12]
 800c3fc:	059b      	lsls	r3, r3, #22
 800c3fe:	d4dd      	bmi.n	800c3bc <_fflush_r+0xc>
 800c400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c402:	f000 fd83 	bl	800cf0c <__retarget_lock_release_recursive>
 800c406:	e7d9      	b.n	800c3bc <_fflush_r+0xc>
 800c408:	4b05      	ldr	r3, [pc, #20]	; (800c420 <_fflush_r+0x70>)
 800c40a:	429c      	cmp	r4, r3
 800c40c:	d101      	bne.n	800c412 <_fflush_r+0x62>
 800c40e:	68ac      	ldr	r4, [r5, #8]
 800c410:	e7df      	b.n	800c3d2 <_fflush_r+0x22>
 800c412:	4b04      	ldr	r3, [pc, #16]	; (800c424 <_fflush_r+0x74>)
 800c414:	429c      	cmp	r4, r3
 800c416:	bf08      	it	eq
 800c418:	68ec      	ldreq	r4, [r5, #12]
 800c41a:	e7da      	b.n	800c3d2 <_fflush_r+0x22>
 800c41c:	0800f008 	.word	0x0800f008
 800c420:	0800f028 	.word	0x0800f028
 800c424:	0800efe8 	.word	0x0800efe8

0800c428 <std>:
 800c428:	2300      	movs	r3, #0
 800c42a:	b510      	push	{r4, lr}
 800c42c:	4604      	mov	r4, r0
 800c42e:	e9c0 3300 	strd	r3, r3, [r0]
 800c432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c436:	6083      	str	r3, [r0, #8]
 800c438:	8181      	strh	r1, [r0, #12]
 800c43a:	6643      	str	r3, [r0, #100]	; 0x64
 800c43c:	81c2      	strh	r2, [r0, #14]
 800c43e:	6183      	str	r3, [r0, #24]
 800c440:	4619      	mov	r1, r3
 800c442:	2208      	movs	r2, #8
 800c444:	305c      	adds	r0, #92	; 0x5c
 800c446:	f7fc fbf5 	bl	8008c34 <memset>
 800c44a:	4b05      	ldr	r3, [pc, #20]	; (800c460 <std+0x38>)
 800c44c:	6263      	str	r3, [r4, #36]	; 0x24
 800c44e:	4b05      	ldr	r3, [pc, #20]	; (800c464 <std+0x3c>)
 800c450:	62a3      	str	r3, [r4, #40]	; 0x28
 800c452:	4b05      	ldr	r3, [pc, #20]	; (800c468 <std+0x40>)
 800c454:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c456:	4b05      	ldr	r3, [pc, #20]	; (800c46c <std+0x44>)
 800c458:	6224      	str	r4, [r4, #32]
 800c45a:	6323      	str	r3, [r4, #48]	; 0x30
 800c45c:	bd10      	pop	{r4, pc}
 800c45e:	bf00      	nop
 800c460:	0800dfb1 	.word	0x0800dfb1
 800c464:	0800dfd7 	.word	0x0800dfd7
 800c468:	0800e00f 	.word	0x0800e00f
 800c46c:	0800e033 	.word	0x0800e033

0800c470 <_cleanup_r>:
 800c470:	4901      	ldr	r1, [pc, #4]	; (800c478 <_cleanup_r+0x8>)
 800c472:	f000 b8c1 	b.w	800c5f8 <_fwalk_reent>
 800c476:	bf00      	nop
 800c478:	0800c3b1 	.word	0x0800c3b1

0800c47c <__sfmoreglue>:
 800c47c:	b570      	push	{r4, r5, r6, lr}
 800c47e:	2268      	movs	r2, #104	; 0x68
 800c480:	1e4d      	subs	r5, r1, #1
 800c482:	4355      	muls	r5, r2
 800c484:	460e      	mov	r6, r1
 800c486:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c48a:	f7fc feb9 	bl	8009200 <_malloc_r>
 800c48e:	4604      	mov	r4, r0
 800c490:	b140      	cbz	r0, 800c4a4 <__sfmoreglue+0x28>
 800c492:	2100      	movs	r1, #0
 800c494:	e9c0 1600 	strd	r1, r6, [r0]
 800c498:	300c      	adds	r0, #12
 800c49a:	60a0      	str	r0, [r4, #8]
 800c49c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4a0:	f7fc fbc8 	bl	8008c34 <memset>
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	bd70      	pop	{r4, r5, r6, pc}

0800c4a8 <__sfp_lock_acquire>:
 800c4a8:	4801      	ldr	r0, [pc, #4]	; (800c4b0 <__sfp_lock_acquire+0x8>)
 800c4aa:	f000 bd2d 	b.w	800cf08 <__retarget_lock_acquire_recursive>
 800c4ae:	bf00      	nop
 800c4b0:	20000506 	.word	0x20000506

0800c4b4 <__sfp_lock_release>:
 800c4b4:	4801      	ldr	r0, [pc, #4]	; (800c4bc <__sfp_lock_release+0x8>)
 800c4b6:	f000 bd29 	b.w	800cf0c <__retarget_lock_release_recursive>
 800c4ba:	bf00      	nop
 800c4bc:	20000506 	.word	0x20000506

0800c4c0 <__sinit_lock_acquire>:
 800c4c0:	4801      	ldr	r0, [pc, #4]	; (800c4c8 <__sinit_lock_acquire+0x8>)
 800c4c2:	f000 bd21 	b.w	800cf08 <__retarget_lock_acquire_recursive>
 800c4c6:	bf00      	nop
 800c4c8:	20000507 	.word	0x20000507

0800c4cc <__sinit_lock_release>:
 800c4cc:	4801      	ldr	r0, [pc, #4]	; (800c4d4 <__sinit_lock_release+0x8>)
 800c4ce:	f000 bd1d 	b.w	800cf0c <__retarget_lock_release_recursive>
 800c4d2:	bf00      	nop
 800c4d4:	20000507 	.word	0x20000507

0800c4d8 <__sinit>:
 800c4d8:	b510      	push	{r4, lr}
 800c4da:	4604      	mov	r4, r0
 800c4dc:	f7ff fff0 	bl	800c4c0 <__sinit_lock_acquire>
 800c4e0:	69a3      	ldr	r3, [r4, #24]
 800c4e2:	b11b      	cbz	r3, 800c4ec <__sinit+0x14>
 800c4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4e8:	f7ff bff0 	b.w	800c4cc <__sinit_lock_release>
 800c4ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c4f0:	6523      	str	r3, [r4, #80]	; 0x50
 800c4f2:	4b13      	ldr	r3, [pc, #76]	; (800c540 <__sinit+0x68>)
 800c4f4:	4a13      	ldr	r2, [pc, #76]	; (800c544 <__sinit+0x6c>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c4fa:	42a3      	cmp	r3, r4
 800c4fc:	bf04      	itt	eq
 800c4fe:	2301      	moveq	r3, #1
 800c500:	61a3      	streq	r3, [r4, #24]
 800c502:	4620      	mov	r0, r4
 800c504:	f000 f820 	bl	800c548 <__sfp>
 800c508:	6060      	str	r0, [r4, #4]
 800c50a:	4620      	mov	r0, r4
 800c50c:	f000 f81c 	bl	800c548 <__sfp>
 800c510:	60a0      	str	r0, [r4, #8]
 800c512:	4620      	mov	r0, r4
 800c514:	f000 f818 	bl	800c548 <__sfp>
 800c518:	2200      	movs	r2, #0
 800c51a:	60e0      	str	r0, [r4, #12]
 800c51c:	2104      	movs	r1, #4
 800c51e:	6860      	ldr	r0, [r4, #4]
 800c520:	f7ff ff82 	bl	800c428 <std>
 800c524:	68a0      	ldr	r0, [r4, #8]
 800c526:	2201      	movs	r2, #1
 800c528:	2109      	movs	r1, #9
 800c52a:	f7ff ff7d 	bl	800c428 <std>
 800c52e:	68e0      	ldr	r0, [r4, #12]
 800c530:	2202      	movs	r2, #2
 800c532:	2112      	movs	r1, #18
 800c534:	f7ff ff78 	bl	800c428 <std>
 800c538:	2301      	movs	r3, #1
 800c53a:	61a3      	str	r3, [r4, #24]
 800c53c:	e7d2      	b.n	800c4e4 <__sinit+0xc>
 800c53e:	bf00      	nop
 800c540:	0800eb80 	.word	0x0800eb80
 800c544:	0800c471 	.word	0x0800c471

0800c548 <__sfp>:
 800c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54a:	4607      	mov	r7, r0
 800c54c:	f7ff ffac 	bl	800c4a8 <__sfp_lock_acquire>
 800c550:	4b1e      	ldr	r3, [pc, #120]	; (800c5cc <__sfp+0x84>)
 800c552:	681e      	ldr	r6, [r3, #0]
 800c554:	69b3      	ldr	r3, [r6, #24]
 800c556:	b913      	cbnz	r3, 800c55e <__sfp+0x16>
 800c558:	4630      	mov	r0, r6
 800c55a:	f7ff ffbd 	bl	800c4d8 <__sinit>
 800c55e:	3648      	adds	r6, #72	; 0x48
 800c560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c564:	3b01      	subs	r3, #1
 800c566:	d503      	bpl.n	800c570 <__sfp+0x28>
 800c568:	6833      	ldr	r3, [r6, #0]
 800c56a:	b30b      	cbz	r3, 800c5b0 <__sfp+0x68>
 800c56c:	6836      	ldr	r6, [r6, #0]
 800c56e:	e7f7      	b.n	800c560 <__sfp+0x18>
 800c570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c574:	b9d5      	cbnz	r5, 800c5ac <__sfp+0x64>
 800c576:	4b16      	ldr	r3, [pc, #88]	; (800c5d0 <__sfp+0x88>)
 800c578:	60e3      	str	r3, [r4, #12]
 800c57a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c57e:	6665      	str	r5, [r4, #100]	; 0x64
 800c580:	f000 fcc0 	bl	800cf04 <__retarget_lock_init_recursive>
 800c584:	f7ff ff96 	bl	800c4b4 <__sfp_lock_release>
 800c588:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c58c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c590:	6025      	str	r5, [r4, #0]
 800c592:	61a5      	str	r5, [r4, #24]
 800c594:	2208      	movs	r2, #8
 800c596:	4629      	mov	r1, r5
 800c598:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c59c:	f7fc fb4a 	bl	8008c34 <memset>
 800c5a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5ac:	3468      	adds	r4, #104	; 0x68
 800c5ae:	e7d9      	b.n	800c564 <__sfp+0x1c>
 800c5b0:	2104      	movs	r1, #4
 800c5b2:	4638      	mov	r0, r7
 800c5b4:	f7ff ff62 	bl	800c47c <__sfmoreglue>
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	6030      	str	r0, [r6, #0]
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d1d5      	bne.n	800c56c <__sfp+0x24>
 800c5c0:	f7ff ff78 	bl	800c4b4 <__sfp_lock_release>
 800c5c4:	230c      	movs	r3, #12
 800c5c6:	603b      	str	r3, [r7, #0]
 800c5c8:	e7ee      	b.n	800c5a8 <__sfp+0x60>
 800c5ca:	bf00      	nop
 800c5cc:	0800eb80 	.word	0x0800eb80
 800c5d0:	ffff0001 	.word	0xffff0001

0800c5d4 <fiprintf>:
 800c5d4:	b40e      	push	{r1, r2, r3}
 800c5d6:	b503      	push	{r0, r1, lr}
 800c5d8:	4601      	mov	r1, r0
 800c5da:	ab03      	add	r3, sp, #12
 800c5dc:	4805      	ldr	r0, [pc, #20]	; (800c5f4 <fiprintf+0x20>)
 800c5de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5e2:	6800      	ldr	r0, [r0, #0]
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	f001 fb7f 	bl	800dce8 <_vfiprintf_r>
 800c5ea:	b002      	add	sp, #8
 800c5ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5f0:	b003      	add	sp, #12
 800c5f2:	4770      	bx	lr
 800c5f4:	20000014 	.word	0x20000014

0800c5f8 <_fwalk_reent>:
 800c5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5fc:	4606      	mov	r6, r0
 800c5fe:	4688      	mov	r8, r1
 800c600:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c604:	2700      	movs	r7, #0
 800c606:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c60a:	f1b9 0901 	subs.w	r9, r9, #1
 800c60e:	d505      	bpl.n	800c61c <_fwalk_reent+0x24>
 800c610:	6824      	ldr	r4, [r4, #0]
 800c612:	2c00      	cmp	r4, #0
 800c614:	d1f7      	bne.n	800c606 <_fwalk_reent+0xe>
 800c616:	4638      	mov	r0, r7
 800c618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c61c:	89ab      	ldrh	r3, [r5, #12]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d907      	bls.n	800c632 <_fwalk_reent+0x3a>
 800c622:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c626:	3301      	adds	r3, #1
 800c628:	d003      	beq.n	800c632 <_fwalk_reent+0x3a>
 800c62a:	4629      	mov	r1, r5
 800c62c:	4630      	mov	r0, r6
 800c62e:	47c0      	blx	r8
 800c630:	4307      	orrs	r7, r0
 800c632:	3568      	adds	r5, #104	; 0x68
 800c634:	e7e9      	b.n	800c60a <_fwalk_reent+0x12>

0800c636 <rshift>:
 800c636:	6903      	ldr	r3, [r0, #16]
 800c638:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c63c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c640:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c644:	f100 0414 	add.w	r4, r0, #20
 800c648:	dd45      	ble.n	800c6d6 <rshift+0xa0>
 800c64a:	f011 011f 	ands.w	r1, r1, #31
 800c64e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c652:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c656:	d10c      	bne.n	800c672 <rshift+0x3c>
 800c658:	f100 0710 	add.w	r7, r0, #16
 800c65c:	4629      	mov	r1, r5
 800c65e:	42b1      	cmp	r1, r6
 800c660:	d334      	bcc.n	800c6cc <rshift+0x96>
 800c662:	1a9b      	subs	r3, r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	1eea      	subs	r2, r5, #3
 800c668:	4296      	cmp	r6, r2
 800c66a:	bf38      	it	cc
 800c66c:	2300      	movcc	r3, #0
 800c66e:	4423      	add	r3, r4
 800c670:	e015      	b.n	800c69e <rshift+0x68>
 800c672:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c676:	f1c1 0820 	rsb	r8, r1, #32
 800c67a:	40cf      	lsrs	r7, r1
 800c67c:	f105 0e04 	add.w	lr, r5, #4
 800c680:	46a1      	mov	r9, r4
 800c682:	4576      	cmp	r6, lr
 800c684:	46f4      	mov	ip, lr
 800c686:	d815      	bhi.n	800c6b4 <rshift+0x7e>
 800c688:	1a9a      	subs	r2, r3, r2
 800c68a:	0092      	lsls	r2, r2, #2
 800c68c:	3a04      	subs	r2, #4
 800c68e:	3501      	adds	r5, #1
 800c690:	42ae      	cmp	r6, r5
 800c692:	bf38      	it	cc
 800c694:	2200      	movcc	r2, #0
 800c696:	18a3      	adds	r3, r4, r2
 800c698:	50a7      	str	r7, [r4, r2]
 800c69a:	b107      	cbz	r7, 800c69e <rshift+0x68>
 800c69c:	3304      	adds	r3, #4
 800c69e:	1b1a      	subs	r2, r3, r4
 800c6a0:	42a3      	cmp	r3, r4
 800c6a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c6a6:	bf08      	it	eq
 800c6a8:	2300      	moveq	r3, #0
 800c6aa:	6102      	str	r2, [r0, #16]
 800c6ac:	bf08      	it	eq
 800c6ae:	6143      	streq	r3, [r0, #20]
 800c6b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6b4:	f8dc c000 	ldr.w	ip, [ip]
 800c6b8:	fa0c fc08 	lsl.w	ip, ip, r8
 800c6bc:	ea4c 0707 	orr.w	r7, ip, r7
 800c6c0:	f849 7b04 	str.w	r7, [r9], #4
 800c6c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c6c8:	40cf      	lsrs	r7, r1
 800c6ca:	e7da      	b.n	800c682 <rshift+0x4c>
 800c6cc:	f851 cb04 	ldr.w	ip, [r1], #4
 800c6d0:	f847 cf04 	str.w	ip, [r7, #4]!
 800c6d4:	e7c3      	b.n	800c65e <rshift+0x28>
 800c6d6:	4623      	mov	r3, r4
 800c6d8:	e7e1      	b.n	800c69e <rshift+0x68>

0800c6da <__hexdig_fun>:
 800c6da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c6de:	2b09      	cmp	r3, #9
 800c6e0:	d802      	bhi.n	800c6e8 <__hexdig_fun+0xe>
 800c6e2:	3820      	subs	r0, #32
 800c6e4:	b2c0      	uxtb	r0, r0
 800c6e6:	4770      	bx	lr
 800c6e8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c6ec:	2b05      	cmp	r3, #5
 800c6ee:	d801      	bhi.n	800c6f4 <__hexdig_fun+0x1a>
 800c6f0:	3847      	subs	r0, #71	; 0x47
 800c6f2:	e7f7      	b.n	800c6e4 <__hexdig_fun+0xa>
 800c6f4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c6f8:	2b05      	cmp	r3, #5
 800c6fa:	d801      	bhi.n	800c700 <__hexdig_fun+0x26>
 800c6fc:	3827      	subs	r0, #39	; 0x27
 800c6fe:	e7f1      	b.n	800c6e4 <__hexdig_fun+0xa>
 800c700:	2000      	movs	r0, #0
 800c702:	4770      	bx	lr

0800c704 <__gethex>:
 800c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c708:	ed2d 8b02 	vpush	{d8}
 800c70c:	b089      	sub	sp, #36	; 0x24
 800c70e:	ee08 0a10 	vmov	s16, r0
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	4bb4      	ldr	r3, [pc, #720]	; (800c9e8 <__gethex+0x2e4>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	9301      	str	r3, [sp, #4]
 800c71a:	4618      	mov	r0, r3
 800c71c:	468b      	mov	fp, r1
 800c71e:	4690      	mov	r8, r2
 800c720:	f7f3 fd56 	bl	80001d0 <strlen>
 800c724:	9b01      	ldr	r3, [sp, #4]
 800c726:	f8db 2000 	ldr.w	r2, [fp]
 800c72a:	4403      	add	r3, r0
 800c72c:	4682      	mov	sl, r0
 800c72e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c732:	9305      	str	r3, [sp, #20]
 800c734:	1c93      	adds	r3, r2, #2
 800c736:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c73a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c73e:	32fe      	adds	r2, #254	; 0xfe
 800c740:	18d1      	adds	r1, r2, r3
 800c742:	461f      	mov	r7, r3
 800c744:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c748:	9100      	str	r1, [sp, #0]
 800c74a:	2830      	cmp	r0, #48	; 0x30
 800c74c:	d0f8      	beq.n	800c740 <__gethex+0x3c>
 800c74e:	f7ff ffc4 	bl	800c6da <__hexdig_fun>
 800c752:	4604      	mov	r4, r0
 800c754:	2800      	cmp	r0, #0
 800c756:	d13a      	bne.n	800c7ce <__gethex+0xca>
 800c758:	9901      	ldr	r1, [sp, #4]
 800c75a:	4652      	mov	r2, sl
 800c75c:	4638      	mov	r0, r7
 800c75e:	f001 fc74 	bl	800e04a <strncmp>
 800c762:	4605      	mov	r5, r0
 800c764:	2800      	cmp	r0, #0
 800c766:	d168      	bne.n	800c83a <__gethex+0x136>
 800c768:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c76c:	eb07 060a 	add.w	r6, r7, sl
 800c770:	f7ff ffb3 	bl	800c6da <__hexdig_fun>
 800c774:	2800      	cmp	r0, #0
 800c776:	d062      	beq.n	800c83e <__gethex+0x13a>
 800c778:	4633      	mov	r3, r6
 800c77a:	7818      	ldrb	r0, [r3, #0]
 800c77c:	2830      	cmp	r0, #48	; 0x30
 800c77e:	461f      	mov	r7, r3
 800c780:	f103 0301 	add.w	r3, r3, #1
 800c784:	d0f9      	beq.n	800c77a <__gethex+0x76>
 800c786:	f7ff ffa8 	bl	800c6da <__hexdig_fun>
 800c78a:	2301      	movs	r3, #1
 800c78c:	fab0 f480 	clz	r4, r0
 800c790:	0964      	lsrs	r4, r4, #5
 800c792:	4635      	mov	r5, r6
 800c794:	9300      	str	r3, [sp, #0]
 800c796:	463a      	mov	r2, r7
 800c798:	4616      	mov	r6, r2
 800c79a:	3201      	adds	r2, #1
 800c79c:	7830      	ldrb	r0, [r6, #0]
 800c79e:	f7ff ff9c 	bl	800c6da <__hexdig_fun>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	d1f8      	bne.n	800c798 <__gethex+0x94>
 800c7a6:	9901      	ldr	r1, [sp, #4]
 800c7a8:	4652      	mov	r2, sl
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	f001 fc4d 	bl	800e04a <strncmp>
 800c7b0:	b980      	cbnz	r0, 800c7d4 <__gethex+0xd0>
 800c7b2:	b94d      	cbnz	r5, 800c7c8 <__gethex+0xc4>
 800c7b4:	eb06 050a 	add.w	r5, r6, sl
 800c7b8:	462a      	mov	r2, r5
 800c7ba:	4616      	mov	r6, r2
 800c7bc:	3201      	adds	r2, #1
 800c7be:	7830      	ldrb	r0, [r6, #0]
 800c7c0:	f7ff ff8b 	bl	800c6da <__hexdig_fun>
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	d1f8      	bne.n	800c7ba <__gethex+0xb6>
 800c7c8:	1bad      	subs	r5, r5, r6
 800c7ca:	00ad      	lsls	r5, r5, #2
 800c7cc:	e004      	b.n	800c7d8 <__gethex+0xd4>
 800c7ce:	2400      	movs	r4, #0
 800c7d0:	4625      	mov	r5, r4
 800c7d2:	e7e0      	b.n	800c796 <__gethex+0x92>
 800c7d4:	2d00      	cmp	r5, #0
 800c7d6:	d1f7      	bne.n	800c7c8 <__gethex+0xc4>
 800c7d8:	7833      	ldrb	r3, [r6, #0]
 800c7da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c7de:	2b50      	cmp	r3, #80	; 0x50
 800c7e0:	d13b      	bne.n	800c85a <__gethex+0x156>
 800c7e2:	7873      	ldrb	r3, [r6, #1]
 800c7e4:	2b2b      	cmp	r3, #43	; 0x2b
 800c7e6:	d02c      	beq.n	800c842 <__gethex+0x13e>
 800c7e8:	2b2d      	cmp	r3, #45	; 0x2d
 800c7ea:	d02e      	beq.n	800c84a <__gethex+0x146>
 800c7ec:	1c71      	adds	r1, r6, #1
 800c7ee:	f04f 0900 	mov.w	r9, #0
 800c7f2:	7808      	ldrb	r0, [r1, #0]
 800c7f4:	f7ff ff71 	bl	800c6da <__hexdig_fun>
 800c7f8:	1e43      	subs	r3, r0, #1
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	2b18      	cmp	r3, #24
 800c7fe:	d82c      	bhi.n	800c85a <__gethex+0x156>
 800c800:	f1a0 0210 	sub.w	r2, r0, #16
 800c804:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c808:	f7ff ff67 	bl	800c6da <__hexdig_fun>
 800c80c:	1e43      	subs	r3, r0, #1
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	2b18      	cmp	r3, #24
 800c812:	d91d      	bls.n	800c850 <__gethex+0x14c>
 800c814:	f1b9 0f00 	cmp.w	r9, #0
 800c818:	d000      	beq.n	800c81c <__gethex+0x118>
 800c81a:	4252      	negs	r2, r2
 800c81c:	4415      	add	r5, r2
 800c81e:	f8cb 1000 	str.w	r1, [fp]
 800c822:	b1e4      	cbz	r4, 800c85e <__gethex+0x15a>
 800c824:	9b00      	ldr	r3, [sp, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	bf14      	ite	ne
 800c82a:	2700      	movne	r7, #0
 800c82c:	2706      	moveq	r7, #6
 800c82e:	4638      	mov	r0, r7
 800c830:	b009      	add	sp, #36	; 0x24
 800c832:	ecbd 8b02 	vpop	{d8}
 800c836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83a:	463e      	mov	r6, r7
 800c83c:	4625      	mov	r5, r4
 800c83e:	2401      	movs	r4, #1
 800c840:	e7ca      	b.n	800c7d8 <__gethex+0xd4>
 800c842:	f04f 0900 	mov.w	r9, #0
 800c846:	1cb1      	adds	r1, r6, #2
 800c848:	e7d3      	b.n	800c7f2 <__gethex+0xee>
 800c84a:	f04f 0901 	mov.w	r9, #1
 800c84e:	e7fa      	b.n	800c846 <__gethex+0x142>
 800c850:	230a      	movs	r3, #10
 800c852:	fb03 0202 	mla	r2, r3, r2, r0
 800c856:	3a10      	subs	r2, #16
 800c858:	e7d4      	b.n	800c804 <__gethex+0x100>
 800c85a:	4631      	mov	r1, r6
 800c85c:	e7df      	b.n	800c81e <__gethex+0x11a>
 800c85e:	1bf3      	subs	r3, r6, r7
 800c860:	3b01      	subs	r3, #1
 800c862:	4621      	mov	r1, r4
 800c864:	2b07      	cmp	r3, #7
 800c866:	dc0b      	bgt.n	800c880 <__gethex+0x17c>
 800c868:	ee18 0a10 	vmov	r0, s16
 800c86c:	f000 fbe0 	bl	800d030 <_Balloc>
 800c870:	4604      	mov	r4, r0
 800c872:	b940      	cbnz	r0, 800c886 <__gethex+0x182>
 800c874:	4b5d      	ldr	r3, [pc, #372]	; (800c9ec <__gethex+0x2e8>)
 800c876:	4602      	mov	r2, r0
 800c878:	21de      	movs	r1, #222	; 0xde
 800c87a:	485d      	ldr	r0, [pc, #372]	; (800c9f0 <__gethex+0x2ec>)
 800c87c:	f7fe fe64 	bl	800b548 <__assert_func>
 800c880:	3101      	adds	r1, #1
 800c882:	105b      	asrs	r3, r3, #1
 800c884:	e7ee      	b.n	800c864 <__gethex+0x160>
 800c886:	f100 0914 	add.w	r9, r0, #20
 800c88a:	f04f 0b00 	mov.w	fp, #0
 800c88e:	f1ca 0301 	rsb	r3, sl, #1
 800c892:	f8cd 9008 	str.w	r9, [sp, #8]
 800c896:	f8cd b000 	str.w	fp, [sp]
 800c89a:	9306      	str	r3, [sp, #24]
 800c89c:	42b7      	cmp	r7, r6
 800c89e:	d340      	bcc.n	800c922 <__gethex+0x21e>
 800c8a0:	9802      	ldr	r0, [sp, #8]
 800c8a2:	9b00      	ldr	r3, [sp, #0]
 800c8a4:	f840 3b04 	str.w	r3, [r0], #4
 800c8a8:	eba0 0009 	sub.w	r0, r0, r9
 800c8ac:	1080      	asrs	r0, r0, #2
 800c8ae:	0146      	lsls	r6, r0, #5
 800c8b0:	6120      	str	r0, [r4, #16]
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 fcae 	bl	800d214 <__hi0bits>
 800c8b8:	1a30      	subs	r0, r6, r0
 800c8ba:	f8d8 6000 	ldr.w	r6, [r8]
 800c8be:	42b0      	cmp	r0, r6
 800c8c0:	dd63      	ble.n	800c98a <__gethex+0x286>
 800c8c2:	1b87      	subs	r7, r0, r6
 800c8c4:	4639      	mov	r1, r7
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f001 f852 	bl	800d970 <__any_on>
 800c8cc:	4682      	mov	sl, r0
 800c8ce:	b1a8      	cbz	r0, 800c8fc <__gethex+0x1f8>
 800c8d0:	1e7b      	subs	r3, r7, #1
 800c8d2:	1159      	asrs	r1, r3, #5
 800c8d4:	f003 021f 	and.w	r2, r3, #31
 800c8d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c8dc:	f04f 0a01 	mov.w	sl, #1
 800c8e0:	fa0a f202 	lsl.w	r2, sl, r2
 800c8e4:	420a      	tst	r2, r1
 800c8e6:	d009      	beq.n	800c8fc <__gethex+0x1f8>
 800c8e8:	4553      	cmp	r3, sl
 800c8ea:	dd05      	ble.n	800c8f8 <__gethex+0x1f4>
 800c8ec:	1eb9      	subs	r1, r7, #2
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	f001 f83e 	bl	800d970 <__any_on>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	d145      	bne.n	800c984 <__gethex+0x280>
 800c8f8:	f04f 0a02 	mov.w	sl, #2
 800c8fc:	4639      	mov	r1, r7
 800c8fe:	4620      	mov	r0, r4
 800c900:	f7ff fe99 	bl	800c636 <rshift>
 800c904:	443d      	add	r5, r7
 800c906:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c90a:	42ab      	cmp	r3, r5
 800c90c:	da4c      	bge.n	800c9a8 <__gethex+0x2a4>
 800c90e:	ee18 0a10 	vmov	r0, s16
 800c912:	4621      	mov	r1, r4
 800c914:	f000 fbcc 	bl	800d0b0 <_Bfree>
 800c918:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c91a:	2300      	movs	r3, #0
 800c91c:	6013      	str	r3, [r2, #0]
 800c91e:	27a3      	movs	r7, #163	; 0xa3
 800c920:	e785      	b.n	800c82e <__gethex+0x12a>
 800c922:	1e73      	subs	r3, r6, #1
 800c924:	9a05      	ldr	r2, [sp, #20]
 800c926:	9303      	str	r3, [sp, #12]
 800c928:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d019      	beq.n	800c964 <__gethex+0x260>
 800c930:	f1bb 0f20 	cmp.w	fp, #32
 800c934:	d107      	bne.n	800c946 <__gethex+0x242>
 800c936:	9b02      	ldr	r3, [sp, #8]
 800c938:	9a00      	ldr	r2, [sp, #0]
 800c93a:	f843 2b04 	str.w	r2, [r3], #4
 800c93e:	9302      	str	r3, [sp, #8]
 800c940:	2300      	movs	r3, #0
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	469b      	mov	fp, r3
 800c946:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c94a:	f7ff fec6 	bl	800c6da <__hexdig_fun>
 800c94e:	9b00      	ldr	r3, [sp, #0]
 800c950:	f000 000f 	and.w	r0, r0, #15
 800c954:	fa00 f00b 	lsl.w	r0, r0, fp
 800c958:	4303      	orrs	r3, r0
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	f10b 0b04 	add.w	fp, fp, #4
 800c960:	9b03      	ldr	r3, [sp, #12]
 800c962:	e00d      	b.n	800c980 <__gethex+0x27c>
 800c964:	9b03      	ldr	r3, [sp, #12]
 800c966:	9a06      	ldr	r2, [sp, #24]
 800c968:	4413      	add	r3, r2
 800c96a:	42bb      	cmp	r3, r7
 800c96c:	d3e0      	bcc.n	800c930 <__gethex+0x22c>
 800c96e:	4618      	mov	r0, r3
 800c970:	9901      	ldr	r1, [sp, #4]
 800c972:	9307      	str	r3, [sp, #28]
 800c974:	4652      	mov	r2, sl
 800c976:	f001 fb68 	bl	800e04a <strncmp>
 800c97a:	9b07      	ldr	r3, [sp, #28]
 800c97c:	2800      	cmp	r0, #0
 800c97e:	d1d7      	bne.n	800c930 <__gethex+0x22c>
 800c980:	461e      	mov	r6, r3
 800c982:	e78b      	b.n	800c89c <__gethex+0x198>
 800c984:	f04f 0a03 	mov.w	sl, #3
 800c988:	e7b8      	b.n	800c8fc <__gethex+0x1f8>
 800c98a:	da0a      	bge.n	800c9a2 <__gethex+0x29e>
 800c98c:	1a37      	subs	r7, r6, r0
 800c98e:	4621      	mov	r1, r4
 800c990:	ee18 0a10 	vmov	r0, s16
 800c994:	463a      	mov	r2, r7
 800c996:	f000 fda7 	bl	800d4e8 <__lshift>
 800c99a:	1bed      	subs	r5, r5, r7
 800c99c:	4604      	mov	r4, r0
 800c99e:	f100 0914 	add.w	r9, r0, #20
 800c9a2:	f04f 0a00 	mov.w	sl, #0
 800c9a6:	e7ae      	b.n	800c906 <__gethex+0x202>
 800c9a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c9ac:	42a8      	cmp	r0, r5
 800c9ae:	dd72      	ble.n	800ca96 <__gethex+0x392>
 800c9b0:	1b45      	subs	r5, r0, r5
 800c9b2:	42ae      	cmp	r6, r5
 800c9b4:	dc36      	bgt.n	800ca24 <__gethex+0x320>
 800c9b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d02a      	beq.n	800ca14 <__gethex+0x310>
 800c9be:	2b03      	cmp	r3, #3
 800c9c0:	d02c      	beq.n	800ca1c <__gethex+0x318>
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d11c      	bne.n	800ca00 <__gethex+0x2fc>
 800c9c6:	42ae      	cmp	r6, r5
 800c9c8:	d11a      	bne.n	800ca00 <__gethex+0x2fc>
 800c9ca:	2e01      	cmp	r6, #1
 800c9cc:	d112      	bne.n	800c9f4 <__gethex+0x2f0>
 800c9ce:	9a04      	ldr	r2, [sp, #16]
 800c9d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c9d4:	6013      	str	r3, [r2, #0]
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	6123      	str	r3, [r4, #16]
 800c9da:	f8c9 3000 	str.w	r3, [r9]
 800c9de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9e0:	2762      	movs	r7, #98	; 0x62
 800c9e2:	601c      	str	r4, [r3, #0]
 800c9e4:	e723      	b.n	800c82e <__gethex+0x12a>
 800c9e6:	bf00      	nop
 800c9e8:	0800f0b0 	.word	0x0800f0b0
 800c9ec:	0800efd6 	.word	0x0800efd6
 800c9f0:	0800f048 	.word	0x0800f048
 800c9f4:	1e71      	subs	r1, r6, #1
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	f000 ffba 	bl	800d970 <__any_on>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d1e6      	bne.n	800c9ce <__gethex+0x2ca>
 800ca00:	ee18 0a10 	vmov	r0, s16
 800ca04:	4621      	mov	r1, r4
 800ca06:	f000 fb53 	bl	800d0b0 <_Bfree>
 800ca0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	6013      	str	r3, [r2, #0]
 800ca10:	2750      	movs	r7, #80	; 0x50
 800ca12:	e70c      	b.n	800c82e <__gethex+0x12a>
 800ca14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d1f2      	bne.n	800ca00 <__gethex+0x2fc>
 800ca1a:	e7d8      	b.n	800c9ce <__gethex+0x2ca>
 800ca1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d1d5      	bne.n	800c9ce <__gethex+0x2ca>
 800ca22:	e7ed      	b.n	800ca00 <__gethex+0x2fc>
 800ca24:	1e6f      	subs	r7, r5, #1
 800ca26:	f1ba 0f00 	cmp.w	sl, #0
 800ca2a:	d131      	bne.n	800ca90 <__gethex+0x38c>
 800ca2c:	b127      	cbz	r7, 800ca38 <__gethex+0x334>
 800ca2e:	4639      	mov	r1, r7
 800ca30:	4620      	mov	r0, r4
 800ca32:	f000 ff9d 	bl	800d970 <__any_on>
 800ca36:	4682      	mov	sl, r0
 800ca38:	117b      	asrs	r3, r7, #5
 800ca3a:	2101      	movs	r1, #1
 800ca3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ca40:	f007 071f 	and.w	r7, r7, #31
 800ca44:	fa01 f707 	lsl.w	r7, r1, r7
 800ca48:	421f      	tst	r7, r3
 800ca4a:	4629      	mov	r1, r5
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	bf18      	it	ne
 800ca50:	f04a 0a02 	orrne.w	sl, sl, #2
 800ca54:	1b76      	subs	r6, r6, r5
 800ca56:	f7ff fdee 	bl	800c636 <rshift>
 800ca5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ca5e:	2702      	movs	r7, #2
 800ca60:	f1ba 0f00 	cmp.w	sl, #0
 800ca64:	d048      	beq.n	800caf8 <__gethex+0x3f4>
 800ca66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d015      	beq.n	800ca9a <__gethex+0x396>
 800ca6e:	2b03      	cmp	r3, #3
 800ca70:	d017      	beq.n	800caa2 <__gethex+0x39e>
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d109      	bne.n	800ca8a <__gethex+0x386>
 800ca76:	f01a 0f02 	tst.w	sl, #2
 800ca7a:	d006      	beq.n	800ca8a <__gethex+0x386>
 800ca7c:	f8d9 0000 	ldr.w	r0, [r9]
 800ca80:	ea4a 0a00 	orr.w	sl, sl, r0
 800ca84:	f01a 0f01 	tst.w	sl, #1
 800ca88:	d10e      	bne.n	800caa8 <__gethex+0x3a4>
 800ca8a:	f047 0710 	orr.w	r7, r7, #16
 800ca8e:	e033      	b.n	800caf8 <__gethex+0x3f4>
 800ca90:	f04f 0a01 	mov.w	sl, #1
 800ca94:	e7d0      	b.n	800ca38 <__gethex+0x334>
 800ca96:	2701      	movs	r7, #1
 800ca98:	e7e2      	b.n	800ca60 <__gethex+0x35c>
 800ca9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca9c:	f1c3 0301 	rsb	r3, r3, #1
 800caa0:	9315      	str	r3, [sp, #84]	; 0x54
 800caa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d0f0      	beq.n	800ca8a <__gethex+0x386>
 800caa8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800caac:	f104 0314 	add.w	r3, r4, #20
 800cab0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cab4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cab8:	f04f 0c00 	mov.w	ip, #0
 800cabc:	4618      	mov	r0, r3
 800cabe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cac2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cac6:	d01c      	beq.n	800cb02 <__gethex+0x3fe>
 800cac8:	3201      	adds	r2, #1
 800caca:	6002      	str	r2, [r0, #0]
 800cacc:	2f02      	cmp	r7, #2
 800cace:	f104 0314 	add.w	r3, r4, #20
 800cad2:	d13f      	bne.n	800cb54 <__gethex+0x450>
 800cad4:	f8d8 2000 	ldr.w	r2, [r8]
 800cad8:	3a01      	subs	r2, #1
 800cada:	42b2      	cmp	r2, r6
 800cadc:	d10a      	bne.n	800caf4 <__gethex+0x3f0>
 800cade:	1171      	asrs	r1, r6, #5
 800cae0:	2201      	movs	r2, #1
 800cae2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cae6:	f006 061f 	and.w	r6, r6, #31
 800caea:	fa02 f606 	lsl.w	r6, r2, r6
 800caee:	421e      	tst	r6, r3
 800caf0:	bf18      	it	ne
 800caf2:	4617      	movne	r7, r2
 800caf4:	f047 0720 	orr.w	r7, r7, #32
 800caf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cafa:	601c      	str	r4, [r3, #0]
 800cafc:	9b04      	ldr	r3, [sp, #16]
 800cafe:	601d      	str	r5, [r3, #0]
 800cb00:	e695      	b.n	800c82e <__gethex+0x12a>
 800cb02:	4299      	cmp	r1, r3
 800cb04:	f843 cc04 	str.w	ip, [r3, #-4]
 800cb08:	d8d8      	bhi.n	800cabc <__gethex+0x3b8>
 800cb0a:	68a3      	ldr	r3, [r4, #8]
 800cb0c:	459b      	cmp	fp, r3
 800cb0e:	db19      	blt.n	800cb44 <__gethex+0x440>
 800cb10:	6861      	ldr	r1, [r4, #4]
 800cb12:	ee18 0a10 	vmov	r0, s16
 800cb16:	3101      	adds	r1, #1
 800cb18:	f000 fa8a 	bl	800d030 <_Balloc>
 800cb1c:	4681      	mov	r9, r0
 800cb1e:	b918      	cbnz	r0, 800cb28 <__gethex+0x424>
 800cb20:	4b1a      	ldr	r3, [pc, #104]	; (800cb8c <__gethex+0x488>)
 800cb22:	4602      	mov	r2, r0
 800cb24:	2184      	movs	r1, #132	; 0x84
 800cb26:	e6a8      	b.n	800c87a <__gethex+0x176>
 800cb28:	6922      	ldr	r2, [r4, #16]
 800cb2a:	3202      	adds	r2, #2
 800cb2c:	f104 010c 	add.w	r1, r4, #12
 800cb30:	0092      	lsls	r2, r2, #2
 800cb32:	300c      	adds	r0, #12
 800cb34:	f000 fa62 	bl	800cffc <memcpy>
 800cb38:	4621      	mov	r1, r4
 800cb3a:	ee18 0a10 	vmov	r0, s16
 800cb3e:	f000 fab7 	bl	800d0b0 <_Bfree>
 800cb42:	464c      	mov	r4, r9
 800cb44:	6923      	ldr	r3, [r4, #16]
 800cb46:	1c5a      	adds	r2, r3, #1
 800cb48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb4c:	6122      	str	r2, [r4, #16]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	615a      	str	r2, [r3, #20]
 800cb52:	e7bb      	b.n	800cacc <__gethex+0x3c8>
 800cb54:	6922      	ldr	r2, [r4, #16]
 800cb56:	455a      	cmp	r2, fp
 800cb58:	dd0b      	ble.n	800cb72 <__gethex+0x46e>
 800cb5a:	2101      	movs	r1, #1
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f7ff fd6a 	bl	800c636 <rshift>
 800cb62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb66:	3501      	adds	r5, #1
 800cb68:	42ab      	cmp	r3, r5
 800cb6a:	f6ff aed0 	blt.w	800c90e <__gethex+0x20a>
 800cb6e:	2701      	movs	r7, #1
 800cb70:	e7c0      	b.n	800caf4 <__gethex+0x3f0>
 800cb72:	f016 061f 	ands.w	r6, r6, #31
 800cb76:	d0fa      	beq.n	800cb6e <__gethex+0x46a>
 800cb78:	4453      	add	r3, sl
 800cb7a:	f1c6 0620 	rsb	r6, r6, #32
 800cb7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cb82:	f000 fb47 	bl	800d214 <__hi0bits>
 800cb86:	42b0      	cmp	r0, r6
 800cb88:	dbe7      	blt.n	800cb5a <__gethex+0x456>
 800cb8a:	e7f0      	b.n	800cb6e <__gethex+0x46a>
 800cb8c:	0800efd6 	.word	0x0800efd6

0800cb90 <L_shift>:
 800cb90:	f1c2 0208 	rsb	r2, r2, #8
 800cb94:	0092      	lsls	r2, r2, #2
 800cb96:	b570      	push	{r4, r5, r6, lr}
 800cb98:	f1c2 0620 	rsb	r6, r2, #32
 800cb9c:	6843      	ldr	r3, [r0, #4]
 800cb9e:	6804      	ldr	r4, [r0, #0]
 800cba0:	fa03 f506 	lsl.w	r5, r3, r6
 800cba4:	432c      	orrs	r4, r5
 800cba6:	40d3      	lsrs	r3, r2
 800cba8:	6004      	str	r4, [r0, #0]
 800cbaa:	f840 3f04 	str.w	r3, [r0, #4]!
 800cbae:	4288      	cmp	r0, r1
 800cbb0:	d3f4      	bcc.n	800cb9c <L_shift+0xc>
 800cbb2:	bd70      	pop	{r4, r5, r6, pc}

0800cbb4 <__match>:
 800cbb4:	b530      	push	{r4, r5, lr}
 800cbb6:	6803      	ldr	r3, [r0, #0]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbbe:	b914      	cbnz	r4, 800cbc6 <__match+0x12>
 800cbc0:	6003      	str	r3, [r0, #0]
 800cbc2:	2001      	movs	r0, #1
 800cbc4:	bd30      	pop	{r4, r5, pc}
 800cbc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cbce:	2d19      	cmp	r5, #25
 800cbd0:	bf98      	it	ls
 800cbd2:	3220      	addls	r2, #32
 800cbd4:	42a2      	cmp	r2, r4
 800cbd6:	d0f0      	beq.n	800cbba <__match+0x6>
 800cbd8:	2000      	movs	r0, #0
 800cbda:	e7f3      	b.n	800cbc4 <__match+0x10>

0800cbdc <__hexnan>:
 800cbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe0:	680b      	ldr	r3, [r1, #0]
 800cbe2:	115e      	asrs	r6, r3, #5
 800cbe4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cbe8:	f013 031f 	ands.w	r3, r3, #31
 800cbec:	b087      	sub	sp, #28
 800cbee:	bf18      	it	ne
 800cbf0:	3604      	addne	r6, #4
 800cbf2:	2500      	movs	r5, #0
 800cbf4:	1f37      	subs	r7, r6, #4
 800cbf6:	4690      	mov	r8, r2
 800cbf8:	6802      	ldr	r2, [r0, #0]
 800cbfa:	9301      	str	r3, [sp, #4]
 800cbfc:	4682      	mov	sl, r0
 800cbfe:	f846 5c04 	str.w	r5, [r6, #-4]
 800cc02:	46b9      	mov	r9, r7
 800cc04:	463c      	mov	r4, r7
 800cc06:	9502      	str	r5, [sp, #8]
 800cc08:	46ab      	mov	fp, r5
 800cc0a:	7851      	ldrb	r1, [r2, #1]
 800cc0c:	1c53      	adds	r3, r2, #1
 800cc0e:	9303      	str	r3, [sp, #12]
 800cc10:	b341      	cbz	r1, 800cc64 <__hexnan+0x88>
 800cc12:	4608      	mov	r0, r1
 800cc14:	9205      	str	r2, [sp, #20]
 800cc16:	9104      	str	r1, [sp, #16]
 800cc18:	f7ff fd5f 	bl	800c6da <__hexdig_fun>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	d14f      	bne.n	800ccc0 <__hexnan+0xe4>
 800cc20:	9904      	ldr	r1, [sp, #16]
 800cc22:	9a05      	ldr	r2, [sp, #20]
 800cc24:	2920      	cmp	r1, #32
 800cc26:	d818      	bhi.n	800cc5a <__hexnan+0x7e>
 800cc28:	9b02      	ldr	r3, [sp, #8]
 800cc2a:	459b      	cmp	fp, r3
 800cc2c:	dd13      	ble.n	800cc56 <__hexnan+0x7a>
 800cc2e:	454c      	cmp	r4, r9
 800cc30:	d206      	bcs.n	800cc40 <__hexnan+0x64>
 800cc32:	2d07      	cmp	r5, #7
 800cc34:	dc04      	bgt.n	800cc40 <__hexnan+0x64>
 800cc36:	462a      	mov	r2, r5
 800cc38:	4649      	mov	r1, r9
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f7ff ffa8 	bl	800cb90 <L_shift>
 800cc40:	4544      	cmp	r4, r8
 800cc42:	d950      	bls.n	800cce6 <__hexnan+0x10a>
 800cc44:	2300      	movs	r3, #0
 800cc46:	f1a4 0904 	sub.w	r9, r4, #4
 800cc4a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc4e:	f8cd b008 	str.w	fp, [sp, #8]
 800cc52:	464c      	mov	r4, r9
 800cc54:	461d      	mov	r5, r3
 800cc56:	9a03      	ldr	r2, [sp, #12]
 800cc58:	e7d7      	b.n	800cc0a <__hexnan+0x2e>
 800cc5a:	2929      	cmp	r1, #41	; 0x29
 800cc5c:	d156      	bne.n	800cd0c <__hexnan+0x130>
 800cc5e:	3202      	adds	r2, #2
 800cc60:	f8ca 2000 	str.w	r2, [sl]
 800cc64:	f1bb 0f00 	cmp.w	fp, #0
 800cc68:	d050      	beq.n	800cd0c <__hexnan+0x130>
 800cc6a:	454c      	cmp	r4, r9
 800cc6c:	d206      	bcs.n	800cc7c <__hexnan+0xa0>
 800cc6e:	2d07      	cmp	r5, #7
 800cc70:	dc04      	bgt.n	800cc7c <__hexnan+0xa0>
 800cc72:	462a      	mov	r2, r5
 800cc74:	4649      	mov	r1, r9
 800cc76:	4620      	mov	r0, r4
 800cc78:	f7ff ff8a 	bl	800cb90 <L_shift>
 800cc7c:	4544      	cmp	r4, r8
 800cc7e:	d934      	bls.n	800ccea <__hexnan+0x10e>
 800cc80:	f1a8 0204 	sub.w	r2, r8, #4
 800cc84:	4623      	mov	r3, r4
 800cc86:	f853 1b04 	ldr.w	r1, [r3], #4
 800cc8a:	f842 1f04 	str.w	r1, [r2, #4]!
 800cc8e:	429f      	cmp	r7, r3
 800cc90:	d2f9      	bcs.n	800cc86 <__hexnan+0xaa>
 800cc92:	1b3b      	subs	r3, r7, r4
 800cc94:	f023 0303 	bic.w	r3, r3, #3
 800cc98:	3304      	adds	r3, #4
 800cc9a:	3401      	adds	r4, #1
 800cc9c:	3e03      	subs	r6, #3
 800cc9e:	42b4      	cmp	r4, r6
 800cca0:	bf88      	it	hi
 800cca2:	2304      	movhi	r3, #4
 800cca4:	4443      	add	r3, r8
 800cca6:	2200      	movs	r2, #0
 800cca8:	f843 2b04 	str.w	r2, [r3], #4
 800ccac:	429f      	cmp	r7, r3
 800ccae:	d2fb      	bcs.n	800cca8 <__hexnan+0xcc>
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	b91b      	cbnz	r3, 800ccbc <__hexnan+0xe0>
 800ccb4:	4547      	cmp	r7, r8
 800ccb6:	d127      	bne.n	800cd08 <__hexnan+0x12c>
 800ccb8:	2301      	movs	r3, #1
 800ccba:	603b      	str	r3, [r7, #0]
 800ccbc:	2005      	movs	r0, #5
 800ccbe:	e026      	b.n	800cd0e <__hexnan+0x132>
 800ccc0:	3501      	adds	r5, #1
 800ccc2:	2d08      	cmp	r5, #8
 800ccc4:	f10b 0b01 	add.w	fp, fp, #1
 800ccc8:	dd06      	ble.n	800ccd8 <__hexnan+0xfc>
 800ccca:	4544      	cmp	r4, r8
 800cccc:	d9c3      	bls.n	800cc56 <__hexnan+0x7a>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	f844 3c04 	str.w	r3, [r4, #-4]
 800ccd4:	2501      	movs	r5, #1
 800ccd6:	3c04      	subs	r4, #4
 800ccd8:	6822      	ldr	r2, [r4, #0]
 800ccda:	f000 000f 	and.w	r0, r0, #15
 800ccde:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cce2:	6022      	str	r2, [r4, #0]
 800cce4:	e7b7      	b.n	800cc56 <__hexnan+0x7a>
 800cce6:	2508      	movs	r5, #8
 800cce8:	e7b5      	b.n	800cc56 <__hexnan+0x7a>
 800ccea:	9b01      	ldr	r3, [sp, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d0df      	beq.n	800ccb0 <__hexnan+0xd4>
 800ccf0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccf4:	f1c3 0320 	rsb	r3, r3, #32
 800ccf8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccfc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cd00:	401a      	ands	r2, r3
 800cd02:	f846 2c04 	str.w	r2, [r6, #-4]
 800cd06:	e7d3      	b.n	800ccb0 <__hexnan+0xd4>
 800cd08:	3f04      	subs	r7, #4
 800cd0a:	e7d1      	b.n	800ccb0 <__hexnan+0xd4>
 800cd0c:	2004      	movs	r0, #4
 800cd0e:	b007      	add	sp, #28
 800cd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd14 <_findenv_r>:
 800cd14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd18:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800cd88 <_findenv_r+0x74>
 800cd1c:	4607      	mov	r7, r0
 800cd1e:	4689      	mov	r9, r1
 800cd20:	4616      	mov	r6, r2
 800cd22:	f001 fa5d 	bl	800e1e0 <__env_lock>
 800cd26:	f8da 4000 	ldr.w	r4, [sl]
 800cd2a:	b134      	cbz	r4, 800cd3a <_findenv_r+0x26>
 800cd2c:	464b      	mov	r3, r9
 800cd2e:	4698      	mov	r8, r3
 800cd30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd34:	b13a      	cbz	r2, 800cd46 <_findenv_r+0x32>
 800cd36:	2a3d      	cmp	r2, #61	; 0x3d
 800cd38:	d1f9      	bne.n	800cd2e <_findenv_r+0x1a>
 800cd3a:	4638      	mov	r0, r7
 800cd3c:	f001 fa56 	bl	800e1ec <__env_unlock>
 800cd40:	2000      	movs	r0, #0
 800cd42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd46:	eba8 0809 	sub.w	r8, r8, r9
 800cd4a:	46a3      	mov	fp, r4
 800cd4c:	f854 0b04 	ldr.w	r0, [r4], #4
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d0f2      	beq.n	800cd3a <_findenv_r+0x26>
 800cd54:	4642      	mov	r2, r8
 800cd56:	4649      	mov	r1, r9
 800cd58:	f001 f977 	bl	800e04a <strncmp>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	d1f4      	bne.n	800cd4a <_findenv_r+0x36>
 800cd60:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cd64:	eb03 0508 	add.w	r5, r3, r8
 800cd68:	f813 3008 	ldrb.w	r3, [r3, r8]
 800cd6c:	2b3d      	cmp	r3, #61	; 0x3d
 800cd6e:	d1ec      	bne.n	800cd4a <_findenv_r+0x36>
 800cd70:	f8da 3000 	ldr.w	r3, [sl]
 800cd74:	ebab 0303 	sub.w	r3, fp, r3
 800cd78:	109b      	asrs	r3, r3, #2
 800cd7a:	4638      	mov	r0, r7
 800cd7c:	6033      	str	r3, [r6, #0]
 800cd7e:	f001 fa35 	bl	800e1ec <__env_unlock>
 800cd82:	1c68      	adds	r0, r5, #1
 800cd84:	e7dd      	b.n	800cd42 <_findenv_r+0x2e>
 800cd86:	bf00      	nop
 800cd88:	20000004 	.word	0x20000004

0800cd8c <_getenv_r>:
 800cd8c:	b507      	push	{r0, r1, r2, lr}
 800cd8e:	aa01      	add	r2, sp, #4
 800cd90:	f7ff ffc0 	bl	800cd14 <_findenv_r>
 800cd94:	b003      	add	sp, #12
 800cd96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800cd9c <__gettzinfo>:
 800cd9c:	4800      	ldr	r0, [pc, #0]	; (800cda0 <__gettzinfo+0x4>)
 800cd9e:	4770      	bx	lr
 800cda0:	20000080 	.word	0x20000080

0800cda4 <gmtime_r>:
 800cda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda8:	e9d0 6700 	ldrd	r6, r7, [r0]
 800cdac:	460c      	mov	r4, r1
 800cdae:	4a4f      	ldr	r2, [pc, #316]	; (800ceec <gmtime_r+0x148>)
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	4639      	mov	r1, r7
 800cdb6:	f7f3 ff71 	bl	8000c9c <__aeabi_ldivmod>
 800cdba:	4639      	mov	r1, r7
 800cdbc:	4605      	mov	r5, r0
 800cdbe:	4a4b      	ldr	r2, [pc, #300]	; (800ceec <gmtime_r+0x148>)
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	f7f3 ff6a 	bl	8000c9c <__aeabi_ldivmod>
 800cdc8:	2a00      	cmp	r2, #0
 800cdca:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800cdce:	bfb7      	itett	lt
 800cdd0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800cdd4:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800cdd8:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800cddc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800cde0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800cde4:	fbb2 f1f0 	udiv	r1, r2, r0
 800cde8:	fb00 2211 	mls	r2, r0, r1, r2
 800cdec:	203c      	movs	r0, #60	; 0x3c
 800cdee:	60a1      	str	r1, [r4, #8]
 800cdf0:	fbb2 f1f0 	udiv	r1, r2, r0
 800cdf4:	fb00 2211 	mls	r2, r0, r1, r2
 800cdf8:	6061      	str	r1, [r4, #4]
 800cdfa:	6022      	str	r2, [r4, #0]
 800cdfc:	2107      	movs	r1, #7
 800cdfe:	1cda      	adds	r2, r3, #3
 800ce00:	fb92 f1f1 	sdiv	r1, r2, r1
 800ce04:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ce08:	1a52      	subs	r2, r2, r1
 800ce0a:	bf48      	it	mi
 800ce0c:	3207      	addmi	r2, #7
 800ce0e:	4d38      	ldr	r5, [pc, #224]	; (800cef0 <gmtime_r+0x14c>)
 800ce10:	4838      	ldr	r0, [pc, #224]	; (800cef4 <gmtime_r+0x150>)
 800ce12:	61a2      	str	r2, [r4, #24]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	bfb7      	itett	lt
 800ce18:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800ce1c:	fb93 f5f5 	sdivge	r5, r3, r5
 800ce20:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800ce24:	fb92 f5f5 	sdivlt	r5, r2, r5
 800ce28:	fb00 3005 	mla	r0, r0, r5, r3
 800ce2c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800ce30:	fbb0 f2f2 	udiv	r2, r0, r2
 800ce34:	4402      	add	r2, r0
 800ce36:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800ce3a:	fbb0 f1f3 	udiv	r1, r0, r3
 800ce3e:	1a52      	subs	r2, r2, r1
 800ce40:	f240 1c6d 	movw	ip, #365	; 0x16d
 800ce44:	492c      	ldr	r1, [pc, #176]	; (800cef8 <gmtime_r+0x154>)
 800ce46:	fbb0 f1f1 	udiv	r1, r0, r1
 800ce4a:	2764      	movs	r7, #100	; 0x64
 800ce4c:	1a52      	subs	r2, r2, r1
 800ce4e:	fbb2 f1fc 	udiv	r1, r2, ip
 800ce52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce56:	fbb1 f6f7 	udiv	r6, r1, r7
 800ce5a:	1af3      	subs	r3, r6, r3
 800ce5c:	4403      	add	r3, r0
 800ce5e:	fb0c 3311 	mls	r3, ip, r1, r3
 800ce62:	2299      	movs	r2, #153	; 0x99
 800ce64:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800ce68:	f10e 0e02 	add.w	lr, lr, #2
 800ce6c:	f103 0c01 	add.w	ip, r3, #1
 800ce70:	fbbe f0f2 	udiv	r0, lr, r2
 800ce74:	4342      	muls	r2, r0
 800ce76:	3202      	adds	r2, #2
 800ce78:	f04f 0805 	mov.w	r8, #5
 800ce7c:	fbb2 f2f8 	udiv	r2, r2, r8
 800ce80:	ebac 0c02 	sub.w	ip, ip, r2
 800ce84:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800ce88:	4596      	cmp	lr, r2
 800ce8a:	bf94      	ite	ls
 800ce8c:	2202      	movls	r2, #2
 800ce8e:	f06f 0209 	mvnhi.w	r2, #9
 800ce92:	4410      	add	r0, r2
 800ce94:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ce98:	fb02 1505 	mla	r5, r2, r5, r1
 800ce9c:	2801      	cmp	r0, #1
 800ce9e:	bf98      	it	ls
 800cea0:	3501      	addls	r5, #1
 800cea2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800cea6:	d30d      	bcc.n	800cec4 <gmtime_r+0x120>
 800cea8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ceac:	61e3      	str	r3, [r4, #28]
 800ceae:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800ceb8:	f8c4 c00c 	str.w	ip, [r4, #12]
 800cebc:	6223      	str	r3, [r4, #32]
 800cebe:	4620      	mov	r0, r4
 800cec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec4:	078a      	lsls	r2, r1, #30
 800cec6:	d102      	bne.n	800cece <gmtime_r+0x12a>
 800cec8:	fb07 1616 	mls	r6, r7, r6, r1
 800cecc:	b95e      	cbnz	r6, 800cee6 <gmtime_r+0x142>
 800cece:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ced2:	fbb1 f6f2 	udiv	r6, r1, r2
 800ced6:	fb02 1216 	mls	r2, r2, r6, r1
 800ceda:	fab2 f282 	clz	r2, r2
 800cede:	0952      	lsrs	r2, r2, #5
 800cee0:	333b      	adds	r3, #59	; 0x3b
 800cee2:	4413      	add	r3, r2
 800cee4:	e7e2      	b.n	800ceac <gmtime_r+0x108>
 800cee6:	2201      	movs	r2, #1
 800cee8:	e7fa      	b.n	800cee0 <gmtime_r+0x13c>
 800ceea:	bf00      	nop
 800ceec:	00015180 	.word	0x00015180
 800cef0:	00023ab1 	.word	0x00023ab1
 800cef4:	fffdc54f 	.word	0xfffdc54f
 800cef8:	00023ab0 	.word	0x00023ab0

0800cefc <_localeconv_r>:
 800cefc:	4800      	ldr	r0, [pc, #0]	; (800cf00 <_localeconv_r+0x4>)
 800cefe:	4770      	bx	lr
 800cf00:	200001cc 	.word	0x200001cc

0800cf04 <__retarget_lock_init_recursive>:
 800cf04:	4770      	bx	lr

0800cf06 <__retarget_lock_acquire>:
 800cf06:	4770      	bx	lr

0800cf08 <__retarget_lock_acquire_recursive>:
 800cf08:	4770      	bx	lr

0800cf0a <__retarget_lock_release>:
 800cf0a:	4770      	bx	lr

0800cf0c <__retarget_lock_release_recursive>:
 800cf0c:	4770      	bx	lr

0800cf0e <__swhatbuf_r>:
 800cf0e:	b570      	push	{r4, r5, r6, lr}
 800cf10:	460e      	mov	r6, r1
 800cf12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf16:	2900      	cmp	r1, #0
 800cf18:	b096      	sub	sp, #88	; 0x58
 800cf1a:	4614      	mov	r4, r2
 800cf1c:	461d      	mov	r5, r3
 800cf1e:	da08      	bge.n	800cf32 <__swhatbuf_r+0x24>
 800cf20:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cf24:	2200      	movs	r2, #0
 800cf26:	602a      	str	r2, [r5, #0]
 800cf28:	061a      	lsls	r2, r3, #24
 800cf2a:	d410      	bmi.n	800cf4e <__swhatbuf_r+0x40>
 800cf2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf30:	e00e      	b.n	800cf50 <__swhatbuf_r+0x42>
 800cf32:	466a      	mov	r2, sp
 800cf34:	f001 f960 	bl	800e1f8 <_fstat_r>
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	dbf1      	blt.n	800cf20 <__swhatbuf_r+0x12>
 800cf3c:	9a01      	ldr	r2, [sp, #4]
 800cf3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf46:	425a      	negs	r2, r3
 800cf48:	415a      	adcs	r2, r3
 800cf4a:	602a      	str	r2, [r5, #0]
 800cf4c:	e7ee      	b.n	800cf2c <__swhatbuf_r+0x1e>
 800cf4e:	2340      	movs	r3, #64	; 0x40
 800cf50:	2000      	movs	r0, #0
 800cf52:	6023      	str	r3, [r4, #0]
 800cf54:	b016      	add	sp, #88	; 0x58
 800cf56:	bd70      	pop	{r4, r5, r6, pc}

0800cf58 <__smakebuf_r>:
 800cf58:	898b      	ldrh	r3, [r1, #12]
 800cf5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf5c:	079d      	lsls	r5, r3, #30
 800cf5e:	4606      	mov	r6, r0
 800cf60:	460c      	mov	r4, r1
 800cf62:	d507      	bpl.n	800cf74 <__smakebuf_r+0x1c>
 800cf64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf68:	6023      	str	r3, [r4, #0]
 800cf6a:	6123      	str	r3, [r4, #16]
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	6163      	str	r3, [r4, #20]
 800cf70:	b002      	add	sp, #8
 800cf72:	bd70      	pop	{r4, r5, r6, pc}
 800cf74:	ab01      	add	r3, sp, #4
 800cf76:	466a      	mov	r2, sp
 800cf78:	f7ff ffc9 	bl	800cf0e <__swhatbuf_r>
 800cf7c:	9900      	ldr	r1, [sp, #0]
 800cf7e:	4605      	mov	r5, r0
 800cf80:	4630      	mov	r0, r6
 800cf82:	f7fc f93d 	bl	8009200 <_malloc_r>
 800cf86:	b948      	cbnz	r0, 800cf9c <__smakebuf_r+0x44>
 800cf88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf8c:	059a      	lsls	r2, r3, #22
 800cf8e:	d4ef      	bmi.n	800cf70 <__smakebuf_r+0x18>
 800cf90:	f023 0303 	bic.w	r3, r3, #3
 800cf94:	f043 0302 	orr.w	r3, r3, #2
 800cf98:	81a3      	strh	r3, [r4, #12]
 800cf9a:	e7e3      	b.n	800cf64 <__smakebuf_r+0xc>
 800cf9c:	4b0d      	ldr	r3, [pc, #52]	; (800cfd4 <__smakebuf_r+0x7c>)
 800cf9e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cfa0:	89a3      	ldrh	r3, [r4, #12]
 800cfa2:	6020      	str	r0, [r4, #0]
 800cfa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfa8:	81a3      	strh	r3, [r4, #12]
 800cfaa:	9b00      	ldr	r3, [sp, #0]
 800cfac:	6163      	str	r3, [r4, #20]
 800cfae:	9b01      	ldr	r3, [sp, #4]
 800cfb0:	6120      	str	r0, [r4, #16]
 800cfb2:	b15b      	cbz	r3, 800cfcc <__smakebuf_r+0x74>
 800cfb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfb8:	4630      	mov	r0, r6
 800cfba:	f001 f92f 	bl	800e21c <_isatty_r>
 800cfbe:	b128      	cbz	r0, 800cfcc <__smakebuf_r+0x74>
 800cfc0:	89a3      	ldrh	r3, [r4, #12]
 800cfc2:	f023 0303 	bic.w	r3, r3, #3
 800cfc6:	f043 0301 	orr.w	r3, r3, #1
 800cfca:	81a3      	strh	r3, [r4, #12]
 800cfcc:	89a0      	ldrh	r0, [r4, #12]
 800cfce:	4305      	orrs	r5, r0
 800cfd0:	81a5      	strh	r5, [r4, #12]
 800cfd2:	e7cd      	b.n	800cf70 <__smakebuf_r+0x18>
 800cfd4:	0800c471 	.word	0x0800c471

0800cfd8 <__ascii_mbtowc>:
 800cfd8:	b082      	sub	sp, #8
 800cfda:	b901      	cbnz	r1, 800cfde <__ascii_mbtowc+0x6>
 800cfdc:	a901      	add	r1, sp, #4
 800cfde:	b142      	cbz	r2, 800cff2 <__ascii_mbtowc+0x1a>
 800cfe0:	b14b      	cbz	r3, 800cff6 <__ascii_mbtowc+0x1e>
 800cfe2:	7813      	ldrb	r3, [r2, #0]
 800cfe4:	600b      	str	r3, [r1, #0]
 800cfe6:	7812      	ldrb	r2, [r2, #0]
 800cfe8:	1e10      	subs	r0, r2, #0
 800cfea:	bf18      	it	ne
 800cfec:	2001      	movne	r0, #1
 800cfee:	b002      	add	sp, #8
 800cff0:	4770      	bx	lr
 800cff2:	4610      	mov	r0, r2
 800cff4:	e7fb      	b.n	800cfee <__ascii_mbtowc+0x16>
 800cff6:	f06f 0001 	mvn.w	r0, #1
 800cffa:	e7f8      	b.n	800cfee <__ascii_mbtowc+0x16>

0800cffc <memcpy>:
 800cffc:	440a      	add	r2, r1
 800cffe:	4291      	cmp	r1, r2
 800d000:	f100 33ff 	add.w	r3, r0, #4294967295
 800d004:	d100      	bne.n	800d008 <memcpy+0xc>
 800d006:	4770      	bx	lr
 800d008:	b510      	push	{r4, lr}
 800d00a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d00e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d012:	4291      	cmp	r1, r2
 800d014:	d1f9      	bne.n	800d00a <memcpy+0xe>
 800d016:	bd10      	pop	{r4, pc}

0800d018 <__malloc_lock>:
 800d018:	4801      	ldr	r0, [pc, #4]	; (800d020 <__malloc_lock+0x8>)
 800d01a:	f7ff bf75 	b.w	800cf08 <__retarget_lock_acquire_recursive>
 800d01e:	bf00      	nop
 800d020:	20000505 	.word	0x20000505

0800d024 <__malloc_unlock>:
 800d024:	4801      	ldr	r0, [pc, #4]	; (800d02c <__malloc_unlock+0x8>)
 800d026:	f7ff bf71 	b.w	800cf0c <__retarget_lock_release_recursive>
 800d02a:	bf00      	nop
 800d02c:	20000505 	.word	0x20000505

0800d030 <_Balloc>:
 800d030:	b570      	push	{r4, r5, r6, lr}
 800d032:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d034:	4604      	mov	r4, r0
 800d036:	460d      	mov	r5, r1
 800d038:	b976      	cbnz	r6, 800d058 <_Balloc+0x28>
 800d03a:	2010      	movs	r0, #16
 800d03c:	f7fb fdea 	bl	8008c14 <malloc>
 800d040:	4602      	mov	r2, r0
 800d042:	6260      	str	r0, [r4, #36]	; 0x24
 800d044:	b920      	cbnz	r0, 800d050 <_Balloc+0x20>
 800d046:	4b18      	ldr	r3, [pc, #96]	; (800d0a8 <_Balloc+0x78>)
 800d048:	4818      	ldr	r0, [pc, #96]	; (800d0ac <_Balloc+0x7c>)
 800d04a:	2166      	movs	r1, #102	; 0x66
 800d04c:	f7fe fa7c 	bl	800b548 <__assert_func>
 800d050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d054:	6006      	str	r6, [r0, #0]
 800d056:	60c6      	str	r6, [r0, #12]
 800d058:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d05a:	68f3      	ldr	r3, [r6, #12]
 800d05c:	b183      	cbz	r3, 800d080 <_Balloc+0x50>
 800d05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d066:	b9b8      	cbnz	r0, 800d098 <_Balloc+0x68>
 800d068:	2101      	movs	r1, #1
 800d06a:	fa01 f605 	lsl.w	r6, r1, r5
 800d06e:	1d72      	adds	r2, r6, #5
 800d070:	0092      	lsls	r2, r2, #2
 800d072:	4620      	mov	r0, r4
 800d074:	f000 fc9d 	bl	800d9b2 <_calloc_r>
 800d078:	b160      	cbz	r0, 800d094 <_Balloc+0x64>
 800d07a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d07e:	e00e      	b.n	800d09e <_Balloc+0x6e>
 800d080:	2221      	movs	r2, #33	; 0x21
 800d082:	2104      	movs	r1, #4
 800d084:	4620      	mov	r0, r4
 800d086:	f000 fc94 	bl	800d9b2 <_calloc_r>
 800d08a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d08c:	60f0      	str	r0, [r6, #12]
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1e4      	bne.n	800d05e <_Balloc+0x2e>
 800d094:	2000      	movs	r0, #0
 800d096:	bd70      	pop	{r4, r5, r6, pc}
 800d098:	6802      	ldr	r2, [r0, #0]
 800d09a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d09e:	2300      	movs	r3, #0
 800d0a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d0a4:	e7f7      	b.n	800d096 <_Balloc+0x66>
 800d0a6:	bf00      	nop
 800d0a8:	0800eb84 	.word	0x0800eb84
 800d0ac:	0800f0c4 	.word	0x0800f0c4

0800d0b0 <_Bfree>:
 800d0b0:	b570      	push	{r4, r5, r6, lr}
 800d0b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	460c      	mov	r4, r1
 800d0b8:	b976      	cbnz	r6, 800d0d8 <_Bfree+0x28>
 800d0ba:	2010      	movs	r0, #16
 800d0bc:	f7fb fdaa 	bl	8008c14 <malloc>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	6268      	str	r0, [r5, #36]	; 0x24
 800d0c4:	b920      	cbnz	r0, 800d0d0 <_Bfree+0x20>
 800d0c6:	4b09      	ldr	r3, [pc, #36]	; (800d0ec <_Bfree+0x3c>)
 800d0c8:	4809      	ldr	r0, [pc, #36]	; (800d0f0 <_Bfree+0x40>)
 800d0ca:	218a      	movs	r1, #138	; 0x8a
 800d0cc:	f7fe fa3c 	bl	800b548 <__assert_func>
 800d0d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0d4:	6006      	str	r6, [r0, #0]
 800d0d6:	60c6      	str	r6, [r0, #12]
 800d0d8:	b13c      	cbz	r4, 800d0ea <_Bfree+0x3a>
 800d0da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d0dc:	6862      	ldr	r2, [r4, #4]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0e4:	6021      	str	r1, [r4, #0]
 800d0e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0ea:	bd70      	pop	{r4, r5, r6, pc}
 800d0ec:	0800eb84 	.word	0x0800eb84
 800d0f0:	0800f0c4 	.word	0x0800f0c4

0800d0f4 <__multadd>:
 800d0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f8:	690d      	ldr	r5, [r1, #16]
 800d0fa:	4607      	mov	r7, r0
 800d0fc:	460c      	mov	r4, r1
 800d0fe:	461e      	mov	r6, r3
 800d100:	f101 0c14 	add.w	ip, r1, #20
 800d104:	2000      	movs	r0, #0
 800d106:	f8dc 3000 	ldr.w	r3, [ip]
 800d10a:	b299      	uxth	r1, r3
 800d10c:	fb02 6101 	mla	r1, r2, r1, r6
 800d110:	0c1e      	lsrs	r6, r3, #16
 800d112:	0c0b      	lsrs	r3, r1, #16
 800d114:	fb02 3306 	mla	r3, r2, r6, r3
 800d118:	b289      	uxth	r1, r1
 800d11a:	3001      	adds	r0, #1
 800d11c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d120:	4285      	cmp	r5, r0
 800d122:	f84c 1b04 	str.w	r1, [ip], #4
 800d126:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d12a:	dcec      	bgt.n	800d106 <__multadd+0x12>
 800d12c:	b30e      	cbz	r6, 800d172 <__multadd+0x7e>
 800d12e:	68a3      	ldr	r3, [r4, #8]
 800d130:	42ab      	cmp	r3, r5
 800d132:	dc19      	bgt.n	800d168 <__multadd+0x74>
 800d134:	6861      	ldr	r1, [r4, #4]
 800d136:	4638      	mov	r0, r7
 800d138:	3101      	adds	r1, #1
 800d13a:	f7ff ff79 	bl	800d030 <_Balloc>
 800d13e:	4680      	mov	r8, r0
 800d140:	b928      	cbnz	r0, 800d14e <__multadd+0x5a>
 800d142:	4602      	mov	r2, r0
 800d144:	4b0c      	ldr	r3, [pc, #48]	; (800d178 <__multadd+0x84>)
 800d146:	480d      	ldr	r0, [pc, #52]	; (800d17c <__multadd+0x88>)
 800d148:	21b5      	movs	r1, #181	; 0xb5
 800d14a:	f7fe f9fd 	bl	800b548 <__assert_func>
 800d14e:	6922      	ldr	r2, [r4, #16]
 800d150:	3202      	adds	r2, #2
 800d152:	f104 010c 	add.w	r1, r4, #12
 800d156:	0092      	lsls	r2, r2, #2
 800d158:	300c      	adds	r0, #12
 800d15a:	f7ff ff4f 	bl	800cffc <memcpy>
 800d15e:	4621      	mov	r1, r4
 800d160:	4638      	mov	r0, r7
 800d162:	f7ff ffa5 	bl	800d0b0 <_Bfree>
 800d166:	4644      	mov	r4, r8
 800d168:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d16c:	3501      	adds	r5, #1
 800d16e:	615e      	str	r6, [r3, #20]
 800d170:	6125      	str	r5, [r4, #16]
 800d172:	4620      	mov	r0, r4
 800d174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d178:	0800efd6 	.word	0x0800efd6
 800d17c:	0800f0c4 	.word	0x0800f0c4

0800d180 <__s2b>:
 800d180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d184:	460c      	mov	r4, r1
 800d186:	4615      	mov	r5, r2
 800d188:	461f      	mov	r7, r3
 800d18a:	2209      	movs	r2, #9
 800d18c:	3308      	adds	r3, #8
 800d18e:	4606      	mov	r6, r0
 800d190:	fb93 f3f2 	sdiv	r3, r3, r2
 800d194:	2100      	movs	r1, #0
 800d196:	2201      	movs	r2, #1
 800d198:	429a      	cmp	r2, r3
 800d19a:	db09      	blt.n	800d1b0 <__s2b+0x30>
 800d19c:	4630      	mov	r0, r6
 800d19e:	f7ff ff47 	bl	800d030 <_Balloc>
 800d1a2:	b940      	cbnz	r0, 800d1b6 <__s2b+0x36>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	4b19      	ldr	r3, [pc, #100]	; (800d20c <__s2b+0x8c>)
 800d1a8:	4819      	ldr	r0, [pc, #100]	; (800d210 <__s2b+0x90>)
 800d1aa:	21ce      	movs	r1, #206	; 0xce
 800d1ac:	f7fe f9cc 	bl	800b548 <__assert_func>
 800d1b0:	0052      	lsls	r2, r2, #1
 800d1b2:	3101      	adds	r1, #1
 800d1b4:	e7f0      	b.n	800d198 <__s2b+0x18>
 800d1b6:	9b08      	ldr	r3, [sp, #32]
 800d1b8:	6143      	str	r3, [r0, #20]
 800d1ba:	2d09      	cmp	r5, #9
 800d1bc:	f04f 0301 	mov.w	r3, #1
 800d1c0:	6103      	str	r3, [r0, #16]
 800d1c2:	dd16      	ble.n	800d1f2 <__s2b+0x72>
 800d1c4:	f104 0909 	add.w	r9, r4, #9
 800d1c8:	46c8      	mov	r8, r9
 800d1ca:	442c      	add	r4, r5
 800d1cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d1d0:	4601      	mov	r1, r0
 800d1d2:	3b30      	subs	r3, #48	; 0x30
 800d1d4:	220a      	movs	r2, #10
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	f7ff ff8c 	bl	800d0f4 <__multadd>
 800d1dc:	45a0      	cmp	r8, r4
 800d1de:	d1f5      	bne.n	800d1cc <__s2b+0x4c>
 800d1e0:	f1a5 0408 	sub.w	r4, r5, #8
 800d1e4:	444c      	add	r4, r9
 800d1e6:	1b2d      	subs	r5, r5, r4
 800d1e8:	1963      	adds	r3, r4, r5
 800d1ea:	42bb      	cmp	r3, r7
 800d1ec:	db04      	blt.n	800d1f8 <__s2b+0x78>
 800d1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1f2:	340a      	adds	r4, #10
 800d1f4:	2509      	movs	r5, #9
 800d1f6:	e7f6      	b.n	800d1e6 <__s2b+0x66>
 800d1f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d1fc:	4601      	mov	r1, r0
 800d1fe:	3b30      	subs	r3, #48	; 0x30
 800d200:	220a      	movs	r2, #10
 800d202:	4630      	mov	r0, r6
 800d204:	f7ff ff76 	bl	800d0f4 <__multadd>
 800d208:	e7ee      	b.n	800d1e8 <__s2b+0x68>
 800d20a:	bf00      	nop
 800d20c:	0800efd6 	.word	0x0800efd6
 800d210:	0800f0c4 	.word	0x0800f0c4

0800d214 <__hi0bits>:
 800d214:	0c03      	lsrs	r3, r0, #16
 800d216:	041b      	lsls	r3, r3, #16
 800d218:	b9d3      	cbnz	r3, 800d250 <__hi0bits+0x3c>
 800d21a:	0400      	lsls	r0, r0, #16
 800d21c:	2310      	movs	r3, #16
 800d21e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d222:	bf04      	itt	eq
 800d224:	0200      	lsleq	r0, r0, #8
 800d226:	3308      	addeq	r3, #8
 800d228:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d22c:	bf04      	itt	eq
 800d22e:	0100      	lsleq	r0, r0, #4
 800d230:	3304      	addeq	r3, #4
 800d232:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d236:	bf04      	itt	eq
 800d238:	0080      	lsleq	r0, r0, #2
 800d23a:	3302      	addeq	r3, #2
 800d23c:	2800      	cmp	r0, #0
 800d23e:	db05      	blt.n	800d24c <__hi0bits+0x38>
 800d240:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d244:	f103 0301 	add.w	r3, r3, #1
 800d248:	bf08      	it	eq
 800d24a:	2320      	moveq	r3, #32
 800d24c:	4618      	mov	r0, r3
 800d24e:	4770      	bx	lr
 800d250:	2300      	movs	r3, #0
 800d252:	e7e4      	b.n	800d21e <__hi0bits+0xa>

0800d254 <__lo0bits>:
 800d254:	6803      	ldr	r3, [r0, #0]
 800d256:	f013 0207 	ands.w	r2, r3, #7
 800d25a:	4601      	mov	r1, r0
 800d25c:	d00b      	beq.n	800d276 <__lo0bits+0x22>
 800d25e:	07da      	lsls	r2, r3, #31
 800d260:	d423      	bmi.n	800d2aa <__lo0bits+0x56>
 800d262:	0798      	lsls	r0, r3, #30
 800d264:	bf49      	itett	mi
 800d266:	085b      	lsrmi	r3, r3, #1
 800d268:	089b      	lsrpl	r3, r3, #2
 800d26a:	2001      	movmi	r0, #1
 800d26c:	600b      	strmi	r3, [r1, #0]
 800d26e:	bf5c      	itt	pl
 800d270:	600b      	strpl	r3, [r1, #0]
 800d272:	2002      	movpl	r0, #2
 800d274:	4770      	bx	lr
 800d276:	b298      	uxth	r0, r3
 800d278:	b9a8      	cbnz	r0, 800d2a6 <__lo0bits+0x52>
 800d27a:	0c1b      	lsrs	r3, r3, #16
 800d27c:	2010      	movs	r0, #16
 800d27e:	b2da      	uxtb	r2, r3
 800d280:	b90a      	cbnz	r2, 800d286 <__lo0bits+0x32>
 800d282:	3008      	adds	r0, #8
 800d284:	0a1b      	lsrs	r3, r3, #8
 800d286:	071a      	lsls	r2, r3, #28
 800d288:	bf04      	itt	eq
 800d28a:	091b      	lsreq	r3, r3, #4
 800d28c:	3004      	addeq	r0, #4
 800d28e:	079a      	lsls	r2, r3, #30
 800d290:	bf04      	itt	eq
 800d292:	089b      	lsreq	r3, r3, #2
 800d294:	3002      	addeq	r0, #2
 800d296:	07da      	lsls	r2, r3, #31
 800d298:	d403      	bmi.n	800d2a2 <__lo0bits+0x4e>
 800d29a:	085b      	lsrs	r3, r3, #1
 800d29c:	f100 0001 	add.w	r0, r0, #1
 800d2a0:	d005      	beq.n	800d2ae <__lo0bits+0x5a>
 800d2a2:	600b      	str	r3, [r1, #0]
 800d2a4:	4770      	bx	lr
 800d2a6:	4610      	mov	r0, r2
 800d2a8:	e7e9      	b.n	800d27e <__lo0bits+0x2a>
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	4770      	bx	lr
 800d2ae:	2020      	movs	r0, #32
 800d2b0:	4770      	bx	lr
	...

0800d2b4 <__i2b>:
 800d2b4:	b510      	push	{r4, lr}
 800d2b6:	460c      	mov	r4, r1
 800d2b8:	2101      	movs	r1, #1
 800d2ba:	f7ff feb9 	bl	800d030 <_Balloc>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	b928      	cbnz	r0, 800d2ce <__i2b+0x1a>
 800d2c2:	4b05      	ldr	r3, [pc, #20]	; (800d2d8 <__i2b+0x24>)
 800d2c4:	4805      	ldr	r0, [pc, #20]	; (800d2dc <__i2b+0x28>)
 800d2c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d2ca:	f7fe f93d 	bl	800b548 <__assert_func>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	6144      	str	r4, [r0, #20]
 800d2d2:	6103      	str	r3, [r0, #16]
 800d2d4:	bd10      	pop	{r4, pc}
 800d2d6:	bf00      	nop
 800d2d8:	0800efd6 	.word	0x0800efd6
 800d2dc:	0800f0c4 	.word	0x0800f0c4

0800d2e0 <__multiply>:
 800d2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e4:	4691      	mov	r9, r2
 800d2e6:	690a      	ldr	r2, [r1, #16]
 800d2e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	bfb8      	it	lt
 800d2f0:	460b      	movlt	r3, r1
 800d2f2:	460c      	mov	r4, r1
 800d2f4:	bfbc      	itt	lt
 800d2f6:	464c      	movlt	r4, r9
 800d2f8:	4699      	movlt	r9, r3
 800d2fa:	6927      	ldr	r7, [r4, #16]
 800d2fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d300:	68a3      	ldr	r3, [r4, #8]
 800d302:	6861      	ldr	r1, [r4, #4]
 800d304:	eb07 060a 	add.w	r6, r7, sl
 800d308:	42b3      	cmp	r3, r6
 800d30a:	b085      	sub	sp, #20
 800d30c:	bfb8      	it	lt
 800d30e:	3101      	addlt	r1, #1
 800d310:	f7ff fe8e 	bl	800d030 <_Balloc>
 800d314:	b930      	cbnz	r0, 800d324 <__multiply+0x44>
 800d316:	4602      	mov	r2, r0
 800d318:	4b44      	ldr	r3, [pc, #272]	; (800d42c <__multiply+0x14c>)
 800d31a:	4845      	ldr	r0, [pc, #276]	; (800d430 <__multiply+0x150>)
 800d31c:	f240 115d 	movw	r1, #349	; 0x15d
 800d320:	f7fe f912 	bl	800b548 <__assert_func>
 800d324:	f100 0514 	add.w	r5, r0, #20
 800d328:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d32c:	462b      	mov	r3, r5
 800d32e:	2200      	movs	r2, #0
 800d330:	4543      	cmp	r3, r8
 800d332:	d321      	bcc.n	800d378 <__multiply+0x98>
 800d334:	f104 0314 	add.w	r3, r4, #20
 800d338:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d33c:	f109 0314 	add.w	r3, r9, #20
 800d340:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d344:	9202      	str	r2, [sp, #8]
 800d346:	1b3a      	subs	r2, r7, r4
 800d348:	3a15      	subs	r2, #21
 800d34a:	f022 0203 	bic.w	r2, r2, #3
 800d34e:	3204      	adds	r2, #4
 800d350:	f104 0115 	add.w	r1, r4, #21
 800d354:	428f      	cmp	r7, r1
 800d356:	bf38      	it	cc
 800d358:	2204      	movcc	r2, #4
 800d35a:	9201      	str	r2, [sp, #4]
 800d35c:	9a02      	ldr	r2, [sp, #8]
 800d35e:	9303      	str	r3, [sp, #12]
 800d360:	429a      	cmp	r2, r3
 800d362:	d80c      	bhi.n	800d37e <__multiply+0x9e>
 800d364:	2e00      	cmp	r6, #0
 800d366:	dd03      	ble.n	800d370 <__multiply+0x90>
 800d368:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d05a      	beq.n	800d426 <__multiply+0x146>
 800d370:	6106      	str	r6, [r0, #16]
 800d372:	b005      	add	sp, #20
 800d374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d378:	f843 2b04 	str.w	r2, [r3], #4
 800d37c:	e7d8      	b.n	800d330 <__multiply+0x50>
 800d37e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d382:	f1ba 0f00 	cmp.w	sl, #0
 800d386:	d024      	beq.n	800d3d2 <__multiply+0xf2>
 800d388:	f104 0e14 	add.w	lr, r4, #20
 800d38c:	46a9      	mov	r9, r5
 800d38e:	f04f 0c00 	mov.w	ip, #0
 800d392:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d396:	f8d9 1000 	ldr.w	r1, [r9]
 800d39a:	fa1f fb82 	uxth.w	fp, r2
 800d39e:	b289      	uxth	r1, r1
 800d3a0:	fb0a 110b 	mla	r1, sl, fp, r1
 800d3a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d3a8:	f8d9 2000 	ldr.w	r2, [r9]
 800d3ac:	4461      	add	r1, ip
 800d3ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d3b2:	fb0a c20b 	mla	r2, sl, fp, ip
 800d3b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d3ba:	b289      	uxth	r1, r1
 800d3bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d3c0:	4577      	cmp	r7, lr
 800d3c2:	f849 1b04 	str.w	r1, [r9], #4
 800d3c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d3ca:	d8e2      	bhi.n	800d392 <__multiply+0xb2>
 800d3cc:	9a01      	ldr	r2, [sp, #4]
 800d3ce:	f845 c002 	str.w	ip, [r5, r2]
 800d3d2:	9a03      	ldr	r2, [sp, #12]
 800d3d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d3d8:	3304      	adds	r3, #4
 800d3da:	f1b9 0f00 	cmp.w	r9, #0
 800d3de:	d020      	beq.n	800d422 <__multiply+0x142>
 800d3e0:	6829      	ldr	r1, [r5, #0]
 800d3e2:	f104 0c14 	add.w	ip, r4, #20
 800d3e6:	46ae      	mov	lr, r5
 800d3e8:	f04f 0a00 	mov.w	sl, #0
 800d3ec:	f8bc b000 	ldrh.w	fp, [ip]
 800d3f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d3f4:	fb09 220b 	mla	r2, r9, fp, r2
 800d3f8:	4492      	add	sl, r2
 800d3fa:	b289      	uxth	r1, r1
 800d3fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d400:	f84e 1b04 	str.w	r1, [lr], #4
 800d404:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d408:	f8be 1000 	ldrh.w	r1, [lr]
 800d40c:	0c12      	lsrs	r2, r2, #16
 800d40e:	fb09 1102 	mla	r1, r9, r2, r1
 800d412:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d416:	4567      	cmp	r7, ip
 800d418:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d41c:	d8e6      	bhi.n	800d3ec <__multiply+0x10c>
 800d41e:	9a01      	ldr	r2, [sp, #4]
 800d420:	50a9      	str	r1, [r5, r2]
 800d422:	3504      	adds	r5, #4
 800d424:	e79a      	b.n	800d35c <__multiply+0x7c>
 800d426:	3e01      	subs	r6, #1
 800d428:	e79c      	b.n	800d364 <__multiply+0x84>
 800d42a:	bf00      	nop
 800d42c:	0800efd6 	.word	0x0800efd6
 800d430:	0800f0c4 	.word	0x0800f0c4

0800d434 <__pow5mult>:
 800d434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d438:	4615      	mov	r5, r2
 800d43a:	f012 0203 	ands.w	r2, r2, #3
 800d43e:	4606      	mov	r6, r0
 800d440:	460f      	mov	r7, r1
 800d442:	d007      	beq.n	800d454 <__pow5mult+0x20>
 800d444:	4c25      	ldr	r4, [pc, #148]	; (800d4dc <__pow5mult+0xa8>)
 800d446:	3a01      	subs	r2, #1
 800d448:	2300      	movs	r3, #0
 800d44a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d44e:	f7ff fe51 	bl	800d0f4 <__multadd>
 800d452:	4607      	mov	r7, r0
 800d454:	10ad      	asrs	r5, r5, #2
 800d456:	d03d      	beq.n	800d4d4 <__pow5mult+0xa0>
 800d458:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d45a:	b97c      	cbnz	r4, 800d47c <__pow5mult+0x48>
 800d45c:	2010      	movs	r0, #16
 800d45e:	f7fb fbd9 	bl	8008c14 <malloc>
 800d462:	4602      	mov	r2, r0
 800d464:	6270      	str	r0, [r6, #36]	; 0x24
 800d466:	b928      	cbnz	r0, 800d474 <__pow5mult+0x40>
 800d468:	4b1d      	ldr	r3, [pc, #116]	; (800d4e0 <__pow5mult+0xac>)
 800d46a:	481e      	ldr	r0, [pc, #120]	; (800d4e4 <__pow5mult+0xb0>)
 800d46c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d470:	f7fe f86a 	bl	800b548 <__assert_func>
 800d474:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d478:	6004      	str	r4, [r0, #0]
 800d47a:	60c4      	str	r4, [r0, #12]
 800d47c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d480:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d484:	b94c      	cbnz	r4, 800d49a <__pow5mult+0x66>
 800d486:	f240 2171 	movw	r1, #625	; 0x271
 800d48a:	4630      	mov	r0, r6
 800d48c:	f7ff ff12 	bl	800d2b4 <__i2b>
 800d490:	2300      	movs	r3, #0
 800d492:	f8c8 0008 	str.w	r0, [r8, #8]
 800d496:	4604      	mov	r4, r0
 800d498:	6003      	str	r3, [r0, #0]
 800d49a:	f04f 0900 	mov.w	r9, #0
 800d49e:	07eb      	lsls	r3, r5, #31
 800d4a0:	d50a      	bpl.n	800d4b8 <__pow5mult+0x84>
 800d4a2:	4639      	mov	r1, r7
 800d4a4:	4622      	mov	r2, r4
 800d4a6:	4630      	mov	r0, r6
 800d4a8:	f7ff ff1a 	bl	800d2e0 <__multiply>
 800d4ac:	4639      	mov	r1, r7
 800d4ae:	4680      	mov	r8, r0
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	f7ff fdfd 	bl	800d0b0 <_Bfree>
 800d4b6:	4647      	mov	r7, r8
 800d4b8:	106d      	asrs	r5, r5, #1
 800d4ba:	d00b      	beq.n	800d4d4 <__pow5mult+0xa0>
 800d4bc:	6820      	ldr	r0, [r4, #0]
 800d4be:	b938      	cbnz	r0, 800d4d0 <__pow5mult+0x9c>
 800d4c0:	4622      	mov	r2, r4
 800d4c2:	4621      	mov	r1, r4
 800d4c4:	4630      	mov	r0, r6
 800d4c6:	f7ff ff0b 	bl	800d2e0 <__multiply>
 800d4ca:	6020      	str	r0, [r4, #0]
 800d4cc:	f8c0 9000 	str.w	r9, [r0]
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	e7e4      	b.n	800d49e <__pow5mult+0x6a>
 800d4d4:	4638      	mov	r0, r7
 800d4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4da:	bf00      	nop
 800d4dc:	0800f210 	.word	0x0800f210
 800d4e0:	0800eb84 	.word	0x0800eb84
 800d4e4:	0800f0c4 	.word	0x0800f0c4

0800d4e8 <__lshift>:
 800d4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4ec:	460c      	mov	r4, r1
 800d4ee:	6849      	ldr	r1, [r1, #4]
 800d4f0:	6923      	ldr	r3, [r4, #16]
 800d4f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d4f6:	68a3      	ldr	r3, [r4, #8]
 800d4f8:	4607      	mov	r7, r0
 800d4fa:	4691      	mov	r9, r2
 800d4fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d500:	f108 0601 	add.w	r6, r8, #1
 800d504:	42b3      	cmp	r3, r6
 800d506:	db0b      	blt.n	800d520 <__lshift+0x38>
 800d508:	4638      	mov	r0, r7
 800d50a:	f7ff fd91 	bl	800d030 <_Balloc>
 800d50e:	4605      	mov	r5, r0
 800d510:	b948      	cbnz	r0, 800d526 <__lshift+0x3e>
 800d512:	4602      	mov	r2, r0
 800d514:	4b2a      	ldr	r3, [pc, #168]	; (800d5c0 <__lshift+0xd8>)
 800d516:	482b      	ldr	r0, [pc, #172]	; (800d5c4 <__lshift+0xdc>)
 800d518:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d51c:	f7fe f814 	bl	800b548 <__assert_func>
 800d520:	3101      	adds	r1, #1
 800d522:	005b      	lsls	r3, r3, #1
 800d524:	e7ee      	b.n	800d504 <__lshift+0x1c>
 800d526:	2300      	movs	r3, #0
 800d528:	f100 0114 	add.w	r1, r0, #20
 800d52c:	f100 0210 	add.w	r2, r0, #16
 800d530:	4618      	mov	r0, r3
 800d532:	4553      	cmp	r3, sl
 800d534:	db37      	blt.n	800d5a6 <__lshift+0xbe>
 800d536:	6920      	ldr	r0, [r4, #16]
 800d538:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d53c:	f104 0314 	add.w	r3, r4, #20
 800d540:	f019 091f 	ands.w	r9, r9, #31
 800d544:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d548:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d54c:	d02f      	beq.n	800d5ae <__lshift+0xc6>
 800d54e:	f1c9 0e20 	rsb	lr, r9, #32
 800d552:	468a      	mov	sl, r1
 800d554:	f04f 0c00 	mov.w	ip, #0
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	fa02 f209 	lsl.w	r2, r2, r9
 800d55e:	ea42 020c 	orr.w	r2, r2, ip
 800d562:	f84a 2b04 	str.w	r2, [sl], #4
 800d566:	f853 2b04 	ldr.w	r2, [r3], #4
 800d56a:	4298      	cmp	r0, r3
 800d56c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d570:	d8f2      	bhi.n	800d558 <__lshift+0x70>
 800d572:	1b03      	subs	r3, r0, r4
 800d574:	3b15      	subs	r3, #21
 800d576:	f023 0303 	bic.w	r3, r3, #3
 800d57a:	3304      	adds	r3, #4
 800d57c:	f104 0215 	add.w	r2, r4, #21
 800d580:	4290      	cmp	r0, r2
 800d582:	bf38      	it	cc
 800d584:	2304      	movcc	r3, #4
 800d586:	f841 c003 	str.w	ip, [r1, r3]
 800d58a:	f1bc 0f00 	cmp.w	ip, #0
 800d58e:	d001      	beq.n	800d594 <__lshift+0xac>
 800d590:	f108 0602 	add.w	r6, r8, #2
 800d594:	3e01      	subs	r6, #1
 800d596:	4638      	mov	r0, r7
 800d598:	612e      	str	r6, [r5, #16]
 800d59a:	4621      	mov	r1, r4
 800d59c:	f7ff fd88 	bl	800d0b0 <_Bfree>
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	e7c1      	b.n	800d532 <__lshift+0x4a>
 800d5ae:	3904      	subs	r1, #4
 800d5b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5b8:	4298      	cmp	r0, r3
 800d5ba:	d8f9      	bhi.n	800d5b0 <__lshift+0xc8>
 800d5bc:	e7ea      	b.n	800d594 <__lshift+0xac>
 800d5be:	bf00      	nop
 800d5c0:	0800efd6 	.word	0x0800efd6
 800d5c4:	0800f0c4 	.word	0x0800f0c4

0800d5c8 <__mcmp>:
 800d5c8:	b530      	push	{r4, r5, lr}
 800d5ca:	6902      	ldr	r2, [r0, #16]
 800d5cc:	690c      	ldr	r4, [r1, #16]
 800d5ce:	1b12      	subs	r2, r2, r4
 800d5d0:	d10e      	bne.n	800d5f0 <__mcmp+0x28>
 800d5d2:	f100 0314 	add.w	r3, r0, #20
 800d5d6:	3114      	adds	r1, #20
 800d5d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d5dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d5e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d5e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d5e8:	42a5      	cmp	r5, r4
 800d5ea:	d003      	beq.n	800d5f4 <__mcmp+0x2c>
 800d5ec:	d305      	bcc.n	800d5fa <__mcmp+0x32>
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	bd30      	pop	{r4, r5, pc}
 800d5f4:	4283      	cmp	r3, r0
 800d5f6:	d3f3      	bcc.n	800d5e0 <__mcmp+0x18>
 800d5f8:	e7fa      	b.n	800d5f0 <__mcmp+0x28>
 800d5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d5fe:	e7f7      	b.n	800d5f0 <__mcmp+0x28>

0800d600 <__mdiff>:
 800d600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d604:	460c      	mov	r4, r1
 800d606:	4606      	mov	r6, r0
 800d608:	4611      	mov	r1, r2
 800d60a:	4620      	mov	r0, r4
 800d60c:	4690      	mov	r8, r2
 800d60e:	f7ff ffdb 	bl	800d5c8 <__mcmp>
 800d612:	1e05      	subs	r5, r0, #0
 800d614:	d110      	bne.n	800d638 <__mdiff+0x38>
 800d616:	4629      	mov	r1, r5
 800d618:	4630      	mov	r0, r6
 800d61a:	f7ff fd09 	bl	800d030 <_Balloc>
 800d61e:	b930      	cbnz	r0, 800d62e <__mdiff+0x2e>
 800d620:	4b3a      	ldr	r3, [pc, #232]	; (800d70c <__mdiff+0x10c>)
 800d622:	4602      	mov	r2, r0
 800d624:	f240 2132 	movw	r1, #562	; 0x232
 800d628:	4839      	ldr	r0, [pc, #228]	; (800d710 <__mdiff+0x110>)
 800d62a:	f7fd ff8d 	bl	800b548 <__assert_func>
 800d62e:	2301      	movs	r3, #1
 800d630:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d638:	bfa4      	itt	ge
 800d63a:	4643      	movge	r3, r8
 800d63c:	46a0      	movge	r8, r4
 800d63e:	4630      	mov	r0, r6
 800d640:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d644:	bfa6      	itte	ge
 800d646:	461c      	movge	r4, r3
 800d648:	2500      	movge	r5, #0
 800d64a:	2501      	movlt	r5, #1
 800d64c:	f7ff fcf0 	bl	800d030 <_Balloc>
 800d650:	b920      	cbnz	r0, 800d65c <__mdiff+0x5c>
 800d652:	4b2e      	ldr	r3, [pc, #184]	; (800d70c <__mdiff+0x10c>)
 800d654:	4602      	mov	r2, r0
 800d656:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d65a:	e7e5      	b.n	800d628 <__mdiff+0x28>
 800d65c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d660:	6926      	ldr	r6, [r4, #16]
 800d662:	60c5      	str	r5, [r0, #12]
 800d664:	f104 0914 	add.w	r9, r4, #20
 800d668:	f108 0514 	add.w	r5, r8, #20
 800d66c:	f100 0e14 	add.w	lr, r0, #20
 800d670:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d674:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d678:	f108 0210 	add.w	r2, r8, #16
 800d67c:	46f2      	mov	sl, lr
 800d67e:	2100      	movs	r1, #0
 800d680:	f859 3b04 	ldr.w	r3, [r9], #4
 800d684:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d688:	fa1f f883 	uxth.w	r8, r3
 800d68c:	fa11 f18b 	uxtah	r1, r1, fp
 800d690:	0c1b      	lsrs	r3, r3, #16
 800d692:	eba1 0808 	sub.w	r8, r1, r8
 800d696:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d69a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d69e:	fa1f f888 	uxth.w	r8, r8
 800d6a2:	1419      	asrs	r1, r3, #16
 800d6a4:	454e      	cmp	r6, r9
 800d6a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d6aa:	f84a 3b04 	str.w	r3, [sl], #4
 800d6ae:	d8e7      	bhi.n	800d680 <__mdiff+0x80>
 800d6b0:	1b33      	subs	r3, r6, r4
 800d6b2:	3b15      	subs	r3, #21
 800d6b4:	f023 0303 	bic.w	r3, r3, #3
 800d6b8:	3304      	adds	r3, #4
 800d6ba:	3415      	adds	r4, #21
 800d6bc:	42a6      	cmp	r6, r4
 800d6be:	bf38      	it	cc
 800d6c0:	2304      	movcc	r3, #4
 800d6c2:	441d      	add	r5, r3
 800d6c4:	4473      	add	r3, lr
 800d6c6:	469e      	mov	lr, r3
 800d6c8:	462e      	mov	r6, r5
 800d6ca:	4566      	cmp	r6, ip
 800d6cc:	d30e      	bcc.n	800d6ec <__mdiff+0xec>
 800d6ce:	f10c 0203 	add.w	r2, ip, #3
 800d6d2:	1b52      	subs	r2, r2, r5
 800d6d4:	f022 0203 	bic.w	r2, r2, #3
 800d6d8:	3d03      	subs	r5, #3
 800d6da:	45ac      	cmp	ip, r5
 800d6dc:	bf38      	it	cc
 800d6de:	2200      	movcc	r2, #0
 800d6e0:	441a      	add	r2, r3
 800d6e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d6e6:	b17b      	cbz	r3, 800d708 <__mdiff+0x108>
 800d6e8:	6107      	str	r7, [r0, #16]
 800d6ea:	e7a3      	b.n	800d634 <__mdiff+0x34>
 800d6ec:	f856 8b04 	ldr.w	r8, [r6], #4
 800d6f0:	fa11 f288 	uxtah	r2, r1, r8
 800d6f4:	1414      	asrs	r4, r2, #16
 800d6f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d6fa:	b292      	uxth	r2, r2
 800d6fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d700:	f84e 2b04 	str.w	r2, [lr], #4
 800d704:	1421      	asrs	r1, r4, #16
 800d706:	e7e0      	b.n	800d6ca <__mdiff+0xca>
 800d708:	3f01      	subs	r7, #1
 800d70a:	e7ea      	b.n	800d6e2 <__mdiff+0xe2>
 800d70c:	0800efd6 	.word	0x0800efd6
 800d710:	0800f0c4 	.word	0x0800f0c4

0800d714 <__ulp>:
 800d714:	b082      	sub	sp, #8
 800d716:	ed8d 0b00 	vstr	d0, [sp]
 800d71a:	9b01      	ldr	r3, [sp, #4]
 800d71c:	4912      	ldr	r1, [pc, #72]	; (800d768 <__ulp+0x54>)
 800d71e:	4019      	ands	r1, r3
 800d720:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d724:	2900      	cmp	r1, #0
 800d726:	dd05      	ble.n	800d734 <__ulp+0x20>
 800d728:	2200      	movs	r2, #0
 800d72a:	460b      	mov	r3, r1
 800d72c:	ec43 2b10 	vmov	d0, r2, r3
 800d730:	b002      	add	sp, #8
 800d732:	4770      	bx	lr
 800d734:	4249      	negs	r1, r1
 800d736:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d73a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d73e:	f04f 0200 	mov.w	r2, #0
 800d742:	f04f 0300 	mov.w	r3, #0
 800d746:	da04      	bge.n	800d752 <__ulp+0x3e>
 800d748:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d74c:	fa41 f300 	asr.w	r3, r1, r0
 800d750:	e7ec      	b.n	800d72c <__ulp+0x18>
 800d752:	f1a0 0114 	sub.w	r1, r0, #20
 800d756:	291e      	cmp	r1, #30
 800d758:	bfda      	itte	le
 800d75a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d75e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d762:	2101      	movgt	r1, #1
 800d764:	460a      	mov	r2, r1
 800d766:	e7e1      	b.n	800d72c <__ulp+0x18>
 800d768:	7ff00000 	.word	0x7ff00000

0800d76c <__b2d>:
 800d76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76e:	6905      	ldr	r5, [r0, #16]
 800d770:	f100 0714 	add.w	r7, r0, #20
 800d774:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d778:	1f2e      	subs	r6, r5, #4
 800d77a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d77e:	4620      	mov	r0, r4
 800d780:	f7ff fd48 	bl	800d214 <__hi0bits>
 800d784:	f1c0 0320 	rsb	r3, r0, #32
 800d788:	280a      	cmp	r0, #10
 800d78a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d808 <__b2d+0x9c>
 800d78e:	600b      	str	r3, [r1, #0]
 800d790:	dc14      	bgt.n	800d7bc <__b2d+0x50>
 800d792:	f1c0 0e0b 	rsb	lr, r0, #11
 800d796:	fa24 f10e 	lsr.w	r1, r4, lr
 800d79a:	42b7      	cmp	r7, r6
 800d79c:	ea41 030c 	orr.w	r3, r1, ip
 800d7a0:	bf34      	ite	cc
 800d7a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d7a6:	2100      	movcs	r1, #0
 800d7a8:	3015      	adds	r0, #21
 800d7aa:	fa04 f000 	lsl.w	r0, r4, r0
 800d7ae:	fa21 f10e 	lsr.w	r1, r1, lr
 800d7b2:	ea40 0201 	orr.w	r2, r0, r1
 800d7b6:	ec43 2b10 	vmov	d0, r2, r3
 800d7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7bc:	42b7      	cmp	r7, r6
 800d7be:	bf3a      	itte	cc
 800d7c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d7c4:	f1a5 0608 	subcc.w	r6, r5, #8
 800d7c8:	2100      	movcs	r1, #0
 800d7ca:	380b      	subs	r0, #11
 800d7cc:	d017      	beq.n	800d7fe <__b2d+0x92>
 800d7ce:	f1c0 0c20 	rsb	ip, r0, #32
 800d7d2:	fa04 f500 	lsl.w	r5, r4, r0
 800d7d6:	42be      	cmp	r6, r7
 800d7d8:	fa21 f40c 	lsr.w	r4, r1, ip
 800d7dc:	ea45 0504 	orr.w	r5, r5, r4
 800d7e0:	bf8c      	ite	hi
 800d7e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d7e6:	2400      	movls	r4, #0
 800d7e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d7ec:	fa01 f000 	lsl.w	r0, r1, r0
 800d7f0:	fa24 f40c 	lsr.w	r4, r4, ip
 800d7f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d7f8:	ea40 0204 	orr.w	r2, r0, r4
 800d7fc:	e7db      	b.n	800d7b6 <__b2d+0x4a>
 800d7fe:	ea44 030c 	orr.w	r3, r4, ip
 800d802:	460a      	mov	r2, r1
 800d804:	e7d7      	b.n	800d7b6 <__b2d+0x4a>
 800d806:	bf00      	nop
 800d808:	3ff00000 	.word	0x3ff00000

0800d80c <__d2b>:
 800d80c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d810:	4689      	mov	r9, r1
 800d812:	2101      	movs	r1, #1
 800d814:	ec57 6b10 	vmov	r6, r7, d0
 800d818:	4690      	mov	r8, r2
 800d81a:	f7ff fc09 	bl	800d030 <_Balloc>
 800d81e:	4604      	mov	r4, r0
 800d820:	b930      	cbnz	r0, 800d830 <__d2b+0x24>
 800d822:	4602      	mov	r2, r0
 800d824:	4b25      	ldr	r3, [pc, #148]	; (800d8bc <__d2b+0xb0>)
 800d826:	4826      	ldr	r0, [pc, #152]	; (800d8c0 <__d2b+0xb4>)
 800d828:	f240 310a 	movw	r1, #778	; 0x30a
 800d82c:	f7fd fe8c 	bl	800b548 <__assert_func>
 800d830:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d834:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d838:	bb35      	cbnz	r5, 800d888 <__d2b+0x7c>
 800d83a:	2e00      	cmp	r6, #0
 800d83c:	9301      	str	r3, [sp, #4]
 800d83e:	d028      	beq.n	800d892 <__d2b+0x86>
 800d840:	4668      	mov	r0, sp
 800d842:	9600      	str	r6, [sp, #0]
 800d844:	f7ff fd06 	bl	800d254 <__lo0bits>
 800d848:	9900      	ldr	r1, [sp, #0]
 800d84a:	b300      	cbz	r0, 800d88e <__d2b+0x82>
 800d84c:	9a01      	ldr	r2, [sp, #4]
 800d84e:	f1c0 0320 	rsb	r3, r0, #32
 800d852:	fa02 f303 	lsl.w	r3, r2, r3
 800d856:	430b      	orrs	r3, r1
 800d858:	40c2      	lsrs	r2, r0
 800d85a:	6163      	str	r3, [r4, #20]
 800d85c:	9201      	str	r2, [sp, #4]
 800d85e:	9b01      	ldr	r3, [sp, #4]
 800d860:	61a3      	str	r3, [r4, #24]
 800d862:	2b00      	cmp	r3, #0
 800d864:	bf14      	ite	ne
 800d866:	2202      	movne	r2, #2
 800d868:	2201      	moveq	r2, #1
 800d86a:	6122      	str	r2, [r4, #16]
 800d86c:	b1d5      	cbz	r5, 800d8a4 <__d2b+0x98>
 800d86e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d872:	4405      	add	r5, r0
 800d874:	f8c9 5000 	str.w	r5, [r9]
 800d878:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d87c:	f8c8 0000 	str.w	r0, [r8]
 800d880:	4620      	mov	r0, r4
 800d882:	b003      	add	sp, #12
 800d884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d88c:	e7d5      	b.n	800d83a <__d2b+0x2e>
 800d88e:	6161      	str	r1, [r4, #20]
 800d890:	e7e5      	b.n	800d85e <__d2b+0x52>
 800d892:	a801      	add	r0, sp, #4
 800d894:	f7ff fcde 	bl	800d254 <__lo0bits>
 800d898:	9b01      	ldr	r3, [sp, #4]
 800d89a:	6163      	str	r3, [r4, #20]
 800d89c:	2201      	movs	r2, #1
 800d89e:	6122      	str	r2, [r4, #16]
 800d8a0:	3020      	adds	r0, #32
 800d8a2:	e7e3      	b.n	800d86c <__d2b+0x60>
 800d8a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d8a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d8ac:	f8c9 0000 	str.w	r0, [r9]
 800d8b0:	6918      	ldr	r0, [r3, #16]
 800d8b2:	f7ff fcaf 	bl	800d214 <__hi0bits>
 800d8b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d8ba:	e7df      	b.n	800d87c <__d2b+0x70>
 800d8bc:	0800efd6 	.word	0x0800efd6
 800d8c0:	0800f0c4 	.word	0x0800f0c4

0800d8c4 <__ratio>:
 800d8c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c8:	4688      	mov	r8, r1
 800d8ca:	4669      	mov	r1, sp
 800d8cc:	4681      	mov	r9, r0
 800d8ce:	f7ff ff4d 	bl	800d76c <__b2d>
 800d8d2:	a901      	add	r1, sp, #4
 800d8d4:	4640      	mov	r0, r8
 800d8d6:	ec55 4b10 	vmov	r4, r5, d0
 800d8da:	f7ff ff47 	bl	800d76c <__b2d>
 800d8de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d8e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d8e6:	eba3 0c02 	sub.w	ip, r3, r2
 800d8ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d8ee:	1a9b      	subs	r3, r3, r2
 800d8f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d8f4:	ec51 0b10 	vmov	r0, r1, d0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	bfd6      	itet	le
 800d8fc:	460a      	movle	r2, r1
 800d8fe:	462a      	movgt	r2, r5
 800d900:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d904:	468b      	mov	fp, r1
 800d906:	462f      	mov	r7, r5
 800d908:	bfd4      	ite	le
 800d90a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d90e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d912:	4620      	mov	r0, r4
 800d914:	ee10 2a10 	vmov	r2, s0
 800d918:	465b      	mov	r3, fp
 800d91a:	4639      	mov	r1, r7
 800d91c:	f7f2 ffa0 	bl	8000860 <__aeabi_ddiv>
 800d920:	ec41 0b10 	vmov	d0, r0, r1
 800d924:	b003      	add	sp, #12
 800d926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d92a <__copybits>:
 800d92a:	3901      	subs	r1, #1
 800d92c:	b570      	push	{r4, r5, r6, lr}
 800d92e:	1149      	asrs	r1, r1, #5
 800d930:	6914      	ldr	r4, [r2, #16]
 800d932:	3101      	adds	r1, #1
 800d934:	f102 0314 	add.w	r3, r2, #20
 800d938:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d93c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d940:	1f05      	subs	r5, r0, #4
 800d942:	42a3      	cmp	r3, r4
 800d944:	d30c      	bcc.n	800d960 <__copybits+0x36>
 800d946:	1aa3      	subs	r3, r4, r2
 800d948:	3b11      	subs	r3, #17
 800d94a:	f023 0303 	bic.w	r3, r3, #3
 800d94e:	3211      	adds	r2, #17
 800d950:	42a2      	cmp	r2, r4
 800d952:	bf88      	it	hi
 800d954:	2300      	movhi	r3, #0
 800d956:	4418      	add	r0, r3
 800d958:	2300      	movs	r3, #0
 800d95a:	4288      	cmp	r0, r1
 800d95c:	d305      	bcc.n	800d96a <__copybits+0x40>
 800d95e:	bd70      	pop	{r4, r5, r6, pc}
 800d960:	f853 6b04 	ldr.w	r6, [r3], #4
 800d964:	f845 6f04 	str.w	r6, [r5, #4]!
 800d968:	e7eb      	b.n	800d942 <__copybits+0x18>
 800d96a:	f840 3b04 	str.w	r3, [r0], #4
 800d96e:	e7f4      	b.n	800d95a <__copybits+0x30>

0800d970 <__any_on>:
 800d970:	f100 0214 	add.w	r2, r0, #20
 800d974:	6900      	ldr	r0, [r0, #16]
 800d976:	114b      	asrs	r3, r1, #5
 800d978:	4298      	cmp	r0, r3
 800d97a:	b510      	push	{r4, lr}
 800d97c:	db11      	blt.n	800d9a2 <__any_on+0x32>
 800d97e:	dd0a      	ble.n	800d996 <__any_on+0x26>
 800d980:	f011 011f 	ands.w	r1, r1, #31
 800d984:	d007      	beq.n	800d996 <__any_on+0x26>
 800d986:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d98a:	fa24 f001 	lsr.w	r0, r4, r1
 800d98e:	fa00 f101 	lsl.w	r1, r0, r1
 800d992:	428c      	cmp	r4, r1
 800d994:	d10b      	bne.n	800d9ae <__any_on+0x3e>
 800d996:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d803      	bhi.n	800d9a6 <__any_on+0x36>
 800d99e:	2000      	movs	r0, #0
 800d9a0:	bd10      	pop	{r4, pc}
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	e7f7      	b.n	800d996 <__any_on+0x26>
 800d9a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d9aa:	2900      	cmp	r1, #0
 800d9ac:	d0f5      	beq.n	800d99a <__any_on+0x2a>
 800d9ae:	2001      	movs	r0, #1
 800d9b0:	e7f6      	b.n	800d9a0 <__any_on+0x30>

0800d9b2 <_calloc_r>:
 800d9b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9b4:	fba1 2402 	umull	r2, r4, r1, r2
 800d9b8:	b94c      	cbnz	r4, 800d9ce <_calloc_r+0x1c>
 800d9ba:	4611      	mov	r1, r2
 800d9bc:	9201      	str	r2, [sp, #4]
 800d9be:	f7fb fc1f 	bl	8009200 <_malloc_r>
 800d9c2:	9a01      	ldr	r2, [sp, #4]
 800d9c4:	4605      	mov	r5, r0
 800d9c6:	b930      	cbnz	r0, 800d9d6 <_calloc_r+0x24>
 800d9c8:	4628      	mov	r0, r5
 800d9ca:	b003      	add	sp, #12
 800d9cc:	bd30      	pop	{r4, r5, pc}
 800d9ce:	220c      	movs	r2, #12
 800d9d0:	6002      	str	r2, [r0, #0]
 800d9d2:	2500      	movs	r5, #0
 800d9d4:	e7f8      	b.n	800d9c8 <_calloc_r+0x16>
 800d9d6:	4621      	mov	r1, r4
 800d9d8:	f7fb f92c 	bl	8008c34 <memset>
 800d9dc:	e7f4      	b.n	800d9c8 <_calloc_r+0x16>

0800d9de <__ssputs_r>:
 800d9de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e2:	688e      	ldr	r6, [r1, #8]
 800d9e4:	429e      	cmp	r6, r3
 800d9e6:	4682      	mov	sl, r0
 800d9e8:	460c      	mov	r4, r1
 800d9ea:	4690      	mov	r8, r2
 800d9ec:	461f      	mov	r7, r3
 800d9ee:	d838      	bhi.n	800da62 <__ssputs_r+0x84>
 800d9f0:	898a      	ldrh	r2, [r1, #12]
 800d9f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d9f6:	d032      	beq.n	800da5e <__ssputs_r+0x80>
 800d9f8:	6825      	ldr	r5, [r4, #0]
 800d9fa:	6909      	ldr	r1, [r1, #16]
 800d9fc:	eba5 0901 	sub.w	r9, r5, r1
 800da00:	6965      	ldr	r5, [r4, #20]
 800da02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da0a:	3301      	adds	r3, #1
 800da0c:	444b      	add	r3, r9
 800da0e:	106d      	asrs	r5, r5, #1
 800da10:	429d      	cmp	r5, r3
 800da12:	bf38      	it	cc
 800da14:	461d      	movcc	r5, r3
 800da16:	0553      	lsls	r3, r2, #21
 800da18:	d531      	bpl.n	800da7e <__ssputs_r+0xa0>
 800da1a:	4629      	mov	r1, r5
 800da1c:	f7fb fbf0 	bl	8009200 <_malloc_r>
 800da20:	4606      	mov	r6, r0
 800da22:	b950      	cbnz	r0, 800da3a <__ssputs_r+0x5c>
 800da24:	230c      	movs	r3, #12
 800da26:	f8ca 3000 	str.w	r3, [sl]
 800da2a:	89a3      	ldrh	r3, [r4, #12]
 800da2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da30:	81a3      	strh	r3, [r4, #12]
 800da32:	f04f 30ff 	mov.w	r0, #4294967295
 800da36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da3a:	6921      	ldr	r1, [r4, #16]
 800da3c:	464a      	mov	r2, r9
 800da3e:	f7ff fadd 	bl	800cffc <memcpy>
 800da42:	89a3      	ldrh	r3, [r4, #12]
 800da44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da4c:	81a3      	strh	r3, [r4, #12]
 800da4e:	6126      	str	r6, [r4, #16]
 800da50:	6165      	str	r5, [r4, #20]
 800da52:	444e      	add	r6, r9
 800da54:	eba5 0509 	sub.w	r5, r5, r9
 800da58:	6026      	str	r6, [r4, #0]
 800da5a:	60a5      	str	r5, [r4, #8]
 800da5c:	463e      	mov	r6, r7
 800da5e:	42be      	cmp	r6, r7
 800da60:	d900      	bls.n	800da64 <__ssputs_r+0x86>
 800da62:	463e      	mov	r6, r7
 800da64:	6820      	ldr	r0, [r4, #0]
 800da66:	4632      	mov	r2, r6
 800da68:	4641      	mov	r1, r8
 800da6a:	f000 fbf9 	bl	800e260 <memmove>
 800da6e:	68a3      	ldr	r3, [r4, #8]
 800da70:	1b9b      	subs	r3, r3, r6
 800da72:	60a3      	str	r3, [r4, #8]
 800da74:	6823      	ldr	r3, [r4, #0]
 800da76:	4433      	add	r3, r6
 800da78:	6023      	str	r3, [r4, #0]
 800da7a:	2000      	movs	r0, #0
 800da7c:	e7db      	b.n	800da36 <__ssputs_r+0x58>
 800da7e:	462a      	mov	r2, r5
 800da80:	f000 fc08 	bl	800e294 <_realloc_r>
 800da84:	4606      	mov	r6, r0
 800da86:	2800      	cmp	r0, #0
 800da88:	d1e1      	bne.n	800da4e <__ssputs_r+0x70>
 800da8a:	6921      	ldr	r1, [r4, #16]
 800da8c:	4650      	mov	r0, sl
 800da8e:	f7fb fb4b 	bl	8009128 <_free_r>
 800da92:	e7c7      	b.n	800da24 <__ssputs_r+0x46>

0800da94 <_svfiprintf_r>:
 800da94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da98:	4698      	mov	r8, r3
 800da9a:	898b      	ldrh	r3, [r1, #12]
 800da9c:	061b      	lsls	r3, r3, #24
 800da9e:	b09d      	sub	sp, #116	; 0x74
 800daa0:	4607      	mov	r7, r0
 800daa2:	460d      	mov	r5, r1
 800daa4:	4614      	mov	r4, r2
 800daa6:	d50e      	bpl.n	800dac6 <_svfiprintf_r+0x32>
 800daa8:	690b      	ldr	r3, [r1, #16]
 800daaa:	b963      	cbnz	r3, 800dac6 <_svfiprintf_r+0x32>
 800daac:	2140      	movs	r1, #64	; 0x40
 800daae:	f7fb fba7 	bl	8009200 <_malloc_r>
 800dab2:	6028      	str	r0, [r5, #0]
 800dab4:	6128      	str	r0, [r5, #16]
 800dab6:	b920      	cbnz	r0, 800dac2 <_svfiprintf_r+0x2e>
 800dab8:	230c      	movs	r3, #12
 800daba:	603b      	str	r3, [r7, #0]
 800dabc:	f04f 30ff 	mov.w	r0, #4294967295
 800dac0:	e0d1      	b.n	800dc66 <_svfiprintf_r+0x1d2>
 800dac2:	2340      	movs	r3, #64	; 0x40
 800dac4:	616b      	str	r3, [r5, #20]
 800dac6:	2300      	movs	r3, #0
 800dac8:	9309      	str	r3, [sp, #36]	; 0x24
 800daca:	2320      	movs	r3, #32
 800dacc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dad0:	f8cd 800c 	str.w	r8, [sp, #12]
 800dad4:	2330      	movs	r3, #48	; 0x30
 800dad6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dc80 <_svfiprintf_r+0x1ec>
 800dada:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dade:	f04f 0901 	mov.w	r9, #1
 800dae2:	4623      	mov	r3, r4
 800dae4:	469a      	mov	sl, r3
 800dae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800daea:	b10a      	cbz	r2, 800daf0 <_svfiprintf_r+0x5c>
 800daec:	2a25      	cmp	r2, #37	; 0x25
 800daee:	d1f9      	bne.n	800dae4 <_svfiprintf_r+0x50>
 800daf0:	ebba 0b04 	subs.w	fp, sl, r4
 800daf4:	d00b      	beq.n	800db0e <_svfiprintf_r+0x7a>
 800daf6:	465b      	mov	r3, fp
 800daf8:	4622      	mov	r2, r4
 800dafa:	4629      	mov	r1, r5
 800dafc:	4638      	mov	r0, r7
 800dafe:	f7ff ff6e 	bl	800d9de <__ssputs_r>
 800db02:	3001      	adds	r0, #1
 800db04:	f000 80aa 	beq.w	800dc5c <_svfiprintf_r+0x1c8>
 800db08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db0a:	445a      	add	r2, fp
 800db0c:	9209      	str	r2, [sp, #36]	; 0x24
 800db0e:	f89a 3000 	ldrb.w	r3, [sl]
 800db12:	2b00      	cmp	r3, #0
 800db14:	f000 80a2 	beq.w	800dc5c <_svfiprintf_r+0x1c8>
 800db18:	2300      	movs	r3, #0
 800db1a:	f04f 32ff 	mov.w	r2, #4294967295
 800db1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db22:	f10a 0a01 	add.w	sl, sl, #1
 800db26:	9304      	str	r3, [sp, #16]
 800db28:	9307      	str	r3, [sp, #28]
 800db2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db2e:	931a      	str	r3, [sp, #104]	; 0x68
 800db30:	4654      	mov	r4, sl
 800db32:	2205      	movs	r2, #5
 800db34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db38:	4851      	ldr	r0, [pc, #324]	; (800dc80 <_svfiprintf_r+0x1ec>)
 800db3a:	f7f2 fb51 	bl	80001e0 <memchr>
 800db3e:	9a04      	ldr	r2, [sp, #16]
 800db40:	b9d8      	cbnz	r0, 800db7a <_svfiprintf_r+0xe6>
 800db42:	06d0      	lsls	r0, r2, #27
 800db44:	bf44      	itt	mi
 800db46:	2320      	movmi	r3, #32
 800db48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db4c:	0711      	lsls	r1, r2, #28
 800db4e:	bf44      	itt	mi
 800db50:	232b      	movmi	r3, #43	; 0x2b
 800db52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db56:	f89a 3000 	ldrb.w	r3, [sl]
 800db5a:	2b2a      	cmp	r3, #42	; 0x2a
 800db5c:	d015      	beq.n	800db8a <_svfiprintf_r+0xf6>
 800db5e:	9a07      	ldr	r2, [sp, #28]
 800db60:	4654      	mov	r4, sl
 800db62:	2000      	movs	r0, #0
 800db64:	f04f 0c0a 	mov.w	ip, #10
 800db68:	4621      	mov	r1, r4
 800db6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db6e:	3b30      	subs	r3, #48	; 0x30
 800db70:	2b09      	cmp	r3, #9
 800db72:	d94e      	bls.n	800dc12 <_svfiprintf_r+0x17e>
 800db74:	b1b0      	cbz	r0, 800dba4 <_svfiprintf_r+0x110>
 800db76:	9207      	str	r2, [sp, #28]
 800db78:	e014      	b.n	800dba4 <_svfiprintf_r+0x110>
 800db7a:	eba0 0308 	sub.w	r3, r0, r8
 800db7e:	fa09 f303 	lsl.w	r3, r9, r3
 800db82:	4313      	orrs	r3, r2
 800db84:	9304      	str	r3, [sp, #16]
 800db86:	46a2      	mov	sl, r4
 800db88:	e7d2      	b.n	800db30 <_svfiprintf_r+0x9c>
 800db8a:	9b03      	ldr	r3, [sp, #12]
 800db8c:	1d19      	adds	r1, r3, #4
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	9103      	str	r1, [sp, #12]
 800db92:	2b00      	cmp	r3, #0
 800db94:	bfbb      	ittet	lt
 800db96:	425b      	neglt	r3, r3
 800db98:	f042 0202 	orrlt.w	r2, r2, #2
 800db9c:	9307      	strge	r3, [sp, #28]
 800db9e:	9307      	strlt	r3, [sp, #28]
 800dba0:	bfb8      	it	lt
 800dba2:	9204      	strlt	r2, [sp, #16]
 800dba4:	7823      	ldrb	r3, [r4, #0]
 800dba6:	2b2e      	cmp	r3, #46	; 0x2e
 800dba8:	d10c      	bne.n	800dbc4 <_svfiprintf_r+0x130>
 800dbaa:	7863      	ldrb	r3, [r4, #1]
 800dbac:	2b2a      	cmp	r3, #42	; 0x2a
 800dbae:	d135      	bne.n	800dc1c <_svfiprintf_r+0x188>
 800dbb0:	9b03      	ldr	r3, [sp, #12]
 800dbb2:	1d1a      	adds	r2, r3, #4
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	9203      	str	r2, [sp, #12]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	bfb8      	it	lt
 800dbbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbc0:	3402      	adds	r4, #2
 800dbc2:	9305      	str	r3, [sp, #20]
 800dbc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dc90 <_svfiprintf_r+0x1fc>
 800dbc8:	7821      	ldrb	r1, [r4, #0]
 800dbca:	2203      	movs	r2, #3
 800dbcc:	4650      	mov	r0, sl
 800dbce:	f7f2 fb07 	bl	80001e0 <memchr>
 800dbd2:	b140      	cbz	r0, 800dbe6 <_svfiprintf_r+0x152>
 800dbd4:	2340      	movs	r3, #64	; 0x40
 800dbd6:	eba0 000a 	sub.w	r0, r0, sl
 800dbda:	fa03 f000 	lsl.w	r0, r3, r0
 800dbde:	9b04      	ldr	r3, [sp, #16]
 800dbe0:	4303      	orrs	r3, r0
 800dbe2:	3401      	adds	r4, #1
 800dbe4:	9304      	str	r3, [sp, #16]
 800dbe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbea:	4826      	ldr	r0, [pc, #152]	; (800dc84 <_svfiprintf_r+0x1f0>)
 800dbec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbf0:	2206      	movs	r2, #6
 800dbf2:	f7f2 faf5 	bl	80001e0 <memchr>
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	d038      	beq.n	800dc6c <_svfiprintf_r+0x1d8>
 800dbfa:	4b23      	ldr	r3, [pc, #140]	; (800dc88 <_svfiprintf_r+0x1f4>)
 800dbfc:	bb1b      	cbnz	r3, 800dc46 <_svfiprintf_r+0x1b2>
 800dbfe:	9b03      	ldr	r3, [sp, #12]
 800dc00:	3307      	adds	r3, #7
 800dc02:	f023 0307 	bic.w	r3, r3, #7
 800dc06:	3308      	adds	r3, #8
 800dc08:	9303      	str	r3, [sp, #12]
 800dc0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc0c:	4433      	add	r3, r6
 800dc0e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc10:	e767      	b.n	800dae2 <_svfiprintf_r+0x4e>
 800dc12:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc16:	460c      	mov	r4, r1
 800dc18:	2001      	movs	r0, #1
 800dc1a:	e7a5      	b.n	800db68 <_svfiprintf_r+0xd4>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	3401      	adds	r4, #1
 800dc20:	9305      	str	r3, [sp, #20]
 800dc22:	4619      	mov	r1, r3
 800dc24:	f04f 0c0a 	mov.w	ip, #10
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc2e:	3a30      	subs	r2, #48	; 0x30
 800dc30:	2a09      	cmp	r2, #9
 800dc32:	d903      	bls.n	800dc3c <_svfiprintf_r+0x1a8>
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d0c5      	beq.n	800dbc4 <_svfiprintf_r+0x130>
 800dc38:	9105      	str	r1, [sp, #20]
 800dc3a:	e7c3      	b.n	800dbc4 <_svfiprintf_r+0x130>
 800dc3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc40:	4604      	mov	r4, r0
 800dc42:	2301      	movs	r3, #1
 800dc44:	e7f0      	b.n	800dc28 <_svfiprintf_r+0x194>
 800dc46:	ab03      	add	r3, sp, #12
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	462a      	mov	r2, r5
 800dc4c:	4b0f      	ldr	r3, [pc, #60]	; (800dc8c <_svfiprintf_r+0x1f8>)
 800dc4e:	a904      	add	r1, sp, #16
 800dc50:	4638      	mov	r0, r7
 800dc52:	f7fb fbe9 	bl	8009428 <_printf_float>
 800dc56:	1c42      	adds	r2, r0, #1
 800dc58:	4606      	mov	r6, r0
 800dc5a:	d1d6      	bne.n	800dc0a <_svfiprintf_r+0x176>
 800dc5c:	89ab      	ldrh	r3, [r5, #12]
 800dc5e:	065b      	lsls	r3, r3, #25
 800dc60:	f53f af2c 	bmi.w	800dabc <_svfiprintf_r+0x28>
 800dc64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc66:	b01d      	add	sp, #116	; 0x74
 800dc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc6c:	ab03      	add	r3, sp, #12
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	462a      	mov	r2, r5
 800dc72:	4b06      	ldr	r3, [pc, #24]	; (800dc8c <_svfiprintf_r+0x1f8>)
 800dc74:	a904      	add	r1, sp, #16
 800dc76:	4638      	mov	r0, r7
 800dc78:	f7fb fe7a 	bl	8009970 <_printf_i>
 800dc7c:	e7eb      	b.n	800dc56 <_svfiprintf_r+0x1c2>
 800dc7e:	bf00      	nop
 800dc80:	0800f21c 	.word	0x0800f21c
 800dc84:	0800f226 	.word	0x0800f226
 800dc88:	08009429 	.word	0x08009429
 800dc8c:	0800d9df 	.word	0x0800d9df
 800dc90:	0800f222 	.word	0x0800f222

0800dc94 <__sfputc_r>:
 800dc94:	6893      	ldr	r3, [r2, #8]
 800dc96:	3b01      	subs	r3, #1
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	b410      	push	{r4}
 800dc9c:	6093      	str	r3, [r2, #8]
 800dc9e:	da08      	bge.n	800dcb2 <__sfputc_r+0x1e>
 800dca0:	6994      	ldr	r4, [r2, #24]
 800dca2:	42a3      	cmp	r3, r4
 800dca4:	db01      	blt.n	800dcaa <__sfputc_r+0x16>
 800dca6:	290a      	cmp	r1, #10
 800dca8:	d103      	bne.n	800dcb2 <__sfputc_r+0x1e>
 800dcaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcae:	f7fd bb43 	b.w	800b338 <__swbuf_r>
 800dcb2:	6813      	ldr	r3, [r2, #0]
 800dcb4:	1c58      	adds	r0, r3, #1
 800dcb6:	6010      	str	r0, [r2, #0]
 800dcb8:	7019      	strb	r1, [r3, #0]
 800dcba:	4608      	mov	r0, r1
 800dcbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcc0:	4770      	bx	lr

0800dcc2 <__sfputs_r>:
 800dcc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc4:	4606      	mov	r6, r0
 800dcc6:	460f      	mov	r7, r1
 800dcc8:	4614      	mov	r4, r2
 800dcca:	18d5      	adds	r5, r2, r3
 800dccc:	42ac      	cmp	r4, r5
 800dcce:	d101      	bne.n	800dcd4 <__sfputs_r+0x12>
 800dcd0:	2000      	movs	r0, #0
 800dcd2:	e007      	b.n	800dce4 <__sfputs_r+0x22>
 800dcd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcd8:	463a      	mov	r2, r7
 800dcda:	4630      	mov	r0, r6
 800dcdc:	f7ff ffda 	bl	800dc94 <__sfputc_r>
 800dce0:	1c43      	adds	r3, r0, #1
 800dce2:	d1f3      	bne.n	800dccc <__sfputs_r+0xa>
 800dce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dce8 <_vfiprintf_r>:
 800dce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcec:	460d      	mov	r5, r1
 800dcee:	b09d      	sub	sp, #116	; 0x74
 800dcf0:	4614      	mov	r4, r2
 800dcf2:	4698      	mov	r8, r3
 800dcf4:	4606      	mov	r6, r0
 800dcf6:	b118      	cbz	r0, 800dd00 <_vfiprintf_r+0x18>
 800dcf8:	6983      	ldr	r3, [r0, #24]
 800dcfa:	b90b      	cbnz	r3, 800dd00 <_vfiprintf_r+0x18>
 800dcfc:	f7fe fbec 	bl	800c4d8 <__sinit>
 800dd00:	4b89      	ldr	r3, [pc, #548]	; (800df28 <_vfiprintf_r+0x240>)
 800dd02:	429d      	cmp	r5, r3
 800dd04:	d11b      	bne.n	800dd3e <_vfiprintf_r+0x56>
 800dd06:	6875      	ldr	r5, [r6, #4]
 800dd08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd0a:	07d9      	lsls	r1, r3, #31
 800dd0c:	d405      	bmi.n	800dd1a <_vfiprintf_r+0x32>
 800dd0e:	89ab      	ldrh	r3, [r5, #12]
 800dd10:	059a      	lsls	r2, r3, #22
 800dd12:	d402      	bmi.n	800dd1a <_vfiprintf_r+0x32>
 800dd14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd16:	f7ff f8f7 	bl	800cf08 <__retarget_lock_acquire_recursive>
 800dd1a:	89ab      	ldrh	r3, [r5, #12]
 800dd1c:	071b      	lsls	r3, r3, #28
 800dd1e:	d501      	bpl.n	800dd24 <_vfiprintf_r+0x3c>
 800dd20:	692b      	ldr	r3, [r5, #16]
 800dd22:	b9eb      	cbnz	r3, 800dd60 <_vfiprintf_r+0x78>
 800dd24:	4629      	mov	r1, r5
 800dd26:	4630      	mov	r0, r6
 800dd28:	f7fd fb58 	bl	800b3dc <__swsetup_r>
 800dd2c:	b1c0      	cbz	r0, 800dd60 <_vfiprintf_r+0x78>
 800dd2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd30:	07dc      	lsls	r4, r3, #31
 800dd32:	d50e      	bpl.n	800dd52 <_vfiprintf_r+0x6a>
 800dd34:	f04f 30ff 	mov.w	r0, #4294967295
 800dd38:	b01d      	add	sp, #116	; 0x74
 800dd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd3e:	4b7b      	ldr	r3, [pc, #492]	; (800df2c <_vfiprintf_r+0x244>)
 800dd40:	429d      	cmp	r5, r3
 800dd42:	d101      	bne.n	800dd48 <_vfiprintf_r+0x60>
 800dd44:	68b5      	ldr	r5, [r6, #8]
 800dd46:	e7df      	b.n	800dd08 <_vfiprintf_r+0x20>
 800dd48:	4b79      	ldr	r3, [pc, #484]	; (800df30 <_vfiprintf_r+0x248>)
 800dd4a:	429d      	cmp	r5, r3
 800dd4c:	bf08      	it	eq
 800dd4e:	68f5      	ldreq	r5, [r6, #12]
 800dd50:	e7da      	b.n	800dd08 <_vfiprintf_r+0x20>
 800dd52:	89ab      	ldrh	r3, [r5, #12]
 800dd54:	0598      	lsls	r0, r3, #22
 800dd56:	d4ed      	bmi.n	800dd34 <_vfiprintf_r+0x4c>
 800dd58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd5a:	f7ff f8d7 	bl	800cf0c <__retarget_lock_release_recursive>
 800dd5e:	e7e9      	b.n	800dd34 <_vfiprintf_r+0x4c>
 800dd60:	2300      	movs	r3, #0
 800dd62:	9309      	str	r3, [sp, #36]	; 0x24
 800dd64:	2320      	movs	r3, #32
 800dd66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd6e:	2330      	movs	r3, #48	; 0x30
 800dd70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df34 <_vfiprintf_r+0x24c>
 800dd74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd78:	f04f 0901 	mov.w	r9, #1
 800dd7c:	4623      	mov	r3, r4
 800dd7e:	469a      	mov	sl, r3
 800dd80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd84:	b10a      	cbz	r2, 800dd8a <_vfiprintf_r+0xa2>
 800dd86:	2a25      	cmp	r2, #37	; 0x25
 800dd88:	d1f9      	bne.n	800dd7e <_vfiprintf_r+0x96>
 800dd8a:	ebba 0b04 	subs.w	fp, sl, r4
 800dd8e:	d00b      	beq.n	800dda8 <_vfiprintf_r+0xc0>
 800dd90:	465b      	mov	r3, fp
 800dd92:	4622      	mov	r2, r4
 800dd94:	4629      	mov	r1, r5
 800dd96:	4630      	mov	r0, r6
 800dd98:	f7ff ff93 	bl	800dcc2 <__sfputs_r>
 800dd9c:	3001      	adds	r0, #1
 800dd9e:	f000 80aa 	beq.w	800def6 <_vfiprintf_r+0x20e>
 800dda2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dda4:	445a      	add	r2, fp
 800dda6:	9209      	str	r2, [sp, #36]	; 0x24
 800dda8:	f89a 3000 	ldrb.w	r3, [sl]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	f000 80a2 	beq.w	800def6 <_vfiprintf_r+0x20e>
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddbc:	f10a 0a01 	add.w	sl, sl, #1
 800ddc0:	9304      	str	r3, [sp, #16]
 800ddc2:	9307      	str	r3, [sp, #28]
 800ddc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddc8:	931a      	str	r3, [sp, #104]	; 0x68
 800ddca:	4654      	mov	r4, sl
 800ddcc:	2205      	movs	r2, #5
 800ddce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddd2:	4858      	ldr	r0, [pc, #352]	; (800df34 <_vfiprintf_r+0x24c>)
 800ddd4:	f7f2 fa04 	bl	80001e0 <memchr>
 800ddd8:	9a04      	ldr	r2, [sp, #16]
 800ddda:	b9d8      	cbnz	r0, 800de14 <_vfiprintf_r+0x12c>
 800dddc:	06d1      	lsls	r1, r2, #27
 800ddde:	bf44      	itt	mi
 800dde0:	2320      	movmi	r3, #32
 800dde2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dde6:	0713      	lsls	r3, r2, #28
 800dde8:	bf44      	itt	mi
 800ddea:	232b      	movmi	r3, #43	; 0x2b
 800ddec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddf0:	f89a 3000 	ldrb.w	r3, [sl]
 800ddf4:	2b2a      	cmp	r3, #42	; 0x2a
 800ddf6:	d015      	beq.n	800de24 <_vfiprintf_r+0x13c>
 800ddf8:	9a07      	ldr	r2, [sp, #28]
 800ddfa:	4654      	mov	r4, sl
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	f04f 0c0a 	mov.w	ip, #10
 800de02:	4621      	mov	r1, r4
 800de04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de08:	3b30      	subs	r3, #48	; 0x30
 800de0a:	2b09      	cmp	r3, #9
 800de0c:	d94e      	bls.n	800deac <_vfiprintf_r+0x1c4>
 800de0e:	b1b0      	cbz	r0, 800de3e <_vfiprintf_r+0x156>
 800de10:	9207      	str	r2, [sp, #28]
 800de12:	e014      	b.n	800de3e <_vfiprintf_r+0x156>
 800de14:	eba0 0308 	sub.w	r3, r0, r8
 800de18:	fa09 f303 	lsl.w	r3, r9, r3
 800de1c:	4313      	orrs	r3, r2
 800de1e:	9304      	str	r3, [sp, #16]
 800de20:	46a2      	mov	sl, r4
 800de22:	e7d2      	b.n	800ddca <_vfiprintf_r+0xe2>
 800de24:	9b03      	ldr	r3, [sp, #12]
 800de26:	1d19      	adds	r1, r3, #4
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	9103      	str	r1, [sp, #12]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	bfbb      	ittet	lt
 800de30:	425b      	neglt	r3, r3
 800de32:	f042 0202 	orrlt.w	r2, r2, #2
 800de36:	9307      	strge	r3, [sp, #28]
 800de38:	9307      	strlt	r3, [sp, #28]
 800de3a:	bfb8      	it	lt
 800de3c:	9204      	strlt	r2, [sp, #16]
 800de3e:	7823      	ldrb	r3, [r4, #0]
 800de40:	2b2e      	cmp	r3, #46	; 0x2e
 800de42:	d10c      	bne.n	800de5e <_vfiprintf_r+0x176>
 800de44:	7863      	ldrb	r3, [r4, #1]
 800de46:	2b2a      	cmp	r3, #42	; 0x2a
 800de48:	d135      	bne.n	800deb6 <_vfiprintf_r+0x1ce>
 800de4a:	9b03      	ldr	r3, [sp, #12]
 800de4c:	1d1a      	adds	r2, r3, #4
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	9203      	str	r2, [sp, #12]
 800de52:	2b00      	cmp	r3, #0
 800de54:	bfb8      	it	lt
 800de56:	f04f 33ff 	movlt.w	r3, #4294967295
 800de5a:	3402      	adds	r4, #2
 800de5c:	9305      	str	r3, [sp, #20]
 800de5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df44 <_vfiprintf_r+0x25c>
 800de62:	7821      	ldrb	r1, [r4, #0]
 800de64:	2203      	movs	r2, #3
 800de66:	4650      	mov	r0, sl
 800de68:	f7f2 f9ba 	bl	80001e0 <memchr>
 800de6c:	b140      	cbz	r0, 800de80 <_vfiprintf_r+0x198>
 800de6e:	2340      	movs	r3, #64	; 0x40
 800de70:	eba0 000a 	sub.w	r0, r0, sl
 800de74:	fa03 f000 	lsl.w	r0, r3, r0
 800de78:	9b04      	ldr	r3, [sp, #16]
 800de7a:	4303      	orrs	r3, r0
 800de7c:	3401      	adds	r4, #1
 800de7e:	9304      	str	r3, [sp, #16]
 800de80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de84:	482c      	ldr	r0, [pc, #176]	; (800df38 <_vfiprintf_r+0x250>)
 800de86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de8a:	2206      	movs	r2, #6
 800de8c:	f7f2 f9a8 	bl	80001e0 <memchr>
 800de90:	2800      	cmp	r0, #0
 800de92:	d03f      	beq.n	800df14 <_vfiprintf_r+0x22c>
 800de94:	4b29      	ldr	r3, [pc, #164]	; (800df3c <_vfiprintf_r+0x254>)
 800de96:	bb1b      	cbnz	r3, 800dee0 <_vfiprintf_r+0x1f8>
 800de98:	9b03      	ldr	r3, [sp, #12]
 800de9a:	3307      	adds	r3, #7
 800de9c:	f023 0307 	bic.w	r3, r3, #7
 800dea0:	3308      	adds	r3, #8
 800dea2:	9303      	str	r3, [sp, #12]
 800dea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dea6:	443b      	add	r3, r7
 800dea8:	9309      	str	r3, [sp, #36]	; 0x24
 800deaa:	e767      	b.n	800dd7c <_vfiprintf_r+0x94>
 800deac:	fb0c 3202 	mla	r2, ip, r2, r3
 800deb0:	460c      	mov	r4, r1
 800deb2:	2001      	movs	r0, #1
 800deb4:	e7a5      	b.n	800de02 <_vfiprintf_r+0x11a>
 800deb6:	2300      	movs	r3, #0
 800deb8:	3401      	adds	r4, #1
 800deba:	9305      	str	r3, [sp, #20]
 800debc:	4619      	mov	r1, r3
 800debe:	f04f 0c0a 	mov.w	ip, #10
 800dec2:	4620      	mov	r0, r4
 800dec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dec8:	3a30      	subs	r2, #48	; 0x30
 800deca:	2a09      	cmp	r2, #9
 800decc:	d903      	bls.n	800ded6 <_vfiprintf_r+0x1ee>
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d0c5      	beq.n	800de5e <_vfiprintf_r+0x176>
 800ded2:	9105      	str	r1, [sp, #20]
 800ded4:	e7c3      	b.n	800de5e <_vfiprintf_r+0x176>
 800ded6:	fb0c 2101 	mla	r1, ip, r1, r2
 800deda:	4604      	mov	r4, r0
 800dedc:	2301      	movs	r3, #1
 800dede:	e7f0      	b.n	800dec2 <_vfiprintf_r+0x1da>
 800dee0:	ab03      	add	r3, sp, #12
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	462a      	mov	r2, r5
 800dee6:	4b16      	ldr	r3, [pc, #88]	; (800df40 <_vfiprintf_r+0x258>)
 800dee8:	a904      	add	r1, sp, #16
 800deea:	4630      	mov	r0, r6
 800deec:	f7fb fa9c 	bl	8009428 <_printf_float>
 800def0:	4607      	mov	r7, r0
 800def2:	1c78      	adds	r0, r7, #1
 800def4:	d1d6      	bne.n	800dea4 <_vfiprintf_r+0x1bc>
 800def6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800def8:	07d9      	lsls	r1, r3, #31
 800defa:	d405      	bmi.n	800df08 <_vfiprintf_r+0x220>
 800defc:	89ab      	ldrh	r3, [r5, #12]
 800defe:	059a      	lsls	r2, r3, #22
 800df00:	d402      	bmi.n	800df08 <_vfiprintf_r+0x220>
 800df02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df04:	f7ff f802 	bl	800cf0c <__retarget_lock_release_recursive>
 800df08:	89ab      	ldrh	r3, [r5, #12]
 800df0a:	065b      	lsls	r3, r3, #25
 800df0c:	f53f af12 	bmi.w	800dd34 <_vfiprintf_r+0x4c>
 800df10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df12:	e711      	b.n	800dd38 <_vfiprintf_r+0x50>
 800df14:	ab03      	add	r3, sp, #12
 800df16:	9300      	str	r3, [sp, #0]
 800df18:	462a      	mov	r2, r5
 800df1a:	4b09      	ldr	r3, [pc, #36]	; (800df40 <_vfiprintf_r+0x258>)
 800df1c:	a904      	add	r1, sp, #16
 800df1e:	4630      	mov	r0, r6
 800df20:	f7fb fd26 	bl	8009970 <_printf_i>
 800df24:	e7e4      	b.n	800def0 <_vfiprintf_r+0x208>
 800df26:	bf00      	nop
 800df28:	0800f008 	.word	0x0800f008
 800df2c:	0800f028 	.word	0x0800f028
 800df30:	0800efe8 	.word	0x0800efe8
 800df34:	0800f21c 	.word	0x0800f21c
 800df38:	0800f226 	.word	0x0800f226
 800df3c:	08009429 	.word	0x08009429
 800df40:	0800dcc3 	.word	0x0800dcc3
 800df44:	0800f222 	.word	0x0800f222

0800df48 <nan>:
 800df48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df50 <nan+0x8>
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	00000000 	.word	0x00000000
 800df54:	7ff80000 	.word	0x7ff80000

0800df58 <siscanf>:
 800df58:	b40e      	push	{r1, r2, r3}
 800df5a:	b510      	push	{r4, lr}
 800df5c:	b09f      	sub	sp, #124	; 0x7c
 800df5e:	ac21      	add	r4, sp, #132	; 0x84
 800df60:	f44f 7101 	mov.w	r1, #516	; 0x204
 800df64:	f854 2b04 	ldr.w	r2, [r4], #4
 800df68:	9201      	str	r2, [sp, #4]
 800df6a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800df6e:	9004      	str	r0, [sp, #16]
 800df70:	9008      	str	r0, [sp, #32]
 800df72:	f7f2 f92d 	bl	80001d0 <strlen>
 800df76:	4b0c      	ldr	r3, [pc, #48]	; (800dfa8 <siscanf+0x50>)
 800df78:	9005      	str	r0, [sp, #20]
 800df7a:	9009      	str	r0, [sp, #36]	; 0x24
 800df7c:	930d      	str	r3, [sp, #52]	; 0x34
 800df7e:	480b      	ldr	r0, [pc, #44]	; (800dfac <siscanf+0x54>)
 800df80:	9a01      	ldr	r2, [sp, #4]
 800df82:	6800      	ldr	r0, [r0, #0]
 800df84:	9403      	str	r4, [sp, #12]
 800df86:	2300      	movs	r3, #0
 800df88:	9311      	str	r3, [sp, #68]	; 0x44
 800df8a:	9316      	str	r3, [sp, #88]	; 0x58
 800df8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df90:	f8ad 301e 	strh.w	r3, [sp, #30]
 800df94:	a904      	add	r1, sp, #16
 800df96:	4623      	mov	r3, r4
 800df98:	f000 fa06 	bl	800e3a8 <__ssvfiscanf_r>
 800df9c:	b01f      	add	sp, #124	; 0x7c
 800df9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfa2:	b003      	add	sp, #12
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop
 800dfa8:	0800dfd3 	.word	0x0800dfd3
 800dfac:	20000014 	.word	0x20000014

0800dfb0 <__sread>:
 800dfb0:	b510      	push	{r4, lr}
 800dfb2:	460c      	mov	r4, r1
 800dfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfb8:	f000 fcc0 	bl	800e93c <_read_r>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	bfab      	itete	ge
 800dfc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dfc2:	89a3      	ldrhlt	r3, [r4, #12]
 800dfc4:	181b      	addge	r3, r3, r0
 800dfc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dfca:	bfac      	ite	ge
 800dfcc:	6563      	strge	r3, [r4, #84]	; 0x54
 800dfce:	81a3      	strhlt	r3, [r4, #12]
 800dfd0:	bd10      	pop	{r4, pc}

0800dfd2 <__seofread>:
 800dfd2:	2000      	movs	r0, #0
 800dfd4:	4770      	bx	lr

0800dfd6 <__swrite>:
 800dfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfda:	461f      	mov	r7, r3
 800dfdc:	898b      	ldrh	r3, [r1, #12]
 800dfde:	05db      	lsls	r3, r3, #23
 800dfe0:	4605      	mov	r5, r0
 800dfe2:	460c      	mov	r4, r1
 800dfe4:	4616      	mov	r6, r2
 800dfe6:	d505      	bpl.n	800dff4 <__swrite+0x1e>
 800dfe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfec:	2302      	movs	r3, #2
 800dfee:	2200      	movs	r2, #0
 800dff0:	f000 f924 	bl	800e23c <_lseek_r>
 800dff4:	89a3      	ldrh	r3, [r4, #12]
 800dff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dffe:	81a3      	strh	r3, [r4, #12]
 800e000:	4632      	mov	r2, r6
 800e002:	463b      	mov	r3, r7
 800e004:	4628      	mov	r0, r5
 800e006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e00a:	f000 b8bf 	b.w	800e18c <_write_r>

0800e00e <__sseek>:
 800e00e:	b510      	push	{r4, lr}
 800e010:	460c      	mov	r4, r1
 800e012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e016:	f000 f911 	bl	800e23c <_lseek_r>
 800e01a:	1c43      	adds	r3, r0, #1
 800e01c:	89a3      	ldrh	r3, [r4, #12]
 800e01e:	bf15      	itete	ne
 800e020:	6560      	strne	r0, [r4, #84]	; 0x54
 800e022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e02a:	81a3      	strheq	r3, [r4, #12]
 800e02c:	bf18      	it	ne
 800e02e:	81a3      	strhne	r3, [r4, #12]
 800e030:	bd10      	pop	{r4, pc}

0800e032 <__sclose>:
 800e032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e036:	f000 b8c3 	b.w	800e1c0 <_close_r>

0800e03a <strcpy>:
 800e03a:	4603      	mov	r3, r0
 800e03c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e040:	f803 2b01 	strb.w	r2, [r3], #1
 800e044:	2a00      	cmp	r2, #0
 800e046:	d1f9      	bne.n	800e03c <strcpy+0x2>
 800e048:	4770      	bx	lr

0800e04a <strncmp>:
 800e04a:	b510      	push	{r4, lr}
 800e04c:	b17a      	cbz	r2, 800e06e <strncmp+0x24>
 800e04e:	4603      	mov	r3, r0
 800e050:	3901      	subs	r1, #1
 800e052:	1884      	adds	r4, r0, r2
 800e054:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e058:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e05c:	4290      	cmp	r0, r2
 800e05e:	d101      	bne.n	800e064 <strncmp+0x1a>
 800e060:	42a3      	cmp	r3, r4
 800e062:	d101      	bne.n	800e068 <strncmp+0x1e>
 800e064:	1a80      	subs	r0, r0, r2
 800e066:	bd10      	pop	{r4, pc}
 800e068:	2800      	cmp	r0, #0
 800e06a:	d1f3      	bne.n	800e054 <strncmp+0xa>
 800e06c:	e7fa      	b.n	800e064 <strncmp+0x1a>
 800e06e:	4610      	mov	r0, r2
 800e070:	e7f9      	b.n	800e066 <strncmp+0x1c>
	...

0800e074 <_strtoul_l.constprop.0>:
 800e074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e078:	4f36      	ldr	r7, [pc, #216]	; (800e154 <_strtoul_l.constprop.0+0xe0>)
 800e07a:	4686      	mov	lr, r0
 800e07c:	460d      	mov	r5, r1
 800e07e:	4628      	mov	r0, r5
 800e080:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e084:	5de6      	ldrb	r6, [r4, r7]
 800e086:	f016 0608 	ands.w	r6, r6, #8
 800e08a:	d1f8      	bne.n	800e07e <_strtoul_l.constprop.0+0xa>
 800e08c:	2c2d      	cmp	r4, #45	; 0x2d
 800e08e:	d12f      	bne.n	800e0f0 <_strtoul_l.constprop.0+0x7c>
 800e090:	782c      	ldrb	r4, [r5, #0]
 800e092:	2601      	movs	r6, #1
 800e094:	1c85      	adds	r5, r0, #2
 800e096:	2b00      	cmp	r3, #0
 800e098:	d057      	beq.n	800e14a <_strtoul_l.constprop.0+0xd6>
 800e09a:	2b10      	cmp	r3, #16
 800e09c:	d109      	bne.n	800e0b2 <_strtoul_l.constprop.0+0x3e>
 800e09e:	2c30      	cmp	r4, #48	; 0x30
 800e0a0:	d107      	bne.n	800e0b2 <_strtoul_l.constprop.0+0x3e>
 800e0a2:	7828      	ldrb	r0, [r5, #0]
 800e0a4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e0a8:	2858      	cmp	r0, #88	; 0x58
 800e0aa:	d149      	bne.n	800e140 <_strtoul_l.constprop.0+0xcc>
 800e0ac:	786c      	ldrb	r4, [r5, #1]
 800e0ae:	2310      	movs	r3, #16
 800e0b0:	3502      	adds	r5, #2
 800e0b2:	f04f 38ff 	mov.w	r8, #4294967295
 800e0b6:	2700      	movs	r7, #0
 800e0b8:	fbb8 f8f3 	udiv	r8, r8, r3
 800e0bc:	fb03 f908 	mul.w	r9, r3, r8
 800e0c0:	ea6f 0909 	mvn.w	r9, r9
 800e0c4:	4638      	mov	r0, r7
 800e0c6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e0ca:	f1bc 0f09 	cmp.w	ip, #9
 800e0ce:	d814      	bhi.n	800e0fa <_strtoul_l.constprop.0+0x86>
 800e0d0:	4664      	mov	r4, ip
 800e0d2:	42a3      	cmp	r3, r4
 800e0d4:	dd22      	ble.n	800e11c <_strtoul_l.constprop.0+0xa8>
 800e0d6:	2f00      	cmp	r7, #0
 800e0d8:	db1d      	blt.n	800e116 <_strtoul_l.constprop.0+0xa2>
 800e0da:	4580      	cmp	r8, r0
 800e0dc:	d31b      	bcc.n	800e116 <_strtoul_l.constprop.0+0xa2>
 800e0de:	d101      	bne.n	800e0e4 <_strtoul_l.constprop.0+0x70>
 800e0e0:	45a1      	cmp	r9, r4
 800e0e2:	db18      	blt.n	800e116 <_strtoul_l.constprop.0+0xa2>
 800e0e4:	fb00 4003 	mla	r0, r0, r3, r4
 800e0e8:	2701      	movs	r7, #1
 800e0ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0ee:	e7ea      	b.n	800e0c6 <_strtoul_l.constprop.0+0x52>
 800e0f0:	2c2b      	cmp	r4, #43	; 0x2b
 800e0f2:	bf04      	itt	eq
 800e0f4:	782c      	ldrbeq	r4, [r5, #0]
 800e0f6:	1c85      	addeq	r5, r0, #2
 800e0f8:	e7cd      	b.n	800e096 <_strtoul_l.constprop.0+0x22>
 800e0fa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e0fe:	f1bc 0f19 	cmp.w	ip, #25
 800e102:	d801      	bhi.n	800e108 <_strtoul_l.constprop.0+0x94>
 800e104:	3c37      	subs	r4, #55	; 0x37
 800e106:	e7e4      	b.n	800e0d2 <_strtoul_l.constprop.0+0x5e>
 800e108:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e10c:	f1bc 0f19 	cmp.w	ip, #25
 800e110:	d804      	bhi.n	800e11c <_strtoul_l.constprop.0+0xa8>
 800e112:	3c57      	subs	r4, #87	; 0x57
 800e114:	e7dd      	b.n	800e0d2 <_strtoul_l.constprop.0+0x5e>
 800e116:	f04f 37ff 	mov.w	r7, #4294967295
 800e11a:	e7e6      	b.n	800e0ea <_strtoul_l.constprop.0+0x76>
 800e11c:	2f00      	cmp	r7, #0
 800e11e:	da07      	bge.n	800e130 <_strtoul_l.constprop.0+0xbc>
 800e120:	2322      	movs	r3, #34	; 0x22
 800e122:	f8ce 3000 	str.w	r3, [lr]
 800e126:	f04f 30ff 	mov.w	r0, #4294967295
 800e12a:	b932      	cbnz	r2, 800e13a <_strtoul_l.constprop.0+0xc6>
 800e12c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e130:	b106      	cbz	r6, 800e134 <_strtoul_l.constprop.0+0xc0>
 800e132:	4240      	negs	r0, r0
 800e134:	2a00      	cmp	r2, #0
 800e136:	d0f9      	beq.n	800e12c <_strtoul_l.constprop.0+0xb8>
 800e138:	b107      	cbz	r7, 800e13c <_strtoul_l.constprop.0+0xc8>
 800e13a:	1e69      	subs	r1, r5, #1
 800e13c:	6011      	str	r1, [r2, #0]
 800e13e:	e7f5      	b.n	800e12c <_strtoul_l.constprop.0+0xb8>
 800e140:	2430      	movs	r4, #48	; 0x30
 800e142:	2b00      	cmp	r3, #0
 800e144:	d1b5      	bne.n	800e0b2 <_strtoul_l.constprop.0+0x3e>
 800e146:	2308      	movs	r3, #8
 800e148:	e7b3      	b.n	800e0b2 <_strtoul_l.constprop.0+0x3e>
 800e14a:	2c30      	cmp	r4, #48	; 0x30
 800e14c:	d0a9      	beq.n	800e0a2 <_strtoul_l.constprop.0+0x2e>
 800e14e:	230a      	movs	r3, #10
 800e150:	e7af      	b.n	800e0b2 <_strtoul_l.constprop.0+0x3e>
 800e152:	bf00      	nop
 800e154:	0800ee6e 	.word	0x0800ee6e

0800e158 <_strtoul_r>:
 800e158:	f7ff bf8c 	b.w	800e074 <_strtoul_l.constprop.0>

0800e15c <strtoul>:
 800e15c:	4613      	mov	r3, r2
 800e15e:	460a      	mov	r2, r1
 800e160:	4601      	mov	r1, r0
 800e162:	4802      	ldr	r0, [pc, #8]	; (800e16c <strtoul+0x10>)
 800e164:	6800      	ldr	r0, [r0, #0]
 800e166:	f7ff bf85 	b.w	800e074 <_strtoul_l.constprop.0>
 800e16a:	bf00      	nop
 800e16c:	20000014 	.word	0x20000014

0800e170 <__ascii_wctomb>:
 800e170:	b149      	cbz	r1, 800e186 <__ascii_wctomb+0x16>
 800e172:	2aff      	cmp	r2, #255	; 0xff
 800e174:	bf85      	ittet	hi
 800e176:	238a      	movhi	r3, #138	; 0x8a
 800e178:	6003      	strhi	r3, [r0, #0]
 800e17a:	700a      	strbls	r2, [r1, #0]
 800e17c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e180:	bf98      	it	ls
 800e182:	2001      	movls	r0, #1
 800e184:	4770      	bx	lr
 800e186:	4608      	mov	r0, r1
 800e188:	4770      	bx	lr
	...

0800e18c <_write_r>:
 800e18c:	b538      	push	{r3, r4, r5, lr}
 800e18e:	4d07      	ldr	r5, [pc, #28]	; (800e1ac <_write_r+0x20>)
 800e190:	4604      	mov	r4, r0
 800e192:	4608      	mov	r0, r1
 800e194:	4611      	mov	r1, r2
 800e196:	2200      	movs	r2, #0
 800e198:	602a      	str	r2, [r5, #0]
 800e19a:	461a      	mov	r2, r3
 800e19c:	f7f4 facc 	bl	8002738 <_write>
 800e1a0:	1c43      	adds	r3, r0, #1
 800e1a2:	d102      	bne.n	800e1aa <_write_r+0x1e>
 800e1a4:	682b      	ldr	r3, [r5, #0]
 800e1a6:	b103      	cbz	r3, 800e1aa <_write_r+0x1e>
 800e1a8:	6023      	str	r3, [r4, #0]
 800e1aa:	bd38      	pop	{r3, r4, r5, pc}
 800e1ac:	2000050c 	.word	0x2000050c

0800e1b0 <abort>:
 800e1b0:	b508      	push	{r3, lr}
 800e1b2:	2006      	movs	r0, #6
 800e1b4:	f000 fc34 	bl	800ea20 <raise>
 800e1b8:	2001      	movs	r0, #1
 800e1ba:	f7f4 f8e3 	bl	8002384 <_exit>
	...

0800e1c0 <_close_r>:
 800e1c0:	b538      	push	{r3, r4, r5, lr}
 800e1c2:	4d06      	ldr	r5, [pc, #24]	; (800e1dc <_close_r+0x1c>)
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	4608      	mov	r0, r1
 800e1ca:	602b      	str	r3, [r5, #0]
 800e1cc:	f7f4 f8e4 	bl	8002398 <_close>
 800e1d0:	1c43      	adds	r3, r0, #1
 800e1d2:	d102      	bne.n	800e1da <_close_r+0x1a>
 800e1d4:	682b      	ldr	r3, [r5, #0]
 800e1d6:	b103      	cbz	r3, 800e1da <_close_r+0x1a>
 800e1d8:	6023      	str	r3, [r4, #0]
 800e1da:	bd38      	pop	{r3, r4, r5, pc}
 800e1dc:	2000050c 	.word	0x2000050c

0800e1e0 <__env_lock>:
 800e1e0:	4801      	ldr	r0, [pc, #4]	; (800e1e8 <__env_lock+0x8>)
 800e1e2:	f7fe be91 	b.w	800cf08 <__retarget_lock_acquire_recursive>
 800e1e6:	bf00      	nop
 800e1e8:	20000504 	.word	0x20000504

0800e1ec <__env_unlock>:
 800e1ec:	4801      	ldr	r0, [pc, #4]	; (800e1f4 <__env_unlock+0x8>)
 800e1ee:	f7fe be8d 	b.w	800cf0c <__retarget_lock_release_recursive>
 800e1f2:	bf00      	nop
 800e1f4:	20000504 	.word	0x20000504

0800e1f8 <_fstat_r>:
 800e1f8:	b538      	push	{r3, r4, r5, lr}
 800e1fa:	4d07      	ldr	r5, [pc, #28]	; (800e218 <_fstat_r+0x20>)
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	4604      	mov	r4, r0
 800e200:	4608      	mov	r0, r1
 800e202:	4611      	mov	r1, r2
 800e204:	602b      	str	r3, [r5, #0]
 800e206:	f7f4 f8d3 	bl	80023b0 <_fstat>
 800e20a:	1c43      	adds	r3, r0, #1
 800e20c:	d102      	bne.n	800e214 <_fstat_r+0x1c>
 800e20e:	682b      	ldr	r3, [r5, #0]
 800e210:	b103      	cbz	r3, 800e214 <_fstat_r+0x1c>
 800e212:	6023      	str	r3, [r4, #0]
 800e214:	bd38      	pop	{r3, r4, r5, pc}
 800e216:	bf00      	nop
 800e218:	2000050c 	.word	0x2000050c

0800e21c <_isatty_r>:
 800e21c:	b538      	push	{r3, r4, r5, lr}
 800e21e:	4d06      	ldr	r5, [pc, #24]	; (800e238 <_isatty_r+0x1c>)
 800e220:	2300      	movs	r3, #0
 800e222:	4604      	mov	r4, r0
 800e224:	4608      	mov	r0, r1
 800e226:	602b      	str	r3, [r5, #0]
 800e228:	f7f4 f8d2 	bl	80023d0 <_isatty>
 800e22c:	1c43      	adds	r3, r0, #1
 800e22e:	d102      	bne.n	800e236 <_isatty_r+0x1a>
 800e230:	682b      	ldr	r3, [r5, #0]
 800e232:	b103      	cbz	r3, 800e236 <_isatty_r+0x1a>
 800e234:	6023      	str	r3, [r4, #0]
 800e236:	bd38      	pop	{r3, r4, r5, pc}
 800e238:	2000050c 	.word	0x2000050c

0800e23c <_lseek_r>:
 800e23c:	b538      	push	{r3, r4, r5, lr}
 800e23e:	4d07      	ldr	r5, [pc, #28]	; (800e25c <_lseek_r+0x20>)
 800e240:	4604      	mov	r4, r0
 800e242:	4608      	mov	r0, r1
 800e244:	4611      	mov	r1, r2
 800e246:	2200      	movs	r2, #0
 800e248:	602a      	str	r2, [r5, #0]
 800e24a:	461a      	mov	r2, r3
 800e24c:	f7f4 f8cb 	bl	80023e6 <_lseek>
 800e250:	1c43      	adds	r3, r0, #1
 800e252:	d102      	bne.n	800e25a <_lseek_r+0x1e>
 800e254:	682b      	ldr	r3, [r5, #0]
 800e256:	b103      	cbz	r3, 800e25a <_lseek_r+0x1e>
 800e258:	6023      	str	r3, [r4, #0]
 800e25a:	bd38      	pop	{r3, r4, r5, pc}
 800e25c:	2000050c 	.word	0x2000050c

0800e260 <memmove>:
 800e260:	4288      	cmp	r0, r1
 800e262:	b510      	push	{r4, lr}
 800e264:	eb01 0402 	add.w	r4, r1, r2
 800e268:	d902      	bls.n	800e270 <memmove+0x10>
 800e26a:	4284      	cmp	r4, r0
 800e26c:	4623      	mov	r3, r4
 800e26e:	d807      	bhi.n	800e280 <memmove+0x20>
 800e270:	1e43      	subs	r3, r0, #1
 800e272:	42a1      	cmp	r1, r4
 800e274:	d008      	beq.n	800e288 <memmove+0x28>
 800e276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e27a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e27e:	e7f8      	b.n	800e272 <memmove+0x12>
 800e280:	4402      	add	r2, r0
 800e282:	4601      	mov	r1, r0
 800e284:	428a      	cmp	r2, r1
 800e286:	d100      	bne.n	800e28a <memmove+0x2a>
 800e288:	bd10      	pop	{r4, pc}
 800e28a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e28e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e292:	e7f7      	b.n	800e284 <memmove+0x24>

0800e294 <_realloc_r>:
 800e294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e298:	4680      	mov	r8, r0
 800e29a:	4614      	mov	r4, r2
 800e29c:	460e      	mov	r6, r1
 800e29e:	b921      	cbnz	r1, 800e2aa <_realloc_r+0x16>
 800e2a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2a4:	4611      	mov	r1, r2
 800e2a6:	f7fa bfab 	b.w	8009200 <_malloc_r>
 800e2aa:	b92a      	cbnz	r2, 800e2b8 <_realloc_r+0x24>
 800e2ac:	f7fa ff3c 	bl	8009128 <_free_r>
 800e2b0:	4625      	mov	r5, r4
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b8:	f000 fc08 	bl	800eacc <_malloc_usable_size_r>
 800e2bc:	4284      	cmp	r4, r0
 800e2be:	4607      	mov	r7, r0
 800e2c0:	d802      	bhi.n	800e2c8 <_realloc_r+0x34>
 800e2c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2c6:	d812      	bhi.n	800e2ee <_realloc_r+0x5a>
 800e2c8:	4621      	mov	r1, r4
 800e2ca:	4640      	mov	r0, r8
 800e2cc:	f7fa ff98 	bl	8009200 <_malloc_r>
 800e2d0:	4605      	mov	r5, r0
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d0ed      	beq.n	800e2b2 <_realloc_r+0x1e>
 800e2d6:	42bc      	cmp	r4, r7
 800e2d8:	4622      	mov	r2, r4
 800e2da:	4631      	mov	r1, r6
 800e2dc:	bf28      	it	cs
 800e2de:	463a      	movcs	r2, r7
 800e2e0:	f7fe fe8c 	bl	800cffc <memcpy>
 800e2e4:	4631      	mov	r1, r6
 800e2e6:	4640      	mov	r0, r8
 800e2e8:	f7fa ff1e 	bl	8009128 <_free_r>
 800e2ec:	e7e1      	b.n	800e2b2 <_realloc_r+0x1e>
 800e2ee:	4635      	mov	r5, r6
 800e2f0:	e7df      	b.n	800e2b2 <_realloc_r+0x1e>

0800e2f2 <_sungetc_r>:
 800e2f2:	b538      	push	{r3, r4, r5, lr}
 800e2f4:	1c4b      	adds	r3, r1, #1
 800e2f6:	4614      	mov	r4, r2
 800e2f8:	d103      	bne.n	800e302 <_sungetc_r+0x10>
 800e2fa:	f04f 35ff 	mov.w	r5, #4294967295
 800e2fe:	4628      	mov	r0, r5
 800e300:	bd38      	pop	{r3, r4, r5, pc}
 800e302:	8993      	ldrh	r3, [r2, #12]
 800e304:	f023 0320 	bic.w	r3, r3, #32
 800e308:	8193      	strh	r3, [r2, #12]
 800e30a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e30c:	6852      	ldr	r2, [r2, #4]
 800e30e:	b2cd      	uxtb	r5, r1
 800e310:	b18b      	cbz	r3, 800e336 <_sungetc_r+0x44>
 800e312:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e314:	4293      	cmp	r3, r2
 800e316:	dd08      	ble.n	800e32a <_sungetc_r+0x38>
 800e318:	6823      	ldr	r3, [r4, #0]
 800e31a:	1e5a      	subs	r2, r3, #1
 800e31c:	6022      	str	r2, [r4, #0]
 800e31e:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e322:	6863      	ldr	r3, [r4, #4]
 800e324:	3301      	adds	r3, #1
 800e326:	6063      	str	r3, [r4, #4]
 800e328:	e7e9      	b.n	800e2fe <_sungetc_r+0xc>
 800e32a:	4621      	mov	r1, r4
 800e32c:	f000 fb94 	bl	800ea58 <__submore>
 800e330:	2800      	cmp	r0, #0
 800e332:	d0f1      	beq.n	800e318 <_sungetc_r+0x26>
 800e334:	e7e1      	b.n	800e2fa <_sungetc_r+0x8>
 800e336:	6921      	ldr	r1, [r4, #16]
 800e338:	6823      	ldr	r3, [r4, #0]
 800e33a:	b151      	cbz	r1, 800e352 <_sungetc_r+0x60>
 800e33c:	4299      	cmp	r1, r3
 800e33e:	d208      	bcs.n	800e352 <_sungetc_r+0x60>
 800e340:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e344:	42a9      	cmp	r1, r5
 800e346:	d104      	bne.n	800e352 <_sungetc_r+0x60>
 800e348:	3b01      	subs	r3, #1
 800e34a:	3201      	adds	r2, #1
 800e34c:	6023      	str	r3, [r4, #0]
 800e34e:	6062      	str	r2, [r4, #4]
 800e350:	e7d5      	b.n	800e2fe <_sungetc_r+0xc>
 800e352:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e356:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e35a:	6363      	str	r3, [r4, #52]	; 0x34
 800e35c:	2303      	movs	r3, #3
 800e35e:	63a3      	str	r3, [r4, #56]	; 0x38
 800e360:	4623      	mov	r3, r4
 800e362:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e366:	6023      	str	r3, [r4, #0]
 800e368:	2301      	movs	r3, #1
 800e36a:	e7dc      	b.n	800e326 <_sungetc_r+0x34>

0800e36c <__ssrefill_r>:
 800e36c:	b510      	push	{r4, lr}
 800e36e:	460c      	mov	r4, r1
 800e370:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e372:	b169      	cbz	r1, 800e390 <__ssrefill_r+0x24>
 800e374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e378:	4299      	cmp	r1, r3
 800e37a:	d001      	beq.n	800e380 <__ssrefill_r+0x14>
 800e37c:	f7fa fed4 	bl	8009128 <_free_r>
 800e380:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e382:	6063      	str	r3, [r4, #4]
 800e384:	2000      	movs	r0, #0
 800e386:	6360      	str	r0, [r4, #52]	; 0x34
 800e388:	b113      	cbz	r3, 800e390 <__ssrefill_r+0x24>
 800e38a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e38c:	6023      	str	r3, [r4, #0]
 800e38e:	bd10      	pop	{r4, pc}
 800e390:	6923      	ldr	r3, [r4, #16]
 800e392:	6023      	str	r3, [r4, #0]
 800e394:	2300      	movs	r3, #0
 800e396:	6063      	str	r3, [r4, #4]
 800e398:	89a3      	ldrh	r3, [r4, #12]
 800e39a:	f043 0320 	orr.w	r3, r3, #32
 800e39e:	81a3      	strh	r3, [r4, #12]
 800e3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a4:	e7f3      	b.n	800e38e <__ssrefill_r+0x22>
	...

0800e3a8 <__ssvfiscanf_r>:
 800e3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3ac:	460c      	mov	r4, r1
 800e3ae:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e3b2:	2100      	movs	r1, #0
 800e3b4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e3b8:	49a6      	ldr	r1, [pc, #664]	; (800e654 <__ssvfiscanf_r+0x2ac>)
 800e3ba:	91a0      	str	r1, [sp, #640]	; 0x280
 800e3bc:	f10d 0804 	add.w	r8, sp, #4
 800e3c0:	49a5      	ldr	r1, [pc, #660]	; (800e658 <__ssvfiscanf_r+0x2b0>)
 800e3c2:	4fa6      	ldr	r7, [pc, #664]	; (800e65c <__ssvfiscanf_r+0x2b4>)
 800e3c4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e660 <__ssvfiscanf_r+0x2b8>
 800e3c8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e3cc:	4606      	mov	r6, r0
 800e3ce:	91a1      	str	r1, [sp, #644]	; 0x284
 800e3d0:	9300      	str	r3, [sp, #0]
 800e3d2:	7813      	ldrb	r3, [r2, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	f000 815a 	beq.w	800e68e <__ssvfiscanf_r+0x2e6>
 800e3da:	5dd9      	ldrb	r1, [r3, r7]
 800e3dc:	f011 0108 	ands.w	r1, r1, #8
 800e3e0:	f102 0501 	add.w	r5, r2, #1
 800e3e4:	d019      	beq.n	800e41a <__ssvfiscanf_r+0x72>
 800e3e6:	6863      	ldr	r3, [r4, #4]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	dd0f      	ble.n	800e40c <__ssvfiscanf_r+0x64>
 800e3ec:	6823      	ldr	r3, [r4, #0]
 800e3ee:	781a      	ldrb	r2, [r3, #0]
 800e3f0:	5cba      	ldrb	r2, [r7, r2]
 800e3f2:	0712      	lsls	r2, r2, #28
 800e3f4:	d401      	bmi.n	800e3fa <__ssvfiscanf_r+0x52>
 800e3f6:	462a      	mov	r2, r5
 800e3f8:	e7eb      	b.n	800e3d2 <__ssvfiscanf_r+0x2a>
 800e3fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e3fc:	3201      	adds	r2, #1
 800e3fe:	9245      	str	r2, [sp, #276]	; 0x114
 800e400:	6862      	ldr	r2, [r4, #4]
 800e402:	3301      	adds	r3, #1
 800e404:	3a01      	subs	r2, #1
 800e406:	6062      	str	r2, [r4, #4]
 800e408:	6023      	str	r3, [r4, #0]
 800e40a:	e7ec      	b.n	800e3e6 <__ssvfiscanf_r+0x3e>
 800e40c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e40e:	4621      	mov	r1, r4
 800e410:	4630      	mov	r0, r6
 800e412:	4798      	blx	r3
 800e414:	2800      	cmp	r0, #0
 800e416:	d0e9      	beq.n	800e3ec <__ssvfiscanf_r+0x44>
 800e418:	e7ed      	b.n	800e3f6 <__ssvfiscanf_r+0x4e>
 800e41a:	2b25      	cmp	r3, #37	; 0x25
 800e41c:	d012      	beq.n	800e444 <__ssvfiscanf_r+0x9c>
 800e41e:	469a      	mov	sl, r3
 800e420:	6863      	ldr	r3, [r4, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	f340 8091 	ble.w	800e54a <__ssvfiscanf_r+0x1a2>
 800e428:	6822      	ldr	r2, [r4, #0]
 800e42a:	7813      	ldrb	r3, [r2, #0]
 800e42c:	4553      	cmp	r3, sl
 800e42e:	f040 812e 	bne.w	800e68e <__ssvfiscanf_r+0x2e6>
 800e432:	6863      	ldr	r3, [r4, #4]
 800e434:	3b01      	subs	r3, #1
 800e436:	6063      	str	r3, [r4, #4]
 800e438:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e43a:	3201      	adds	r2, #1
 800e43c:	3301      	adds	r3, #1
 800e43e:	6022      	str	r2, [r4, #0]
 800e440:	9345      	str	r3, [sp, #276]	; 0x114
 800e442:	e7d8      	b.n	800e3f6 <__ssvfiscanf_r+0x4e>
 800e444:	9141      	str	r1, [sp, #260]	; 0x104
 800e446:	9143      	str	r1, [sp, #268]	; 0x10c
 800e448:	7853      	ldrb	r3, [r2, #1]
 800e44a:	2b2a      	cmp	r3, #42	; 0x2a
 800e44c:	bf02      	ittt	eq
 800e44e:	2310      	moveq	r3, #16
 800e450:	1c95      	addeq	r5, r2, #2
 800e452:	9341      	streq	r3, [sp, #260]	; 0x104
 800e454:	220a      	movs	r2, #10
 800e456:	46aa      	mov	sl, r5
 800e458:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e45c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e460:	2b09      	cmp	r3, #9
 800e462:	d91d      	bls.n	800e4a0 <__ssvfiscanf_r+0xf8>
 800e464:	487e      	ldr	r0, [pc, #504]	; (800e660 <__ssvfiscanf_r+0x2b8>)
 800e466:	2203      	movs	r2, #3
 800e468:	f7f1 feba 	bl	80001e0 <memchr>
 800e46c:	b140      	cbz	r0, 800e480 <__ssvfiscanf_r+0xd8>
 800e46e:	2301      	movs	r3, #1
 800e470:	eba0 0009 	sub.w	r0, r0, r9
 800e474:	fa03 f000 	lsl.w	r0, r3, r0
 800e478:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e47a:	4318      	orrs	r0, r3
 800e47c:	9041      	str	r0, [sp, #260]	; 0x104
 800e47e:	4655      	mov	r5, sl
 800e480:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e484:	2b78      	cmp	r3, #120	; 0x78
 800e486:	d806      	bhi.n	800e496 <__ssvfiscanf_r+0xee>
 800e488:	2b57      	cmp	r3, #87	; 0x57
 800e48a:	d810      	bhi.n	800e4ae <__ssvfiscanf_r+0x106>
 800e48c:	2b25      	cmp	r3, #37	; 0x25
 800e48e:	d0c6      	beq.n	800e41e <__ssvfiscanf_r+0x76>
 800e490:	d856      	bhi.n	800e540 <__ssvfiscanf_r+0x198>
 800e492:	2b00      	cmp	r3, #0
 800e494:	d064      	beq.n	800e560 <__ssvfiscanf_r+0x1b8>
 800e496:	2303      	movs	r3, #3
 800e498:	9347      	str	r3, [sp, #284]	; 0x11c
 800e49a:	230a      	movs	r3, #10
 800e49c:	9342      	str	r3, [sp, #264]	; 0x108
 800e49e:	e071      	b.n	800e584 <__ssvfiscanf_r+0x1dc>
 800e4a0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e4a2:	fb02 1103 	mla	r1, r2, r3, r1
 800e4a6:	3930      	subs	r1, #48	; 0x30
 800e4a8:	9143      	str	r1, [sp, #268]	; 0x10c
 800e4aa:	4655      	mov	r5, sl
 800e4ac:	e7d3      	b.n	800e456 <__ssvfiscanf_r+0xae>
 800e4ae:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e4b2:	2a20      	cmp	r2, #32
 800e4b4:	d8ef      	bhi.n	800e496 <__ssvfiscanf_r+0xee>
 800e4b6:	a101      	add	r1, pc, #4	; (adr r1, 800e4bc <__ssvfiscanf_r+0x114>)
 800e4b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e4bc:	0800e56f 	.word	0x0800e56f
 800e4c0:	0800e497 	.word	0x0800e497
 800e4c4:	0800e497 	.word	0x0800e497
 800e4c8:	0800e5cd 	.word	0x0800e5cd
 800e4cc:	0800e497 	.word	0x0800e497
 800e4d0:	0800e497 	.word	0x0800e497
 800e4d4:	0800e497 	.word	0x0800e497
 800e4d8:	0800e497 	.word	0x0800e497
 800e4dc:	0800e497 	.word	0x0800e497
 800e4e0:	0800e497 	.word	0x0800e497
 800e4e4:	0800e497 	.word	0x0800e497
 800e4e8:	0800e5e3 	.word	0x0800e5e3
 800e4ec:	0800e5b9 	.word	0x0800e5b9
 800e4f0:	0800e547 	.word	0x0800e547
 800e4f4:	0800e547 	.word	0x0800e547
 800e4f8:	0800e547 	.word	0x0800e547
 800e4fc:	0800e497 	.word	0x0800e497
 800e500:	0800e5bd 	.word	0x0800e5bd
 800e504:	0800e497 	.word	0x0800e497
 800e508:	0800e497 	.word	0x0800e497
 800e50c:	0800e497 	.word	0x0800e497
 800e510:	0800e497 	.word	0x0800e497
 800e514:	0800e5f3 	.word	0x0800e5f3
 800e518:	0800e5c5 	.word	0x0800e5c5
 800e51c:	0800e567 	.word	0x0800e567
 800e520:	0800e497 	.word	0x0800e497
 800e524:	0800e497 	.word	0x0800e497
 800e528:	0800e5ef 	.word	0x0800e5ef
 800e52c:	0800e497 	.word	0x0800e497
 800e530:	0800e5b9 	.word	0x0800e5b9
 800e534:	0800e497 	.word	0x0800e497
 800e538:	0800e497 	.word	0x0800e497
 800e53c:	0800e56f 	.word	0x0800e56f
 800e540:	3b45      	subs	r3, #69	; 0x45
 800e542:	2b02      	cmp	r3, #2
 800e544:	d8a7      	bhi.n	800e496 <__ssvfiscanf_r+0xee>
 800e546:	2305      	movs	r3, #5
 800e548:	e01b      	b.n	800e582 <__ssvfiscanf_r+0x1da>
 800e54a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e54c:	4621      	mov	r1, r4
 800e54e:	4630      	mov	r0, r6
 800e550:	4798      	blx	r3
 800e552:	2800      	cmp	r0, #0
 800e554:	f43f af68 	beq.w	800e428 <__ssvfiscanf_r+0x80>
 800e558:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e55a:	2800      	cmp	r0, #0
 800e55c:	f040 808d 	bne.w	800e67a <__ssvfiscanf_r+0x2d2>
 800e560:	f04f 30ff 	mov.w	r0, #4294967295
 800e564:	e08f      	b.n	800e686 <__ssvfiscanf_r+0x2de>
 800e566:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e568:	f042 0220 	orr.w	r2, r2, #32
 800e56c:	9241      	str	r2, [sp, #260]	; 0x104
 800e56e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e574:	9241      	str	r2, [sp, #260]	; 0x104
 800e576:	2210      	movs	r2, #16
 800e578:	2b6f      	cmp	r3, #111	; 0x6f
 800e57a:	9242      	str	r2, [sp, #264]	; 0x108
 800e57c:	bf34      	ite	cc
 800e57e:	2303      	movcc	r3, #3
 800e580:	2304      	movcs	r3, #4
 800e582:	9347      	str	r3, [sp, #284]	; 0x11c
 800e584:	6863      	ldr	r3, [r4, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	dd42      	ble.n	800e610 <__ssvfiscanf_r+0x268>
 800e58a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e58c:	0659      	lsls	r1, r3, #25
 800e58e:	d404      	bmi.n	800e59a <__ssvfiscanf_r+0x1f2>
 800e590:	6823      	ldr	r3, [r4, #0]
 800e592:	781a      	ldrb	r2, [r3, #0]
 800e594:	5cba      	ldrb	r2, [r7, r2]
 800e596:	0712      	lsls	r2, r2, #28
 800e598:	d441      	bmi.n	800e61e <__ssvfiscanf_r+0x276>
 800e59a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e59c:	2b02      	cmp	r3, #2
 800e59e:	dc50      	bgt.n	800e642 <__ssvfiscanf_r+0x29a>
 800e5a0:	466b      	mov	r3, sp
 800e5a2:	4622      	mov	r2, r4
 800e5a4:	a941      	add	r1, sp, #260	; 0x104
 800e5a6:	4630      	mov	r0, r6
 800e5a8:	f000 f876 	bl	800e698 <_scanf_chars>
 800e5ac:	2801      	cmp	r0, #1
 800e5ae:	d06e      	beq.n	800e68e <__ssvfiscanf_r+0x2e6>
 800e5b0:	2802      	cmp	r0, #2
 800e5b2:	f47f af20 	bne.w	800e3f6 <__ssvfiscanf_r+0x4e>
 800e5b6:	e7cf      	b.n	800e558 <__ssvfiscanf_r+0x1b0>
 800e5b8:	220a      	movs	r2, #10
 800e5ba:	e7dd      	b.n	800e578 <__ssvfiscanf_r+0x1d0>
 800e5bc:	2300      	movs	r3, #0
 800e5be:	9342      	str	r3, [sp, #264]	; 0x108
 800e5c0:	2303      	movs	r3, #3
 800e5c2:	e7de      	b.n	800e582 <__ssvfiscanf_r+0x1da>
 800e5c4:	2308      	movs	r3, #8
 800e5c6:	9342      	str	r3, [sp, #264]	; 0x108
 800e5c8:	2304      	movs	r3, #4
 800e5ca:	e7da      	b.n	800e582 <__ssvfiscanf_r+0x1da>
 800e5cc:	4629      	mov	r1, r5
 800e5ce:	4640      	mov	r0, r8
 800e5d0:	f000 f9c6 	bl	800e960 <__sccl>
 800e5d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5da:	9341      	str	r3, [sp, #260]	; 0x104
 800e5dc:	4605      	mov	r5, r0
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e7cf      	b.n	800e582 <__ssvfiscanf_r+0x1da>
 800e5e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5e8:	9341      	str	r3, [sp, #260]	; 0x104
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	e7c9      	b.n	800e582 <__ssvfiscanf_r+0x1da>
 800e5ee:	2302      	movs	r3, #2
 800e5f0:	e7c7      	b.n	800e582 <__ssvfiscanf_r+0x1da>
 800e5f2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e5f4:	06c3      	lsls	r3, r0, #27
 800e5f6:	f53f aefe 	bmi.w	800e3f6 <__ssvfiscanf_r+0x4e>
 800e5fa:	9b00      	ldr	r3, [sp, #0]
 800e5fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e5fe:	1d19      	adds	r1, r3, #4
 800e600:	9100      	str	r1, [sp, #0]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f010 0f01 	tst.w	r0, #1
 800e608:	bf14      	ite	ne
 800e60a:	801a      	strhne	r2, [r3, #0]
 800e60c:	601a      	streq	r2, [r3, #0]
 800e60e:	e6f2      	b.n	800e3f6 <__ssvfiscanf_r+0x4e>
 800e610:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e612:	4621      	mov	r1, r4
 800e614:	4630      	mov	r0, r6
 800e616:	4798      	blx	r3
 800e618:	2800      	cmp	r0, #0
 800e61a:	d0b6      	beq.n	800e58a <__ssvfiscanf_r+0x1e2>
 800e61c:	e79c      	b.n	800e558 <__ssvfiscanf_r+0x1b0>
 800e61e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e620:	3201      	adds	r2, #1
 800e622:	9245      	str	r2, [sp, #276]	; 0x114
 800e624:	6862      	ldr	r2, [r4, #4]
 800e626:	3a01      	subs	r2, #1
 800e628:	2a00      	cmp	r2, #0
 800e62a:	6062      	str	r2, [r4, #4]
 800e62c:	dd02      	ble.n	800e634 <__ssvfiscanf_r+0x28c>
 800e62e:	3301      	adds	r3, #1
 800e630:	6023      	str	r3, [r4, #0]
 800e632:	e7ad      	b.n	800e590 <__ssvfiscanf_r+0x1e8>
 800e634:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e636:	4621      	mov	r1, r4
 800e638:	4630      	mov	r0, r6
 800e63a:	4798      	blx	r3
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d0a7      	beq.n	800e590 <__ssvfiscanf_r+0x1e8>
 800e640:	e78a      	b.n	800e558 <__ssvfiscanf_r+0x1b0>
 800e642:	2b04      	cmp	r3, #4
 800e644:	dc0e      	bgt.n	800e664 <__ssvfiscanf_r+0x2bc>
 800e646:	466b      	mov	r3, sp
 800e648:	4622      	mov	r2, r4
 800e64a:	a941      	add	r1, sp, #260	; 0x104
 800e64c:	4630      	mov	r0, r6
 800e64e:	f000 f87d 	bl	800e74c <_scanf_i>
 800e652:	e7ab      	b.n	800e5ac <__ssvfiscanf_r+0x204>
 800e654:	0800e2f3 	.word	0x0800e2f3
 800e658:	0800e36d 	.word	0x0800e36d
 800e65c:	0800ee6e 	.word	0x0800ee6e
 800e660:	0800f222 	.word	0x0800f222
 800e664:	4b0b      	ldr	r3, [pc, #44]	; (800e694 <__ssvfiscanf_r+0x2ec>)
 800e666:	2b00      	cmp	r3, #0
 800e668:	f43f aec5 	beq.w	800e3f6 <__ssvfiscanf_r+0x4e>
 800e66c:	466b      	mov	r3, sp
 800e66e:	4622      	mov	r2, r4
 800e670:	a941      	add	r1, sp, #260	; 0x104
 800e672:	4630      	mov	r0, r6
 800e674:	f7fb faa2 	bl	8009bbc <_scanf_float>
 800e678:	e798      	b.n	800e5ac <__ssvfiscanf_r+0x204>
 800e67a:	89a3      	ldrh	r3, [r4, #12]
 800e67c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e680:	bf18      	it	ne
 800e682:	f04f 30ff 	movne.w	r0, #4294967295
 800e686:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e68e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e690:	e7f9      	b.n	800e686 <__ssvfiscanf_r+0x2de>
 800e692:	bf00      	nop
 800e694:	08009bbd 	.word	0x08009bbd

0800e698 <_scanf_chars>:
 800e698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e69c:	4615      	mov	r5, r2
 800e69e:	688a      	ldr	r2, [r1, #8]
 800e6a0:	4680      	mov	r8, r0
 800e6a2:	460c      	mov	r4, r1
 800e6a4:	b932      	cbnz	r2, 800e6b4 <_scanf_chars+0x1c>
 800e6a6:	698a      	ldr	r2, [r1, #24]
 800e6a8:	2a00      	cmp	r2, #0
 800e6aa:	bf0c      	ite	eq
 800e6ac:	2201      	moveq	r2, #1
 800e6ae:	f04f 32ff 	movne.w	r2, #4294967295
 800e6b2:	608a      	str	r2, [r1, #8]
 800e6b4:	6822      	ldr	r2, [r4, #0]
 800e6b6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e748 <_scanf_chars+0xb0>
 800e6ba:	06d1      	lsls	r1, r2, #27
 800e6bc:	bf5f      	itttt	pl
 800e6be:	681a      	ldrpl	r2, [r3, #0]
 800e6c0:	1d11      	addpl	r1, r2, #4
 800e6c2:	6019      	strpl	r1, [r3, #0]
 800e6c4:	6816      	ldrpl	r6, [r2, #0]
 800e6c6:	2700      	movs	r7, #0
 800e6c8:	69a0      	ldr	r0, [r4, #24]
 800e6ca:	b188      	cbz	r0, 800e6f0 <_scanf_chars+0x58>
 800e6cc:	2801      	cmp	r0, #1
 800e6ce:	d107      	bne.n	800e6e0 <_scanf_chars+0x48>
 800e6d0:	682a      	ldr	r2, [r5, #0]
 800e6d2:	7811      	ldrb	r1, [r2, #0]
 800e6d4:	6962      	ldr	r2, [r4, #20]
 800e6d6:	5c52      	ldrb	r2, [r2, r1]
 800e6d8:	b952      	cbnz	r2, 800e6f0 <_scanf_chars+0x58>
 800e6da:	2f00      	cmp	r7, #0
 800e6dc:	d031      	beq.n	800e742 <_scanf_chars+0xaa>
 800e6de:	e022      	b.n	800e726 <_scanf_chars+0x8e>
 800e6e0:	2802      	cmp	r0, #2
 800e6e2:	d120      	bne.n	800e726 <_scanf_chars+0x8e>
 800e6e4:	682b      	ldr	r3, [r5, #0]
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e6ec:	071b      	lsls	r3, r3, #28
 800e6ee:	d41a      	bmi.n	800e726 <_scanf_chars+0x8e>
 800e6f0:	6823      	ldr	r3, [r4, #0]
 800e6f2:	06da      	lsls	r2, r3, #27
 800e6f4:	bf5e      	ittt	pl
 800e6f6:	682b      	ldrpl	r3, [r5, #0]
 800e6f8:	781b      	ldrbpl	r3, [r3, #0]
 800e6fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e6fe:	682a      	ldr	r2, [r5, #0]
 800e700:	686b      	ldr	r3, [r5, #4]
 800e702:	3201      	adds	r2, #1
 800e704:	602a      	str	r2, [r5, #0]
 800e706:	68a2      	ldr	r2, [r4, #8]
 800e708:	3b01      	subs	r3, #1
 800e70a:	3a01      	subs	r2, #1
 800e70c:	606b      	str	r3, [r5, #4]
 800e70e:	3701      	adds	r7, #1
 800e710:	60a2      	str	r2, [r4, #8]
 800e712:	b142      	cbz	r2, 800e726 <_scanf_chars+0x8e>
 800e714:	2b00      	cmp	r3, #0
 800e716:	dcd7      	bgt.n	800e6c8 <_scanf_chars+0x30>
 800e718:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e71c:	4629      	mov	r1, r5
 800e71e:	4640      	mov	r0, r8
 800e720:	4798      	blx	r3
 800e722:	2800      	cmp	r0, #0
 800e724:	d0d0      	beq.n	800e6c8 <_scanf_chars+0x30>
 800e726:	6823      	ldr	r3, [r4, #0]
 800e728:	f013 0310 	ands.w	r3, r3, #16
 800e72c:	d105      	bne.n	800e73a <_scanf_chars+0xa2>
 800e72e:	68e2      	ldr	r2, [r4, #12]
 800e730:	3201      	adds	r2, #1
 800e732:	60e2      	str	r2, [r4, #12]
 800e734:	69a2      	ldr	r2, [r4, #24]
 800e736:	b102      	cbz	r2, 800e73a <_scanf_chars+0xa2>
 800e738:	7033      	strb	r3, [r6, #0]
 800e73a:	6923      	ldr	r3, [r4, #16]
 800e73c:	443b      	add	r3, r7
 800e73e:	6123      	str	r3, [r4, #16]
 800e740:	2000      	movs	r0, #0
 800e742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e746:	bf00      	nop
 800e748:	0800ee6e 	.word	0x0800ee6e

0800e74c <_scanf_i>:
 800e74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e750:	4698      	mov	r8, r3
 800e752:	4b76      	ldr	r3, [pc, #472]	; (800e92c <_scanf_i+0x1e0>)
 800e754:	460c      	mov	r4, r1
 800e756:	4682      	mov	sl, r0
 800e758:	4616      	mov	r6, r2
 800e75a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e75e:	b087      	sub	sp, #28
 800e760:	ab03      	add	r3, sp, #12
 800e762:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e766:	4b72      	ldr	r3, [pc, #456]	; (800e930 <_scanf_i+0x1e4>)
 800e768:	69a1      	ldr	r1, [r4, #24]
 800e76a:	4a72      	ldr	r2, [pc, #456]	; (800e934 <_scanf_i+0x1e8>)
 800e76c:	2903      	cmp	r1, #3
 800e76e:	bf18      	it	ne
 800e770:	461a      	movne	r2, r3
 800e772:	68a3      	ldr	r3, [r4, #8]
 800e774:	9201      	str	r2, [sp, #4]
 800e776:	1e5a      	subs	r2, r3, #1
 800e778:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e77c:	bf88      	it	hi
 800e77e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e782:	4627      	mov	r7, r4
 800e784:	bf82      	ittt	hi
 800e786:	eb03 0905 	addhi.w	r9, r3, r5
 800e78a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e78e:	60a3      	strhi	r3, [r4, #8]
 800e790:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e794:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e798:	bf98      	it	ls
 800e79a:	f04f 0900 	movls.w	r9, #0
 800e79e:	6023      	str	r3, [r4, #0]
 800e7a0:	463d      	mov	r5, r7
 800e7a2:	f04f 0b00 	mov.w	fp, #0
 800e7a6:	6831      	ldr	r1, [r6, #0]
 800e7a8:	ab03      	add	r3, sp, #12
 800e7aa:	7809      	ldrb	r1, [r1, #0]
 800e7ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e7b0:	2202      	movs	r2, #2
 800e7b2:	f7f1 fd15 	bl	80001e0 <memchr>
 800e7b6:	b328      	cbz	r0, 800e804 <_scanf_i+0xb8>
 800e7b8:	f1bb 0f01 	cmp.w	fp, #1
 800e7bc:	d159      	bne.n	800e872 <_scanf_i+0x126>
 800e7be:	6862      	ldr	r2, [r4, #4]
 800e7c0:	b92a      	cbnz	r2, 800e7ce <_scanf_i+0x82>
 800e7c2:	6822      	ldr	r2, [r4, #0]
 800e7c4:	2308      	movs	r3, #8
 800e7c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7ca:	6063      	str	r3, [r4, #4]
 800e7cc:	6022      	str	r2, [r4, #0]
 800e7ce:	6822      	ldr	r2, [r4, #0]
 800e7d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e7d4:	6022      	str	r2, [r4, #0]
 800e7d6:	68a2      	ldr	r2, [r4, #8]
 800e7d8:	1e51      	subs	r1, r2, #1
 800e7da:	60a1      	str	r1, [r4, #8]
 800e7dc:	b192      	cbz	r2, 800e804 <_scanf_i+0xb8>
 800e7de:	6832      	ldr	r2, [r6, #0]
 800e7e0:	1c51      	adds	r1, r2, #1
 800e7e2:	6031      	str	r1, [r6, #0]
 800e7e4:	7812      	ldrb	r2, [r2, #0]
 800e7e6:	f805 2b01 	strb.w	r2, [r5], #1
 800e7ea:	6872      	ldr	r2, [r6, #4]
 800e7ec:	3a01      	subs	r2, #1
 800e7ee:	2a00      	cmp	r2, #0
 800e7f0:	6072      	str	r2, [r6, #4]
 800e7f2:	dc07      	bgt.n	800e804 <_scanf_i+0xb8>
 800e7f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e7f8:	4631      	mov	r1, r6
 800e7fa:	4650      	mov	r0, sl
 800e7fc:	4790      	blx	r2
 800e7fe:	2800      	cmp	r0, #0
 800e800:	f040 8085 	bne.w	800e90e <_scanf_i+0x1c2>
 800e804:	f10b 0b01 	add.w	fp, fp, #1
 800e808:	f1bb 0f03 	cmp.w	fp, #3
 800e80c:	d1cb      	bne.n	800e7a6 <_scanf_i+0x5a>
 800e80e:	6863      	ldr	r3, [r4, #4]
 800e810:	b90b      	cbnz	r3, 800e816 <_scanf_i+0xca>
 800e812:	230a      	movs	r3, #10
 800e814:	6063      	str	r3, [r4, #4]
 800e816:	6863      	ldr	r3, [r4, #4]
 800e818:	4947      	ldr	r1, [pc, #284]	; (800e938 <_scanf_i+0x1ec>)
 800e81a:	6960      	ldr	r0, [r4, #20]
 800e81c:	1ac9      	subs	r1, r1, r3
 800e81e:	f000 f89f 	bl	800e960 <__sccl>
 800e822:	f04f 0b00 	mov.w	fp, #0
 800e826:	68a3      	ldr	r3, [r4, #8]
 800e828:	6822      	ldr	r2, [r4, #0]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d03d      	beq.n	800e8aa <_scanf_i+0x15e>
 800e82e:	6831      	ldr	r1, [r6, #0]
 800e830:	6960      	ldr	r0, [r4, #20]
 800e832:	f891 c000 	ldrb.w	ip, [r1]
 800e836:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e83a:	2800      	cmp	r0, #0
 800e83c:	d035      	beq.n	800e8aa <_scanf_i+0x15e>
 800e83e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e842:	d124      	bne.n	800e88e <_scanf_i+0x142>
 800e844:	0510      	lsls	r0, r2, #20
 800e846:	d522      	bpl.n	800e88e <_scanf_i+0x142>
 800e848:	f10b 0b01 	add.w	fp, fp, #1
 800e84c:	f1b9 0f00 	cmp.w	r9, #0
 800e850:	d003      	beq.n	800e85a <_scanf_i+0x10e>
 800e852:	3301      	adds	r3, #1
 800e854:	f109 39ff 	add.w	r9, r9, #4294967295
 800e858:	60a3      	str	r3, [r4, #8]
 800e85a:	6873      	ldr	r3, [r6, #4]
 800e85c:	3b01      	subs	r3, #1
 800e85e:	2b00      	cmp	r3, #0
 800e860:	6073      	str	r3, [r6, #4]
 800e862:	dd1b      	ble.n	800e89c <_scanf_i+0x150>
 800e864:	6833      	ldr	r3, [r6, #0]
 800e866:	3301      	adds	r3, #1
 800e868:	6033      	str	r3, [r6, #0]
 800e86a:	68a3      	ldr	r3, [r4, #8]
 800e86c:	3b01      	subs	r3, #1
 800e86e:	60a3      	str	r3, [r4, #8]
 800e870:	e7d9      	b.n	800e826 <_scanf_i+0xda>
 800e872:	f1bb 0f02 	cmp.w	fp, #2
 800e876:	d1ae      	bne.n	800e7d6 <_scanf_i+0x8a>
 800e878:	6822      	ldr	r2, [r4, #0]
 800e87a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e87e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e882:	d1bf      	bne.n	800e804 <_scanf_i+0xb8>
 800e884:	2310      	movs	r3, #16
 800e886:	6063      	str	r3, [r4, #4]
 800e888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e88c:	e7a2      	b.n	800e7d4 <_scanf_i+0x88>
 800e88e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e892:	6022      	str	r2, [r4, #0]
 800e894:	780b      	ldrb	r3, [r1, #0]
 800e896:	f805 3b01 	strb.w	r3, [r5], #1
 800e89a:	e7de      	b.n	800e85a <_scanf_i+0x10e>
 800e89c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e8a0:	4631      	mov	r1, r6
 800e8a2:	4650      	mov	r0, sl
 800e8a4:	4798      	blx	r3
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	d0df      	beq.n	800e86a <_scanf_i+0x11e>
 800e8aa:	6823      	ldr	r3, [r4, #0]
 800e8ac:	05db      	lsls	r3, r3, #23
 800e8ae:	d50d      	bpl.n	800e8cc <_scanf_i+0x180>
 800e8b0:	42bd      	cmp	r5, r7
 800e8b2:	d909      	bls.n	800e8c8 <_scanf_i+0x17c>
 800e8b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e8b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8bc:	4632      	mov	r2, r6
 800e8be:	4650      	mov	r0, sl
 800e8c0:	4798      	blx	r3
 800e8c2:	f105 39ff 	add.w	r9, r5, #4294967295
 800e8c6:	464d      	mov	r5, r9
 800e8c8:	42bd      	cmp	r5, r7
 800e8ca:	d02d      	beq.n	800e928 <_scanf_i+0x1dc>
 800e8cc:	6822      	ldr	r2, [r4, #0]
 800e8ce:	f012 0210 	ands.w	r2, r2, #16
 800e8d2:	d113      	bne.n	800e8fc <_scanf_i+0x1b0>
 800e8d4:	702a      	strb	r2, [r5, #0]
 800e8d6:	6863      	ldr	r3, [r4, #4]
 800e8d8:	9e01      	ldr	r6, [sp, #4]
 800e8da:	4639      	mov	r1, r7
 800e8dc:	4650      	mov	r0, sl
 800e8de:	47b0      	blx	r6
 800e8e0:	6821      	ldr	r1, [r4, #0]
 800e8e2:	f8d8 3000 	ldr.w	r3, [r8]
 800e8e6:	f011 0f20 	tst.w	r1, #32
 800e8ea:	d013      	beq.n	800e914 <_scanf_i+0x1c8>
 800e8ec:	1d1a      	adds	r2, r3, #4
 800e8ee:	f8c8 2000 	str.w	r2, [r8]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	6018      	str	r0, [r3, #0]
 800e8f6:	68e3      	ldr	r3, [r4, #12]
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	60e3      	str	r3, [r4, #12]
 800e8fc:	1bed      	subs	r5, r5, r7
 800e8fe:	44ab      	add	fp, r5
 800e900:	6925      	ldr	r5, [r4, #16]
 800e902:	445d      	add	r5, fp
 800e904:	6125      	str	r5, [r4, #16]
 800e906:	2000      	movs	r0, #0
 800e908:	b007      	add	sp, #28
 800e90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e90e:	f04f 0b00 	mov.w	fp, #0
 800e912:	e7ca      	b.n	800e8aa <_scanf_i+0x15e>
 800e914:	1d1a      	adds	r2, r3, #4
 800e916:	f8c8 2000 	str.w	r2, [r8]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f011 0f01 	tst.w	r1, #1
 800e920:	bf14      	ite	ne
 800e922:	8018      	strhne	r0, [r3, #0]
 800e924:	6018      	streq	r0, [r3, #0]
 800e926:	e7e6      	b.n	800e8f6 <_scanf_i+0x1aa>
 800e928:	2001      	movs	r0, #1
 800e92a:	e7ed      	b.n	800e908 <_scanf_i+0x1bc>
 800e92c:	0800eb2c 	.word	0x0800eb2c
 800e930:	0800e159 	.word	0x0800e159
 800e934:	0800aebd 	.word	0x0800aebd
 800e938:	0800f246 	.word	0x0800f246

0800e93c <_read_r>:
 800e93c:	b538      	push	{r3, r4, r5, lr}
 800e93e:	4d07      	ldr	r5, [pc, #28]	; (800e95c <_read_r+0x20>)
 800e940:	4604      	mov	r4, r0
 800e942:	4608      	mov	r0, r1
 800e944:	4611      	mov	r1, r2
 800e946:	2200      	movs	r2, #0
 800e948:	602a      	str	r2, [r5, #0]
 800e94a:	461a      	mov	r2, r3
 800e94c:	f7f3 fed8 	bl	8002700 <_read>
 800e950:	1c43      	adds	r3, r0, #1
 800e952:	d102      	bne.n	800e95a <_read_r+0x1e>
 800e954:	682b      	ldr	r3, [r5, #0]
 800e956:	b103      	cbz	r3, 800e95a <_read_r+0x1e>
 800e958:	6023      	str	r3, [r4, #0]
 800e95a:	bd38      	pop	{r3, r4, r5, pc}
 800e95c:	2000050c 	.word	0x2000050c

0800e960 <__sccl>:
 800e960:	b570      	push	{r4, r5, r6, lr}
 800e962:	780b      	ldrb	r3, [r1, #0]
 800e964:	4604      	mov	r4, r0
 800e966:	2b5e      	cmp	r3, #94	; 0x5e
 800e968:	bf0b      	itete	eq
 800e96a:	784b      	ldrbeq	r3, [r1, #1]
 800e96c:	1c48      	addne	r0, r1, #1
 800e96e:	1c88      	addeq	r0, r1, #2
 800e970:	2200      	movne	r2, #0
 800e972:	bf08      	it	eq
 800e974:	2201      	moveq	r2, #1
 800e976:	1e61      	subs	r1, r4, #1
 800e978:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e97c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e980:	42a9      	cmp	r1, r5
 800e982:	d1fb      	bne.n	800e97c <__sccl+0x1c>
 800e984:	b90b      	cbnz	r3, 800e98a <__sccl+0x2a>
 800e986:	3801      	subs	r0, #1
 800e988:	bd70      	pop	{r4, r5, r6, pc}
 800e98a:	f082 0201 	eor.w	r2, r2, #1
 800e98e:	54e2      	strb	r2, [r4, r3]
 800e990:	4605      	mov	r5, r0
 800e992:	4628      	mov	r0, r5
 800e994:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e998:	292d      	cmp	r1, #45	; 0x2d
 800e99a:	d006      	beq.n	800e9aa <__sccl+0x4a>
 800e99c:	295d      	cmp	r1, #93	; 0x5d
 800e99e:	d0f3      	beq.n	800e988 <__sccl+0x28>
 800e9a0:	b909      	cbnz	r1, 800e9a6 <__sccl+0x46>
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	e7f0      	b.n	800e988 <__sccl+0x28>
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	e7f1      	b.n	800e98e <__sccl+0x2e>
 800e9aa:	786e      	ldrb	r6, [r5, #1]
 800e9ac:	2e5d      	cmp	r6, #93	; 0x5d
 800e9ae:	d0fa      	beq.n	800e9a6 <__sccl+0x46>
 800e9b0:	42b3      	cmp	r3, r6
 800e9b2:	dcf8      	bgt.n	800e9a6 <__sccl+0x46>
 800e9b4:	3502      	adds	r5, #2
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	3101      	adds	r1, #1
 800e9ba:	428e      	cmp	r6, r1
 800e9bc:	5462      	strb	r2, [r4, r1]
 800e9be:	dcfb      	bgt.n	800e9b8 <__sccl+0x58>
 800e9c0:	1af1      	subs	r1, r6, r3
 800e9c2:	3901      	subs	r1, #1
 800e9c4:	1c58      	adds	r0, r3, #1
 800e9c6:	42b3      	cmp	r3, r6
 800e9c8:	bfa8      	it	ge
 800e9ca:	2100      	movge	r1, #0
 800e9cc:	1843      	adds	r3, r0, r1
 800e9ce:	e7e0      	b.n	800e992 <__sccl+0x32>

0800e9d0 <_raise_r>:
 800e9d0:	291f      	cmp	r1, #31
 800e9d2:	b538      	push	{r3, r4, r5, lr}
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	460d      	mov	r5, r1
 800e9d8:	d904      	bls.n	800e9e4 <_raise_r+0x14>
 800e9da:	2316      	movs	r3, #22
 800e9dc:	6003      	str	r3, [r0, #0]
 800e9de:	f04f 30ff 	mov.w	r0, #4294967295
 800e9e2:	bd38      	pop	{r3, r4, r5, pc}
 800e9e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e9e6:	b112      	cbz	r2, 800e9ee <_raise_r+0x1e>
 800e9e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9ec:	b94b      	cbnz	r3, 800ea02 <_raise_r+0x32>
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f000 f830 	bl	800ea54 <_getpid_r>
 800e9f4:	462a      	mov	r2, r5
 800e9f6:	4601      	mov	r1, r0
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9fe:	f000 b817 	b.w	800ea30 <_kill_r>
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d00a      	beq.n	800ea1c <_raise_r+0x4c>
 800ea06:	1c59      	adds	r1, r3, #1
 800ea08:	d103      	bne.n	800ea12 <_raise_r+0x42>
 800ea0a:	2316      	movs	r3, #22
 800ea0c:	6003      	str	r3, [r0, #0]
 800ea0e:	2001      	movs	r0, #1
 800ea10:	e7e7      	b.n	800e9e2 <_raise_r+0x12>
 800ea12:	2400      	movs	r4, #0
 800ea14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ea18:	4628      	mov	r0, r5
 800ea1a:	4798      	blx	r3
 800ea1c:	2000      	movs	r0, #0
 800ea1e:	e7e0      	b.n	800e9e2 <_raise_r+0x12>

0800ea20 <raise>:
 800ea20:	4b02      	ldr	r3, [pc, #8]	; (800ea2c <raise+0xc>)
 800ea22:	4601      	mov	r1, r0
 800ea24:	6818      	ldr	r0, [r3, #0]
 800ea26:	f7ff bfd3 	b.w	800e9d0 <_raise_r>
 800ea2a:	bf00      	nop
 800ea2c:	20000014 	.word	0x20000014

0800ea30 <_kill_r>:
 800ea30:	b538      	push	{r3, r4, r5, lr}
 800ea32:	4d07      	ldr	r5, [pc, #28]	; (800ea50 <_kill_r+0x20>)
 800ea34:	2300      	movs	r3, #0
 800ea36:	4604      	mov	r4, r0
 800ea38:	4608      	mov	r0, r1
 800ea3a:	4611      	mov	r1, r2
 800ea3c:	602b      	str	r3, [r5, #0]
 800ea3e:	f7f3 fc91 	bl	8002364 <_kill>
 800ea42:	1c43      	adds	r3, r0, #1
 800ea44:	d102      	bne.n	800ea4c <_kill_r+0x1c>
 800ea46:	682b      	ldr	r3, [r5, #0]
 800ea48:	b103      	cbz	r3, 800ea4c <_kill_r+0x1c>
 800ea4a:	6023      	str	r3, [r4, #0]
 800ea4c:	bd38      	pop	{r3, r4, r5, pc}
 800ea4e:	bf00      	nop
 800ea50:	2000050c 	.word	0x2000050c

0800ea54 <_getpid_r>:
 800ea54:	f7f3 bc7e 	b.w	8002354 <_getpid>

0800ea58 <__submore>:
 800ea58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea5c:	460c      	mov	r4, r1
 800ea5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ea60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea64:	4299      	cmp	r1, r3
 800ea66:	d11d      	bne.n	800eaa4 <__submore+0x4c>
 800ea68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ea6c:	f7fa fbc8 	bl	8009200 <_malloc_r>
 800ea70:	b918      	cbnz	r0, 800ea7a <__submore+0x22>
 800ea72:	f04f 30ff 	mov.w	r0, #4294967295
 800ea76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea7e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ea80:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ea84:	6360      	str	r0, [r4, #52]	; 0x34
 800ea86:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ea8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ea8e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ea92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ea96:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ea9a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ea9e:	6020      	str	r0, [r4, #0]
 800eaa0:	2000      	movs	r0, #0
 800eaa2:	e7e8      	b.n	800ea76 <__submore+0x1e>
 800eaa4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800eaa6:	0077      	lsls	r7, r6, #1
 800eaa8:	463a      	mov	r2, r7
 800eaaa:	f7ff fbf3 	bl	800e294 <_realloc_r>
 800eaae:	4605      	mov	r5, r0
 800eab0:	2800      	cmp	r0, #0
 800eab2:	d0de      	beq.n	800ea72 <__submore+0x1a>
 800eab4:	eb00 0806 	add.w	r8, r0, r6
 800eab8:	4601      	mov	r1, r0
 800eaba:	4632      	mov	r2, r6
 800eabc:	4640      	mov	r0, r8
 800eabe:	f7fe fa9d 	bl	800cffc <memcpy>
 800eac2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800eac6:	f8c4 8000 	str.w	r8, [r4]
 800eaca:	e7e9      	b.n	800eaa0 <__submore+0x48>

0800eacc <_malloc_usable_size_r>:
 800eacc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ead0:	1f18      	subs	r0, r3, #4
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	bfbc      	itt	lt
 800ead6:	580b      	ldrlt	r3, [r1, r0]
 800ead8:	18c0      	addlt	r0, r0, r3
 800eada:	4770      	bx	lr

0800eadc <_init>:
 800eadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eade:	bf00      	nop
 800eae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eae2:	bc08      	pop	{r3}
 800eae4:	469e      	mov	lr, r3
 800eae6:	4770      	bx	lr

0800eae8 <_fini>:
 800eae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaea:	bf00      	nop
 800eaec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaee:	bc08      	pop	{r3}
 800eaf0:	469e      	mov	lr, r3
 800eaf2:	4770      	bx	lr
