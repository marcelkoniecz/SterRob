
stmProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f48  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080070d0  080070d0  000170d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007118  08007118  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007118  08007118  00017118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007120  08007120  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007124  08007124  00017124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000000c  08007134  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08007134  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186db  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036af  00000000  00000000  00038717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  0003bdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  0003d448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b747  00000000  00000000  0003e920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a32b  00000000  00000000  0006a067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110043  00000000  00000000  00084392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001943d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff4  00000000  00000000  00194428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080070b8 	.word	0x080070b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080070b8 	.word	0x080070b8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468e      	mov	lr, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14d      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4694      	mov	ip, r2
 8000a46:	d969      	bls.n	8000b1c <__udivmoddi4+0xe8>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b152      	cbz	r2, 8000a64 <__udivmoddi4+0x30>
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	f1c2 0120 	rsb	r1, r2, #32
 8000a56:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a62:	4094      	lsls	r4, r2
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	0c21      	lsrs	r1, r4, #16
 8000a6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a6e:	fa1f f78c 	uxth.w	r7, ip
 8000a72:	fb08 e316 	mls	r3, r8, r6, lr
 8000a76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7a:	fb06 f107 	mul.w	r1, r6, r7
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8a:	f080 811f 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 811c 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb00 f707 	mul.w	r7, r0, r7
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	d90a      	bls.n	8000ac6 <__udivmoddi4+0x92>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab8:	f080 810a 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	f240 8107 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aca:	1be4      	subs	r4, r4, r7
 8000acc:	2600      	movs	r6, #0
 8000ace:	b11d      	cbz	r5, 8000ad8 <__udivmoddi4+0xa4>
 8000ad0:	40d4      	lsrs	r4, r2
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d909      	bls.n	8000af6 <__udivmoddi4+0xc2>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e9c5 0100 	strd	r0, r1, [r5]
 8000aee:	4630      	mov	r0, r6
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	fab3 f683 	clz	r6, r3
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d14a      	bne.n	8000b94 <__udivmoddi4+0x160>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xd4>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80f9 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	469e      	mov	lr, r3
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d0e0      	beq.n	8000ad8 <__udivmoddi4+0xa4>
 8000b16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b1a:	e7dd      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000b1c:	b902      	cbnz	r2, 8000b20 <__udivmoddi4+0xec>
 8000b1e:	deff      	udf	#255	; 0xff
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	f040 8092 	bne.w	8000c4e <__udivmoddi4+0x21a>
 8000b2a:	eba1 010c 	sub.w	r1, r1, ip
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2601      	movs	r6, #1
 8000b38:	0c20      	lsrs	r0, r4, #16
 8000b3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b46:	fb0e f003 	mul.w	r0, lr, r3
 8000b4a:	4288      	cmp	r0, r1
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x12c>
 8000b4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x12a>
 8000b58:	4288      	cmp	r0, r1
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2c0>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	1a09      	subs	r1, r1, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b68:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x156>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x154>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x9a>
 8000b94:	f1c6 0720 	rsb	r7, r6, #32
 8000b98:	40b3      	lsls	r3, r6
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ba6:	fa01 f306 	lsl.w	r3, r1, r6
 8000baa:	431c      	orrs	r4, r3
 8000bac:	40f9      	lsrs	r1, r7
 8000bae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bba:	0c20      	lsrs	r0, r4, #16
 8000bbc:	fa1f fe8c 	uxth.w	lr, ip
 8000bc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bcc:	4288      	cmp	r0, r1
 8000bce:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b8>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4461      	add	r1, ip
 8000bec:	1a09      	subs	r1, r1, r0
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	458e      	cmp	lr, r1
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1e2>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c0e:	458e      	cmp	lr, r1
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4461      	add	r1, ip
 8000c16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c1e:	eba1 010e 	sub.w	r1, r1, lr
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46a6      	mov	lr, r4
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x212>
 8000c2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c32:	eb61 010e 	sbc.w	r1, r1, lr
 8000c36:	fa01 f707 	lsl.w	r7, r1, r7
 8000c3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c3e:	40f1      	lsrs	r1, r6
 8000c40:	431f      	orrs	r7, r3
 8000c42:	e9c5 7100 	strd	r7, r1, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	40d8      	lsrs	r0, r3
 8000c54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c58:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4301      	orrs	r1, r0
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c70:	0c0b      	lsrs	r3, r1, #16
 8000c72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c76:	fb00 f60e 	mul.w	r6, r0, lr
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x260>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b8>
 8000c8c:	429e      	cmp	r6, r3
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b8>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4463      	add	r3, ip
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	b289      	uxth	r1, r1
 8000c98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cba:	3e02      	subs	r6, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0x104>
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e705      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e3      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f8      	b.n	8000ac6 <__udivmoddi4+0x92>
 8000cd4:	454b      	cmp	r3, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f8>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f8>
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1e2>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b8>
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x12c>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e709      	b.n	8000b12 <__udivmoddi4+0xde>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x156>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d2c:	4a2f      	ldr	r2, [pc, #188]	; (8000dec <MX_ADC1_Init+0xe4>)
 8000d2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d30:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d36:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d42:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d48:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d5a:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d60:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d8a:	4817      	ldr	r0, [pc, #92]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000d8c:	f001 fa60 	bl	8002250 <HAL_ADC_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d96:	f000 fa9d 	bl	80012d4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	4810      	ldr	r0, [pc, #64]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000da6:	f002 f9ad 	bl	8003104 <HAL_ADCEx_MultiModeConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000db0:	f000 fa90 	bl	80012d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_ADC1_Init+0xe8>)
 8000db6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db8:	2306      	movs	r3, #6
 8000dba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dc0:	237f      	movs	r3, #127	; 0x7f
 8000dc2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_ADC1_Init+0xe0>)
 8000dd2:	f001 fd29 	bl	8002828 <HAL_ADC_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ddc:	f000 fa7a 	bl	80012d4 <Error_Handler>
  }

}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	; 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000028 	.word	0x20000028
 8000dec:	50040000 	.word	0x50040000
 8000df0:	19200040 	.word	0x19200040

08000df4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a15      	ldr	r2, [pc, #84]	; (8000e68 <HAL_ADC_MspInit+0x74>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d124      	bne.n	8000e60 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_ADC_MspInit+0x78>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_ADC_MspInit+0x78>)
 8000e1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_ADC_MspInit+0x78>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_ADC_MspInit+0x78>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <HAL_ADC_MspInit+0x78>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_ADC_MspInit+0x78>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = SIG_Pin;
 8000e46:	2302      	movs	r3, #2
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e4a:	230b      	movs	r3, #11
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SIG_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5c:	f002 fb4e 	bl	80034fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	50040000 	.word	0x50040000
 8000e6c:	40021000 	.word	0x40021000

08000e70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b44      	ldr	r3, [pc, #272]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a43      	ldr	r2, [pc, #268]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b41      	ldr	r3, [pc, #260]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e9e:	4b3e      	ldr	r3, [pc, #248]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	4a3d      	ldr	r2, [pc, #244]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a37      	ldr	r2, [pc, #220]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4a31      	ldr	r2, [pc, #196]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000ed4:	f043 0310 	orr.w	r3, r3, #16
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a2b      	ldr	r2, [pc, #172]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S0_Pin|S1_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2121      	movs	r1, #33	; 0x21
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f002 fd8b 	bl	8003a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f28:	481c      	ldr	r0, [pc, #112]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000f2a:	f002 fd85 	bl	8003a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S2_Pin|S3_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	21c0      	movs	r1, #192	; 0xc0
 8000f32:	481b      	ldr	r0, [pc, #108]	; (8000fa0 <MX_GPIO_Init+0x130>)
 8000f34:	f002 fd80 	bl	8003a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin;
 8000f38:	2321      	movs	r3, #33	; 0x21
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f52:	f002 fad3 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_Pin;
 8000f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480b      	ldr	r0, [pc, #44]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000f70:	f002 fac4 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = S2_Pin|S3_Pin;
 8000f74:	23c0      	movs	r3, #192	; 0xc0
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_GPIO_Init+0x130>)
 8000f8c:	f002 fab6 	bl	80034fc <HAL_GPIO_Init>

}
 8000f90:	bf00      	nop
 8000f92:	3730      	adds	r7, #48	; 0x30
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	48001000 	.word	0x48001000
 8000fa0:	48000400 	.word	0x48000400

08000fa4 <readMultipleSensors>:

#include "hc4067.h"
#include "main.h"

void readMultipleSensors(ADC_HandleTypeDef *hadc, uint16_t *data, uint8_t num )
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	71fb      	strb	r3, [r7, #7]
	uint16_t  i ;

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb8:	482c      	ldr	r0, [pc, #176]	; (800106c <readMultipleSensors+0xc8>)
 8000fba:	f002 fd3d 	bl	8003a38 <HAL_GPIO_WritePin>


	for(i = 0; i < num; ++i)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	82fb      	strh	r3, [r7, #22]
 8000fc2:	e049      	b.n	8001058 <readMultipleSensors+0xb4>
	{
		HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, (i>>0) & 0x01);
 8000fc4:	8afb      	ldrh	r3, [r7, #22]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f002 fd2f 	bl	8003a38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, (i>>1) & 0x01);
 8000fda:	8afb      	ldrh	r3, [r7, #22]
 8000fdc:	085b      	lsrs	r3, r3, #1
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	2120      	movs	r1, #32
 8000fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff0:	f002 fd22 	bl	8003a38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, (i>>2) & 0x01);
 8000ff4:	8afb      	ldrh	r3, [r7, #22]
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	461a      	mov	r2, r3
 8001004:	2140      	movs	r1, #64	; 0x40
 8001006:	481a      	ldr	r0, [pc, #104]	; (8001070 <readMultipleSensors+0xcc>)
 8001008:	f002 fd16 	bl	8003a38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, (i>>3) & 0x01);
 800100c:	8afb      	ldrh	r3, [r7, #22]
 800100e:	08db      	lsrs	r3, r3, #3
 8001010:	b29b      	uxth	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	461a      	mov	r2, r3
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	4814      	ldr	r0, [pc, #80]	; (8001070 <readMultipleSensors+0xcc>)
 8001020:	f002 fd0a 	bl	8003a38 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001024:	2001      	movs	r0, #1
 8001026:	f000 ff0b 	bl	8001e40 <HAL_Delay>

		HAL_ADC_Start(hadc);
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f001 fa64 	bl	80024f8 <HAL_ADC_Start>

		if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 8001030:	210a      	movs	r1, #10
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f001 fb1a 	bl	800266c <HAL_ADC_PollForConversion>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <readMultipleSensors+0xae>
		{
			data[i] = HAL_ADC_GetValue(hadc);
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f001 fbe4 	bl	800280c <HAL_ADC_GetValue>
 8001044:	4601      	mov	r1, r0
 8001046:	8afb      	ldrh	r3, [r7, #22]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	4413      	add	r3, r2
 800104e:	b28a      	uxth	r2, r1
 8001050:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < num; ++i)
 8001052:	8afb      	ldrh	r3, [r7, #22]
 8001054:	3301      	adds	r3, #1
 8001056:	82fb      	strh	r3, [r7, #22]
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	b29b      	uxth	r3, r3
 800105c:	8afa      	ldrh	r2, [r7, #22]
 800105e:	429a      	cmp	r2, r3
 8001060:	d3b0      	bcc.n	8000fc4 <readMultipleSensors+0x20>
		}
	}
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	48001000 	.word	0x48001000
 8001070:	48000400 	.word	0x48000400
 8001074:	00000000 	.word	0x00000000

08001078 <printData>:

void printData(uint16_t *data, uint8_t num)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
 uint8_t  i;
 float p;

  for(i = 0; i < num; ++i)
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e020      	b.n	80010cc <printData+0x54>
    {
      p = (3.3 * data[i]) / 4095;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f9e9 	bl	800046c <__aeabi_i2d>
 800109a:	a311      	add	r3, pc, #68	; (adr r3, 80010e0 <printData+0x68>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fa4e 	bl	8000540 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	a30e      	add	r3, pc, #56	; (adr r3, 80010e8 <printData+0x70>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	f7ff fb6f 	bl	8000794 <__aeabi_ddiv>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fc51 	bl	8000964 <__aeabi_d2f>
 80010c2:	4603      	mov	r3, r0
 80010c4:	60bb      	str	r3, [r7, #8]
  for(i = 0; i < num; ++i)
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	3301      	adds	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d3da      	bcc.n	800108a <printData+0x12>
   //   printf("Sensor %d: %d (%3.3f)\r\n", i, data[i],p );
    }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	66666666 	.word	0x66666666
 80010e4:	400a6666 	.word	0x400a6666
 80010e8:	00000000 	.word	0x00000000
 80010ec:	40affe00 	.word	0x40affe00

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f000 fe28 	bl	8001d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f832 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fc:	f7ff feb8 	bl	8000e70 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8001100:	f000 f8f4 	bl	80012ec <MX_QUADSPI_Init>
  MX_ADC1_Init();
 8001104:	f7ff fe00 	bl	8000d08 <MX_ADC1_Init>
  MX_RTC_Init();
 8001108:	f000 fb58 	bl	80017bc <MX_RTC_Init>
  MX_TIM2_Init();
 800110c:	f000 fca8 	bl	8001a60 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001110:	f000 fd7c 	bl	8001c0c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001114:	f000 fcf2 	bl	8001afc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	 //Inicjalizacja
	 if (CSP_QUADSPI_Init() != HAL_OK) {
 8001118:	f000 f970 	bl	80013fc <CSP_QUADSPI_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <main+0x36>
	 Error_Handler();
 8001122:	f000 f8d7 	bl	80012d4 <Error_Handler>
	 }

	 if (CSP_QSPI_Erase_Chip() != HAL_OK) {
 8001126:	f000 f99f 	bl	8001468 <CSP_QSPI_Erase_Chip>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <main+0x44>
	 Error_Handler();
 8001130:	f000 f8d0 	bl	80012d4 <Error_Handler>
	 }

	 //Ustawienie daty i godziny
	 if (setDate(14, 04, 22, 3))
 8001134:	2303      	movs	r3, #3
 8001136:	2216      	movs	r2, #22
 8001138:	2104      	movs	r1, #4
 800113a:	200e      	movs	r0, #14
 800113c:	f000 fbb6 	bl	80018ac <setDate>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <main+0x5a>
	 Error_Handler();
 8001146:	f000 f8c5 	bl	80012d4 <Error_Handler>
	 if (setTime(0, 33, 17))
 800114a:	2211      	movs	r2, #17
 800114c:	2121      	movs	r1, #33	; 0x21
 800114e:	2000      	movs	r0, #0
 8001150:	f000 fbd2 	bl	80018f8 <setTime>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <main+0x6e>
	 Error_Handler();
 800115a:	f000 f8bb 	bl	80012d4 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800115e:	e7fe      	b.n	800115e <main+0x6e>

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0b8      	sub	sp, #224	; 0xe0
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800116a:	2244      	movs	r2, #68	; 0x44
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f005 ff9a 	bl	80070a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001184:	463b      	mov	r3, r7
 8001186:	2288      	movs	r2, #136	; 0x88
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f005 ff8c 	bl	80070a8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001190:	f002 fc6a 	bl	8003a68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001194:	4b3e      	ldr	r3, [pc, #248]	; (8001290 <SystemClock_Config+0x130>)
 8001196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119a:	4a3d      	ldr	r2, [pc, #244]	; (8001290 <SystemClock_Config+0x130>)
 800119c:	f023 0318 	bic.w	r3, r3, #24
 80011a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80011a4:	2306      	movs	r3, #6
 80011a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2310      	movs	r3, #16
 80011ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011d0:	230a      	movs	r3, #10
 80011d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011d6:	2307      	movs	r3, #7
 80011d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011dc:	2302      	movs	r3, #2
 80011de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 f98f 	bl	8004510 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011f8:	f000 f86c 	bl	80012d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001202:	2303      	movs	r3, #3
 8001204:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800121a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800121e:	2104      	movs	r1, #4
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fd5d 	bl	8004ce0 <HAL_RCC_ClockConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800122c:	f000 f852 	bl	80012d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <SystemClock_Config+0x134>)
 8001232:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001234:	2300      	movs	r3, #0
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001238:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800123c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800123e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001242:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001246:	2302      	movs	r3, #2
 8001248:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800124e:	2308      	movs	r3, #8
 8001250:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001252:	2307      	movs	r3, #7
 8001254:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800125e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001262:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4618      	mov	r0, r3
 8001268:	f003 ff40 	bl	80050ec <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001272:	f000 f82f 	bl	80012d4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001276:	f44f 7000 	mov.w	r0, #512	; 0x200
 800127a:	f002 fc13 	bl	8003aa4 <HAL_PWREx_ControlVoltageScaling>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8001284:	f000 f826 	bl	80012d4 <Error_Handler>
  }
}
 8001288:	bf00      	nop
 800128a:	37e0      	adds	r7, #224	; 0xe0
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000
 8001294:	00024002 	.word	0x00024002

08001298 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
uint16_t data[9];
  if (htim == &htim3 )
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d10c      	bne.n	80012c2 <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
	  readMultipleSensors(&hadc1, data, 9);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	2209      	movs	r2, #9
 80012ae:	4619      	mov	r1, r3
 80012b0:	4807      	ldr	r0, [pc, #28]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80012b2:	f7ff fe77 	bl	8000fa4 <readMultipleSensors>
	  printData(data,9);
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	2109      	movs	r1, #9
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fedb 	bl	8001078 <printData>
  }
}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000140 	.word	0x20000140
 80012d0:	20000028 	.word	0x20000028

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	int a = 10;
 80012da:	230a      	movs	r3, #10
 80012dc:	607b      	str	r3, [r7, #4]
  /* USER CODE END Error_Handler_Debug */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_QUADSPI_Init+0x44>)
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <MX_QUADSPI_Init+0x48>)
 80012f4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_QUADSPI_Init+0x44>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_QUADSPI_Init+0x44>)
 80012fe:	2204      	movs	r2, #4
 8001300:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_QUADSPI_Init+0x44>)
 8001304:	2210      	movs	r2, #16
 8001306:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_QUADSPI_Init+0x44>)
 800130a:	2217      	movs	r2, #23
 800130c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <MX_QUADSPI_Init+0x44>)
 8001310:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001314:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_QUADSPI_Init+0x44>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_QUADSPI_Init+0x44>)
 800131e:	f002 fc17 	bl	8003b50 <HAL_QSPI_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_QUADSPI_Init+0x40>
  {
    Error_Handler();
 8001328:	f7ff ffd4 	bl	80012d4 <Error_Handler>
  }

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000008c 	.word	0x2000008c
 8001334:	a0001000 	.word	0xa0001000

08001338 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_QSPI_MspInit+0x7c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d128      	bne.n	80013ac <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HAL_QSPI_MspInit+0x80>)
 800135c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800135e:	4a16      	ldr	r2, [pc, #88]	; (80013b8 <HAL_QSPI_MspInit+0x80>)
 8001360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001364:	6513      	str	r3, [r2, #80]	; 0x50
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_QSPI_MspInit+0x80>)
 8001368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800136a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_QSPI_MspInit+0x80>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_QSPI_MspInit+0x80>)
 8001378:	f043 0310 	orr.w	r3, r3, #16
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_QSPI_MspInit+0x80>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800138a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800138e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800139c:	230a      	movs	r3, #10
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_QSPI_MspInit+0x84>)
 80013a8:	f002 f8a8 	bl	80034fc <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	; 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	a0001000 	.word	0xa0001000
 80013b8:	40021000 	.word	0x40021000
 80013bc:	48001000 	.word	0x48001000

080013c0 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <HAL_QSPI_MspDeInit+0x30>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d10a      	bne.n	80013e8 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_QSPI_MspDeInit+0x34>)
 80013d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013d6:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_QSPI_MspDeInit+0x34>)
 80013d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013dc:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80013de:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_QSPI_MspDeInit+0x38>)
 80013e4:	f002 fa34 	bl	8003850 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	a0001000 	.word	0xa0001000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48001000 	.word	0x48001000

080013fc <CSP_QUADSPI_Init>:
*/



uint8_t CSP_QUADSPI_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <CSP_QUADSPI_Init+0x64>)
 8001402:	4a18      	ldr	r2, [pc, #96]	; (8001464 <CSP_QUADSPI_Init+0x68>)
 8001404:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8001406:	4816      	ldr	r0, [pc, #88]	; (8001460 <CSP_QUADSPI_Init+0x64>)
 8001408:	f002 fc18 	bl	8003c3c <HAL_QSPI_DeInit>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <CSP_QUADSPI_Init+0x1a>
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e021      	b.n	800145a <CSP_QUADSPI_Init+0x5e>
    }

    MX_QUADSPI_Init();
 8001416:	f7ff ff69 	bl	80012ec <MX_QUADSPI_Init>

    if (QSPI_ResetChip() != HAL_OK) {
 800141a:	f000 f971 	bl	8001700 <QSPI_ResetChip>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <CSP_QUADSPI_Init+0x2c>
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e018      	b.n	800145a <CSP_QUADSPI_Init+0x5e>
    }

    HAL_Delay(1);
 8001428:	2001      	movs	r0, #1
 800142a:	f000 fd09 	bl	8001e40 <HAL_Delay>

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 800142e:	f000 f857 	bl	80014e0 <QSPI_AutoPollingMemReady>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <CSP_QUADSPI_Init+0x40>
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e00e      	b.n	800145a <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
 800143c:	f000 f888 	bl	8001550 <QSPI_WriteEnable>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <CSP_QUADSPI_Init+0x4e>

        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e007      	b.n	800145a <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_Configuration() != HAL_OK) {
 800144a:	f000 f8cb 	bl	80015e4 <QSPI_Configuration>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <CSP_QUADSPI_Init+0x5c>
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <CSP_QUADSPI_Init+0x5e>
    }

    return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000008c 	.word	0x2000008c
 8001464:	a0001000 	.word	0xa0001000

08001468 <CSP_QSPI_Erase_Chip>:


uint8_t CSP_QSPI_Erase_Chip(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08e      	sub	sp, #56	; 0x38
 800146c:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;


    if (QSPI_WriteEnable() != HAL_OK) {
 800146e:	f000 f86f 	bl	8001550 <QSPI_WriteEnable>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <CSP_QSPI_Erase_Chip+0x14>
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e02b      	b.n	80014d4 <CSP_QSPI_Erase_Chip+0x6c>
    }


    /* Erasing Sequence --------------------------------- */
    sCommand.Instruction = BULK_ERASE_CMD;
 800147c:	23c7      	movs	r3, #199	; 0xc7
 800147e:	603b      	str	r3, [r7, #0]
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001484:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148a:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001494:	2300      	movs	r3, #0
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001498:	2300      	movs	r3, #0
 800149a:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    sCommand.Address = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
    sCommand.DataMode = QSPI_DATA_NONE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DummyCycles = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]


    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_MAX_DELAY)
 80014ac:	463b      	mov	r3, r7
 80014ae:	f04f 32ff 	mov.w	r2, #4294967295
 80014b2:	4619      	mov	r1, r3
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <CSP_QSPI_Erase_Chip+0x74>)
 80014b6:	f002 fbe5 	bl	8003c84 <HAL_QSPI_Command>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <CSP_QSPI_Erase_Chip+0x5c>
        != HAL_OK) {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e007      	b.n	80014d4 <CSP_QSPI_Erase_Chip+0x6c>
    }

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 80014c4:	f000 f80c 	bl	80014e0 <QSPI_AutoPollingMemReady>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <CSP_QSPI_Erase_Chip+0x6a>
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <CSP_QSPI_Erase_Chip+0x6c>
    }

    return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3738      	adds	r7, #56	; 0x38
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000008c 	.word	0x2000008c

080014e0 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b094      	sub	sp, #80	; 0x50
 80014e4:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80014e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 80014ec:	2305      	movs	r3, #5
 80014ee:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80014f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001506:	2300      	movs	r3, #0
 8001508:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800150a:	2300      	movs	r3, #0
 800150c:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match = 0x00;
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
    sConfig.Mask = N25Q128A_SR_WIP;
 8001512:	2301      	movs	r3, #1
 8001514:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 800151a:	2301      	movs	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 800151e:	2310      	movs	r3, #16
 8001520:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001522:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001526:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_MAX_DELAY) != HAL_OK)
 8001528:	463a      	mov	r2, r7
 800152a:	f107 0118 	add.w	r1, r7, #24
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	4806      	ldr	r0, [pc, #24]	; (800154c <QSPI_AutoPollingMemReady+0x6c>)
 8001534:	f002 fd3d 	bl	8003fb2 <HAL_QSPI_AutoPolling>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <QSPI_AutoPollingMemReady+0x62>
    {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <QSPI_AutoPollingMemReady+0x64>
    }

    return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3750      	adds	r7, #80	; 0x50
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000008c 	.word	0x2000008c

08001550 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b094      	sub	sp, #80	; 0x50
 8001554:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 800155c:	2306      	movs	r3, #6
 800155e:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001560:	2300      	movs	r3, #0
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001564:	2300      	movs	r3, #0
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 8001568:	2300      	movs	r3, #0
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001574:	2300      	movs	r3, #0
 8001576:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001578:	2300      	movs	r3, #0
 800157a:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800157c:	f107 0318 	add.w	r3, r7, #24
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4619      	mov	r1, r3
 8001586:	4816      	ldr	r0, [pc, #88]	; (80015e0 <QSPI_WriteEnable+0x90>)
 8001588:	f002 fb7c 	bl	8003c84 <HAL_QSPI_Command>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e01f      	b.n	80015d6 <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
 8001596:	2302      	movs	r3, #2
 8001598:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
 800159a:	2302      	movs	r3, #2
 800159c:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 80015a2:	2301      	movs	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 80015a6:	2310      	movs	r3, #16
 80015a8:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80015aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ae:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 80015b0:	2305      	movs	r3, #5
 80015b2:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80015b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 80015ba:	463a      	mov	r2, r7
 80015bc:	f107 0118 	add.w	r1, r7, #24
 80015c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80015c4:	4806      	ldr	r0, [pc, #24]	; (80015e0 <QSPI_WriteEnable+0x90>)
 80015c6:	f002 fcf4 	bl	8003fb2 <HAL_QSPI_AutoPolling>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3750      	adds	r7, #80	; 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000008c 	.word	0x2000008c

080015e4 <QSPI_Configuration>:


/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b092      	sub	sp, #72	; 0x48
 80015e8:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    uint8_t reg;

    /*read configuration register*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80015ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ee:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction = READ_VOL_CFG_REG_CMD;
 80015f0:	2385      	movs	r3, #133	; 0x85
 80015f2:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80015fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800160a:	2300      	movs	r3, #0
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800160e:	2300      	movs	r3, #0
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.NbData = 1;
 8001612:	2301      	movs	r3, #1
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	f241 3288 	movw	r2, #5000	; 0x1388
 800161c:	4619      	mov	r1, r3
 800161e:	4837      	ldr	r0, [pc, #220]	; (80016fc <QSPI_Configuration+0x118>)
 8001620:	f002 fb30 	bl	8003c84 <HAL_QSPI_Command>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <QSPI_Configuration+0x4a>
        != HAL_OK) {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e061      	b.n	80016f2 <QSPI_Configuration+0x10e>
    }


    if (HAL_QSPI_Receive(&hqspi, &reg,
 800162e:	1cfb      	adds	r3, r7, #3
 8001630:	f241 3288 	movw	r2, #5000	; 0x1388
 8001634:	4619      	mov	r1, r3
 8001636:	4831      	ldr	r0, [pc, #196]	; (80016fc <QSPI_Configuration+0x118>)
 8001638:	f002 fc19 	bl	8003e6e <HAL_QSPI_Receive>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <QSPI_Configuration+0x62>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e055      	b.n	80016f2 <QSPI_Configuration+0x10e>
    }



    if (QSPI_WriteEnable() != HAL_OK) {
 8001646:	f7ff ff83 	bl	8001550 <QSPI_WriteEnable>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <QSPI_Configuration+0x70>

        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e04e      	b.n	80016f2 <QSPI_Configuration+0x10e>
    }


    /*set dummy cycles*/
    MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	b25b      	sxtb	r3, r3
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	b25a      	sxtb	r2, r3
 800165e:	23f0      	movs	r3, #240	; 0xf0
 8001660:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800166a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800166c:	647b      	str	r3, [r7, #68]	; 0x44
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800166e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <QSPI_Configuration+0x94>
  {
    return 32U;
 8001674:	2320      	movs	r3, #32
 8001676:	e003      	b.n	8001680 <QSPI_Configuration+0x9c>
  }
  return __builtin_clz(value);
 8001678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800167a:	fab3 f383 	clz	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	4619      	mov	r1, r3
 8001682:	230a      	movs	r3, #10
 8001684:	408b      	lsls	r3, r1
 8001686:	b25b      	sxtb	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	b25b      	sxtb	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	70fb      	strb	r3, [r7, #3]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001694:	61fb      	str	r3, [r7, #28]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800169e:	2300      	movs	r3, #0
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80016a2:	2300      	movs	r3, #0
 80016a4:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 80016a6:	2381      	movs	r3, #129	; 0x81
 80016a8:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80016ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
    sCommand.NbData = 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4619      	mov	r1, r3
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <QSPI_Configuration+0x118>)
 80016c6:	f002 fadd 	bl	8003c84 <HAL_QSPI_Command>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <QSPI_Configuration+0xf0>
        != HAL_OK) {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e00e      	b.n	80016f2 <QSPI_Configuration+0x10e>
    }

    if (HAL_QSPI_Transmit(&hqspi, &reg,
 80016d4:	1cfb      	adds	r3, r7, #3
 80016d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016da:	4619      	mov	r1, r3
 80016dc:	4807      	ldr	r0, [pc, #28]	; (80016fc <QSPI_Configuration+0x118>)
 80016de:	f002 fb2f 	bl	8003d40 <HAL_QSPI_Transmit>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <QSPI_Configuration+0x10c>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        Error_Handler();
 80016e8:	f7ff fdf4 	bl	80012d4 <Error_Handler>
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <QSPI_Configuration+0x10e>
    }
    return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3748      	adds	r7, #72	; 0x48
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000008c 	.word	0x2000008c

08001700 <QSPI_ResetChip>:
    }
    return HAL_OK;
}

uint8_t QSPI_ResetChip()
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b090      	sub	sp, #64	; 0x40
 8001704:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800170a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170e:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001714:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800171e:	2300      	movs	r3, #0
 8001720:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001722:	2300      	movs	r3, #0
 8001724:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 8001726:	2366      	movs	r3, #102	; 0x66
 8001728:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	4619      	mov	r1, r3
 8001742:	481d      	ldr	r0, [pc, #116]	; (80017b8 <QSPI_ResetChip+0xb8>)
 8001744:	f002 fa9e 	bl	8003c84 <HAL_QSPI_Command>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e02e      	b.n	80017b0 <QSPI_ResetChip+0xb0>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 8001752:	2300      	movs	r3, #0
 8001754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001756:	e003      	b.n	8001760 <QSPI_ResetChip+0x60>
        __NOP();
 8001758:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 800175a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800175c:	3301      	adds	r3, #1
 800175e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001762:	2b2e      	cmp	r3, #46	; 0x2e
 8001764:	d9f8      	bls.n	8001758 <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800176a:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800176c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001770:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800177a:	2300      	movs	r3, #0
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800177e:	2300      	movs	r3, #0
 8001780:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_MEMORY_CMD;
 8001782:	2399      	movs	r3, #153	; 0x99
 8001784:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4619      	mov	r1, r3
 800179e:	4806      	ldr	r0, [pc, #24]	; (80017b8 <QSPI_ResetChip+0xb8>)
 80017a0:	f002 fa70 	bl	8003c84 <HAL_QSPI_Command>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <QSPI_ResetChip+0xb0>
    }
    return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3740      	adds	r7, #64	; 0x40
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	2000008c 	.word	0x2000008c

080017bc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80017d0:	2300      	movs	r3, #0
 80017d2:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <MX_RTC_Init+0xb0>)
 80017d6:	4a26      	ldr	r2, [pc, #152]	; (8001870 <MX_RTC_Init+0xb4>)
 80017d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <MX_RTC_Init+0xb0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017e0:	4b22      	ldr	r3, [pc, #136]	; (800186c <MX_RTC_Init+0xb0>)
 80017e2:	227f      	movs	r2, #127	; 0x7f
 80017e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <MX_RTC_Init+0xb0>)
 80017e8:	22ff      	movs	r2, #255	; 0xff
 80017ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <MX_RTC_Init+0xb0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017f2:	4b1e      	ldr	r3, [pc, #120]	; (800186c <MX_RTC_Init+0xb0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017f8:	4b1c      	ldr	r3, [pc, #112]	; (800186c <MX_RTC_Init+0xb0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <MX_RTC_Init+0xb0>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001804:	4819      	ldr	r0, [pc, #100]	; (800186c <MX_RTC_Init+0xb0>)
 8001806:	f004 f92d 	bl	8005a64 <HAL_RTC_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001810:	f7ff fd60 	bl	80012d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2200      	movs	r2, #0
 800182c:	4619      	mov	r1, r3
 800182e:	480f      	ldr	r0, [pc, #60]	; (800186c <MX_RTC_Init+0xb0>)
 8001830:	f004 f993 	bl	8005b5a <HAL_RTC_SetTime>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800183a:	f7ff fd4b 	bl	80012d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800183e:	2301      	movs	r3, #1
 8001840:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001842:	2301      	movs	r3, #1
 8001844:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001846:	2301      	movs	r3, #1
 8001848:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800184e:	463b      	mov	r3, r7
 8001850:	2200      	movs	r2, #0
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_RTC_Init+0xb0>)
 8001856:	f004 fa1d 	bl	8005c94 <HAL_RTC_SetDate>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001860:	f7ff fd38 	bl	80012d4 <Error_Handler>
  }

}
 8001864:	bf00      	nop
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200000d0 	.word	0x200000d0
 8001870:	40002800 	.word	0x40002800

08001874 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_RTC_MspInit+0x30>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d107      	bne.n	8001896 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_RTC_MspInit+0x34>)
 8001888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188c:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <HAL_RTC_MspInit+0x34>)
 800188e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40002800 	.word	0x40002800
 80018a8:	40021000 	.word	0x40021000

080018ac <setDate>:
  /* USER CODE END RTC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint8_t setDate(int day, int month, int year, int weekDay) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
	RTC_DateTypeDef Date;
	Date.Date = day;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	75bb      	strb	r3, [r7, #22]
	Date.Month = month;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	757b      	strb	r3, [r7, #21]
	Date.WeekDay = weekDay;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	753b      	strb	r3, [r7, #20]
	Date.Year = year;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	75fb      	strb	r3, [r7, #23]

	if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) == HAL_OK)
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	2200      	movs	r2, #0
 80018d8:	4619      	mov	r1, r3
 80018da:	4806      	ldr	r0, [pc, #24]	; (80018f4 <setDate+0x48>)
 80018dc:	f004 f9da 	bl	8005c94 <HAL_RTC_SetDate>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <setDate+0x3e>
		return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <setDate+0x40>
	else
		return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1

}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200000d0 	.word	0x200000d0

080018f8 <setTime>:
uint8_t setTime(int sec, int min, int hour) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
	RTC_TimeTypeDef Time;
	Time.Seconds = sec;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	75bb      	strb	r3, [r7, #22]
	Time.Minutes = min;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	757b      	strb	r3, [r7, #21]
	Time.Hours = hour;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	753b      	strb	r3, [r7, #20]

	if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	2200      	movs	r2, #0
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <setTime+0x40>)
 8001920:	f004 f91b 	bl	8005b5a <HAL_RTC_SetTime>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <setTime+0x36>
		return HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	e000      	b.n	8001930 <setTime+0x38>
	else
		return HAL_ERROR;
 800192e:	2301      	movs	r3, #1

}
 8001930:	4618      	mov	r0, r3
 8001932:	3728      	adds	r7, #40	; 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200000d0 	.word	0x200000d0

0800193c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_MspInit+0x44>)
 8001944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_MspInit+0x44>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6613      	str	r3, [r2, #96]	; 0x60
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_MspInit+0x44>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_MspInit+0x44>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_MspInit+0x44>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6593      	str	r3, [r2, #88]	; 0x58
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_MspInit+0x44>)
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <MemManage_Handler+0x4>

0800199e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <UsageFault_Handler+0x4>

080019aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d8:	f000 fa12 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <TIM3_IRQHandler+0x10>)
 80019e6:	f004 faea 	bl	8005fbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000140 	.word	0x20000140

080019f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <SystemInit+0x64>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	4a16      	ldr	r2, [pc, #88]	; (8001a58 <SystemInit+0x64>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <SystemInit+0x68>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a13      	ldr	r2, [pc, #76]	; (8001a5c <SystemInit+0x68>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <SystemInit+0x68>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <SystemInit+0x68>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <SystemInit+0x68>)
 8001a20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <SystemInit+0x68>)
 8001a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <SystemInit+0x68>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <SystemInit+0x68>)
 8001a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <SystemInit+0x68>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SystemInit+0x64>)
 8001a46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a4a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00
 8001a5c:	40021000 	.word	0x40021000

08001a60 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <MX_TIM2_Init+0x98>)
 8001a80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <MX_TIM2_Init+0x98>)
 8001a88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <MX_TIM2_Init+0x98>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <MX_TIM2_Init+0x98>)
 8001a96:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_TIM2_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_TIM2_Init+0x98>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aa8:	4813      	ldr	r0, [pc, #76]	; (8001af8 <MX_TIM2_Init+0x98>)
 8001aaa:	f004 fa31 	bl	8005f10 <HAL_TIM_Base_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001ab4:	f7ff fc0e 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <MX_TIM2_Init+0x98>)
 8001ac6:	f004 fb99 	bl	80061fc <HAL_TIM_ConfigClockSource>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001ad0:	f7ff fc00 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ad4:	2320      	movs	r3, #32
 8001ad6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_TIM2_Init+0x98>)
 8001ae2:	f004 fdad 	bl	8006640 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001aec:	f7ff fbf2 	bl	80012d4 <Error_Handler>
  }

}
 8001af0:	bf00      	nop
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200000f4 	.word	0x200000f4

08001afc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b1c:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <MX_TIM3_Init+0x9c>)
 8001b1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8001b20:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b22:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001b26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b30:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b42:	4814      	ldr	r0, [pc, #80]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b44:	f004 f9e4 	bl	8005f10 <HAL_TIM_Base_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001b4e:	f7ff fbc1 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b60:	f004 fb4c 	bl	80061fc <HAL_TIM_ConfigClockSource>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001b6a:	f7ff fbb3 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4806      	ldr	r0, [pc, #24]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b7c:	f004 fd60 	bl	8006640 <HAL_TIMEx_MasterConfigSynchronization>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001b86:	f7ff fba5 	bl	80012d4 <Error_Handler>
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000140 	.word	0x20000140
 8001b98:	40000400 	.word	0x40000400

08001b9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bac:	d10c      	bne.n	8001bc8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_TIM_Base_MspInit+0x68>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <HAL_TIM_Base_MspInit+0x68>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_TIM_Base_MspInit+0x68>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001bc6:	e018      	b.n	8001bfa <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <HAL_TIM_Base_MspInit+0x6c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d113      	bne.n	8001bfa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_TIM_Base_MspInit+0x68>)
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <HAL_TIM_Base_MspInit+0x68>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_TIM_Base_MspInit+0x68>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	201d      	movs	r0, #29
 8001bf0:	f001 fc0f 	bl	8003412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bf4:	201d      	movs	r0, #29
 8001bf6:	f001 fc28 	bl	800344a <HAL_NVIC_EnableIRQ>
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40000400 	.word	0x40000400

08001c0c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c12:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <MX_USART2_UART_Init+0x5c>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c50:	f004 fd9c 	bl	800678c <HAL_UART_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c5a:	f7ff fb3b 	bl	80012d4 <Error_Handler>
  }

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000018c 	.word	0x2000018c
 8001c68:	40004400 	.word	0x40004400

08001c6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <HAL_UART_MspInit+0x7c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d127      	bne.n	8001cde <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_UART_MspInit+0x80>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	4a16      	ldr	r2, [pc, #88]	; (8001cec <HAL_UART_MspInit+0x80>)
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	6593      	str	r3, [r2, #88]	; 0x58
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_UART_MspInit+0x80>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_UART_MspInit+0x80>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	4a10      	ldr	r2, [pc, #64]	; (8001cec <HAL_UART_MspInit+0x80>)
 8001cac:	f043 0308 	orr.w	r3, r3, #8
 8001cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_UART_MspInit+0x80>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cbe:	2360      	movs	r3, #96	; 0x60
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_UART_MspInit+0x84>)
 8001cda:	f001 fc0f 	bl	80034fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cde:	bf00      	nop
 8001ce0:	3728      	adds	r7, #40	; 0x28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40004400 	.word	0x40004400
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	48000c00 	.word	0x48000c00

08001cf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cf8:	f7ff fe7c 	bl	80019f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cfc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cfe:	e003      	b.n	8001d08 <LoopCopyDataInit>

08001d00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d06:	3104      	adds	r1, #4

08001d08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d08:	480a      	ldr	r0, [pc, #40]	; (8001d34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d10:	d3f6      	bcc.n	8001d00 <CopyDataInit>
	ldr	r2, =_sbss
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d14:	e002      	b.n	8001d1c <LoopFillZerobss>

08001d16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d18:	f842 3b04 	str.w	r3, [r2], #4

08001d1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <LoopForever+0x16>)
	cmp	r2, r3
 8001d1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d20:	d3f9      	bcc.n	8001d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d22:	f005 f99d 	bl	8007060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d26:	f7ff f9e3 	bl	80010f0 <main>

08001d2a <LoopForever>:

LoopForever:
    b LoopForever
 8001d2a:	e7fe      	b.n	8001d2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d2c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001d30:	08007128 	.word	0x08007128
	ldr	r0, =_sdata
 8001d34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d38:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001d3c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001d40:	20000210 	.word	0x20000210

08001d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC1_2_IRQHandler>
	...

08001d48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_Init+0x3c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <HAL_Init+0x3c>)
 8001d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d5e:	2003      	movs	r0, #3
 8001d60:	f001 fb4c 	bl	80033fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 f80f 	bl	8001d88 <HAL_InitTick>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	e001      	b.n	8001d7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d76:	f7ff fde1 	bl	800193c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40022000 	.word	0x40022000

08001d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <HAL_InitTick+0x6c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d023      	beq.n	8001de4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <HAL_InitTick+0x70>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <HAL_InitTick+0x6c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 fb57 	bl	8003466 <HAL_SYSTICK_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10f      	bne.n	8001dde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d809      	bhi.n	8001dd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f001 fb21 	bl	8003412 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_InitTick+0x74>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e007      	b.n	8001de8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e004      	b.n	8001de8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	73fb      	strb	r3, [r7, #15]
 8001de2:	e001      	b.n	8001de8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000008 	.word	0x20000008
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000004 	.word	0x20000004

08001e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x20>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x24>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <HAL_IncTick+0x24>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000008 	.word	0x20000008
 8001e24:	2000020c 	.word	0x2000020c

08001e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_GetTick+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	2000020c 	.word	0x2000020c

08001e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff ffee 	bl	8001e28 <HAL_GetTick>
 8001e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d005      	beq.n	8001e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_Delay+0x44>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e66:	bf00      	nop
 8001e68:	f7ff ffde 	bl	8001e28 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d8f7      	bhi.n	8001e68 <HAL_Delay+0x28>
  {
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000008 	.word	0x20000008

08001e88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3360      	adds	r3, #96	; 0x60
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <LL_ADC_SetOffset+0x44>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f28:	bf00      	nop
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	03fff000 	.word	0x03fff000

08001f38 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3360      	adds	r3, #96	; 0x60
 8001f46:	461a      	mov	r2, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3360      	adds	r3, #96	; 0x60
 8001f74:	461a      	mov	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f8e:	bf00      	nop
 8001f90:	371c      	adds	r7, #28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3330      	adds	r3, #48	; 0x30
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	4413      	add	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 031f 	and.w	r3, r3, #31
 8001fea:	211f      	movs	r1, #31
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	0e9b      	lsrs	r3, r3, #26
 8001ff8:	f003 011f 	and.w	r1, r3, #31
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	431a      	orrs	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800200c:	bf00      	nop
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3314      	adds	r3, #20
 8002028:	461a      	mov	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	0e5b      	lsrs	r3, r3, #25
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	4413      	add	r3, r2
 8002036:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	0d1b      	lsrs	r3, r3, #20
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2107      	movs	r1, #7
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	401a      	ands	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	0d1b      	lsrs	r3, r3, #20
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	431a      	orrs	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002088:	43db      	mvns	r3, r3
 800208a:	401a      	ands	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0318 	and.w	r3, r3, #24
 8002092:	4908      	ldr	r1, [pc, #32]	; (80020b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002094:	40d9      	lsrs	r1, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	400b      	ands	r3, r1
 800209a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209e:	431a      	orrs	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	0007ffff 	.word	0x0007ffff

080020b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 031f 	and.w	r3, r3, #31
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002100:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6093      	str	r3, [r2, #8]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002128:	d101      	bne.n	800212e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800214c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002150:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002174:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002178:	d101      	bne.n	800217e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800219c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <LL_ADC_IsEnabled+0x18>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <LL_ADC_IsEnabled+0x1a>
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021ee:	f043 0204 	orr.w	r2, r3, #4
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b04      	cmp	r3, #4
 8002214:	d101      	bne.n	800221a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b08      	cmp	r3, #8
 800223a:	d101      	bne.n	8002240 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800225c:	2300      	movs	r3, #0
 800225e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e134      	b.n	80024d4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7fe fdbb 	bl	8000df4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff3f 	bl	8002114 <LL_ADC_IsDeepPowerDownEnabled>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d004      	beq.n	80022a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff25 	bl	80020f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff5a 	bl	8002164 <LL_ADC_IsInternalRegulatorEnabled>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d113      	bne.n	80022de <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ff3e 	bl	800213c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80022c0:	4b86      	ldr	r3, [pc, #536]	; (80024dc <HAL_ADC_Init+0x28c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	099b      	lsrs	r3, r3, #6
 80022c6:	4a86      	ldr	r2, [pc, #536]	; (80024e0 <HAL_ADC_Init+0x290>)
 80022c8:	fba2 2303 	umull	r2, r3, r2, r3
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022d0:	e002      	b.n	80022d8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f9      	bne.n	80022d2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff ff3e 	bl	8002164 <LL_ADC_IsInternalRegulatorEnabled>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10d      	bne.n	800230a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f2:	f043 0210 	orr.w	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ff77 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 8002314:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 80cf 	bne.w	80024c2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 80cb 	bne.w	80024c2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002330:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002334:	f043 0202 	orr.w	r2, r3, #2
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff37 	bl	80021b4 <LL_ADC_IsEnabled>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d115      	bne.n	8002378 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800234c:	4865      	ldr	r0, [pc, #404]	; (80024e4 <HAL_ADC_Init+0x294>)
 800234e:	f7ff ff31 	bl	80021b4 <LL_ADC_IsEnabled>
 8002352:	4604      	mov	r4, r0
 8002354:	4864      	ldr	r0, [pc, #400]	; (80024e8 <HAL_ADC_Init+0x298>)
 8002356:	f7ff ff2d 	bl	80021b4 <LL_ADC_IsEnabled>
 800235a:	4603      	mov	r3, r0
 800235c:	431c      	orrs	r4, r3
 800235e:	4863      	ldr	r0, [pc, #396]	; (80024ec <HAL_ADC_Init+0x29c>)
 8002360:	f7ff ff28 	bl	80021b4 <LL_ADC_IsEnabled>
 8002364:	4603      	mov	r3, r0
 8002366:	4323      	orrs	r3, r4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d105      	bne.n	8002378 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4619      	mov	r1, r3
 8002372:	485f      	ldr	r0, [pc, #380]	; (80024f0 <HAL_ADC_Init+0x2a0>)
 8002374:	f7ff fd88 	bl	8001e88 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7e5b      	ldrb	r3, [r3, #25]
 800237c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002382:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002388:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800238e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002396:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d106      	bne.n	80023b4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	3b01      	subs	r3, #1
 80023ac:	045b      	lsls	r3, r3, #17
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d009      	beq.n	80023d0 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <HAL_ADC_Init+0x2a4>)
 80023d8:	4013      	ands	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	69b9      	ldr	r1, [r7, #24]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff0a 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 80023ee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff17 	bl	8002228 <LL_ADC_INJ_IsConversionOngoing>
 80023fa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d13d      	bne.n	800247e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d13a      	bne.n	800247e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800240c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002414:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002424:	f023 0302 	bic.w	r3, r3, #2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	69b9      	ldr	r1, [r7, #24]
 800242e:	430b      	orrs	r3, r1
 8002430:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002438:	2b01      	cmp	r3, #1
 800243a:	d118      	bne.n	800246e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002446:	f023 0304 	bic.w	r3, r3, #4
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002452:	4311      	orrs	r1, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800245e:	430a      	orrs	r2, r1
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	611a      	str	r2, [r3, #16]
 800246c:	e007      	b.n	800247e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d10c      	bne.n	80024a0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f023 010f 	bic.w	r1, r3, #15
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	1e5a      	subs	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
 800249e:	e007      	b.n	80024b0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 020f 	bic.w	r2, r2, #15
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	f023 0303 	bic.w	r3, r3, #3
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	655a      	str	r2, [r3, #84]	; 0x54
 80024c0:	e007      	b.n	80024d2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c6:	f043 0210 	orr.w	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3724      	adds	r7, #36	; 0x24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd90      	pop	{r4, r7, pc}
 80024dc:	20000000 	.word	0x20000000
 80024e0:	053e2d63 	.word	0x053e2d63
 80024e4:	50040000 	.word	0x50040000
 80024e8:	50040100 	.word	0x50040100
 80024ec:	50040200 	.word	0x50040200
 80024f0:	50040300 	.word	0x50040300
 80024f4:	fff0c007 	.word	0xfff0c007

080024f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002500:	4857      	ldr	r0, [pc, #348]	; (8002660 <HAL_ADC_Start+0x168>)
 8002502:	f7ff fdd9 	bl	80020b8 <LL_ADC_GetMultimode>
 8002506:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fe78 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 809c 	bne.w	8002652 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_ADC_Start+0x30>
 8002524:	2302      	movs	r3, #2
 8002526:	e097      	b.n	8002658 <HAL_ADC_Start+0x160>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fd67 	bl	8003004 <ADC_Enable>
 8002536:	4603      	mov	r3, r0
 8002538:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 8083 	bne.w	8002648 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a42      	ldr	r2, [pc, #264]	; (8002664 <HAL_ADC_Start+0x16c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d002      	beq.n	8002566 <HAL_ADC_Start+0x6e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	e000      	b.n	8002568 <HAL_ADC_Start+0x70>
 8002566:	4b40      	ldr	r3, [pc, #256]	; (8002668 <HAL_ADC_Start+0x170>)
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	4293      	cmp	r3, r2
 800256e:	d002      	beq.n	8002576 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d105      	bne.n	8002582 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258e:	d106      	bne.n	800259e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	f023 0206 	bic.w	r2, r3, #6
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	659a      	str	r2, [r3, #88]	; 0x58
 800259c:	e002      	b.n	80025a4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	221c      	movs	r2, #28
 80025aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2a      	ldr	r2, [pc, #168]	; (8002664 <HAL_ADC_Start+0x16c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d002      	beq.n	80025c4 <HAL_ADC_Start+0xcc>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	e000      	b.n	80025c6 <HAL_ADC_Start+0xce>
 80025c4:	4b28      	ldr	r3, [pc, #160]	; (8002668 <HAL_ADC_Start+0x170>)
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d008      	beq.n	80025e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d002      	beq.n	80025e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b09      	cmp	r3, #9
 80025de:	d114      	bne.n	800260a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fde9 	bl	80021da <LL_ADC_REG_StartConversion>
 8002608:	e025      	b.n	8002656 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a12      	ldr	r2, [pc, #72]	; (8002664 <HAL_ADC_Start+0x16c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d002      	beq.n	8002626 <HAL_ADC_Start+0x12e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	e000      	b.n	8002628 <HAL_ADC_Start+0x130>
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_ADC_Start+0x170>)
 8002628:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00f      	beq.n	8002656 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800263e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	655a      	str	r2, [r3, #84]	; 0x54
 8002646:	e006      	b.n	8002656 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002650:	e001      	b.n	8002656 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002652:	2302      	movs	r3, #2
 8002654:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002656:	7dfb      	ldrb	r3, [r7, #23]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	50040300 	.word	0x50040300
 8002664:	50040100 	.word	0x50040100
 8002668:	50040000 	.word	0x50040000

0800266c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002676:	4862      	ldr	r0, [pc, #392]	; (8002800 <HAL_ADC_PollForConversion+0x194>)
 8002678:	f7ff fd1e 	bl	80020b8 <LL_ADC_GetMultimode>
 800267c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	2b08      	cmp	r3, #8
 8002684:	d102      	bne.n	800268c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002686:	2308      	movs	r3, #8
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	e02a      	b.n	80026e2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b05      	cmp	r3, #5
 8002696:	d002      	beq.n	800269e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b09      	cmp	r3, #9
 800269c:	d111      	bne.n	80026c2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	f043 0220 	orr.w	r2, r3, #32
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e09d      	b.n	80027f8 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026bc:	2304      	movs	r3, #4
 80026be:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026c0:	e00f      	b.n	80026e2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026c2:	484f      	ldr	r0, [pc, #316]	; (8002800 <HAL_ADC_PollForConversion+0x194>)
 80026c4:	f7ff fd06 	bl	80020d4 <LL_ADC_GetMultiDMATransfer>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d2:	f043 0220 	orr.w	r2, r3, #32
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e08c      	b.n	80027f8 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026de:	2304      	movs	r3, #4
 80026e0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80026e2:	f7ff fba1 	bl	8001e28 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026e8:	e01a      	b.n	8002720 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d016      	beq.n	8002720 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80026f2:	f7ff fb99 	bl	8001e28 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d302      	bcc.n	8002708 <HAL_ADC_PollForConversion+0x9c>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10b      	bne.n	8002720 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	f043 0204 	orr.w	r2, r3, #4
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e06b      	b.n	80027f8 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0dd      	beq.n	80026ea <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fc2b 	bl	8001f9a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01c      	beq.n	8002784 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7e5b      	ldrb	r3, [r3, #25]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d118      	bne.n	8002784 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b08      	cmp	r3, #8
 800275e:	d111      	bne.n	8002784 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	f043 0201 	orr.w	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <HAL_ADC_PollForConversion+0x198>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d002      	beq.n	8002794 <HAL_ADC_PollForConversion+0x128>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	e000      	b.n	8002796 <HAL_ADC_PollForConversion+0x12a>
 8002794:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <HAL_ADC_PollForConversion+0x19c>)
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	4293      	cmp	r3, r2
 800279c:	d008      	beq.n	80027b0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b05      	cmp	r3, #5
 80027a8:	d002      	beq.n	80027b0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b09      	cmp	r3, #9
 80027ae:	d104      	bne.n	80027ba <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	e00c      	b.n	80027d4 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a11      	ldr	r2, [pc, #68]	; (8002804 <HAL_ADC_PollForConversion+0x198>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d002      	beq.n	80027ca <HAL_ADC_PollForConversion+0x15e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	e000      	b.n	80027cc <HAL_ADC_PollForConversion+0x160>
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <HAL_ADC_PollForConversion+0x19c>)
 80027cc:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d104      	bne.n	80027e4 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2208      	movs	r2, #8
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	e008      	b.n	80027f6 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d103      	bne.n	80027f6 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	220c      	movs	r2, #12
 80027f4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	50040300 	.word	0x50040300
 8002804:	50040100 	.word	0x50040100
 8002808:	50040000 	.word	0x50040000

0800280c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b0b6      	sub	sp, #216	; 0xd8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x22>
 8002846:	2302      	movs	r3, #2
 8002848:	e3c6      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x7b0>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fcd3 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	f040 83a7 	bne.w	8002fb2 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b05      	cmp	r3, #5
 800286a:	d824      	bhi.n	80028b6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	3b02      	subs	r3, #2
 8002872:	2b03      	cmp	r3, #3
 8002874:	d81b      	bhi.n	80028ae <HAL_ADC_ConfigChannel+0x86>
 8002876:	a201      	add	r2, pc, #4	; (adr r2, 800287c <HAL_ADC_ConfigChannel+0x54>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	0800288d 	.word	0x0800288d
 8002880:	08002895 	.word	0x08002895
 8002884:	0800289d 	.word	0x0800289d
 8002888:	080028a5 	.word	0x080028a5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	220c      	movs	r2, #12
 8002890:	605a      	str	r2, [r3, #4]
          break;
 8002892:	e011      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	2212      	movs	r2, #18
 8002898:	605a      	str	r2, [r3, #4]
          break;
 800289a:	e00d      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2218      	movs	r2, #24
 80028a0:	605a      	str	r2, [r3, #4]
          break;
 80028a2:	e009      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028aa:	605a      	str	r2, [r3, #4]
          break;
 80028ac:	e004      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2206      	movs	r2, #6
 80028b2:	605a      	str	r2, [r3, #4]
          break;
 80028b4:	e000      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80028b6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	f7ff fb7b 	bl	8001fc0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fc97 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 80028d4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fca3 	bl	8002228 <LL_ADC_INJ_IsConversionOngoing>
 80028e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 81a6 	bne.w	8002c3c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f040 81a1 	bne.w	8002c3c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6819      	ldr	r1, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	461a      	mov	r2, r3
 8002908:	f7ff fb86 	bl	8002018 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	08db      	lsrs	r3, r3, #3
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b04      	cmp	r3, #4
 800292c:	d00a      	beq.n	8002944 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6919      	ldr	r1, [r3, #16]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800293e:	f7ff fad7 	bl	8001ef0 <LL_ADC_SetOffset>
 8002942:	e17b      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff faf4 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x148>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fae9 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	f003 021f 	and.w	r2, r3, #31
 800296e:	e01e      	b.n	80029ae <HAL_ADC_ConfigChannel+0x186>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2100      	movs	r1, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fade 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800298e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002992:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8002996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 800299e:	2320      	movs	r3, #32
 80029a0:	e004      	b.n	80029ac <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 80029a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d105      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x19e>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	0e9b      	lsrs	r3, r3, #26
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	e018      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x1d0>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80029ea:	2320      	movs	r3, #32
 80029ec:	e004      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80029ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d106      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff faad 	bl	8001f64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fa91 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x20e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2101      	movs	r1, #1
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fa86 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	0e9b      	lsrs	r3, r3, #26
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	e01e      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x24c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fa7b 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002a64:	2320      	movs	r3, #32
 8002a66:	e004      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002a68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x264>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0e9b      	lsrs	r3, r3, #26
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	e018      	b.n	8002abe <HAL_ADC_ConfigChannel+0x296>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002aa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	e004      	b.n	8002abe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d106      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2101      	movs	r1, #1
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fa4a 	bl	8001f64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fa2e 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x2d4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2102      	movs	r1, #2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fa23 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	0e9b      	lsrs	r3, r3, #26
 8002af6:	f003 021f 	and.w	r2, r3, #31
 8002afa:	e01e      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x312>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2102      	movs	r1, #2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fa18 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	e004      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002b2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d105      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x32a>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	0e9b      	lsrs	r3, r3, #26
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	e016      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x358>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002b72:	2320      	movs	r3, #32
 8002b74:	e004      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d106      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f9e9 	bl	8001f64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2103      	movs	r1, #3
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff f9cd 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x396>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2103      	movs	r1, #3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f9c2 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	0e9b      	lsrs	r3, r3, #26
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	e017      	b.n	8002bee <HAL_ADC_ConfigChannel+0x3c6>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2103      	movs	r1, #3
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff f9b7 	bl	8001f38 <LL_ADC_GetOffsetChannel>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bd8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e003      	b.n	8002bec <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x3de>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	0e9b      	lsrs	r3, r3, #26
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	e011      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x402>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c16:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e003      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d106      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2200      	movs	r2, #0
 8002c34:	2103      	movs	r1, #3
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff f994 	bl	8001f64 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fab7 	bl	80021b4 <LL_ADC_IsEnabled>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f040 813f 	bne.w	8002ecc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f7ff fa08 	bl	8002070 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4a8e      	ldr	r2, [pc, #568]	; (8002ea0 <HAL_ADC_ConfigChannel+0x678>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	f040 8130 	bne.w	8002ecc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10b      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x46c>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0e9b      	lsrs	r3, r3, #26
 8002c82:	3301      	adds	r3, #1
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	2b09      	cmp	r3, #9
 8002c8a:	bf94      	ite	ls
 8002c8c:	2301      	movls	r3, #1
 8002c8e:	2300      	movhi	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	e019      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x4a0>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002cac:	2320      	movs	r3, #32
 8002cae:	e003      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002cb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	2b09      	cmp	r3, #9
 8002cc0:	bf94      	ite	ls
 8002cc2:	2301      	movls	r3, #1
 8002cc4:	2300      	movhi	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d079      	beq.n	8002dc0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d107      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x4c0>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	0e9b      	lsrs	r3, r3, #26
 8002cde:	3301      	adds	r3, #1
 8002ce0:	069b      	lsls	r3, r3, #26
 8002ce2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce6:	e015      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x4ec>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002d00:	2320      	movs	r3, #32
 8002d02:	e003      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	069b      	lsls	r3, r3, #26
 8002d10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x50c>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	0e9b      	lsrs	r3, r3, #26
 8002d26:	3301      	adds	r3, #1
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	e017      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x53c>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d44:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002d4c:	2320      	movs	r3, #32
 8002d4e:	e003      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	2101      	movs	r1, #1
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	ea42 0103 	orr.w	r1, r2, r3
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x562>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	0e9b      	lsrs	r3, r3, #26
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	051b      	lsls	r3, r3, #20
 8002d88:	e018      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x594>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002da2:	2320      	movs	r3, #32
 8002da4:	e003      	b.n	8002dae <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	e080      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d107      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x5b4>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0e9b      	lsrs	r3, r3, #26
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	069b      	lsls	r3, r3, #26
 8002dd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dda:	e015      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x5e0>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002df4:	2320      	movs	r3, #32
 8002df6:	e003      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	3301      	adds	r3, #1
 8002e02:	069b      	lsls	r3, r3, #26
 8002e04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d109      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x600>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	0e9b      	lsrs	r3, r3, #26
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	2101      	movs	r1, #1
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	e017      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x630>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	fa93 f3a3 	rbit	r3, r3
 8002e34:	61fb      	str	r3, [r7, #28]
  return result;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002e40:	2320      	movs	r3, #32
 8002e42:	e003      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	2101      	movs	r1, #1
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	ea42 0103 	orr.w	r1, r2, r3
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10d      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x65c>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	0e9b      	lsrs	r3, r3, #26
 8002e6e:	3301      	adds	r3, #1
 8002e70:	f003 021f 	and.w	r2, r3, #31
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	3b1e      	subs	r3, #30
 8002e7c:	051b      	lsls	r3, r3, #20
 8002e7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e82:	e01d      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x698>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	613b      	str	r3, [r7, #16]
  return result;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d103      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	e005      	b.n	8002eac <HAL_ADC_ConfigChannel+0x684>
 8002ea0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	3301      	adds	r3, #1
 8002eae:	f003 021f 	and.w	r2, r3, #31
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3b1e      	subs	r3, #30
 8002eba:	051b      	lsls	r3, r3, #20
 8002ebc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	6892      	ldr	r2, [r2, #8]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7ff f8a6 	bl	8002018 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d079      	beq.n	8002fcc <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ed8:	4842      	ldr	r0, [pc, #264]	; (8002fe4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002eda:	f7fe fffb 	bl	8001ed4 <LL_ADC_GetCommonPathInternalCh>
 8002ede:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a40      	ldr	r2, [pc, #256]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d12b      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d125      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a3b      	ldr	r2, [pc, #236]	; (8002fec <HAL_ADC_ConfigChannel+0x7c4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d004      	beq.n	8002f0c <HAL_ADC_ConfigChannel+0x6e4>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a3a      	ldr	r2, [pc, #232]	; (8002ff0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d15c      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f14:	4619      	mov	r1, r3
 8002f16:	4833      	ldr	r0, [pc, #204]	; (8002fe4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002f18:	f7fe ffc9 	bl	8001eae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002f1c:	4b35      	ldr	r3, [pc, #212]	; (8002ff4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	4a35      	ldr	r2, [pc, #212]	; (8002ff8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	099a      	lsrs	r2, r3, #6
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f34:	e002      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f9      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f42:	e040      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a2c      	ldr	r2, [pc, #176]	; (8002ffc <HAL_ADC_ConfigChannel+0x7d4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d118      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x758>
 8002f4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d112      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a23      	ldr	r2, [pc, #140]	; (8002fec <HAL_ADC_ConfigChannel+0x7c4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_ADC_ConfigChannel+0x746>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a21      	ldr	r2, [pc, #132]	; (8002ff0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d12d      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f76:	4619      	mov	r1, r3
 8002f78:	481a      	ldr	r0, [pc, #104]	; (8002fe4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002f7a:	f7fe ff98 	bl	8001eae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f7e:	e024      	b.n	8002fca <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1e      	ldr	r2, [pc, #120]	; (8003000 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d120      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d11a      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a14      	ldr	r2, [pc, #80]	; (8002fec <HAL_ADC_ConfigChannel+0x7c4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d115      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fa8:	4619      	mov	r1, r3
 8002faa:	480e      	ldr	r0, [pc, #56]	; (8002fe4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002fac:	f7fe ff7f 	bl	8001eae <LL_ADC_SetCommonPathInternalCh>
 8002fb0:	e00c      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002fc4:	e002      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fc6:	bf00      	nop
 8002fc8:	e000      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fd4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	37d8      	adds	r7, #216	; 0xd8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	80080000 	.word	0x80080000
 8002fe4:	50040300 	.word	0x50040300
 8002fe8:	c7520000 	.word	0xc7520000
 8002fec:	50040000 	.word	0x50040000
 8002ff0:	50040200 	.word	0x50040200
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	053e2d63 	.word	0x053e2d63
 8002ffc:	cb840000 	.word	0xcb840000
 8003000:	80000001 	.word	0x80000001

08003004 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff f8cf 	bl	80021b4 <LL_ADC_IsEnabled>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d146      	bne.n	80030aa <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <ADC_Enable+0xb0>)
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00d      	beq.n	8003046 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	f043 0210 	orr.w	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	f043 0201 	orr.w	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e032      	b.n	80030ac <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff f89e 	bl	800218c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003050:	f7fe feea 	bl	8001e28 <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003056:	e021      	b.n	800309c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff f8a9 	bl	80021b4 <LL_ADC_IsEnabled>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d104      	bne.n	8003072 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f88d 	bl	800218c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003072:	f7fe fed9 	bl	8001e28 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d90d      	bls.n	800309c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003084:	f043 0210 	orr.w	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	f043 0201 	orr.w	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e007      	b.n	80030ac <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d1d6      	bne.n	8003058 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	8000003f 	.word	0x8000003f

080030b8 <LL_ADC_IsEnabled>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <LL_ADC_IsEnabled+0x18>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <LL_ADC_IsEnabled+0x1a>
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <LL_ADC_REG_IsConversionOngoing>:
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d101      	bne.n	80030f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b09f      	sub	sp, #124	; 0x7c
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800311e:	2302      	movs	r3, #2
 8003120:	e08f      	b.n	8003242 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a47      	ldr	r2, [pc, #284]	; (800324c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d102      	bne.n	800313a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003134:	4b46      	ldr	r3, [pc, #280]	; (8003250 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	e001      	b.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e072      	b.n	8003242 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ffbd 	bl	80030de <LL_ADC_REG_IsConversionOngoing>
 8003164:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ffb7 	bl	80030de <LL_ADC_REG_IsConversionOngoing>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d154      	bne.n	8003220 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003178:	2b00      	cmp	r3, #0
 800317a:	d151      	bne.n	8003220 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800317c:	4b35      	ldr	r3, [pc, #212]	; (8003254 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800317e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d02c      	beq.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800319a:	035b      	lsls	r3, r3, #13
 800319c:	430b      	orrs	r3, r1
 800319e:	431a      	orrs	r2, r3
 80031a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031a4:	4829      	ldr	r0, [pc, #164]	; (800324c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80031a6:	f7ff ff87 	bl	80030b8 <LL_ADC_IsEnabled>
 80031aa:	4604      	mov	r4, r0
 80031ac:	4828      	ldr	r0, [pc, #160]	; (8003250 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80031ae:	f7ff ff83 	bl	80030b8 <LL_ADC_IsEnabled>
 80031b2:	4603      	mov	r3, r0
 80031b4:	431c      	orrs	r4, r3
 80031b6:	4828      	ldr	r0, [pc, #160]	; (8003258 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031b8:	f7ff ff7e 	bl	80030b8 <LL_ADC_IsEnabled>
 80031bc:	4603      	mov	r3, r0
 80031be:	4323      	orrs	r3, r4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d137      	bne.n	8003234 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80031c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031cc:	f023 030f 	bic.w	r3, r3, #15
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	6811      	ldr	r1, [r2, #0]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	6892      	ldr	r2, [r2, #8]
 80031d8:	430a      	orrs	r2, r1
 80031da:	431a      	orrs	r2, r3
 80031dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031de:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031e0:	e028      	b.n	8003234 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031ee:	4817      	ldr	r0, [pc, #92]	; (800324c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80031f0:	f7ff ff62 	bl	80030b8 <LL_ADC_IsEnabled>
 80031f4:	4604      	mov	r4, r0
 80031f6:	4816      	ldr	r0, [pc, #88]	; (8003250 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80031f8:	f7ff ff5e 	bl	80030b8 <LL_ADC_IsEnabled>
 80031fc:	4603      	mov	r3, r0
 80031fe:	431c      	orrs	r4, r3
 8003200:	4815      	ldr	r0, [pc, #84]	; (8003258 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003202:	f7ff ff59 	bl	80030b8 <LL_ADC_IsEnabled>
 8003206:	4603      	mov	r3, r0
 8003208:	4323      	orrs	r3, r4
 800320a:	2b00      	cmp	r3, #0
 800320c:	d112      	bne.n	8003234 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800320e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003216:	f023 030f 	bic.w	r3, r3, #15
 800321a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800321c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800321e:	e009      	b.n	8003234 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	f043 0220 	orr.w	r2, r3, #32
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003232:	e000      	b.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003234:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800323e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003242:	4618      	mov	r0, r3
 8003244:	377c      	adds	r7, #124	; 0x7c
 8003246:	46bd      	mov	sp, r7
 8003248:	bd90      	pop	{r4, r7, pc}
 800324a:	bf00      	nop
 800324c:	50040000 	.word	0x50040000
 8003250:	50040100 	.word	0x50040100
 8003254:	50040300 	.word	0x50040300
 8003258:	50040200 	.word	0x50040200

0800325c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <__NVIC_SetPriorityGrouping+0x44>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003278:	4013      	ands	r3, r2
 800327a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800328c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800328e:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	60d3      	str	r3, [r2, #12]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a8:	4b04      	ldr	r3, [pc, #16]	; (80032bc <__NVIC_GetPriorityGrouping+0x18>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	0a1b      	lsrs	r3, r3, #8
 80032ae:	f003 0307 	and.w	r3, r3, #7
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	db0b      	blt.n	80032ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	f003 021f 	and.w	r2, r3, #31
 80032d8:	4907      	ldr	r1, [pc, #28]	; (80032f8 <__NVIC_EnableIRQ+0x38>)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	2001      	movs	r0, #1
 80032e2:	fa00 f202 	lsl.w	r2, r0, r2
 80032e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	e000e100 	.word	0xe000e100

080032fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	6039      	str	r1, [r7, #0]
 8003306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330c:	2b00      	cmp	r3, #0
 800330e:	db0a      	blt.n	8003326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	b2da      	uxtb	r2, r3
 8003314:	490c      	ldr	r1, [pc, #48]	; (8003348 <__NVIC_SetPriority+0x4c>)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	0112      	lsls	r2, r2, #4
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	440b      	add	r3, r1
 8003320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003324:	e00a      	b.n	800333c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	4908      	ldr	r1, [pc, #32]	; (800334c <__NVIC_SetPriority+0x50>)
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	3b04      	subs	r3, #4
 8003334:	0112      	lsls	r2, r2, #4
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	440b      	add	r3, r1
 800333a:	761a      	strb	r2, [r3, #24]
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000e100 	.word	0xe000e100
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003350:	b480      	push	{r7}
 8003352:	b089      	sub	sp, #36	; 0x24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f1c3 0307 	rsb	r3, r3, #7
 800336a:	2b04      	cmp	r3, #4
 800336c:	bf28      	it	cs
 800336e:	2304      	movcs	r3, #4
 8003370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3304      	adds	r3, #4
 8003376:	2b06      	cmp	r3, #6
 8003378:	d902      	bls.n	8003380 <NVIC_EncodePriority+0x30>
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3b03      	subs	r3, #3
 800337e:	e000      	b.n	8003382 <NVIC_EncodePriority+0x32>
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003384:	f04f 32ff 	mov.w	r2, #4294967295
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43da      	mvns	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	401a      	ands	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003398:	f04f 31ff 	mov.w	r1, #4294967295
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	43d9      	mvns	r1, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a8:	4313      	orrs	r3, r2
         );
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3724      	adds	r7, #36	; 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033c8:	d301      	bcc.n	80033ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ca:	2301      	movs	r3, #1
 80033cc:	e00f      	b.n	80033ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ce:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <SysTick_Config+0x40>)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033d6:	210f      	movs	r1, #15
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	f7ff ff8e 	bl	80032fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <SysTick_Config+0x40>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033e6:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <SysTick_Config+0x40>)
 80033e8:	2207      	movs	r2, #7
 80033ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	e000e010 	.word	0xe000e010

080033fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff ff29 	bl	800325c <__NVIC_SetPriorityGrouping>
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b086      	sub	sp, #24
 8003416:	af00      	add	r7, sp, #0
 8003418:	4603      	mov	r3, r0
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003424:	f7ff ff3e 	bl	80032a4 <__NVIC_GetPriorityGrouping>
 8003428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	6978      	ldr	r0, [r7, #20]
 8003430:	f7ff ff8e 	bl	8003350 <NVIC_EncodePriority>
 8003434:	4602      	mov	r2, r0
 8003436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff5d 	bl	80032fc <__NVIC_SetPriority>
}
 8003442:	bf00      	nop
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff31 	bl	80032c0 <__NVIC_EnableIRQ>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ffa2 	bl	80033b8 <SysTick_Config>
 8003474:	4603      	mov	r3, r0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d008      	beq.n	80034a8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2204      	movs	r2, #4
 800349a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e022      	b.n	80034ee <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 020e 	bic.w	r2, r2, #14
 80034b6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0201 	bic.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	f003 021c 	and.w	r2, r3, #28
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	2101      	movs	r1, #1
 80034d6:	fa01 f202 	lsl.w	r2, r1, r2
 80034da:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800350a:	e17f      	b.n	800380c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	2101      	movs	r1, #1
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	fa01 f303 	lsl.w	r3, r1, r3
 8003518:	4013      	ands	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 8171 	beq.w	8003806 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d00b      	beq.n	8003544 <HAL_GPIO_Init+0x48>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d007      	beq.n	8003544 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003538:	2b11      	cmp	r3, #17
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b12      	cmp	r3, #18
 8003542:	d130      	bne.n	80035a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2203      	movs	r2, #3
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800357a:	2201      	movs	r2, #1
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	f003 0201 	and.w	r2, r3, #1
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d118      	bne.n	80035e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80035b8:	2201      	movs	r2, #1
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	08db      	lsrs	r3, r3, #3
 80035ce:	f003 0201 	and.w	r2, r3, #1
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	2203      	movs	r2, #3
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x128>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b12      	cmp	r3, #18
 8003622:	d123      	bne.n	800366c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	08da      	lsrs	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3208      	adds	r2, #8
 800362c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003630:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	220f      	movs	r2, #15
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	08da      	lsrs	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3208      	adds	r2, #8
 8003666:	6939      	ldr	r1, [r7, #16]
 8003668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	2203      	movs	r2, #3
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4013      	ands	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0203 	and.w	r2, r3, #3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80ac 	beq.w	8003806 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ae:	4b5f      	ldr	r3, [pc, #380]	; (800382c <HAL_GPIO_Init+0x330>)
 80036b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b2:	4a5e      	ldr	r2, [pc, #376]	; (800382c <HAL_GPIO_Init+0x330>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6613      	str	r3, [r2, #96]	; 0x60
 80036ba:	4b5c      	ldr	r3, [pc, #368]	; (800382c <HAL_GPIO_Init+0x330>)
 80036bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036c6:	4a5a      	ldr	r2, [pc, #360]	; (8003830 <HAL_GPIO_Init+0x334>)
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	089b      	lsrs	r3, r3, #2
 80036cc:	3302      	adds	r3, #2
 80036ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	220f      	movs	r2, #15
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036f0:	d025      	beq.n	800373e <HAL_GPIO_Init+0x242>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a4f      	ldr	r2, [pc, #316]	; (8003834 <HAL_GPIO_Init+0x338>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d01f      	beq.n	800373a <HAL_GPIO_Init+0x23e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a4e      	ldr	r2, [pc, #312]	; (8003838 <HAL_GPIO_Init+0x33c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d019      	beq.n	8003736 <HAL_GPIO_Init+0x23a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a4d      	ldr	r2, [pc, #308]	; (800383c <HAL_GPIO_Init+0x340>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <HAL_GPIO_Init+0x236>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a4c      	ldr	r2, [pc, #304]	; (8003840 <HAL_GPIO_Init+0x344>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00d      	beq.n	800372e <HAL_GPIO_Init+0x232>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <HAL_GPIO_Init+0x348>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d007      	beq.n	800372a <HAL_GPIO_Init+0x22e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a4a      	ldr	r2, [pc, #296]	; (8003848 <HAL_GPIO_Init+0x34c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_GPIO_Init+0x22a>
 8003722:	2306      	movs	r3, #6
 8003724:	e00c      	b.n	8003740 <HAL_GPIO_Init+0x244>
 8003726:	2307      	movs	r3, #7
 8003728:	e00a      	b.n	8003740 <HAL_GPIO_Init+0x244>
 800372a:	2305      	movs	r3, #5
 800372c:	e008      	b.n	8003740 <HAL_GPIO_Init+0x244>
 800372e:	2304      	movs	r3, #4
 8003730:	e006      	b.n	8003740 <HAL_GPIO_Init+0x244>
 8003732:	2303      	movs	r3, #3
 8003734:	e004      	b.n	8003740 <HAL_GPIO_Init+0x244>
 8003736:	2302      	movs	r3, #2
 8003738:	e002      	b.n	8003740 <HAL_GPIO_Init+0x244>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <HAL_GPIO_Init+0x244>
 800373e:	2300      	movs	r3, #0
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	f002 0203 	and.w	r2, r2, #3
 8003746:	0092      	lsls	r2, r2, #2
 8003748:	4093      	lsls	r3, r2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003750:	4937      	ldr	r1, [pc, #220]	; (8003830 <HAL_GPIO_Init+0x334>)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	089b      	lsrs	r3, r3, #2
 8003756:	3302      	adds	r3, #2
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800375e:	4b3b      	ldr	r3, [pc, #236]	; (800384c <HAL_GPIO_Init+0x350>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	43db      	mvns	r3, r3
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003782:	4a32      	ldr	r2, [pc, #200]	; (800384c <HAL_GPIO_Init+0x350>)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003788:	4b30      	ldr	r3, [pc, #192]	; (800384c <HAL_GPIO_Init+0x350>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	43db      	mvns	r3, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037ac:	4a27      	ldr	r2, [pc, #156]	; (800384c <HAL_GPIO_Init+0x350>)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <HAL_GPIO_Init+0x350>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037d6:	4a1d      	ldr	r2, [pc, #116]	; (800384c <HAL_GPIO_Init+0x350>)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_GPIO_Init+0x350>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003800:	4a12      	ldr	r2, [pc, #72]	; (800384c <HAL_GPIO_Init+0x350>)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	3301      	adds	r3, #1
 800380a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	fa22 f303 	lsr.w	r3, r2, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	f47f ae78 	bne.w	800350c <HAL_GPIO_Init+0x10>
  }
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	40010000 	.word	0x40010000
 8003834:	48000400 	.word	0x48000400
 8003838:	48000800 	.word	0x48000800
 800383c:	48000c00 	.word	0x48000c00
 8003840:	48001000 	.word	0x48001000
 8003844:	48001400 	.word	0x48001400
 8003848:	48001800 	.word	0x48001800
 800384c:	40010400 	.word	0x40010400

08003850 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800385e:	e0cd      	b.n	80039fc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003860:	2201      	movs	r2, #1
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	4013      	ands	r3, r2
 800386c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80c0 	beq.w	80039f6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003876:	4a68      	ldr	r2, [pc, #416]	; (8003a18 <HAL_GPIO_DeInit+0x1c8>)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	3302      	adds	r3, #2
 800387e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003882:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	220f      	movs	r2, #15
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4013      	ands	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800389e:	d025      	beq.n	80038ec <HAL_GPIO_DeInit+0x9c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a5e      	ldr	r2, [pc, #376]	; (8003a1c <HAL_GPIO_DeInit+0x1cc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d01f      	beq.n	80038e8 <HAL_GPIO_DeInit+0x98>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a5d      	ldr	r2, [pc, #372]	; (8003a20 <HAL_GPIO_DeInit+0x1d0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d019      	beq.n	80038e4 <HAL_GPIO_DeInit+0x94>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a5c      	ldr	r2, [pc, #368]	; (8003a24 <HAL_GPIO_DeInit+0x1d4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <HAL_GPIO_DeInit+0x90>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a5b      	ldr	r2, [pc, #364]	; (8003a28 <HAL_GPIO_DeInit+0x1d8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00d      	beq.n	80038dc <HAL_GPIO_DeInit+0x8c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a5a      	ldr	r2, [pc, #360]	; (8003a2c <HAL_GPIO_DeInit+0x1dc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d007      	beq.n	80038d8 <HAL_GPIO_DeInit+0x88>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a59      	ldr	r2, [pc, #356]	; (8003a30 <HAL_GPIO_DeInit+0x1e0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d101      	bne.n	80038d4 <HAL_GPIO_DeInit+0x84>
 80038d0:	2306      	movs	r3, #6
 80038d2:	e00c      	b.n	80038ee <HAL_GPIO_DeInit+0x9e>
 80038d4:	2307      	movs	r3, #7
 80038d6:	e00a      	b.n	80038ee <HAL_GPIO_DeInit+0x9e>
 80038d8:	2305      	movs	r3, #5
 80038da:	e008      	b.n	80038ee <HAL_GPIO_DeInit+0x9e>
 80038dc:	2304      	movs	r3, #4
 80038de:	e006      	b.n	80038ee <HAL_GPIO_DeInit+0x9e>
 80038e0:	2303      	movs	r3, #3
 80038e2:	e004      	b.n	80038ee <HAL_GPIO_DeInit+0x9e>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e002      	b.n	80038ee <HAL_GPIO_DeInit+0x9e>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <HAL_GPIO_DeInit+0x9e>
 80038ec:	2300      	movs	r3, #0
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	f002 0203 	and.w	r2, r2, #3
 80038f4:	0092      	lsls	r2, r2, #2
 80038f6:	4093      	lsls	r3, r2
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d132      	bne.n	8003964 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80038fe:	4b4d      	ldr	r3, [pc, #308]	; (8003a34 <HAL_GPIO_DeInit+0x1e4>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	43db      	mvns	r3, r3
 8003906:	494b      	ldr	r1, [pc, #300]	; (8003a34 <HAL_GPIO_DeInit+0x1e4>)
 8003908:	4013      	ands	r3, r2
 800390a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800390c:	4b49      	ldr	r3, [pc, #292]	; (8003a34 <HAL_GPIO_DeInit+0x1e4>)
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	43db      	mvns	r3, r3
 8003914:	4947      	ldr	r1, [pc, #284]	; (8003a34 <HAL_GPIO_DeInit+0x1e4>)
 8003916:	4013      	ands	r3, r2
 8003918:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800391a:	4b46      	ldr	r3, [pc, #280]	; (8003a34 <HAL_GPIO_DeInit+0x1e4>)
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	43db      	mvns	r3, r3
 8003922:	4944      	ldr	r1, [pc, #272]	; (8003a34 <HAL_GPIO_DeInit+0x1e4>)
 8003924:	4013      	ands	r3, r2
 8003926:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003928:	4b42      	ldr	r3, [pc, #264]	; (8003a34 <HAL_GPIO_DeInit+0x1e4>)
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	43db      	mvns	r3, r3
 8003930:	4940      	ldr	r1, [pc, #256]	; (8003a34 <HAL_GPIO_DeInit+0x1e4>)
 8003932:	4013      	ands	r3, r2
 8003934:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	220f      	movs	r2, #15
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003946:	4a34      	ldr	r2, [pc, #208]	; (8003a18 <HAL_GPIO_DeInit+0x1c8>)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	3302      	adds	r3, #2
 800394e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	43da      	mvns	r2, r3
 8003956:	4830      	ldr	r0, [pc, #192]	; (8003a18 <HAL_GPIO_DeInit+0x1c8>)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	400a      	ands	r2, r1
 800395e:	3302      	adds	r3, #2
 8003960:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	2103      	movs	r1, #3
 800396e:	fa01 f303 	lsl.w	r3, r1, r3
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	08da      	lsrs	r2, r3, #3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3208      	adds	r2, #8
 8003980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	220f      	movs	r2, #15
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	08d2      	lsrs	r2, r2, #3
 8003998:	4019      	ands	r1, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3208      	adds	r2, #8
 800399e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	2103      	movs	r1, #3
 80039ac:	fa01 f303 	lsl.w	r3, r1, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	401a      	ands	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	2101      	movs	r1, #1
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	401a      	ands	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	2103      	movs	r1, #3
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	401a      	ands	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e6:	2101      	movs	r1, #1
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	fa01 f303 	lsl.w	r3, r1, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	401a      	ands	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	3301      	adds	r3, #1
 80039fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f47f af2b 	bne.w	8003860 <HAL_GPIO_DeInit+0x10>
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40010000 	.word	0x40010000
 8003a1c:	48000400 	.word	0x48000400
 8003a20:	48000800 	.word	0x48000800
 8003a24:	48000c00 	.word	0x48000c00
 8003a28:	48001000 	.word	0x48001000
 8003a2c:	48001400 	.word	0x48001400
 8003a30:	48001800 	.word	0x48001800
 8003a34:	40010400 	.word	0x40010400

08003a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
 8003a44:	4613      	mov	r3, r2
 8003a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a48:	787b      	ldrb	r3, [r7, #1]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a54:	e002      	b.n	8003a5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a56:	887a      	ldrh	r2, [r7, #2]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a76:	6013      	str	r3, [r2, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40007000 	.word	0x40007000

08003a88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a8c:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40007000 	.word	0x40007000

08003aa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab2:	d130      	bne.n	8003b16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab4:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac0:	d038      	beq.n	8003b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ac2:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003aca:	4a1e      	ldr	r2, [pc, #120]	; (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003acc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ad0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ad2:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2232      	movs	r2, #50	; 0x32
 8003ad8:	fb02 f303 	mul.w	r3, r2, r3
 8003adc:	4a1b      	ldr	r2, [pc, #108]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	0c9b      	lsrs	r3, r3, #18
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ae8:	e002      	b.n	8003af0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003af0:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afc:	d102      	bne.n	8003b04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f2      	bne.n	8003aea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b10:	d110      	bne.n	8003b34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e00f      	b.n	8003b36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b16:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b22:	d007      	beq.n	8003b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b24:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b2c:	4a05      	ldr	r2, [pc, #20]	; (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40007000 	.word	0x40007000
 8003b48:	20000000 	.word	0x20000000
 8003b4c:	431bde83 	.word	0x431bde83

08003b50 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b58:	f7fe f966 	bl	8001e28 <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e063      	b.n	8003c30 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7fd fbdb 	bl	8001338 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003b82:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 faf7 	bl	800417a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	021a      	lsls	r2, r3, #8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2120      	movs	r1, #32
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 faef 	bl	8004196 <QSPI_WaitFlagStateUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003bbc:	7afb      	ldrb	r3, [r7, #11]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d131      	bne.n	8003c26 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003bcc:	f023 0310 	bic.w	r3, r3, #16
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6852      	ldr	r2, [r2, #4]
 8003bd4:	0611      	lsls	r1, r2, #24
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	68d2      	ldr	r2, [r2, #12]
 8003bda:	4311      	orrs	r1, r2
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <HAL_QSPI_Init+0xe8>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6912      	ldr	r2, [r2, #16]
 8003bf2:	0411      	lsls	r1, r2, #16
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6952      	ldr	r2, [r2, #20]
 8003bf8:	4311      	orrs	r1, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6992      	ldr	r2, [r2, #24]
 8003bfe:	4311      	orrs	r1, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	430b      	orrs	r3, r1
 8003c06:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003c2e:	7afb      	ldrb	r3, [r7, #11]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	ffe0f8fe 	.word	0xffe0f8fe

08003c3c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e016      	b.n	8003c7c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fd fbae 	bl	80013c0 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003c90:	f7fe f8ca 	bl	8001e28 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_QSPI_Command+0x22>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e048      	b.n	8003d38 <HAL_QSPI_Command+0xb4>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d137      	bne.n	8003d2a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2120      	movs	r1, #32
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fa5f 	bl	8004196 <QSPI_WaitFlagStateUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d125      	bne.n	8003d2e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fa8c 	bl	8004204 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d115      	bne.n	8003d20 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	2102      	movs	r1, #2
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fa49 	bl	8004196 <QSPI_WaitFlagStateUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10f      	bne.n	8003d2e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2202      	movs	r2, #2
 8003d14:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003d1e:	e006      	b.n	8003d2e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003d28:	e001      	b.n	8003d2e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08a      	sub	sp, #40	; 0x28
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003d50:	f7fe f86a 	bl	8001e28 <HAL_GetTick>
 8003d54:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3320      	adds	r3, #32
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_QSPI_Transmit+0x2e>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e07b      	b.n	8003e66 <HAL_QSPI_Transmit+0x126>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d16a      	bne.n	8003e58 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d05b      	beq.n	8003e46 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2212      	movs	r2, #18
 8003d92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003dc2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003dc4:	e01b      	b.n	8003dfe <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	2104      	movs	r1, #4
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f9e0 	bl	8004196 <QSPI_WaitFlagStateUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003dda:	7ffb      	ldrb	r3, [r7, #31]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d113      	bne.n	8003e08 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	1e5a      	subs	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1df      	bne.n	8003dc6 <HAL_QSPI_Transmit+0x86>
 8003e06:	e000      	b.n	8003e0a <HAL_QSPI_Transmit+0xca>
          break;
 8003e08:	bf00      	nop
      }

      if (status == HAL_OK)
 8003e0a:	7ffb      	ldrb	r3, [r7, #31]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d115      	bne.n	8003e3c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2201      	movs	r2, #1
 8003e18:	2102      	movs	r1, #2
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f9bb 	bl	8004196 <QSPI_WaitFlagStateUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003e24:	7ffb      	ldrb	r3, [r7, #31]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d108      	bne.n	8003e3c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f934 	bl	80040a0 <HAL_QSPI_Abort>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003e44:	e00a      	b.n	8003e5c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	f043 0208 	orr.w	r2, r3, #8
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	77fb      	strb	r3, [r7, #31]
 8003e56:	e001      	b.n	8003e5c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003e64:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b08a      	sub	sp, #40	; 0x28
 8003e72:	af02      	add	r7, sp, #8
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003e7e:	f7fd ffd3 	bl	8001e28 <HAL_GetTick>
 8003e82:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3320      	adds	r3, #32
 8003e92:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_QSPI_Receive+0x36>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e082      	b.n	8003faa <HAL_QSPI_Receive+0x13c>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d171      	bne.n	8003f9c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d062      	beq.n	8003f8a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2222      	movs	r2, #34	; 0x22
 8003ec8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003efc:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003f06:	e01c      	b.n	8003f42 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	2106      	movs	r1, #6
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f93f 	bl	8004196 <QSPI_WaitFlagStateUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003f1c:	7ffb      	ldrb	r3, [r7, #31]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d114      	bne.n	8003f4c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	7812      	ldrb	r2, [r2, #0]
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	1e5a      	subs	r2, r3, #1
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1de      	bne.n	8003f08 <HAL_QSPI_Receive+0x9a>
 8003f4a:	e000      	b.n	8003f4e <HAL_QSPI_Receive+0xe0>
          break;
 8003f4c:	bf00      	nop
      }

      if (status == HAL_OK)
 8003f4e:	7ffb      	ldrb	r3, [r7, #31]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d115      	bne.n	8003f80 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f919 	bl	8004196 <QSPI_WaitFlagStateUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003f68:	7ffb      	ldrb	r3, [r7, #31]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d108      	bne.n	8003f80 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2202      	movs	r2, #2
 8003f74:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f892 	bl	80040a0 <HAL_QSPI_Abort>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003f88:	e00a      	b.n	8003fa0 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8e:	f043 0208 	orr.w	r2, r3, #8
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	77fb      	strb	r3, [r7, #31]
 8003f9a:	e001      	b.n	8003fa0 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003fa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b088      	sub	sp, #32
 8003fb6:	af02      	add	r7, sp, #8
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003fc0:	f7fd ff32 	bl	8001e28 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_QSPI_AutoPolling+0x24>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e060      	b.n	8004098 <HAL_QSPI_AutoPolling+0xe6>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d14f      	bne.n	800408a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2242      	movs	r2, #66	; 0x42
 8003ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2200      	movs	r2, #0
 8004000:	2120      	movs	r1, #32
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f8c7 	bl	8004196 <QSPI_WaitFlagStateUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d13d      	bne.n	800408e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6852      	ldr	r2, [r2, #4]
 8004024:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6892      	ldr	r2, [r2, #8]
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	431a      	orrs	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004048:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004052:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f8d3 	bl	8004204 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2201      	movs	r2, #1
 8004066:	2108      	movs	r1, #8
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f894 	bl	8004196 <QSPI_WaitFlagStateUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2208      	movs	r2, #8
 800407e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004088:	e001      	b.n	800408e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800408a:	2302      	movs	r3, #2
 800408c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004096:	7dfb      	ldrb	r3, [r7, #23]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80040ac:	f7fd febc 	bl	8001e28 <HAL_GetTick>
 80040b0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d056      	beq.n	8004170 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d017      	beq.n	8004108 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0204 	bic.w	r2, r2, #4
 80040e6:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff f9c6 	bl	800347e <HAL_DMA_Abort>
 80040f2:	4603      	mov	r3, r0
 80040f4:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004100:	f043 0204 	orr.w	r2, r3, #4
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0202 	orr.w	r2, r2, #2
 8004116:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2201      	movs	r2, #1
 8004122:	2102      	movs	r1, #2
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f836 	bl	8004196 <QSPI_WaitFlagStateUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10e      	bne.n	8004152 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2202      	movs	r2, #2
 800413a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2200      	movs	r2, #0
 8004146:	2120      	movs	r1, #32
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f824 	bl	8004196 <QSPI_WaitFlagStateUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004166:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8004170:	7bfb      	ldrb	r3, [r7, #15]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	641a      	str	r2, [r3, #64]	; 0x40
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	603b      	str	r3, [r7, #0]
 80041a2:	4613      	mov	r3, r2
 80041a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041a6:	e01a      	b.n	80041de <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ae:	d016      	beq.n	80041de <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b0:	f7fd fe3a 	bl	8001e28 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d302      	bcc.n	80041c6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2204      	movs	r2, #4
 80041ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d2:	f043 0201 	orr.w	r2, r3, #1
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e00e      	b.n	80041fc <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	bf14      	ite	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	2300      	moveq	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d1d6      	bne.n	80041a8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	d009      	beq.n	800422c <QSPI_Config+0x28>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800421e:	d005      	beq.n	800422c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3a01      	subs	r2, #1
 800422a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80b9 	beq.w	80043a8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d05f      	beq.n	80042fe <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	6892      	ldr	r2, [r2, #8]
 8004246:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d031      	beq.n	80042b4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	431a      	orrs	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425e:	431a      	orrs	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	431a      	orrs	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	049b      	lsls	r3, r3, #18
 800426c:	431a      	orrs	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	431a      	orrs	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	431a      	orrs	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	431a      	orrs	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	431a      	orrs	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	431a      	orrs	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	ea42 0103 	orr.w	r1, r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	430a      	orrs	r2, r1
 800429c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80042a4:	f000 812e 	beq.w	8004504 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	6852      	ldr	r2, [r2, #4]
 80042b0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80042b2:	e127      	b.n	8004504 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	431a      	orrs	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c2:	431a      	orrs	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	049b      	lsls	r3, r3, #18
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	431a      	orrs	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	ea42 0103 	orr.w	r1, r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	615a      	str	r2, [r3, #20]
}
 80042fc:	e102      	b.n	8004504 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d02e      	beq.n	8004364 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	431a      	orrs	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	431a      	orrs	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	431a      	orrs	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	049b      	lsls	r3, r3, #18
 8004322:	431a      	orrs	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	431a      	orrs	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	431a      	orrs	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	431a      	orrs	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	431a      	orrs	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	ea42 0103 	orr.w	r1, r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	430a      	orrs	r2, r1
 800434c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004354:	f000 80d6 	beq.w	8004504 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	6852      	ldr	r2, [r2, #4]
 8004360:	619a      	str	r2, [r3, #24]
}
 8004362:	e0cf      	b.n	8004504 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	431a      	orrs	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	431a      	orrs	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	431a      	orrs	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	049b      	lsls	r3, r3, #18
 8004380:	431a      	orrs	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	431a      	orrs	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	431a      	orrs	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	431a      	orrs	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	ea42 0103 	orr.w	r1, r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	615a      	str	r2, [r3, #20]
}
 80043a6:	e0ad      	b.n	8004504 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d058      	beq.n	8004462 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	6892      	ldr	r2, [r2, #8]
 80043b8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d02d      	beq.n	800441e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	431a      	orrs	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d0:	431a      	orrs	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	431a      	orrs	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	049b      	lsls	r3, r3, #18
 80043de:	431a      	orrs	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	ea42 0103 	orr.w	r1, r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	430a      	orrs	r2, r1
 8004408:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004410:	d078      	beq.n	8004504 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	6852      	ldr	r2, [r2, #4]
 800441a:	619a      	str	r2, [r3, #24]
}
 800441c:	e072      	b.n	8004504 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	431a      	orrs	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442c:	431a      	orrs	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	431a      	orrs	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	049b      	lsls	r3, r3, #18
 800443a:	431a      	orrs	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	431a      	orrs	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	431a      	orrs	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	431a      	orrs	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	ea42 0103 	orr.w	r1, r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	430a      	orrs	r2, r1
 800445e:	615a      	str	r2, [r3, #20]
}
 8004460:	e050      	b.n	8004504 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d02a      	beq.n	80044c0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	431a      	orrs	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004478:	431a      	orrs	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	431a      	orrs	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	049b      	lsls	r3, r3, #18
 8004486:	431a      	orrs	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	431a      	orrs	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	431a      	orrs	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	431a      	orrs	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	ea42 0103 	orr.w	r1, r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80044b2:	d027      	beq.n	8004504 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	6852      	ldr	r2, [r2, #4]
 80044bc:	619a      	str	r2, [r3, #24]
}
 80044be:	e021      	b.n	8004504 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01d      	beq.n	8004504 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	431a      	orrs	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d6:	431a      	orrs	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	431a      	orrs	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	049b      	lsls	r3, r3, #18
 80044e4:	431a      	orrs	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	ea42 0103 	orr.w	r1, r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	430a      	orrs	r2, r1
 8004502:	615a      	str	r2, [r3, #20]
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e3d8      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004522:	4b97      	ldr	r3, [pc, #604]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800452c:	4b94      	ldr	r3, [pc, #592]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 80e4 	beq.w	800470c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <HAL_RCC_OscConfig+0x4a>
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b0c      	cmp	r3, #12
 800454e:	f040 808b 	bne.w	8004668 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b01      	cmp	r3, #1
 8004556:	f040 8087 	bne.w	8004668 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800455a:	4b89      	ldr	r3, [pc, #548]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_RCC_OscConfig+0x62>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e3b0      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1a      	ldr	r2, [r3, #32]
 8004576:	4b82      	ldr	r3, [pc, #520]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d004      	beq.n	800458c <HAL_RCC_OscConfig+0x7c>
 8004582:	4b7f      	ldr	r3, [pc, #508]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800458a:	e005      	b.n	8004598 <HAL_RCC_OscConfig+0x88>
 800458c:	4b7c      	ldr	r3, [pc, #496]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 800458e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004598:	4293      	cmp	r3, r2
 800459a:	d223      	bcs.n	80045e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fd43 	bl	800502c <RCC_SetFlashLatencyFromMSIRange>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e391      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045b0:	4b73      	ldr	r3, [pc, #460]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a72      	ldr	r2, [pc, #456]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80045b6:	f043 0308 	orr.w	r3, r3, #8
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b70      	ldr	r3, [pc, #448]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	496d      	ldr	r1, [pc, #436]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ce:	4b6c      	ldr	r3, [pc, #432]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	4968      	ldr	r1, [pc, #416]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	604b      	str	r3, [r1, #4]
 80045e2:	e025      	b.n	8004630 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045e4:	4b66      	ldr	r3, [pc, #408]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a65      	ldr	r2, [pc, #404]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80045ea:	f043 0308 	orr.w	r3, r3, #8
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	4b63      	ldr	r3, [pc, #396]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	4960      	ldr	r1, [pc, #384]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004602:	4b5f      	ldr	r3, [pc, #380]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	495b      	ldr	r1, [pc, #364]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 8004612:	4313      	orrs	r3, r2
 8004614:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d109      	bne.n	8004630 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fd03 	bl	800502c <RCC_SetFlashLatencyFromMSIRange>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e351      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004630:	f000 fc38 	bl	8004ea4 <HAL_RCC_GetSysClockFreq>
 8004634:	4602      	mov	r2, r0
 8004636:	4b52      	ldr	r3, [pc, #328]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	4950      	ldr	r1, [pc, #320]	; (8004784 <HAL_RCC_OscConfig+0x274>)
 8004642:	5ccb      	ldrb	r3, [r1, r3]
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
 800464c:	4a4e      	ldr	r2, [pc, #312]	; (8004788 <HAL_RCC_OscConfig+0x278>)
 800464e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004650:	4b4e      	ldr	r3, [pc, #312]	; (800478c <HAL_RCC_OscConfig+0x27c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f7fd fb97 	bl	8001d88 <HAL_InitTick>
 800465a:	4603      	mov	r3, r0
 800465c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d052      	beq.n	800470a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	e335      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d032      	beq.n	80046d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004670:	4b43      	ldr	r3, [pc, #268]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a42      	ldr	r2, [pc, #264]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800467c:	f7fd fbd4 	bl	8001e28 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004684:	f7fd fbd0 	bl	8001e28 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e31e      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004696:	4b3a      	ldr	r3, [pc, #232]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046a2:	4b37      	ldr	r3, [pc, #220]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a36      	ldr	r2, [pc, #216]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80046a8:	f043 0308 	orr.w	r3, r3, #8
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4b34      	ldr	r3, [pc, #208]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	4931      	ldr	r1, [pc, #196]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046c0:	4b2f      	ldr	r3, [pc, #188]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	492c      	ldr	r1, [pc, #176]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	604b      	str	r3, [r1, #4]
 80046d4:	e01a      	b.n	800470c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046d6:	4b2a      	ldr	r3, [pc, #168]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a29      	ldr	r2, [pc, #164]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046e2:	f7fd fba1 	bl	8001e28 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ea:	f7fd fb9d 	bl	8001e28 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e2eb      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046fc:	4b20      	ldr	r3, [pc, #128]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f0      	bne.n	80046ea <HAL_RCC_OscConfig+0x1da>
 8004708:	e000      	b.n	800470c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800470a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d074      	beq.n	8004802 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b08      	cmp	r3, #8
 800471c:	d005      	beq.n	800472a <HAL_RCC_OscConfig+0x21a>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b0c      	cmp	r3, #12
 8004722:	d10e      	bne.n	8004742 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d10b      	bne.n	8004742 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472a:	4b15      	ldr	r3, [pc, #84]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d064      	beq.n	8004800 <HAL_RCC_OscConfig+0x2f0>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d160      	bne.n	8004800 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e2c8      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474a:	d106      	bne.n	800475a <HAL_RCC_OscConfig+0x24a>
 800474c:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 8004752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	e026      	b.n	80047a8 <HAL_RCC_OscConfig+0x298>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004762:	d115      	bne.n	8004790 <HAL_RCC_OscConfig+0x280>
 8004764:	4b06      	ldr	r3, [pc, #24]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a05      	ldr	r2, [pc, #20]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 800476a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b03      	ldr	r3, [pc, #12]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a02      	ldr	r2, [pc, #8]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 8004776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	e014      	b.n	80047a8 <HAL_RCC_OscConfig+0x298>
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000
 8004784:	080070d0 	.word	0x080070d0
 8004788:	20000000 	.word	0x20000000
 800478c:	20000004 	.word	0x20000004
 8004790:	4ba0      	ldr	r3, [pc, #640]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a9f      	ldr	r2, [pc, #636]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	4b9d      	ldr	r3, [pc, #628]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a9c      	ldr	r2, [pc, #624]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 80047a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fd fb3a 	bl	8001e28 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b8:	f7fd fb36 	bl	8001e28 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	; 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e284      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ca:	4b92      	ldr	r3, [pc, #584]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x2a8>
 80047d6:	e014      	b.n	8004802 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d8:	f7fd fb26 	bl	8001e28 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fd fb22 	bl	8001e28 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	; 0x64
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e270      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047f2:	4b88      	ldr	r3, [pc, #544]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x2d0>
 80047fe:	e000      	b.n	8004802 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d060      	beq.n	80048d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d005      	beq.n	8004820 <HAL_RCC_OscConfig+0x310>
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b0c      	cmp	r3, #12
 8004818:	d119      	bne.n	800484e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d116      	bne.n	800484e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004820:	4b7c      	ldr	r3, [pc, #496]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_RCC_OscConfig+0x328>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e24d      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004838:	4b76      	ldr	r3, [pc, #472]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	061b      	lsls	r3, r3, #24
 8004846:	4973      	ldr	r1, [pc, #460]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800484c:	e040      	b.n	80048d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d023      	beq.n	800489e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004856:	4b6f      	ldr	r3, [pc, #444]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a6e      	ldr	r2, [pc, #440]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 800485c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004862:	f7fd fae1 	bl	8001e28 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800486a:	f7fd fadd 	bl	8001e28 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e22b      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800487c:	4b65      	ldr	r3, [pc, #404]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004888:	4b62      	ldr	r3, [pc, #392]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	061b      	lsls	r3, r3, #24
 8004896:	495f      	ldr	r1, [pc, #380]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004898:	4313      	orrs	r3, r2
 800489a:	604b      	str	r3, [r1, #4]
 800489c:	e018      	b.n	80048d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489e:	4b5d      	ldr	r3, [pc, #372]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a5c      	ldr	r2, [pc, #368]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 80048a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048aa:	f7fd fabd 	bl	8001e28 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b2:	f7fd fab9 	bl	8001e28 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e207      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048c4:	4b53      	ldr	r3, [pc, #332]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1f0      	bne.n	80048b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d03c      	beq.n	8004956 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01c      	beq.n	800491e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e4:	4b4b      	ldr	r3, [pc, #300]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 80048e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ea:	4a4a      	ldr	r2, [pc, #296]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f4:	f7fd fa98 	bl	8001e28 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fc:	f7fd fa94 	bl	8001e28 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e1e2      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800490e:	4b41      	ldr	r3, [pc, #260]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0ef      	beq.n	80048fc <HAL_RCC_OscConfig+0x3ec>
 800491c:	e01b      	b.n	8004956 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491e:	4b3d      	ldr	r3, [pc, #244]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004924:	4a3b      	ldr	r2, [pc, #236]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492e:	f7fd fa7b 	bl	8001e28 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004936:	f7fd fa77 	bl	8001e28 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e1c5      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004948:	4b32      	ldr	r3, [pc, #200]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 800494a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1ef      	bne.n	8004936 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80a6 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004964:	2300      	movs	r3, #0
 8004966:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004968:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 800496a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10d      	bne.n	8004990 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004974:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004978:	4a26      	ldr	r2, [pc, #152]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 800497a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497e:	6593      	str	r3, [r2, #88]	; 0x58
 8004980:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800498c:	2301      	movs	r3, #1
 800498e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004990:	4b21      	ldr	r3, [pc, #132]	; (8004a18 <HAL_RCC_OscConfig+0x508>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004998:	2b00      	cmp	r3, #0
 800499a:	d118      	bne.n	80049ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499c:	4b1e      	ldr	r3, [pc, #120]	; (8004a18 <HAL_RCC_OscConfig+0x508>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1d      	ldr	r2, [pc, #116]	; (8004a18 <HAL_RCC_OscConfig+0x508>)
 80049a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a8:	f7fd fa3e 	bl	8001e28 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b0:	f7fd fa3a 	bl	8001e28 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e188      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <HAL_RCC_OscConfig+0x508>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d108      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4d8>
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	4a0d      	ldr	r2, [pc, #52]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049e6:	e029      	b.n	8004a3c <HAL_RCC_OscConfig+0x52c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	d115      	bne.n	8004a1c <HAL_RCC_OscConfig+0x50c>
 80049f0:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	4a07      	ldr	r2, [pc, #28]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 80049f8:	f043 0304 	orr.w	r3, r3, #4
 80049fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a00:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	4a03      	ldr	r2, [pc, #12]	; (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a10:	e014      	b.n	8004a3c <HAL_RCC_OscConfig+0x52c>
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40007000 	.word	0x40007000
 8004a1c:	4b91      	ldr	r3, [pc, #580]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a22:	4a90      	ldr	r2, [pc, #576]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a2c:	4b8d      	ldr	r3, [pc, #564]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a32:	4a8c      	ldr	r2, [pc, #560]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004a34:	f023 0304 	bic.w	r3, r3, #4
 8004a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d016      	beq.n	8004a72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fd f9f0 	bl	8001e28 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4c:	f7fd f9ec 	bl	8001e28 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e138      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a62:	4b80      	ldr	r3, [pc, #512]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ed      	beq.n	8004a4c <HAL_RCC_OscConfig+0x53c>
 8004a70:	e015      	b.n	8004a9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a72:	f7fd f9d9 	bl	8001e28 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a78:	e00a      	b.n	8004a90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7a:	f7fd f9d5 	bl	8001e28 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e121      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a90:	4b74      	ldr	r3, [pc, #464]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1ed      	bne.n	8004a7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a9e:	7ffb      	ldrb	r3, [r7, #31]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa4:	4b6f      	ldr	r3, [pc, #444]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa8:	4a6e      	ldr	r2, [pc, #440]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 810c 	beq.w	8004cd2 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	f040 80d4 	bne.w	8004c6c <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ac4:	4b67      	ldr	r3, [pc, #412]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 0203 	and.w	r2, r3, #3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d130      	bne.n	8004b3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d127      	bne.n	8004b3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d11f      	bne.n	8004b3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b04:	2a07      	cmp	r2, #7
 8004b06:	bf14      	ite	ne
 8004b08:	2201      	movne	r2, #1
 8004b0a:	2200      	moveq	r2, #0
 8004b0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d113      	bne.n	8004b3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	085b      	lsrs	r3, r3, #1
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d109      	bne.n	8004b3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	3b01      	subs	r3, #1
 8004b34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d06e      	beq.n	8004c18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b0c      	cmp	r3, #12
 8004b3e:	d069      	beq.n	8004c14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b40:	4b48      	ldr	r3, [pc, #288]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d105      	bne.n	8004b58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b4c:	4b45      	ldr	r3, [pc, #276]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0bb      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b5c:	4b41      	ldr	r3, [pc, #260]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a40      	ldr	r2, [pc, #256]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b68:	f7fd f95e 	bl	8001e28 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fd f95a 	bl	8001e28 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e0a8      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b82:	4b38      	ldr	r3, [pc, #224]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b8e:	4b35      	ldr	r3, [pc, #212]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	4b35      	ldr	r3, [pc, #212]	; (8004c68 <HAL_RCC_OscConfig+0x758>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b9e:	3a01      	subs	r2, #1
 8004ba0:	0112      	lsls	r2, r2, #4
 8004ba2:	4311      	orrs	r1, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ba8:	0212      	lsls	r2, r2, #8
 8004baa:	4311      	orrs	r1, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bb0:	0852      	lsrs	r2, r2, #1
 8004bb2:	3a01      	subs	r2, #1
 8004bb4:	0552      	lsls	r2, r2, #21
 8004bb6:	4311      	orrs	r1, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bbc:	0852      	lsrs	r2, r2, #1
 8004bbe:	3a01      	subs	r2, #1
 8004bc0:	0652      	lsls	r2, r2, #25
 8004bc2:	4311      	orrs	r1, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bc8:	0912      	lsrs	r2, r2, #4
 8004bca:	0452      	lsls	r2, r2, #17
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	4925      	ldr	r1, [pc, #148]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bd4:	4b23      	ldr	r3, [pc, #140]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a22      	ldr	r2, [pc, #136]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004be0:	4b20      	ldr	r3, [pc, #128]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	4a1f      	ldr	r2, [pc, #124]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bec:	f7fd f91c 	bl	8001e28 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf4:	f7fd f918 	bl	8001e28 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e066      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c06:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c12:	e05e      	b.n	8004cd2 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e05d      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c18:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d156      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c24:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c30:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4a0b      	ldr	r2, [pc, #44]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c3c:	f7fd f8f4 	bl	8001e28 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c44:	f7fd f8f0 	bl	8001e28 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e03e      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c56:	4b03      	ldr	r3, [pc, #12]	; (8004c64 <HAL_RCC_OscConfig+0x754>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x734>
 8004c62:	e036      	b.n	8004cd2 <HAL_RCC_OscConfig+0x7c2>
 8004c64:	40021000 	.word	0x40021000
 8004c68:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b0c      	cmp	r3, #12
 8004c70:	d02d      	beq.n	8004cce <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c72:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <HAL_RCC_OscConfig+0x7cc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <HAL_RCC_OscConfig+0x7cc>)
 8004c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c7c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c7e:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <HAL_RCC_OscConfig+0x7cc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d105      	bne.n	8004c96 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <HAL_RCC_OscConfig+0x7cc>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	4a13      	ldr	r2, [pc, #76]	; (8004cdc <HAL_RCC_OscConfig+0x7cc>)
 8004c90:	f023 0303 	bic.w	r3, r3, #3
 8004c94:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <HAL_RCC_OscConfig+0x7cc>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4a10      	ldr	r2, [pc, #64]	; (8004cdc <HAL_RCC_OscConfig+0x7cc>)
 8004c9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca6:	f7fd f8bf 	bl	8001e28 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cae:	f7fd f8bb 	bl	8001e28 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e009      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_RCC_OscConfig+0x7cc>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f0      	bne.n	8004cae <HAL_RCC_OscConfig+0x79e>
 8004ccc:	e001      	b.n	8004cd2 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40021000 	.word	0x40021000

08004ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0c8      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b66      	ldr	r3, [pc, #408]	; (8004e90 <HAL_RCC_ClockConfig+0x1b0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d910      	bls.n	8004d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b63      	ldr	r3, [pc, #396]	; (8004e90 <HAL_RCC_ClockConfig+0x1b0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 0207 	bic.w	r2, r3, #7
 8004d0a:	4961      	ldr	r1, [pc, #388]	; (8004e90 <HAL_RCC_ClockConfig+0x1b0>)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b5f      	ldr	r3, [pc, #380]	; (8004e90 <HAL_RCC_ClockConfig+0x1b0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0b0      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d04c      	beq.n	8004dca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d107      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d38:	4b56      	ldr	r3, [pc, #344]	; (8004e94 <HAL_RCC_ClockConfig+0x1b4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d121      	bne.n	8004d88 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e09e      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d107      	bne.n	8004d60 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d50:	4b50      	ldr	r3, [pc, #320]	; (8004e94 <HAL_RCC_ClockConfig+0x1b4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d115      	bne.n	8004d88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e092      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d68:	4b4a      	ldr	r3, [pc, #296]	; (8004e94 <HAL_RCC_ClockConfig+0x1b4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d109      	bne.n	8004d88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e086      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d78:	4b46      	ldr	r3, [pc, #280]	; (8004e94 <HAL_RCC_ClockConfig+0x1b4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e07e      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d88:	4b42      	ldr	r3, [pc, #264]	; (8004e94 <HAL_RCC_ClockConfig+0x1b4>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f023 0203 	bic.w	r2, r3, #3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	493f      	ldr	r1, [pc, #252]	; (8004e94 <HAL_RCC_ClockConfig+0x1b4>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d9a:	f7fd f845 	bl	8001e28 <HAL_GetTick>
 8004d9e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da0:	e00a      	b.n	8004db8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da2:	f7fd f841 	bl	8001e28 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e066      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db8:	4b36      	ldr	r3, [pc, #216]	; (8004e94 <HAL_RCC_ClockConfig+0x1b4>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 020c 	and.w	r2, r3, #12
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d1eb      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d008      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd6:	4b2f      	ldr	r3, [pc, #188]	; (8004e94 <HAL_RCC_ClockConfig+0x1b4>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	492c      	ldr	r1, [pc, #176]	; (8004e94 <HAL_RCC_ClockConfig+0x1b4>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004de8:	4b29      	ldr	r3, [pc, #164]	; (8004e90 <HAL_RCC_ClockConfig+0x1b0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d210      	bcs.n	8004e18 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df6:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <HAL_RCC_ClockConfig+0x1b0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 0207 	bic.w	r2, r3, #7
 8004dfe:	4924      	ldr	r1, [pc, #144]	; (8004e90 <HAL_RCC_ClockConfig+0x1b0>)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b22      	ldr	r3, [pc, #136]	; (8004e90 <HAL_RCC_ClockConfig+0x1b0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e036      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e24:	4b1b      	ldr	r3, [pc, #108]	; (8004e94 <HAL_RCC_ClockConfig+0x1b4>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	4918      	ldr	r1, [pc, #96]	; (8004e94 <HAL_RCC_ClockConfig+0x1b4>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e42:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <HAL_RCC_ClockConfig+0x1b4>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4910      	ldr	r1, [pc, #64]	; (8004e94 <HAL_RCC_ClockConfig+0x1b4>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e56:	f000 f825 	bl	8004ea4 <HAL_RCC_GetSysClockFreq>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <HAL_RCC_ClockConfig+0x1b4>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	490c      	ldr	r1, [pc, #48]	; (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004e68:	5ccb      	ldrb	r3, [r1, r3]
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e72:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e76:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fc ff84 	bl	8001d88 <HAL_InitTick>
 8004e80:	4603      	mov	r3, r0
 8004e82:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e84:	7afb      	ldrb	r3, [r7, #11]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40022000 	.word	0x40022000
 8004e94:	40021000 	.word	0x40021000
 8004e98:	080070d0 	.word	0x080070d0
 8004e9c:	20000000 	.word	0x20000000
 8004ea0:	20000004 	.word	0x20000004

08004ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b089      	sub	sp, #36	; 0x24
 8004ea8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb2:	4b3e      	ldr	r3, [pc, #248]	; (8004fac <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ebc:	4b3b      	ldr	r3, [pc, #236]	; (8004fac <HAL_RCC_GetSysClockFreq+0x108>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	2b0c      	cmp	r3, #12
 8004ed0:	d121      	bne.n	8004f16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d11e      	bne.n	8004f16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ed8:	4b34      	ldr	r3, [pc, #208]	; (8004fac <HAL_RCC_GetSysClockFreq+0x108>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d107      	bne.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ee4:	4b31      	ldr	r3, [pc, #196]	; (8004fac <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	61fb      	str	r3, [r7, #28]
 8004ef2:	e005      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ef4:	4b2d      	ldr	r3, [pc, #180]	; (8004fac <HAL_RCC_GetSysClockFreq+0x108>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f00:	4a2b      	ldr	r2, [pc, #172]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10d      	bne.n	8004f2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f14:	e00a      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d102      	bne.n	8004f22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f1c:	4b25      	ldr	r3, [pc, #148]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	e004      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d101      	bne.n	8004f2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f28:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b0c      	cmp	r3, #12
 8004f30:	d134      	bne.n	8004f9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f32:	4b1e      	ldr	r3, [pc, #120]	; (8004fac <HAL_RCC_GetSysClockFreq+0x108>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d003      	beq.n	8004f4a <HAL_RCC_GetSysClockFreq+0xa6>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d003      	beq.n	8004f50 <HAL_RCC_GetSysClockFreq+0xac>
 8004f48:	e005      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f4a:	4b1a      	ldr	r3, [pc, #104]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f4c:	617b      	str	r3, [r7, #20]
      break;
 8004f4e:	e005      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f50:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f52:	617b      	str	r3, [r7, #20]
      break;
 8004f54:	e002      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	617b      	str	r3, [r7, #20]
      break;
 8004f5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f5c:	4b13      	ldr	r3, [pc, #76]	; (8004fac <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	091b      	lsrs	r3, r3, #4
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	3301      	adds	r3, #1
 8004f68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f6a:	4b10      	ldr	r3, [pc, #64]	; (8004fac <HAL_RCC_GetSysClockFreq+0x108>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	0a1b      	lsrs	r3, r3, #8
 8004f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	fb03 f202 	mul.w	r2, r3, r2
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <HAL_RCC_GetSysClockFreq+0x108>)
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	0e5b      	lsrs	r3, r3, #25
 8004f88:	f003 0303 	and.w	r3, r3, #3
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f9c:	69bb      	ldr	r3, [r7, #24]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3724      	adds	r7, #36	; 0x24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	080070e8 	.word	0x080070e8
 8004fb4:	00f42400 	.word	0x00f42400
 8004fb8:	007a1200 	.word	0x007a1200

08004fbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc0:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	20000000 	.word	0x20000000

08004fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fd8:	f7ff fff0 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	0a1b      	lsrs	r3, r3, #8
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	4904      	ldr	r1, [pc, #16]	; (8004ffc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fea:	5ccb      	ldrb	r3, [r1, r3]
 8004fec:	f003 031f 	and.w	r3, r3, #31
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	080070e0 	.word	0x080070e0

08005000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005004:	f7ff ffda 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8005008:	4602      	mov	r2, r0
 800500a:	4b06      	ldr	r3, [pc, #24]	; (8005024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	0adb      	lsrs	r3, r3, #11
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4904      	ldr	r1, [pc, #16]	; (8005028 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005016:	5ccb      	ldrb	r3, [r1, r3]
 8005018:	f003 031f 	and.w	r3, r3, #31
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005020:	4618      	mov	r0, r3
 8005022:	bd80      	pop	{r7, pc}
 8005024:	40021000 	.word	0x40021000
 8005028:	080070e0 	.word	0x080070e0

0800502c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005034:	2300      	movs	r3, #0
 8005036:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005038:	4b2a      	ldr	r3, [pc, #168]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800503a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005044:	f7fe fd20 	bl	8003a88 <HAL_PWREx_GetVoltageRange>
 8005048:	6178      	str	r0, [r7, #20]
 800504a:	e014      	b.n	8005076 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800504c:	4b25      	ldr	r3, [pc, #148]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800504e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005050:	4a24      	ldr	r2, [pc, #144]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005056:	6593      	str	r3, [r2, #88]	; 0x58
 8005058:	4b22      	ldr	r3, [pc, #136]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800505a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005064:	f7fe fd10 	bl	8003a88 <HAL_PWREx_GetVoltageRange>
 8005068:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800506a:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800506c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506e:	4a1d      	ldr	r2, [pc, #116]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005074:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800507c:	d10b      	bne.n	8005096 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b80      	cmp	r3, #128	; 0x80
 8005082:	d919      	bls.n	80050b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2ba0      	cmp	r3, #160	; 0xa0
 8005088:	d902      	bls.n	8005090 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800508a:	2302      	movs	r3, #2
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	e013      	b.n	80050b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005090:	2301      	movs	r3, #1
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	e010      	b.n	80050b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b80      	cmp	r3, #128	; 0x80
 800509a:	d902      	bls.n	80050a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800509c:	2303      	movs	r3, #3
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	e00a      	b.n	80050b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b80      	cmp	r3, #128	; 0x80
 80050a6:	d102      	bne.n	80050ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050a8:	2302      	movs	r3, #2
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	e004      	b.n	80050b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b70      	cmp	r3, #112	; 0x70
 80050b2:	d101      	bne.n	80050b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050b4:	2301      	movs	r3, #1
 80050b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050b8:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f023 0207 	bic.w	r2, r3, #7
 80050c0:	4909      	ldr	r1, [pc, #36]	; (80050e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050c8:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d001      	beq.n	80050da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40021000 	.word	0x40021000
 80050e8:	40022000 	.word	0x40022000

080050ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050f4:	2300      	movs	r3, #0
 80050f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050f8:	2300      	movs	r3, #0
 80050fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005104:	2b00      	cmp	r3, #0
 8005106:	d041      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800510c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005110:	d02a      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005112:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005116:	d824      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005118:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800511c:	d008      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800511e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005122:	d81e      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800512c:	d010      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800512e:	e018      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005130:	4b86      	ldr	r3, [pc, #536]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4a85      	ldr	r2, [pc, #532]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800513c:	e015      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3304      	adds	r3, #4
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fabb 	bl	80056c0 <RCCEx_PLLSAI1_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800514e:	e00c      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3320      	adds	r3, #32
 8005154:	2100      	movs	r1, #0
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fba6 	bl	80058a8 <RCCEx_PLLSAI2_Config>
 800515c:	4603      	mov	r3, r0
 800515e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005160:	e003      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	74fb      	strb	r3, [r7, #19]
      break;
 8005166:	e000      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800516a:	7cfb      	ldrb	r3, [r7, #19]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10b      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005170:	4b76      	ldr	r3, [pc, #472]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800517e:	4973      	ldr	r1, [pc, #460]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005186:	e001      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005188:	7cfb      	ldrb	r3, [r7, #19]
 800518a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d041      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800519c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051a0:	d02a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80051a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051a6:	d824      	bhi.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051ac:	d008      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051b2:	d81e      	bhi.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80051b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051bc:	d010      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051be:	e018      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051c0:	4b62      	ldr	r3, [pc, #392]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4a61      	ldr	r2, [pc, #388]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051cc:	e015      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3304      	adds	r3, #4
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fa73 	bl	80056c0 <RCCEx_PLLSAI1_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051de:	e00c      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3320      	adds	r3, #32
 80051e4:	2100      	movs	r1, #0
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fb5e 	bl	80058a8 <RCCEx_PLLSAI2_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051f0:	e003      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	74fb      	strb	r3, [r7, #19]
      break;
 80051f6:	e000      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80051f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fa:	7cfb      	ldrb	r3, [r7, #19]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10b      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005200:	4b52      	ldr	r3, [pc, #328]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005206:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800520e:	494f      	ldr	r1, [pc, #316]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005216:	e001      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	7cfb      	ldrb	r3, [r7, #19]
 800521a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80a0 	beq.w	800536a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522a:	2300      	movs	r3, #0
 800522c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800522e:	4b47      	ldr	r3, [pc, #284]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00d      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005244:	4b41      	ldr	r3, [pc, #260]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005248:	4a40      	ldr	r2, [pc, #256]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800524a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524e:	6593      	str	r3, [r2, #88]	; 0x58
 8005250:	4b3e      	ldr	r3, [pc, #248]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005258:	60bb      	str	r3, [r7, #8]
 800525a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525c:	2301      	movs	r3, #1
 800525e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005260:	4b3b      	ldr	r3, [pc, #236]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a3a      	ldr	r2, [pc, #232]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800526c:	f7fc fddc 	bl	8001e28 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005272:	e009      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005274:	f7fc fdd8 	bl	8001e28 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d902      	bls.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	74fb      	strb	r3, [r7, #19]
        break;
 8005286:	e005      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005288:	4b31      	ldr	r3, [pc, #196]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0ef      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005294:	7cfb      	ldrb	r3, [r7, #19]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d15c      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800529a:	4b2c      	ldr	r3, [pc, #176]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01f      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d019      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052b8:	4b24      	ldr	r3, [pc, #144]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052c4:	4b21      	ldr	r3, [pc, #132]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	4a20      	ldr	r2, [pc, #128]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052d4:	4b1d      	ldr	r3, [pc, #116]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052da:	4a1c      	ldr	r2, [pc, #112]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052e4:	4a19      	ldr	r2, [pc, #100]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f6:	f7fc fd97 	bl	8001e28 <HAL_GetTick>
 80052fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052fc:	e00b      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fe:	f7fc fd93 	bl	8001e28 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	f241 3288 	movw	r2, #5000	; 0x1388
 800530c:	4293      	cmp	r3, r2
 800530e:	d902      	bls.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	74fb      	strb	r3, [r7, #19]
            break;
 8005314:	e006      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005316:	4b0d      	ldr	r3, [pc, #52]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0ec      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005324:	7cfb      	ldrb	r3, [r7, #19]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10c      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800532a:	4b08      	ldr	r3, [pc, #32]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533a:	4904      	ldr	r1, [pc, #16]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005342:	e009      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005344:	7cfb      	ldrb	r3, [r7, #19]
 8005346:	74bb      	strb	r3, [r7, #18]
 8005348:	e006      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800534a:	bf00      	nop
 800534c:	40021000 	.word	0x40021000
 8005350:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005358:	7c7b      	ldrb	r3, [r7, #17]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d105      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800535e:	4b9e      	ldr	r3, [pc, #632]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005362:	4a9d      	ldr	r2, [pc, #628]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005368:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005376:	4b98      	ldr	r3, [pc, #608]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537c:	f023 0203 	bic.w	r2, r3, #3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	4994      	ldr	r1, [pc, #592]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005398:	4b8f      	ldr	r3, [pc, #572]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	f023 020c 	bic.w	r2, r3, #12
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	498c      	ldr	r1, [pc, #560]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053ba:	4b87      	ldr	r3, [pc, #540]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	4983      	ldr	r1, [pc, #524]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053dc:	4b7e      	ldr	r3, [pc, #504]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	497b      	ldr	r1, [pc, #492]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053fe:	4b76      	ldr	r3, [pc, #472]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540c:	4972      	ldr	r1, [pc, #456]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005420:	4b6d      	ldr	r3, [pc, #436]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542e:	496a      	ldr	r1, [pc, #424]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005442:	4b65      	ldr	r3, [pc, #404]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005450:	4961      	ldr	r1, [pc, #388]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005464:	4b5c      	ldr	r3, [pc, #368]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005472:	4959      	ldr	r1, [pc, #356]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005486:	4b54      	ldr	r3, [pc, #336]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005494:	4950      	ldr	r1, [pc, #320]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054a8:	4b4b      	ldr	r3, [pc, #300]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b6:	4948      	ldr	r1, [pc, #288]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ca:	4b43      	ldr	r3, [pc, #268]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d8:	493f      	ldr	r1, [pc, #252]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d028      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054ec:	4b3a      	ldr	r3, [pc, #232]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054fa:	4937      	ldr	r1, [pc, #220]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800550a:	d106      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800550c:	4b32      	ldr	r3, [pc, #200]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	4a31      	ldr	r2, [pc, #196]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005516:	60d3      	str	r3, [r2, #12]
 8005518:	e011      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005522:	d10c      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3304      	adds	r3, #4
 8005528:	2101      	movs	r1, #1
 800552a:	4618      	mov	r0, r3
 800552c:	f000 f8c8 	bl	80056c0 <RCCEx_PLLSAI1_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005534:	7cfb      	ldrb	r3, [r7, #19]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800553a:	7cfb      	ldrb	r3, [r7, #19]
 800553c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d028      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800554a:	4b23      	ldr	r3, [pc, #140]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005558:	491f      	ldr	r1, [pc, #124]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005568:	d106      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800556a:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	4a1a      	ldr	r2, [pc, #104]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005574:	60d3      	str	r3, [r2, #12]
 8005576:	e011      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005580:	d10c      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3304      	adds	r3, #4
 8005586:	2101      	movs	r1, #1
 8005588:	4618      	mov	r0, r3
 800558a:	f000 f899 	bl	80056c0 <RCCEx_PLLSAI1_Config>
 800558e:	4603      	mov	r3, r0
 8005590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005592:	7cfb      	ldrb	r3, [r7, #19]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d02b      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b6:	4908      	ldr	r1, [pc, #32]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c6:	d109      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c8:	4b03      	ldr	r3, [pc, #12]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4a02      	ldr	r2, [pc, #8]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055d2:	60d3      	str	r3, [r2, #12]
 80055d4:	e014      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80055d6:	bf00      	nop
 80055d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055e4:	d10c      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3304      	adds	r3, #4
 80055ea:	2101      	movs	r1, #1
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 f867 	bl	80056c0 <RCCEx_PLLSAI1_Config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055f6:	7cfb      	ldrb	r3, [r7, #19]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80055fc:	7cfb      	ldrb	r3, [r7, #19]
 80055fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02f      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800560c:	4b2b      	ldr	r3, [pc, #172]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800561a:	4928      	ldr	r1, [pc, #160]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800562a:	d10d      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	2102      	movs	r1, #2
 8005632:	4618      	mov	r0, r3
 8005634:	f000 f844 	bl	80056c0 <RCCEx_PLLSAI1_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d014      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005642:	7cfb      	ldrb	r3, [r7, #19]
 8005644:	74bb      	strb	r3, [r7, #18]
 8005646:	e011      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800564c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005650:	d10c      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3320      	adds	r3, #32
 8005656:	2102      	movs	r1, #2
 8005658:	4618      	mov	r0, r3
 800565a:	f000 f925 	bl	80058a8 <RCCEx_PLLSAI2_Config>
 800565e:	4603      	mov	r3, r0
 8005660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005662:	7cfb      	ldrb	r3, [r7, #19]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005668:	7cfb      	ldrb	r3, [r7, #19]
 800566a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005678:	4b10      	ldr	r3, [pc, #64]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005686:	490d      	ldr	r1, [pc, #52]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00b      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800569a:	4b08      	ldr	r3, [pc, #32]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056aa:	4904      	ldr	r1, [pc, #16]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80056b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40021000 	.word	0x40021000

080056c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056ce:	4b75      	ldr	r3, [pc, #468]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d018      	beq.n	800570c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056da:	4b72      	ldr	r3, [pc, #456]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 0203 	and.w	r2, r3, #3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d10d      	bne.n	8005706 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
       ||
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056f2:	4b6c      	ldr	r3, [pc, #432]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	091b      	lsrs	r3, r3, #4
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
       ||
 8005702:	429a      	cmp	r2, r3
 8005704:	d047      	beq.n	8005796 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	73fb      	strb	r3, [r7, #15]
 800570a:	e044      	b.n	8005796 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b03      	cmp	r3, #3
 8005712:	d018      	beq.n	8005746 <RCCEx_PLLSAI1_Config+0x86>
 8005714:	2b03      	cmp	r3, #3
 8005716:	d825      	bhi.n	8005764 <RCCEx_PLLSAI1_Config+0xa4>
 8005718:	2b01      	cmp	r3, #1
 800571a:	d002      	beq.n	8005722 <RCCEx_PLLSAI1_Config+0x62>
 800571c:	2b02      	cmp	r3, #2
 800571e:	d009      	beq.n	8005734 <RCCEx_PLLSAI1_Config+0x74>
 8005720:	e020      	b.n	8005764 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005722:	4b60      	ldr	r3, [pc, #384]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d11d      	bne.n	800576a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005732:	e01a      	b.n	800576a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005734:	4b5b      	ldr	r3, [pc, #364]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800573c:	2b00      	cmp	r3, #0
 800573e:	d116      	bne.n	800576e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005744:	e013      	b.n	800576e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005746:	4b57      	ldr	r3, [pc, #348]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10f      	bne.n	8005772 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005752:	4b54      	ldr	r3, [pc, #336]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d109      	bne.n	8005772 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005762:	e006      	b.n	8005772 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	73fb      	strb	r3, [r7, #15]
      break;
 8005768:	e004      	b.n	8005774 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800576a:	bf00      	nop
 800576c:	e002      	b.n	8005774 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800576e:	bf00      	nop
 8005770:	e000      	b.n	8005774 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005772:	bf00      	nop
    }

    if(status == HAL_OK)
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10d      	bne.n	8005796 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800577a:	4b4a      	ldr	r3, [pc, #296]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6819      	ldr	r1, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	3b01      	subs	r3, #1
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	430b      	orrs	r3, r1
 8005790:	4944      	ldr	r1, [pc, #272]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005792:	4313      	orrs	r3, r2
 8005794:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d17d      	bne.n	8005898 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800579c:	4b41      	ldr	r3, [pc, #260]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a40      	ldr	r2, [pc, #256]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057a8:	f7fc fb3e 	bl	8001e28 <HAL_GetTick>
 80057ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057ae:	e009      	b.n	80057c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057b0:	f7fc fb3a 	bl	8001e28 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d902      	bls.n	80057c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	73fb      	strb	r3, [r7, #15]
        break;
 80057c2:	e005      	b.n	80057d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057c4:	4b37      	ldr	r3, [pc, #220]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1ef      	bne.n	80057b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d160      	bne.n	8005898 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d111      	bne.n	8005800 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057dc:	4b31      	ldr	r3, [pc, #196]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80057e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6892      	ldr	r2, [r2, #8]
 80057ec:	0211      	lsls	r1, r2, #8
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	68d2      	ldr	r2, [r2, #12]
 80057f2:	0912      	lsrs	r2, r2, #4
 80057f4:	0452      	lsls	r2, r2, #17
 80057f6:	430a      	orrs	r2, r1
 80057f8:	492a      	ldr	r1, [pc, #168]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	610b      	str	r3, [r1, #16]
 80057fe:	e027      	b.n	8005850 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d112      	bne.n	800582c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005806:	4b27      	ldr	r3, [pc, #156]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800580e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6892      	ldr	r2, [r2, #8]
 8005816:	0211      	lsls	r1, r2, #8
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6912      	ldr	r2, [r2, #16]
 800581c:	0852      	lsrs	r2, r2, #1
 800581e:	3a01      	subs	r2, #1
 8005820:	0552      	lsls	r2, r2, #21
 8005822:	430a      	orrs	r2, r1
 8005824:	491f      	ldr	r1, [pc, #124]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005826:	4313      	orrs	r3, r2
 8005828:	610b      	str	r3, [r1, #16]
 800582a:	e011      	b.n	8005850 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800582c:	4b1d      	ldr	r3, [pc, #116]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005834:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6892      	ldr	r2, [r2, #8]
 800583c:	0211      	lsls	r1, r2, #8
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6952      	ldr	r2, [r2, #20]
 8005842:	0852      	lsrs	r2, r2, #1
 8005844:	3a01      	subs	r2, #1
 8005846:	0652      	lsls	r2, r2, #25
 8005848:	430a      	orrs	r2, r1
 800584a:	4916      	ldr	r1, [pc, #88]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800584c:	4313      	orrs	r3, r2
 800584e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005850:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a13      	ldr	r2, [pc, #76]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005856:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800585a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585c:	f7fc fae4 	bl	8001e28 <HAL_GetTick>
 8005860:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005862:	e009      	b.n	8005878 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005864:	f7fc fae0 	bl	8001e28 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d902      	bls.n	8005878 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	73fb      	strb	r3, [r7, #15]
          break;
 8005876:	e005      	b.n	8005884 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ef      	beq.n	8005864 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800588a:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	4904      	ldr	r1, [pc, #16]	; (80058a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005894:	4313      	orrs	r3, r2
 8005896:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005898:	7bfb      	ldrb	r3, [r7, #15]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40021000 	.word	0x40021000

080058a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058b6:	4b6a      	ldr	r3, [pc, #424]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f003 0303 	and.w	r3, r3, #3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d018      	beq.n	80058f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058c2:	4b67      	ldr	r3, [pc, #412]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f003 0203 	and.w	r2, r3, #3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d10d      	bne.n	80058ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
       ||
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80058da:	4b61      	ldr	r3, [pc, #388]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	091b      	lsrs	r3, r3, #4
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
       ||
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d047      	beq.n	800597e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
 80058f2:	e044      	b.n	800597e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d018      	beq.n	800592e <RCCEx_PLLSAI2_Config+0x86>
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d825      	bhi.n	800594c <RCCEx_PLLSAI2_Config+0xa4>
 8005900:	2b01      	cmp	r3, #1
 8005902:	d002      	beq.n	800590a <RCCEx_PLLSAI2_Config+0x62>
 8005904:	2b02      	cmp	r3, #2
 8005906:	d009      	beq.n	800591c <RCCEx_PLLSAI2_Config+0x74>
 8005908:	e020      	b.n	800594c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800590a:	4b55      	ldr	r3, [pc, #340]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d11d      	bne.n	8005952 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800591a:	e01a      	b.n	8005952 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800591c:	4b50      	ldr	r3, [pc, #320]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005924:	2b00      	cmp	r3, #0
 8005926:	d116      	bne.n	8005956 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800592c:	e013      	b.n	8005956 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800592e:	4b4c      	ldr	r3, [pc, #304]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10f      	bne.n	800595a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800593a:	4b49      	ldr	r3, [pc, #292]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800594a:	e006      	b.n	800595a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	73fb      	strb	r3, [r7, #15]
      break;
 8005950:	e004      	b.n	800595c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005952:	bf00      	nop
 8005954:	e002      	b.n	800595c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005956:	bf00      	nop
 8005958:	e000      	b.n	800595c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800595a:	bf00      	nop
    }

    if(status == HAL_OK)
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10d      	bne.n	800597e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005962:	4b3f      	ldr	r3, [pc, #252]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6819      	ldr	r1, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	3b01      	subs	r3, #1
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	430b      	orrs	r3, r1
 8005978:	4939      	ldr	r1, [pc, #228]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 800597a:	4313      	orrs	r3, r2
 800597c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d167      	bne.n	8005a54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005984:	4b36      	ldr	r3, [pc, #216]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a35      	ldr	r2, [pc, #212]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 800598a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800598e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005990:	f7fc fa4a 	bl	8001e28 <HAL_GetTick>
 8005994:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005996:	e009      	b.n	80059ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005998:	f7fc fa46 	bl	8001e28 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d902      	bls.n	80059ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	73fb      	strb	r3, [r7, #15]
        break;
 80059aa:	e005      	b.n	80059b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059ac:	4b2c      	ldr	r3, [pc, #176]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1ef      	bne.n	8005998 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d14a      	bne.n	8005a54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d111      	bne.n	80059e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059c4:	4b26      	ldr	r3, [pc, #152]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6892      	ldr	r2, [r2, #8]
 80059d4:	0211      	lsls	r1, r2, #8
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	68d2      	ldr	r2, [r2, #12]
 80059da:	0912      	lsrs	r2, r2, #4
 80059dc:	0452      	lsls	r2, r2, #17
 80059de:	430a      	orrs	r2, r1
 80059e0:	491f      	ldr	r1, [pc, #124]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	614b      	str	r3, [r1, #20]
 80059e6:	e011      	b.n	8005a0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059e8:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6892      	ldr	r2, [r2, #8]
 80059f8:	0211      	lsls	r1, r2, #8
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6912      	ldr	r2, [r2, #16]
 80059fe:	0852      	lsrs	r2, r2, #1
 8005a00:	3a01      	subs	r2, #1
 8005a02:	0652      	lsls	r2, r2, #25
 8005a04:	430a      	orrs	r2, r1
 8005a06:	4916      	ldr	r1, [pc, #88]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a0c:	4b14      	ldr	r3, [pc, #80]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a13      	ldr	r2, [pc, #76]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a18:	f7fc fa06 	bl	8001e28 <HAL_GetTick>
 8005a1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a1e:	e009      	b.n	8005a34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a20:	f7fc fa02 	bl	8001e28 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d902      	bls.n	8005a34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	73fb      	strb	r3, [r7, #15]
          break;
 8005a32:	e005      	b.n	8005a40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0ef      	beq.n	8005a20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a46:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a48:	695a      	ldr	r2, [r3, #20]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	4904      	ldr	r1, [pc, #16]	; (8005a60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	40021000 	.word	0x40021000

08005a64 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d06c      	beq.n	8005b50 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fb fef2 	bl	8001874 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	22ca      	movs	r2, #202	; 0xca
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2253      	movs	r2, #83	; 0x53
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f9a0 	bl	8005dee <RTC_EnterInitMode>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d14b      	bne.n	8005b50 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aca:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6899      	ldr	r1, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	68d2      	ldr	r2, [r2, #12]
 8005af2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6919      	ldr	r1, [r3, #16]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	041a      	lsls	r2, r3, #16
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f9a3 	bl	8005e54 <RTC_ExitInitMode>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d11b      	bne.n	8005b50 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0203 	bic.w	r2, r2, #3
 8005b26:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69da      	ldr	r2, [r3, #28]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	22ff      	movs	r2, #255	; 0xff
 8005b46:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b5a:	b590      	push	{r4, r7, lr}
 8005b5c:	b087      	sub	sp, #28
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_RTC_SetTime+0x1a>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e08b      	b.n	8005c8c <HAL_RTC_SetTime+0x132>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	22ca      	movs	r2, #202	; 0xca
 8005b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2253      	movs	r2, #83	; 0x53
 8005b92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f92a 	bl	8005dee <RTC_EnterInitMode>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005b9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d163      	bne.n	8005c6c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d126      	bne.n	8005bf8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d102      	bne.n	8005bbe <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f984 	bl	8005ed0 <RTC_ByteToBcd2>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 f97d 	bl	8005ed0 <RTC_ByteToBcd2>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bda:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	789b      	ldrb	r3, [r3, #2]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 f975 	bl	8005ed0 <RTC_ByteToBcd2>
 8005be6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005be8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	78db      	ldrb	r3, [r3, #3]
 8005bf0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e018      	b.n	8005c2a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d102      	bne.n	8005c0c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c18:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c1e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	78db      	ldrb	r3, [r3, #3]
 8005c24:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c34:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c38:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c48:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6899      	ldr	r1, [r3, #8]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f8f6 	bl	8005e54 <RTC_ExitInitMode>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	22ff      	movs	r2, #255	; 0xff
 8005c72:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005c74:	7cfb      	ldrb	r3, [r7, #19]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005c8a:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd90      	pop	{r4, r7, pc}

08005c94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c94:	b590      	push	{r4, r7, lr}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_RTC_SetDate+0x1a>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e075      	b.n	8005d9a <HAL_RTC_SetDate+0x106>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10e      	bne.n	8005ce2 <HAL_RTC_SetDate+0x4e>
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	785b      	ldrb	r3, [r3, #1]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d008      	beq.n	8005ce2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	785b      	ldrb	r3, [r3, #1]
 8005cd4:	f023 0310 	bic.w	r3, r3, #16
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	330a      	adds	r3, #10
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d11c      	bne.n	8005d22 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	78db      	ldrb	r3, [r3, #3]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 f8ef 	bl	8005ed0 <RTC_ByteToBcd2>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f8e8 	bl	8005ed0 <RTC_ByteToBcd2>
 8005d00:	4603      	mov	r3, r0
 8005d02:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005d04:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	789b      	ldrb	r3, [r3, #2]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 f8e0 	bl	8005ed0 <RTC_ByteToBcd2>
 8005d10:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d12:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	e00e      	b.n	8005d40 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	78db      	ldrb	r3, [r3, #3]
 8005d26:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d2e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005d34:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	22ca      	movs	r2, #202	; 0xca
 8005d46:	625a      	str	r2, [r3, #36]	; 0x24
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2253      	movs	r2, #83	; 0x53
 8005d4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 f84c 	bl	8005dee <RTC_EnterInitMode>
 8005d56:	4603      	mov	r3, r0
 8005d58:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005d5a:	7cfb      	ldrb	r3, [r7, #19]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10c      	bne.n	8005d7a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d6a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d6e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f86f 	bl	8005e54 <RTC_ExitInitMode>
 8005d76:	4603      	mov	r3, r0
 8005d78:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	22ff      	movs	r2, #255	; 0xff
 8005d80:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005d82:	7cfb      	ldrb	r3, [r7, #19]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d103      	bne.n	8005d90 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005d98:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	371c      	adds	r7, #28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd90      	pop	{r4, r7, pc}

08005da2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005db8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005dba:	f7fc f835 	bl	8001e28 <HAL_GetTick>
 8005dbe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005dc0:	e009      	b.n	8005dd6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005dc2:	f7fc f831 	bl	8001e28 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e007      	b.n	8005de6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0ee      	beq.n	8005dc2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d120      	bne.n	8005e4a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e10:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e12:	f7fc f809 	bl	8001e28 <HAL_GetTick>
 8005e16:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e18:	e00d      	b.n	8005e36 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005e1a:	f7fc f805 	bl	8001e28 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e28:	d905      	bls.n	8005e36 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2203      	movs	r2, #3
 8005e32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d102      	bne.n	8005e4a <RTC_EnterInitMode+0x5c>
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d1e7      	bne.n	8005e1a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005e60:	4b1a      	ldr	r3, [pc, #104]	; (8005ecc <RTC_ExitInitMode+0x78>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4a19      	ldr	r2, [pc, #100]	; (8005ecc <RTC_ExitInitMode+0x78>)
 8005e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e6a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005e6c:	4b17      	ldr	r3, [pc, #92]	; (8005ecc <RTC_ExitInitMode+0x78>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10c      	bne.n	8005e92 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff ff92 	bl	8005da2 <HAL_RTC_WaitForSynchro>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d01e      	beq.n	8005ec2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2203      	movs	r2, #3
 8005e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	73fb      	strb	r3, [r7, #15]
 8005e90:	e017      	b.n	8005ec2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005e92:	4b0e      	ldr	r3, [pc, #56]	; (8005ecc <RTC_ExitInitMode+0x78>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	4a0d      	ldr	r2, [pc, #52]	; (8005ecc <RTC_ExitInitMode+0x78>)
 8005e98:	f023 0320 	bic.w	r3, r3, #32
 8005e9c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff ff7f 	bl	8005da2 <HAL_RTC_WaitForSynchro>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2203      	movs	r2, #3
 8005eae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <RTC_ExitInitMode+0x78>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	4a04      	ldr	r2, [pc, #16]	; (8005ecc <RTC_ExitInitMode+0x78>)
 8005ebc:	f043 0320 	orr.w	r3, r3, #32
 8005ec0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40002800 	.word	0x40002800

08005ed0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005ee2:	e005      	b.n	8005ef0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005eea:	7afb      	ldrb	r3, [r7, #11]
 8005eec:	3b0a      	subs	r3, #10
 8005eee:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005ef0:	7afb      	ldrb	r3, [r7, #11]
 8005ef2:	2b09      	cmp	r3, #9
 8005ef4:	d8f6      	bhi.n	8005ee4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	7afb      	ldrb	r3, [r7, #11]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	b2db      	uxtb	r3, r3
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e049      	b.n	8005fb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fb fe30 	bl	8001b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f000 fa42 	bl	80063d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d122      	bne.n	800601a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d11b      	bne.n	800601a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f06f 0202 	mvn.w	r2, #2
 8005fea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f9cb 	bl	800639c <HAL_TIM_IC_CaptureCallback>
 8006006:	e005      	b.n	8006014 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f9bd 	bl	8006388 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f9ce 	bl	80063b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b04      	cmp	r3, #4
 8006026:	d122      	bne.n	800606e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	2b04      	cmp	r3, #4
 8006034:	d11b      	bne.n	800606e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f06f 0204 	mvn.w	r2, #4
 800603e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f9a1 	bl	800639c <HAL_TIM_IC_CaptureCallback>
 800605a:	e005      	b.n	8006068 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f993 	bl	8006388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f9a4 	bl	80063b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b08      	cmp	r3, #8
 800607a:	d122      	bne.n	80060c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b08      	cmp	r3, #8
 8006088:	d11b      	bne.n	80060c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f06f 0208 	mvn.w	r2, #8
 8006092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2204      	movs	r2, #4
 8006098:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	f003 0303 	and.w	r3, r3, #3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f977 	bl	800639c <HAL_TIM_IC_CaptureCallback>
 80060ae:	e005      	b.n	80060bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f969 	bl	8006388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f97a 	bl	80063b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f003 0310 	and.w	r3, r3, #16
 80060cc:	2b10      	cmp	r3, #16
 80060ce:	d122      	bne.n	8006116 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f003 0310 	and.w	r3, r3, #16
 80060da:	2b10      	cmp	r3, #16
 80060dc:	d11b      	bne.n	8006116 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f06f 0210 	mvn.w	r2, #16
 80060e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2208      	movs	r2, #8
 80060ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f94d 	bl	800639c <HAL_TIM_IC_CaptureCallback>
 8006102:	e005      	b.n	8006110 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f93f 	bl	8006388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f950 	bl	80063b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b01      	cmp	r3, #1
 8006122:	d10e      	bne.n	8006142 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b01      	cmp	r3, #1
 8006130:	d107      	bne.n	8006142 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f06f 0201 	mvn.w	r2, #1
 800613a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7fb f8ab 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614c:	2b80      	cmp	r3, #128	; 0x80
 800614e:	d10e      	bne.n	800616e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615a:	2b80      	cmp	r3, #128	; 0x80
 800615c:	d107      	bne.n	800616e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fafb 	bl	8006764 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617c:	d10e      	bne.n	800619c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006188:	2b80      	cmp	r3, #128	; 0x80
 800618a:	d107      	bne.n	800619c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 faee 	bl	8006778 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	d10e      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b4:	2b40      	cmp	r3, #64	; 0x40
 80061b6:	d107      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f8fe 	bl	80063c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d10e      	bne.n	80061f4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	d107      	bne.n	80061f4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f06f 0220 	mvn.w	r2, #32
 80061ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 faae 	bl	8006750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061f4:	bf00      	nop
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_TIM_ConfigClockSource+0x18>
 8006210:	2302      	movs	r3, #2
 8006212:	e0b5      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x184>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006232:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006236:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800623e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006250:	d03e      	beq.n	80062d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006256:	f200 8087 	bhi.w	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 800625a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800625e:	f000 8085 	beq.w	800636c <HAL_TIM_ConfigClockSource+0x170>
 8006262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006266:	d87f      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006268:	2b70      	cmp	r3, #112	; 0x70
 800626a:	d01a      	beq.n	80062a2 <HAL_TIM_ConfigClockSource+0xa6>
 800626c:	2b70      	cmp	r3, #112	; 0x70
 800626e:	d87b      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006270:	2b60      	cmp	r3, #96	; 0x60
 8006272:	d050      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0x11a>
 8006274:	2b60      	cmp	r3, #96	; 0x60
 8006276:	d877      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006278:	2b50      	cmp	r3, #80	; 0x50
 800627a:	d03c      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0xfa>
 800627c:	2b50      	cmp	r3, #80	; 0x50
 800627e:	d873      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006280:	2b40      	cmp	r3, #64	; 0x40
 8006282:	d058      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x13a>
 8006284:	2b40      	cmp	r3, #64	; 0x40
 8006286:	d86f      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006288:	2b30      	cmp	r3, #48	; 0x30
 800628a:	d064      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0x15a>
 800628c:	2b30      	cmp	r3, #48	; 0x30
 800628e:	d86b      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006290:	2b20      	cmp	r3, #32
 8006292:	d060      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0x15a>
 8006294:	2b20      	cmp	r3, #32
 8006296:	d867      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006298:	2b00      	cmp	r3, #0
 800629a:	d05c      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0x15a>
 800629c:	2b10      	cmp	r3, #16
 800629e:	d05a      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80062a0:	e062      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6818      	ldr	r0, [r3, #0]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	6899      	ldr	r1, [r3, #8]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f000 f9a5 	bl	8006600 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	609a      	str	r2, [r3, #8]
      break;
 80062ce:	e04e      	b.n	800636e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	6899      	ldr	r1, [r3, #8]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f000 f98e 	bl	8006600 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062f2:	609a      	str	r2, [r3, #8]
      break;
 80062f4:	e03b      	b.n	800636e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6859      	ldr	r1, [r3, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	461a      	mov	r2, r3
 8006304:	f000 f902 	bl	800650c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2150      	movs	r1, #80	; 0x50
 800630e:	4618      	mov	r0, r3
 8006310:	f000 f95b 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 8006314:	e02b      	b.n	800636e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6859      	ldr	r1, [r3, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	461a      	mov	r2, r3
 8006324:	f000 f921 	bl	800656a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2160      	movs	r1, #96	; 0x60
 800632e:	4618      	mov	r0, r3
 8006330:	f000 f94b 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 8006334:	e01b      	b.n	800636e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6859      	ldr	r1, [r3, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	461a      	mov	r2, r3
 8006344:	f000 f8e2 	bl	800650c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2140      	movs	r1, #64	; 0x40
 800634e:	4618      	mov	r0, r3
 8006350:	f000 f93b 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 8006354:	e00b      	b.n	800636e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4619      	mov	r1, r3
 8006360:	4610      	mov	r0, r2
 8006362:	f000 f932 	bl	80065ca <TIM_ITRx_SetConfig>
        break;
 8006366:	e002      	b.n	800636e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006368:	bf00      	nop
 800636a:	e000      	b.n	800636e <HAL_TIM_ConfigClockSource+0x172>
      break;
 800636c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a40      	ldr	r2, [pc, #256]	; (80064ec <TIM_Base_SetConfig+0x114>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d013      	beq.n	8006418 <TIM_Base_SetConfig+0x40>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f6:	d00f      	beq.n	8006418 <TIM_Base_SetConfig+0x40>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a3d      	ldr	r2, [pc, #244]	; (80064f0 <TIM_Base_SetConfig+0x118>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00b      	beq.n	8006418 <TIM_Base_SetConfig+0x40>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a3c      	ldr	r2, [pc, #240]	; (80064f4 <TIM_Base_SetConfig+0x11c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d007      	beq.n	8006418 <TIM_Base_SetConfig+0x40>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a3b      	ldr	r2, [pc, #236]	; (80064f8 <TIM_Base_SetConfig+0x120>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_Base_SetConfig+0x40>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a3a      	ldr	r2, [pc, #232]	; (80064fc <TIM_Base_SetConfig+0x124>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d108      	bne.n	800642a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a2f      	ldr	r2, [pc, #188]	; (80064ec <TIM_Base_SetConfig+0x114>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d01f      	beq.n	8006472 <TIM_Base_SetConfig+0x9a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006438:	d01b      	beq.n	8006472 <TIM_Base_SetConfig+0x9a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a2c      	ldr	r2, [pc, #176]	; (80064f0 <TIM_Base_SetConfig+0x118>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d017      	beq.n	8006472 <TIM_Base_SetConfig+0x9a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a2b      	ldr	r2, [pc, #172]	; (80064f4 <TIM_Base_SetConfig+0x11c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d013      	beq.n	8006472 <TIM_Base_SetConfig+0x9a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a2a      	ldr	r2, [pc, #168]	; (80064f8 <TIM_Base_SetConfig+0x120>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00f      	beq.n	8006472 <TIM_Base_SetConfig+0x9a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a29      	ldr	r2, [pc, #164]	; (80064fc <TIM_Base_SetConfig+0x124>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d00b      	beq.n	8006472 <TIM_Base_SetConfig+0x9a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a28      	ldr	r2, [pc, #160]	; (8006500 <TIM_Base_SetConfig+0x128>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d007      	beq.n	8006472 <TIM_Base_SetConfig+0x9a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a27      	ldr	r2, [pc, #156]	; (8006504 <TIM_Base_SetConfig+0x12c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d003      	beq.n	8006472 <TIM_Base_SetConfig+0x9a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a26      	ldr	r2, [pc, #152]	; (8006508 <TIM_Base_SetConfig+0x130>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d108      	bne.n	8006484 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a10      	ldr	r2, [pc, #64]	; (80064ec <TIM_Base_SetConfig+0x114>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00f      	beq.n	80064d0 <TIM_Base_SetConfig+0xf8>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a12      	ldr	r2, [pc, #72]	; (80064fc <TIM_Base_SetConfig+0x124>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00b      	beq.n	80064d0 <TIM_Base_SetConfig+0xf8>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a11      	ldr	r2, [pc, #68]	; (8006500 <TIM_Base_SetConfig+0x128>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d007      	beq.n	80064d0 <TIM_Base_SetConfig+0xf8>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a10      	ldr	r2, [pc, #64]	; (8006504 <TIM_Base_SetConfig+0x12c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_Base_SetConfig+0xf8>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a0f      	ldr	r2, [pc, #60]	; (8006508 <TIM_Base_SetConfig+0x130>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d103      	bne.n	80064d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	615a      	str	r2, [r3, #20]
}
 80064de:	bf00      	nop
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40012c00 	.word	0x40012c00
 80064f0:	40000400 	.word	0x40000400
 80064f4:	40000800 	.word	0x40000800
 80064f8:	40000c00 	.word	0x40000c00
 80064fc:	40013400 	.word	0x40013400
 8006500:	40014000 	.word	0x40014000
 8006504:	40014400 	.word	0x40014400
 8006508:	40014800 	.word	0x40014800

0800650c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	f023 0201 	bic.w	r2, r3, #1
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f023 030a 	bic.w	r3, r3, #10
 8006548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800656a:	b480      	push	{r7}
 800656c:	b087      	sub	sp, #28
 800656e:	af00      	add	r7, sp, #0
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f023 0210 	bic.w	r2, r3, #16
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	031b      	lsls	r3, r3, #12
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	621a      	str	r2, [r3, #32]
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f043 0307 	orr.w	r3, r3, #7
 80065ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	609a      	str	r2, [r3, #8]
}
 80065f4:	bf00      	nop
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800661a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	021a      	lsls	r2, r3, #8
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	431a      	orrs	r2, r3
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	4313      	orrs	r3, r2
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	609a      	str	r2, [r3, #8]
}
 8006634:	bf00      	nop
 8006636:	371c      	adds	r7, #28
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006654:	2302      	movs	r3, #2
 8006656:	e068      	b.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a2e      	ldr	r2, [pc, #184]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d004      	beq.n	800668c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a2d      	ldr	r2, [pc, #180]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d108      	bne.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006692:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a1e      	ldr	r2, [pc, #120]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d01d      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ca:	d018      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a1b      	ldr	r2, [pc, #108]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d013      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a1a      	ldr	r2, [pc, #104]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00e      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a18      	ldr	r2, [pc, #96]	; (8006748 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d009      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a13      	ldr	r2, [pc, #76]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d004      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a14      	ldr	r2, [pc, #80]	; (800674c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d10c      	bne.n	8006718 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	4313      	orrs	r3, r2
 800670e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40012c00 	.word	0x40012c00
 800673c:	40013400 	.word	0x40013400
 8006740:	40000400 	.word	0x40000400
 8006744:	40000800 	.word	0x40000800
 8006748:	40000c00 	.word	0x40000c00
 800674c:	40014000 	.word	0x40014000

08006750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e040      	b.n	8006820 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d106      	bne.n	80067b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7fb fa5c 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2224      	movs	r2, #36	; 0x24
 80067b8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f82c 	bl	8006828 <UART_SetConfig>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d101      	bne.n	80067da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e022      	b.n	8006820 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fada 	bl	8006d9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fb61 	bl	8006ee0 <UART_CheckIdleState>
 800681e:	4603      	mov	r3, r0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800682c:	b08a      	sub	sp, #40	; 0x28
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	431a      	orrs	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	431a      	orrs	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	4313      	orrs	r3, r2
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	4ba4      	ldr	r3, [pc, #656]	; (8006ae8 <UART_SetConfig+0x2c0>)
 8006858:	4013      	ands	r3, r2
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006860:	430b      	orrs	r3, r1
 8006862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a99      	ldr	r2, [pc, #612]	; (8006aec <UART_SetConfig+0x2c4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d004      	beq.n	8006894 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006890:	4313      	orrs	r3, r2
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a4:	430a      	orrs	r2, r1
 80068a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a90      	ldr	r2, [pc, #576]	; (8006af0 <UART_SetConfig+0x2c8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d126      	bne.n	8006900 <UART_SetConfig+0xd8>
 80068b2:	4b90      	ldr	r3, [pc, #576]	; (8006af4 <UART_SetConfig+0x2cc>)
 80068b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b8:	f003 0303 	and.w	r3, r3, #3
 80068bc:	2b03      	cmp	r3, #3
 80068be:	d81b      	bhi.n	80068f8 <UART_SetConfig+0xd0>
 80068c0:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <UART_SetConfig+0xa0>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	080068d9 	.word	0x080068d9
 80068cc:	080068e9 	.word	0x080068e9
 80068d0:	080068e1 	.word	0x080068e1
 80068d4:	080068f1 	.word	0x080068f1
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068de:	e116      	b.n	8006b0e <UART_SetConfig+0x2e6>
 80068e0:	2302      	movs	r3, #2
 80068e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e6:	e112      	b.n	8006b0e <UART_SetConfig+0x2e6>
 80068e8:	2304      	movs	r3, #4
 80068ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ee:	e10e      	b.n	8006b0e <UART_SetConfig+0x2e6>
 80068f0:	2308      	movs	r3, #8
 80068f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f6:	e10a      	b.n	8006b0e <UART_SetConfig+0x2e6>
 80068f8:	2310      	movs	r3, #16
 80068fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068fe:	e106      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a7c      	ldr	r2, [pc, #496]	; (8006af8 <UART_SetConfig+0x2d0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d138      	bne.n	800697c <UART_SetConfig+0x154>
 800690a:	4b7a      	ldr	r3, [pc, #488]	; (8006af4 <UART_SetConfig+0x2cc>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006910:	f003 030c 	and.w	r3, r3, #12
 8006914:	2b0c      	cmp	r3, #12
 8006916:	d82d      	bhi.n	8006974 <UART_SetConfig+0x14c>
 8006918:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <UART_SetConfig+0xf8>)
 800691a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691e:	bf00      	nop
 8006920:	08006955 	.word	0x08006955
 8006924:	08006975 	.word	0x08006975
 8006928:	08006975 	.word	0x08006975
 800692c:	08006975 	.word	0x08006975
 8006930:	08006965 	.word	0x08006965
 8006934:	08006975 	.word	0x08006975
 8006938:	08006975 	.word	0x08006975
 800693c:	08006975 	.word	0x08006975
 8006940:	0800695d 	.word	0x0800695d
 8006944:	08006975 	.word	0x08006975
 8006948:	08006975 	.word	0x08006975
 800694c:	08006975 	.word	0x08006975
 8006950:	0800696d 	.word	0x0800696d
 8006954:	2300      	movs	r3, #0
 8006956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695a:	e0d8      	b.n	8006b0e <UART_SetConfig+0x2e6>
 800695c:	2302      	movs	r3, #2
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006962:	e0d4      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006964:	2304      	movs	r3, #4
 8006966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696a:	e0d0      	b.n	8006b0e <UART_SetConfig+0x2e6>
 800696c:	2308      	movs	r3, #8
 800696e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006972:	e0cc      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006974:	2310      	movs	r3, #16
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697a:	e0c8      	b.n	8006b0e <UART_SetConfig+0x2e6>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a5e      	ldr	r2, [pc, #376]	; (8006afc <UART_SetConfig+0x2d4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d125      	bne.n	80069d2 <UART_SetConfig+0x1aa>
 8006986:	4b5b      	ldr	r3, [pc, #364]	; (8006af4 <UART_SetConfig+0x2cc>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006990:	2b30      	cmp	r3, #48	; 0x30
 8006992:	d016      	beq.n	80069c2 <UART_SetConfig+0x19a>
 8006994:	2b30      	cmp	r3, #48	; 0x30
 8006996:	d818      	bhi.n	80069ca <UART_SetConfig+0x1a2>
 8006998:	2b20      	cmp	r3, #32
 800699a:	d00a      	beq.n	80069b2 <UART_SetConfig+0x18a>
 800699c:	2b20      	cmp	r3, #32
 800699e:	d814      	bhi.n	80069ca <UART_SetConfig+0x1a2>
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <UART_SetConfig+0x182>
 80069a4:	2b10      	cmp	r3, #16
 80069a6:	d008      	beq.n	80069ba <UART_SetConfig+0x192>
 80069a8:	e00f      	b.n	80069ca <UART_SetConfig+0x1a2>
 80069aa:	2300      	movs	r3, #0
 80069ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b0:	e0ad      	b.n	8006b0e <UART_SetConfig+0x2e6>
 80069b2:	2302      	movs	r3, #2
 80069b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b8:	e0a9      	b.n	8006b0e <UART_SetConfig+0x2e6>
 80069ba:	2304      	movs	r3, #4
 80069bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c0:	e0a5      	b.n	8006b0e <UART_SetConfig+0x2e6>
 80069c2:	2308      	movs	r3, #8
 80069c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c8:	e0a1      	b.n	8006b0e <UART_SetConfig+0x2e6>
 80069ca:	2310      	movs	r3, #16
 80069cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d0:	e09d      	b.n	8006b0e <UART_SetConfig+0x2e6>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a4a      	ldr	r2, [pc, #296]	; (8006b00 <UART_SetConfig+0x2d8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d125      	bne.n	8006a28 <UART_SetConfig+0x200>
 80069dc:	4b45      	ldr	r3, [pc, #276]	; (8006af4 <UART_SetConfig+0x2cc>)
 80069de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069e6:	2bc0      	cmp	r3, #192	; 0xc0
 80069e8:	d016      	beq.n	8006a18 <UART_SetConfig+0x1f0>
 80069ea:	2bc0      	cmp	r3, #192	; 0xc0
 80069ec:	d818      	bhi.n	8006a20 <UART_SetConfig+0x1f8>
 80069ee:	2b80      	cmp	r3, #128	; 0x80
 80069f0:	d00a      	beq.n	8006a08 <UART_SetConfig+0x1e0>
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	d814      	bhi.n	8006a20 <UART_SetConfig+0x1f8>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <UART_SetConfig+0x1d8>
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	d008      	beq.n	8006a10 <UART_SetConfig+0x1e8>
 80069fe:	e00f      	b.n	8006a20 <UART_SetConfig+0x1f8>
 8006a00:	2300      	movs	r3, #0
 8006a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a06:	e082      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a0e:	e07e      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006a10:	2304      	movs	r3, #4
 8006a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a16:	e07a      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006a18:	2308      	movs	r3, #8
 8006a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a1e:	e076      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006a20:	2310      	movs	r3, #16
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a26:	e072      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a35      	ldr	r2, [pc, #212]	; (8006b04 <UART_SetConfig+0x2dc>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d12a      	bne.n	8006a88 <UART_SetConfig+0x260>
 8006a32:	4b30      	ldr	r3, [pc, #192]	; (8006af4 <UART_SetConfig+0x2cc>)
 8006a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a40:	d01a      	beq.n	8006a78 <UART_SetConfig+0x250>
 8006a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a46:	d81b      	bhi.n	8006a80 <UART_SetConfig+0x258>
 8006a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4c:	d00c      	beq.n	8006a68 <UART_SetConfig+0x240>
 8006a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a52:	d815      	bhi.n	8006a80 <UART_SetConfig+0x258>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <UART_SetConfig+0x238>
 8006a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a5c:	d008      	beq.n	8006a70 <UART_SetConfig+0x248>
 8006a5e:	e00f      	b.n	8006a80 <UART_SetConfig+0x258>
 8006a60:	2300      	movs	r3, #0
 8006a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a66:	e052      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a6e:	e04e      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006a70:	2304      	movs	r3, #4
 8006a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a76:	e04a      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006a78:	2308      	movs	r3, #8
 8006a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7e:	e046      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006a80:	2310      	movs	r3, #16
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a86:	e042      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a17      	ldr	r2, [pc, #92]	; (8006aec <UART_SetConfig+0x2c4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d13a      	bne.n	8006b08 <UART_SetConfig+0x2e0>
 8006a92:	4b18      	ldr	r3, [pc, #96]	; (8006af4 <UART_SetConfig+0x2cc>)
 8006a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006aa0:	d01a      	beq.n	8006ad8 <UART_SetConfig+0x2b0>
 8006aa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006aa6:	d81b      	bhi.n	8006ae0 <UART_SetConfig+0x2b8>
 8006aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aac:	d00c      	beq.n	8006ac8 <UART_SetConfig+0x2a0>
 8006aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ab2:	d815      	bhi.n	8006ae0 <UART_SetConfig+0x2b8>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <UART_SetConfig+0x298>
 8006ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006abc:	d008      	beq.n	8006ad0 <UART_SetConfig+0x2a8>
 8006abe:	e00f      	b.n	8006ae0 <UART_SetConfig+0x2b8>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac6:	e022      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ace:	e01e      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad6:	e01a      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006ad8:	2308      	movs	r3, #8
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ade:	e016      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae6:	e012      	b.n	8006b0e <UART_SetConfig+0x2e6>
 8006ae8:	efff69f3 	.word	0xefff69f3
 8006aec:	40008000 	.word	0x40008000
 8006af0:	40013800 	.word	0x40013800
 8006af4:	40021000 	.word	0x40021000
 8006af8:	40004400 	.word	0x40004400
 8006afc:	40004800 	.word	0x40004800
 8006b00:	40004c00 	.word	0x40004c00
 8006b04:	40005000 	.word	0x40005000
 8006b08:	2310      	movs	r3, #16
 8006b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4aa0      	ldr	r2, [pc, #640]	; (8006d94 <UART_SetConfig+0x56c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d17a      	bne.n	8006c0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d824      	bhi.n	8006b6a <UART_SetConfig+0x342>
 8006b20:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <UART_SetConfig+0x300>)
 8006b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b26:	bf00      	nop
 8006b28:	08006b4d 	.word	0x08006b4d
 8006b2c:	08006b6b 	.word	0x08006b6b
 8006b30:	08006b55 	.word	0x08006b55
 8006b34:	08006b6b 	.word	0x08006b6b
 8006b38:	08006b5b 	.word	0x08006b5b
 8006b3c:	08006b6b 	.word	0x08006b6b
 8006b40:	08006b6b 	.word	0x08006b6b
 8006b44:	08006b6b 	.word	0x08006b6b
 8006b48:	08006b63 	.word	0x08006b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b4c:	f7fe fa42 	bl	8004fd4 <HAL_RCC_GetPCLK1Freq>
 8006b50:	61f8      	str	r0, [r7, #28]
        break;
 8006b52:	e010      	b.n	8006b76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b54:	4b90      	ldr	r3, [pc, #576]	; (8006d98 <UART_SetConfig+0x570>)
 8006b56:	61fb      	str	r3, [r7, #28]
        break;
 8006b58:	e00d      	b.n	8006b76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b5a:	f7fe f9a3 	bl	8004ea4 <HAL_RCC_GetSysClockFreq>
 8006b5e:	61f8      	str	r0, [r7, #28]
        break;
 8006b60:	e009      	b.n	8006b76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b66:	61fb      	str	r3, [r7, #28]
        break;
 8006b68:	e005      	b.n	8006b76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80fd 	beq.w	8006d78 <UART_SetConfig+0x550>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	4613      	mov	r3, r2
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	4413      	add	r3, r2
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d305      	bcc.n	8006b9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d903      	bls.n	8006ba2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ba0:	e0ea      	b.n	8006d78 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	461c      	mov	r4, r3
 8006ba8:	4615      	mov	r5, r2
 8006baa:	f04f 0200 	mov.w	r2, #0
 8006bae:	f04f 0300 	mov.w	r3, #0
 8006bb2:	022b      	lsls	r3, r5, #8
 8006bb4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006bb8:	0222      	lsls	r2, r4, #8
 8006bba:	68f9      	ldr	r1, [r7, #12]
 8006bbc:	6849      	ldr	r1, [r1, #4]
 8006bbe:	0849      	lsrs	r1, r1, #1
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	4688      	mov	r8, r1
 8006bc4:	4681      	mov	r9, r0
 8006bc6:	eb12 0a08 	adds.w	sl, r2, r8
 8006bca:	eb43 0b09 	adc.w	fp, r3, r9
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	603b      	str	r3, [r7, #0]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bdc:	4650      	mov	r0, sl
 8006bde:	4659      	mov	r1, fp
 8006be0:	f7f9 ff10 	bl	8000a04 <__aeabi_uldivmod>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4613      	mov	r3, r2
 8006bea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bf2:	d308      	bcc.n	8006c06 <UART_SetConfig+0x3de>
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bfa:	d204      	bcs.n	8006c06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	60da      	str	r2, [r3, #12]
 8006c04:	e0b8      	b.n	8006d78 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c0c:	e0b4      	b.n	8006d78 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c16:	d15f      	bne.n	8006cd8 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8006c18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d828      	bhi.n	8006c72 <UART_SetConfig+0x44a>
 8006c20:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <UART_SetConfig+0x400>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c4d 	.word	0x08006c4d
 8006c2c:	08006c55 	.word	0x08006c55
 8006c30:	08006c5d 	.word	0x08006c5d
 8006c34:	08006c73 	.word	0x08006c73
 8006c38:	08006c63 	.word	0x08006c63
 8006c3c:	08006c73 	.word	0x08006c73
 8006c40:	08006c73 	.word	0x08006c73
 8006c44:	08006c73 	.word	0x08006c73
 8006c48:	08006c6b 	.word	0x08006c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c4c:	f7fe f9c2 	bl	8004fd4 <HAL_RCC_GetPCLK1Freq>
 8006c50:	61f8      	str	r0, [r7, #28]
        break;
 8006c52:	e014      	b.n	8006c7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c54:	f7fe f9d4 	bl	8005000 <HAL_RCC_GetPCLK2Freq>
 8006c58:	61f8      	str	r0, [r7, #28]
        break;
 8006c5a:	e010      	b.n	8006c7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c5c:	4b4e      	ldr	r3, [pc, #312]	; (8006d98 <UART_SetConfig+0x570>)
 8006c5e:	61fb      	str	r3, [r7, #28]
        break;
 8006c60:	e00d      	b.n	8006c7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c62:	f7fe f91f 	bl	8004ea4 <HAL_RCC_GetSysClockFreq>
 8006c66:	61f8      	str	r0, [r7, #28]
        break;
 8006c68:	e009      	b.n	8006c7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6e:	61fb      	str	r3, [r7, #28]
        break;
 8006c70:	e005      	b.n	8006c7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d079      	beq.n	8006d78 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	005a      	lsls	r2, r3, #1
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	441a      	add	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	2b0f      	cmp	r3, #15
 8006ca0:	d916      	bls.n	8006cd0 <UART_SetConfig+0x4a8>
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca8:	d212      	bcs.n	8006cd0 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f023 030f 	bic.w	r3, r3, #15
 8006cb2:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	085b      	lsrs	r3, r3, #1
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	f003 0307 	and.w	r3, r3, #7
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	8afb      	ldrh	r3, [r7, #22]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	8afa      	ldrh	r2, [r7, #22]
 8006ccc:	60da      	str	r2, [r3, #12]
 8006cce:	e053      	b.n	8006d78 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cd6:	e04f      	b.n	8006d78 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d828      	bhi.n	8006d32 <UART_SetConfig+0x50a>
 8006ce0:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <UART_SetConfig+0x4c0>)
 8006ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce6:	bf00      	nop
 8006ce8:	08006d0d 	.word	0x08006d0d
 8006cec:	08006d15 	.word	0x08006d15
 8006cf0:	08006d1d 	.word	0x08006d1d
 8006cf4:	08006d33 	.word	0x08006d33
 8006cf8:	08006d23 	.word	0x08006d23
 8006cfc:	08006d33 	.word	0x08006d33
 8006d00:	08006d33 	.word	0x08006d33
 8006d04:	08006d33 	.word	0x08006d33
 8006d08:	08006d2b 	.word	0x08006d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d0c:	f7fe f962 	bl	8004fd4 <HAL_RCC_GetPCLK1Freq>
 8006d10:	61f8      	str	r0, [r7, #28]
        break;
 8006d12:	e014      	b.n	8006d3e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d14:	f7fe f974 	bl	8005000 <HAL_RCC_GetPCLK2Freq>
 8006d18:	61f8      	str	r0, [r7, #28]
        break;
 8006d1a:	e010      	b.n	8006d3e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d1c:	4b1e      	ldr	r3, [pc, #120]	; (8006d98 <UART_SetConfig+0x570>)
 8006d1e:	61fb      	str	r3, [r7, #28]
        break;
 8006d20:	e00d      	b.n	8006d3e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d22:	f7fe f8bf 	bl	8004ea4 <HAL_RCC_GetSysClockFreq>
 8006d26:	61f8      	str	r0, [r7, #28]
        break;
 8006d28:	e009      	b.n	8006d3e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d2e:	61fb      	str	r3, [r7, #28]
        break;
 8006d30:	e005      	b.n	8006d3e <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d3c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d019      	beq.n	8006d78 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	085a      	lsrs	r2, r3, #1
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	441a      	add	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	2b0f      	cmp	r3, #15
 8006d5e:	d908      	bls.n	8006d72 <UART_SetConfig+0x54a>
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d66:	d204      	bcs.n	8006d72 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	60da      	str	r2, [r3, #12]
 8006d70:	e002      	b.n	8006d78 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006d84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3728      	adds	r7, #40	; 0x28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d92:	bf00      	nop
 8006d94:	40008000 	.word	0x40008000
 8006d98:	00f42400 	.word	0x00f42400

08006d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	f003 0308 	and.w	r3, r3, #8
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00a      	beq.n	8006e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d01a      	beq.n	8006eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e9a:	d10a      	bne.n	8006eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	605a      	str	r2, [r3, #4]
  }
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af02      	add	r7, sp, #8
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006eee:	f7fa ff9b 	bl	8001e28 <HAL_GetTick>
 8006ef2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0308 	and.w	r3, r3, #8
 8006efe:	2b08      	cmp	r3, #8
 8006f00:	d10e      	bne.n	8006f20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f82a 	bl	8006f6a <UART_WaitOnFlagUntilTimeout>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e020      	b.n	8006f62 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0304 	and.w	r3, r3, #4
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d10e      	bne.n	8006f4c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f814 	bl	8006f6a <UART_WaitOnFlagUntilTimeout>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e00a      	b.n	8006f62 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2220      	movs	r2, #32
 8006f56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	603b      	str	r3, [r7, #0]
 8006f76:	4613      	mov	r3, r2
 8006f78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f7a:	e05d      	b.n	8007038 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f82:	d059      	beq.n	8007038 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f84:	f7fa ff50 	bl	8001e28 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d302      	bcc.n	8006f9a <UART_WaitOnFlagUntilTimeout+0x30>
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d11b      	bne.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006fa8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0201 	bic.w	r2, r2, #1
 8006fb8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e042      	b.n	8007058 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d02b      	beq.n	8007038 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fee:	d123      	bne.n	8007038 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ff8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007008:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 0201 	bic.w	r2, r2, #1
 8007018:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2220      	movs	r2, #32
 800702a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e00f      	b.n	8007058 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69da      	ldr	r2, [r3, #28]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4013      	ands	r3, r2
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	429a      	cmp	r2, r3
 8007046:	bf0c      	ite	eq
 8007048:	2301      	moveq	r3, #1
 800704a:	2300      	movne	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	461a      	mov	r2, r3
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	429a      	cmp	r2, r3
 8007054:	d092      	beq.n	8006f7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <__libc_init_array>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	4d0d      	ldr	r5, [pc, #52]	; (8007098 <__libc_init_array+0x38>)
 8007064:	4c0d      	ldr	r4, [pc, #52]	; (800709c <__libc_init_array+0x3c>)
 8007066:	1b64      	subs	r4, r4, r5
 8007068:	10a4      	asrs	r4, r4, #2
 800706a:	2600      	movs	r6, #0
 800706c:	42a6      	cmp	r6, r4
 800706e:	d109      	bne.n	8007084 <__libc_init_array+0x24>
 8007070:	4d0b      	ldr	r5, [pc, #44]	; (80070a0 <__libc_init_array+0x40>)
 8007072:	4c0c      	ldr	r4, [pc, #48]	; (80070a4 <__libc_init_array+0x44>)
 8007074:	f000 f820 	bl	80070b8 <_init>
 8007078:	1b64      	subs	r4, r4, r5
 800707a:	10a4      	asrs	r4, r4, #2
 800707c:	2600      	movs	r6, #0
 800707e:	42a6      	cmp	r6, r4
 8007080:	d105      	bne.n	800708e <__libc_init_array+0x2e>
 8007082:	bd70      	pop	{r4, r5, r6, pc}
 8007084:	f855 3b04 	ldr.w	r3, [r5], #4
 8007088:	4798      	blx	r3
 800708a:	3601      	adds	r6, #1
 800708c:	e7ee      	b.n	800706c <__libc_init_array+0xc>
 800708e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007092:	4798      	blx	r3
 8007094:	3601      	adds	r6, #1
 8007096:	e7f2      	b.n	800707e <__libc_init_array+0x1e>
 8007098:	08007120 	.word	0x08007120
 800709c:	08007120 	.word	0x08007120
 80070a0:	08007120 	.word	0x08007120
 80070a4:	08007124 	.word	0x08007124

080070a8 <memset>:
 80070a8:	4402      	add	r2, r0
 80070aa:	4603      	mov	r3, r0
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d100      	bne.n	80070b2 <memset+0xa>
 80070b0:	4770      	bx	lr
 80070b2:	f803 1b01 	strb.w	r1, [r3], #1
 80070b6:	e7f9      	b.n	80070ac <memset+0x4>

080070b8 <_init>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	bf00      	nop
 80070bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070be:	bc08      	pop	{r3}
 80070c0:	469e      	mov	lr, r3
 80070c2:	4770      	bx	lr

080070c4 <_fini>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	bf00      	nop
 80070c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ca:	bc08      	pop	{r3}
 80070cc:	469e      	mov	lr, r3
 80070ce:	4770      	bx	lr
