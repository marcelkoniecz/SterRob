
stmProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066f8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006880  08006880  00016880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068c8  080068c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080068c8  080068c8  000168c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068d0  080068d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d0  080068d0  000168d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068d4  080068d4  000168d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080068d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2000000c  080068e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080068e4  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cea  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003196  00000000  00000000  00039d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001658  00000000  00000000  0003cec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b0  00000000  00000000  0003e518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b602  00000000  00000000  0003f9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013f35  00000000  00000000  0006afca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110323  00000000  00000000  0007eeff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018f222  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f58  00000000  00000000  0018f2a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006868 	.word	0x08006868

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006868 	.word	0x08006868

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009b8:	f000 b972 	b.w	8000ca0 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	4688      	mov	r8, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14b      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4615      	mov	r5, r2
 80009e6:	d967      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0720 	rsb	r7, r2, #32
 80009f2:	fa01 f302 	lsl.w	r3, r1, r2
 80009f6:	fa20 f707 	lsr.w	r7, r0, r7
 80009fa:	4095      	lsls	r5, r2
 80009fc:	ea47 0803 	orr.w	r8, r7, r3
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a0c:	fa1f fc85 	uxth.w	ip, r5
 8000a10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a18:	fb07 f10c 	mul.w	r1, r7, ip
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18eb      	adds	r3, r5, r3
 8000a22:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a26:	f080 811b 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8118 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a30:	3f02      	subs	r7, #2
 8000a32:	442b      	add	r3, r5
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a48:	45a4      	cmp	ip, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	192c      	adds	r4, r5, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a52:	f080 8107 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a56:	45a4      	cmp	ip, r4
 8000a58:	f240 8104 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	442c      	add	r4, r5
 8000a60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a64:	eba4 040c 	sub.w	r4, r4, ip
 8000a68:	2700      	movs	r7, #0
 8000a6a:	b11e      	cbz	r6, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c6 4300 	strd	r4, r3, [r6]
 8000a74:	4639      	mov	r1, r7
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0xbe>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80eb 	beq.w	8000c5a <__udivmoddi4+0x286>
 8000a84:	2700      	movs	r7, #0
 8000a86:	e9c6 0100 	strd	r0, r1, [r6]
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	fab3 f783 	clz	r7, r3
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d147      	bne.n	8000b2a <__udivmoddi4+0x156>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xd0>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 80fa 	bhi.w	8000c98 <__udivmoddi4+0x2c4>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	4698      	mov	r8, r3
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d0e0      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000ab2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ab6:	e7dd      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000ab8:	b902      	cbnz	r2, 8000abc <__udivmoddi4+0xe8>
 8000aba:	deff      	udf	#255	; 0xff
 8000abc:	fab2 f282 	clz	r2, r2
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	f040 808f 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac6:	1b49      	subs	r1, r1, r5
 8000ac8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000acc:	fa1f f885 	uxth.w	r8, r5
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ad6:	0c23      	lsrs	r3, r4, #16
 8000ad8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	f200 80cd 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000af6:	4684      	mov	ip, r0
 8000af8:	1a59      	subs	r1, r3, r1
 8000afa:	b2a3      	uxth	r3, r4
 8000afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b08:	fb08 f800 	mul.w	r8, r8, r0
 8000b0c:	45a0      	cmp	r8, r4
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x14c>
 8000b10:	192c      	adds	r4, r5, r4
 8000b12:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x14a>
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	f200 80b6 	bhi.w	8000c8a <__udivmoddi4+0x2b6>
 8000b1e:	4618      	mov	r0, r3
 8000b20:	eba4 0408 	sub.w	r4, r4, r8
 8000b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b28:	e79f      	b.n	8000a6a <__udivmoddi4+0x96>
 8000b2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b2e:	40bb      	lsls	r3, r7
 8000b30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b38:	fa01 f407 	lsl.w	r4, r1, r7
 8000b3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b48:	4325      	orrs	r5, r4
 8000b4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b4e:	0c2c      	lsrs	r4, r5, #16
 8000b50:	fb08 3319 	mls	r3, r8, r9, r3
 8000b54:	fa1f fa8e 	uxth.w	sl, lr
 8000b58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b60:	429c      	cmp	r4, r3
 8000b62:	fa02 f207 	lsl.w	r2, r2, r7
 8000b66:	fa00 f107 	lsl.w	r1, r0, r7
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b70:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b74:	f080 8087 	bcs.w	8000c86 <__udivmoddi4+0x2b2>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f240 8084 	bls.w	8000c86 <__udivmoddi4+0x2b2>
 8000b7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b82:	4473      	add	r3, lr
 8000b84:	1b1b      	subs	r3, r3, r4
 8000b86:	b2ad      	uxth	r5, r5
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b98:	45a2      	cmp	sl, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000ba0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ba4:	d26b      	bcs.n	8000c7e <__udivmoddi4+0x2aa>
 8000ba6:	45a2      	cmp	sl, r4
 8000ba8:	d969      	bls.n	8000c7e <__udivmoddi4+0x2aa>
 8000baa:	3802      	subs	r0, #2
 8000bac:	4474      	add	r4, lr
 8000bae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bb6:	eba4 040a 	sub.w	r4, r4, sl
 8000bba:	454c      	cmp	r4, r9
 8000bbc:	46c2      	mov	sl, r8
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	d354      	bcc.n	8000c6c <__udivmoddi4+0x298>
 8000bc2:	d051      	beq.n	8000c68 <__udivmoddi4+0x294>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d069      	beq.n	8000c9c <__udivmoddi4+0x2c8>
 8000bc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000bd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	40fc      	lsrs	r4, r7
 8000bd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bdc:	e9c6 5400 	strd	r5, r4, [r6]
 8000be0:	2700      	movs	r7, #0
 8000be2:	e747      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000be4:	f1c2 0320 	rsb	r3, r2, #32
 8000be8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bec:	4095      	lsls	r5, r2
 8000bee:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	4338      	orrs	r0, r7
 8000bfc:	0c01      	lsrs	r1, r0, #16
 8000bfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c02:	fa1f f885 	uxth.w	r8, r5
 8000c06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c0e:	fb07 f308 	mul.w	r3, r7, r8
 8000c12:	428b      	cmp	r3, r1
 8000c14:	fa04 f402 	lsl.w	r4, r4, r2
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x256>
 8000c1a:	1869      	adds	r1, r5, r1
 8000c1c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c20:	d22f      	bcs.n	8000c82 <__udivmoddi4+0x2ae>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d92d      	bls.n	8000c82 <__udivmoddi4+0x2ae>
 8000c26:	3f02      	subs	r7, #2
 8000c28:	4429      	add	r1, r5
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	b281      	uxth	r1, r0
 8000c2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3a:	fb00 f308 	mul.w	r3, r0, r8
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x27e>
 8000c42:	1869      	adds	r1, r5, r1
 8000c44:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c48:	d217      	bcs.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d915      	bls.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	4429      	add	r1, r5
 8000c52:	1ac9      	subs	r1, r1, r3
 8000c54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c58:	e73b      	b.n	8000ad2 <__udivmoddi4+0xfe>
 8000c5a:	4637      	mov	r7, r6
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	e709      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c60:	4607      	mov	r7, r0
 8000c62:	e6e7      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c64:	4618      	mov	r0, r3
 8000c66:	e6fb      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c68:	4541      	cmp	r1, r8
 8000c6a:	d2ab      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c70:	eb69 020e 	sbc.w	r2, r9, lr
 8000c74:	3801      	subs	r0, #1
 8000c76:	4613      	mov	r3, r2
 8000c78:	e7a4      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7a:	4660      	mov	r0, ip
 8000c7c:	e7e9      	b.n	8000c52 <__udivmoddi4+0x27e>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e795      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c82:	4667      	mov	r7, ip
 8000c84:	e7d1      	b.n	8000c2a <__udivmoddi4+0x256>
 8000c86:	4681      	mov	r9, r0
 8000c88:	e77c      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	442c      	add	r4, r5
 8000c8e:	e747      	b.n	8000b20 <__udivmoddi4+0x14c>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	442b      	add	r3, r5
 8000c96:	e72f      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c98:	4638      	mov	r0, r7
 8000c9a:	e708      	b.n	8000aae <__udivmoddi4+0xda>
 8000c9c:	4637      	mov	r7, r6
 8000c9e:	e6e9      	b.n	8000a74 <__udivmoddi4+0xa0>

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000cc8:	4a2f      	ldr	r2, [pc, #188]	; (8000d88 <MX_ADC1_Init+0xe4>)
 8000cca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cde:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce4:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cf6:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d04:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d10:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d26:	4817      	ldr	r0, [pc, #92]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000d28:	f001 fa90 	bl	800224c <HAL_ADC_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d32:	f000 fa77 	bl	8001224 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4810      	ldr	r0, [pc, #64]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000d42:	f001 ffeb 	bl	8002d1c <HAL_ADCEx_MultiModeConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d4c:	f000 fa6a 	bl	8001224 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_ADC1_Init+0xe8>)
 8000d52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d54:	2306      	movs	r3, #6
 8000d56:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d5c:	237f      	movs	r3, #127	; 0x7f
 8000d5e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d60:	2304      	movs	r3, #4
 8000d62:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_ADC1_Init+0xe0>)
 8000d6e:	f001 fbc1 	bl	80024f4 <HAL_ADC_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000d78:	f000 fa54 	bl	8001224 <Error_Handler>
  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000002c 	.word	0x2000002c
 8000d88:	50040000 	.word	0x50040000
 8000d8c:	19200040 	.word	0x19200040

08000d90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <HAL_ADC_MspInit+0x74>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d124      	bne.n	8000dfc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_ADC_MspInit+0x78>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <HAL_ADC_MspInit+0x78>)
 8000db8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_ADC_MspInit+0x78>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_ADC_MspInit+0x78>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_ADC_MspInit+0x78>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_ADC_MspInit+0x78>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000de2:	2302      	movs	r3, #2
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000de6:	230b      	movs	r3, #11
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df8:	f002 f960 	bl	80030bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	50040000 	.word	0x50040000
 8000e08:	40021000 	.word	0x40021000

08000e0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a3d      	ldr	r2, [pc, #244]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3a:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a37      	ldr	r2, [pc, #220]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a31      	ldr	r2, [pc, #196]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4a2b      	ldr	r2, [pc, #172]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e70:	f043 0310 	orr.w	r3, r3, #16
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a25      	ldr	r2, [pc, #148]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <MX_GPIO_Init+0x110>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2121      	movs	r1, #33	; 0x21
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f002 fab3 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eac:	481c      	ldr	r0, [pc, #112]	; (8000f20 <MX_GPIO_Init+0x114>)
 8000eae:	f002 faad 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	21c0      	movs	r1, #192	; 0xc0
 8000eb6:	481b      	ldr	r0, [pc, #108]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000eb8:	f002 faa8 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000ebc:	2321      	movs	r3, #33	; 0x21
 8000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed6:	f002 f8f1 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480b      	ldr	r0, [pc, #44]	; (8000f20 <MX_GPIO_Init+0x114>)
 8000ef4:	f002 f8e2 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ef8:	23c0      	movs	r3, #192	; 0xc0
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000f10:	f002 f8d4 	bl	80030bc <HAL_GPIO_Init>

}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	; 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	48001000 	.word	0x48001000
 8000f24:	48000400 	.word	0x48000400

08000f28 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b097      	sub	sp, #92	; 0x5c
 8000f2c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f2e:	f000 ff85 	bl	8001e3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f32:	f000 f8db 	bl	80010ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f36:	f7ff ff69 	bl	8000e0c <MX_GPIO_Init>
	MX_QUADSPI_Init();
 8000f3a:	f000 fa19 	bl	8001370 <MX_QUADSPI_Init>
	MX_ADC1_Init();
 8000f3e:	f7ff feb1 	bl	8000ca4 <MX_ADC1_Init>
	MX_RTC_Init();
 8000f42:	f000 fc0d 	bl	8001760 <MX_RTC_Init>
	MX_TIM2_Init();
 8000f46:	f000 fe71 	bl	8001c2c <MX_TIM2_Init>
	MX_USART2_UART_Init();
 8000f4a:	f000 fedb 	bl	8001d04 <MX_USART2_UART_Init>
//	 if (CSP_QSPI_Erase_Chip() != HAL_OK) {
//	 Error_Handler();
//	 }

	 //Ustawienie daty i godziny
	 if (setDate(14, 04, 22, 3))
 8000f4e:	2303      	movs	r3, #3
 8000f50:	2216      	movs	r2, #22
 8000f52:	2104      	movs	r1, #4
 8000f54:	200e      	movs	r0, #14
 8000f56:	f000 fc7b 	bl	8001850 <setDate>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <main+0x3c>
	 Error_Handler();
 8000f60:	f000 f960 	bl	8001224 <Error_Handler>
	 if (setTime(0, 33, 17))
 8000f64:	2211      	movs	r2, #17
 8000f66:	2121      	movs	r1, #33	; 0x21
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f000 fc97 	bl	800189c <setTime>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <main+0x50>
	 Error_Handler();
 8000f74:	f000 f956 	bl	8001224 <Error_Handler>
	 uint32_t sec=RTCtoSec();
 8000f78:	f000 fcb2 	bl	80018e0 <RTCtoSec>
 8000f7c:	64b8      	str	r0, [r7, #72]	; 0x48
	 Error_Handler();
	 }*/

	 //Testy zapisow i odczytow do pamieci
	struct measurement mes[3];
	for(int i=0;i<3;i++){
 8000f7e:	2300      	movs	r3, #0
 8000f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f82:	e0aa      	b.n	80010da <main+0x1b2>
	mes[i].time = 10000000+i;
 8000f84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f86:	4b58      	ldr	r3, [pc, #352]	; (80010e8 <main+0x1c0>)
 8000f88:	4413      	add	r3, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3b50      	subs	r3, #80	; 0x50
 8000f9e:	6019      	str	r1, [r3, #0]
	mes[i].meas[0] = 1+i;
 8000fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	b299      	uxth	r1, r3
 8000fa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3b4c      	subs	r3, #76	; 0x4c
 8000fba:	460a      	mov	r2, r1
 8000fbc:	801a      	strh	r2, [r3, #0]
	mes[i].meas[1] = 8+i;
 8000fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	3308      	adds	r3, #8
 8000fc4:	b299      	uxth	r1, r3
 8000fc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3b4a      	subs	r3, #74	; 0x4a
 8000fd8:	460a      	mov	r2, r1
 8000fda:	801a      	strh	r2, [r3, #0]
	mes[i].meas[2] = 4+i;
 8000fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	b299      	uxth	r1, r3
 8000fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3b48      	subs	r3, #72	; 0x48
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	801a      	strh	r2, [r3, #0]
	mes[i].meas[3] = 1+i;
 8000ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	3301      	adds	r3, #1
 8001000:	b299      	uxth	r1, r3
 8001002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001010:	4413      	add	r3, r2
 8001012:	3b46      	subs	r3, #70	; 0x46
 8001014:	460a      	mov	r2, r1
 8001016:	801a      	strh	r2, [r3, #0]
	mes[i].meas[4] = 5+i;
 8001018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800101a:	b29b      	uxth	r3, r3
 800101c:	3305      	adds	r3, #5
 800101e:	b299      	uxth	r1, r3
 8001020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800102e:	4413      	add	r3, r2
 8001030:	3b44      	subs	r3, #68	; 0x44
 8001032:	460a      	mov	r2, r1
 8001034:	801a      	strh	r2, [r3, #0]
	mes[i].meas[5] = 14+i;
 8001036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001038:	b29b      	uxth	r3, r3
 800103a:	330e      	adds	r3, #14
 800103c:	b299      	uxth	r1, r3
 800103e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800104c:	4413      	add	r3, r2
 800104e:	3b42      	subs	r3, #66	; 0x42
 8001050:	460a      	mov	r2, r1
 8001052:	801a      	strh	r2, [r3, #0]
	mes[i].meas[6] = 18+i;
 8001054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001056:	b29b      	uxth	r3, r3
 8001058:	3312      	adds	r3, #18
 800105a:	b299      	uxth	r1, r3
 800105c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800106a:	4413      	add	r3, r2
 800106c:	3b40      	subs	r3, #64	; 0x40
 800106e:	460a      	mov	r2, r1
 8001070:	801a      	strh	r2, [r3, #0]
	mes[i].meas[7] = 12+i;
 8001072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001074:	b29b      	uxth	r3, r3
 8001076:	330c      	adds	r3, #12
 8001078:	b299      	uxth	r1, r3
 800107a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001088:	4413      	add	r3, r2
 800108a:	3b3e      	subs	r3, #62	; 0x3e
 800108c:	460a      	mov	r2, r1
 800108e:	801a      	strh	r2, [r3, #0]
	mes[i].meas[8] = 11+i;
 8001090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001092:	b29b      	uxth	r3, r3
 8001094:	330b      	adds	r3, #11
 8001096:	b299      	uxth	r1, r3
 8001098:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80010a6:	4413      	add	r3, r2
 80010a8:	3b3c      	subs	r3, #60	; 0x3c
 80010aa:	460a      	mov	r2, r1
 80010ac:	801a      	strh	r2, [r3, #0]
	storeData(mes[i]);
 80010ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80010bc:	4413      	add	r3, r2
 80010be:	3b50      	subs	r3, #80	; 0x50
 80010c0:	466c      	mov	r4, sp
 80010c2:	f103 0210 	add.w	r2, r3, #16
 80010c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ca:	e884 0003 	stmia.w	r4, {r0, r1}
 80010ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010d0:	f000 f8b4 	bl	800123c <storeData>
	for(int i=0;i<3;i++){
 80010d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010d6:	3301      	adds	r3, #1
 80010d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010dc:	2b02      	cmp	r3, #2
 80010de:	f77f af51 	ble.w	8000f84 <main+0x5c>
	}
	sendData();
 80010e2:	f000 f8ff 	bl	80012e4 <sendData>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80010e6:	e7fe      	b.n	80010e6 <main+0x1be>
 80010e8:	00989680 	.word	0x00989680

080010ec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0b8      	sub	sp, #224	; 0xe0
 80010f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f6:	2244      	movs	r2, #68	; 0x44
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 fbac 	bl	8006858 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001100:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001110:	463b      	mov	r3, r7
 8001112:	2288      	movs	r2, #136	; 0x88
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f005 fb9e 	bl	8006858 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800111c:	f002 f98e 	bl	800343c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001120:	4b3e      	ldr	r3, [pc, #248]	; (800121c <SystemClock_Config+0x130>)
 8001122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001126:	4a3d      	ldr	r2, [pc, #244]	; (800121c <SystemClock_Config+0x130>)
 8001128:	f023 0318 	bic.w	r3, r3, #24
 800112c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001130:	2306      	movs	r3, #6
 8001132:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001136:	2301      	movs	r3, #1
 8001138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001144:	2310      	movs	r3, #16
 8001146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001156:	2301      	movs	r3, #1
 8001158:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 10;
 800115c:	230a      	movs	r3, #10
 800115e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001162:	2307      	movs	r3, #7
 8001164:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001174:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fe8f 	bl	8003e9c <HAL_RCC_OscConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x9c>
		Error_Handler();
 8001184:	f000 f84e 	bl	8001224 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001188:	230f      	movs	r3, #15
 800118a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2303      	movs	r3, #3
 8001190:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80011a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011aa:	2104      	movs	r1, #4
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 fa5b 	bl	8004668 <HAL_RCC_ClockConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0xd0>
		Error_Handler();
 80011b8:	f000 f834 	bl	8001224 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <SystemClock_Config+0x134>)
 80011be:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011c8:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80011d2:	2302      	movs	r3, #2
 80011d4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011d6:	2301      	movs	r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80011da:	2308      	movs	r3, #8
 80011dc:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011de:	2307      	movs	r3, #7
 80011e0:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ee:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80011f0:	463b      	mov	r3, r7
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 fc3c 	bl	8004a70 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x116>
		Error_Handler();
 80011fe:	f000 f811 	bl	8001224 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001202:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001206:	f002 f937 	bl	8003478 <HAL_PWREx_ControlVoltageScaling>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x128>
			!= HAL_OK) {
		Error_Handler();
 8001210:	f000 f808 	bl	8001224 <Error_Handler>
	}
}
 8001214:	bf00      	nop
 8001216:	37e0      	adds	r7, #224	; 0xe0
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40021000 	.word	0x40021000
 8001220:	00024002 	.word	0x00024002

08001224 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	int a = 10;
 800122a:	230a      	movs	r3, #10
 800122c:	607b      	str	r3, [r7, #4]
	/* USER CODE END Error_Handler_Debug */
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <storeData>:

//Variable with current address
uint32_t curAddr = 0;

//Write date and data to memory
HAL_StatusTypeDef storeData(struct measurement mes) {
 800123c:	b084      	sub	sp, #16
 800123e:	b580      	push	{r7, lr}
 8001240:	b084      	sub	sp, #16
 8001242:	af00      	add	r7, sp, #0
 8001244:	f107 0c18 	add.w	ip, r7, #24
 8001248:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	if ((curAddr + 20) >= FLASH_SIZE_HERE)
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <storeData+0xa4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3314      	adds	r3, #20
 8001252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001256:	d301      	bcc.n	800125c <storeData+0x20>
		return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e039      	b.n	80012d0 <storeData+0x94>
	uint32_t tmp2 = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
	tmp2 = mes.time;
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	60bb      	str	r3, [r7, #8]
	if (CSP_QSPI_Write(&tmp2, curAddr, 4) != HAL_OK)
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <storeData+0xa4>)
 8001266:	6819      	ldr	r1, [r3, #0]
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	2204      	movs	r2, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f9a6 	bl	80015c0 <CSP_QSPI_Write>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <storeData+0x42>
		return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e028      	b.n	80012d0 <storeData+0x94>

	curAddr = curAddr + 4;
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <storeData+0xa4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3304      	adds	r3, #4
 8001284:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <storeData+0xa4>)
 8001286:	6013      	str	r3, [r2, #0]
	uint16_t tmp = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 9; i++) {
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	e01a      	b.n	80012c8 <storeData+0x8c>
		tmp = mes.meas[i];
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	f107 0218 	add.w	r2, r7, #24
 800129a:	4413      	add	r3, r2
 800129c:	889b      	ldrh	r3, [r3, #4]
 800129e:	80fb      	strh	r3, [r7, #6]
		if (CSP_QSPI_Write(&tmp, curAddr, 2) != HAL_OK)
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <storeData+0xa4>)
 80012a2:	6819      	ldr	r1, [r3, #0]
 80012a4:	1dbb      	adds	r3, r7, #6
 80012a6:	2202      	movs	r2, #2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f989 	bl	80015c0 <CSP_QSPI_Write>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <storeData+0x7c>
			return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e00b      	b.n	80012d0 <storeData+0x94>
		curAddr = curAddr + 2;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <storeData+0xa4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3302      	adds	r3, #2
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <storeData+0xa4>)
 80012c0:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 9; i++) {
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3301      	adds	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	dde1      	ble.n	8001292 <storeData+0x56>
	}
	return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012da:	b004      	add	sp, #16
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000028 	.word	0x20000028

080012e4 <sendData>:

uint16_t sendData() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	; 0x38
 80012e8:	af00      	add	r7, sp, #0
	uint16_t dataNum = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint32_t tmpCurAddr = curAddr;
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <sendData+0x84>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t readData[20];
	//string uartData;
	if (curAddr < 18)
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <sendData+0x84>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b11      	cmp	r3, #17
 80012fa:	d801      	bhi.n	8001300 <sendData+0x1c>
		return dataNum;
 80012fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012fe:	e02f      	b.n	8001360 <sendData+0x7c>
	for (int i = 0; i < (tmpCurAddr / 24); i++) {
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
 8001304:	e01b      	b.n	800133e <sendData+0x5a>
		if (CSP_QSPI_Read(&readData, dataNum * 24, 24) != HAL_OK)
 8001306:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4619      	mov	r1, r3
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2218      	movs	r2, #24
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f9cc 	bl	80016b4 <CSP_QSPI_Read>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <sendData+0x44>
			return -1;
 8001322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001326:	e01b      	b.n	8001360 <sendData+0x7c>
		dataNum++;
 8001328:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800132a:	3301      	adds	r3, #1
 800132c:	86fb      	strh	r3, [r7, #54]	; 0x36
		curAddr = curAddr - 20;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <sendData+0x84>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3b14      	subs	r3, #20
 8001334:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <sendData+0x84>)
 8001336:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < (tmpCurAddr / 24); i++) {
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	3301      	adds	r3, #1
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	4a0a      	ldr	r2, [pc, #40]	; (800136c <sendData+0x88>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	091a      	lsrs	r2, r3, #4
 8001348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134a:	429a      	cmp	r2, r3
 800134c:	d8db      	bhi.n	8001306 <sendData+0x22>
		//printf("%s", readData);
	}
	if (CSP_QSPI_Erase_Chip() != HAL_OK)
 800134e:	f000 f879 	bl	8001444 <CSP_QSPI_Erase_Chip>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <sendData+0x7a>
		return -2;
 8001358:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800135c:	e000      	b.n	8001360 <sendData+0x7c>
	return dataNum;
 800135e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8001360:	4618      	mov	r0, r3
 8001362:	3738      	adds	r7, #56	; 0x38
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000028 	.word	0x20000028
 800136c:	aaaaaaab 	.word	0xaaaaaaab

08001370 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <MX_QUADSPI_Init+0x48>)
 8001378:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 800137c:	2201      	movs	r2, #1
 800137e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 8001382:	2204      	movs	r2, #4
 8001384:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 8001388:	2210      	movs	r2, #16
 800138a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 800138e:	2217      	movs	r2, #23
 8001390:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 8001394:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001398:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 80013a2:	f002 f8bf 	bl	8003524 <HAL_QSPI_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_QUADSPI_Init+0x40>
  {
    Error_Handler();
 80013ac:	f7ff ff3a 	bl	8001224 <Error_Handler>
  }

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000090 	.word	0x20000090
 80013b8:	a0001000 	.word	0xa0001000

080013bc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a17      	ldr	r2, [pc, #92]	; (8001438 <HAL_QSPI_MspInit+0x7c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d128      	bne.n	8001430 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_QSPI_MspInit+0x80>)
 80013e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013e2:	4a16      	ldr	r2, [pc, #88]	; (800143c <HAL_QSPI_MspInit+0x80>)
 80013e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e8:	6513      	str	r3, [r2, #80]	; 0x50
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <HAL_QSPI_MspInit+0x80>)
 80013ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_QSPI_MspInit+0x80>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	4a10      	ldr	r2, [pc, #64]	; (800143c <HAL_QSPI_MspInit+0x80>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <HAL_QSPI_MspInit+0x80>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800140e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001412:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001420:	230a      	movs	r3, #10
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <HAL_QSPI_MspInit+0x84>)
 800142c:	f001 fe46 	bl	80030bc <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	a0001000 	.word	0xa0001000
 800143c:	40021000 	.word	0x40021000
 8001440:	48001000 	.word	0x48001000

08001444 <CSP_QSPI_Erase_Chip>:
    return HAL_OK;
}


uint8_t CSP_QSPI_Erase_Chip(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08e      	sub	sp, #56	; 0x38
 8001448:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;


    if (QSPI_WriteEnable() != HAL_OK) {
 800144a:	f000 f86f 	bl	800152c <QSPI_WriteEnable>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <CSP_QSPI_Erase_Chip+0x14>
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e02b      	b.n	80014b0 <CSP_QSPI_Erase_Chip+0x6c>
    }


    /* Erasing Sequence --------------------------------- */
    sCommand.Instruction = BULK_ERASE_CMD;
 8001458:	23c7      	movs	r3, #199	; 0xc7
 800145a:	603b      	str	r3, [r7, #0]
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800145c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001460:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001466:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001470:	2300      	movs	r3, #0
 8001472:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001474:	2300      	movs	r3, #0
 8001476:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
    sCommand.Address = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
    sCommand.DataMode = QSPI_DATA_NONE;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DummyCycles = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]


    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_MAX_DELAY)
 8001488:	463b      	mov	r3, r7
 800148a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800148e:	4619      	mov	r1, r3
 8001490:	4809      	ldr	r0, [pc, #36]	; (80014b8 <CSP_QSPI_Erase_Chip+0x74>)
 8001492:	f002 f8bd 	bl	8003610 <HAL_QSPI_Command>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <CSP_QSPI_Erase_Chip+0x5c>
        != HAL_OK) {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e007      	b.n	80014b0 <CSP_QSPI_Erase_Chip+0x6c>
    }

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 80014a0:	f000 f80c 	bl	80014bc <QSPI_AutoPollingMemReady>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <CSP_QSPI_Erase_Chip+0x6a>
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <CSP_QSPI_Erase_Chip+0x6c>
    }

    return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3738      	adds	r7, #56	; 0x38
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000090 	.word	0x20000090

080014bc <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b094      	sub	sp, #80	; 0x50
 80014c0:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80014c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c6:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 80014c8:	2305      	movs	r3, #5
 80014ca:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80014d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80014e2:	2300      	movs	r3, #0
 80014e4:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80014e6:	2300      	movs	r3, #0
 80014e8:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match = 0x00;
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
    sConfig.Mask = N25Q128A_SR_WIP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 80014fa:	2310      	movs	r3, #16
 80014fc:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80014fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001502:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_MAX_DELAY) != HAL_OK)
 8001504:	463a      	mov	r2, r7
 8001506:	f107 0118 	add.w	r1, r7, #24
 800150a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <QSPI_AutoPollingMemReady+0x6c>)
 8001510:	f002 fa15 	bl	800393e <HAL_QSPI_AutoPolling>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <QSPI_AutoPollingMemReady+0x62>
    {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <QSPI_AutoPollingMemReady+0x64>
    }

    return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3750      	adds	r7, #80	; 0x50
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000090 	.word	0x20000090

0800152c <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	; 0x50
 8001530:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001532:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 8001538:	2306      	movs	r3, #6
 800153a:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800153c:	2300      	movs	r3, #0
 800153e:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001540:	2300      	movs	r3, #0
 8001542:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 8001544:	2300      	movs	r3, #0
 8001546:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001550:	2300      	movs	r3, #0
 8001552:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001554:	2300      	movs	r3, #0
 8001556:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001558:	f107 0318 	add.w	r3, r7, #24
 800155c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001560:	4619      	mov	r1, r3
 8001562:	4816      	ldr	r0, [pc, #88]	; (80015bc <QSPI_WriteEnable+0x90>)
 8001564:	f002 f854 	bl	8003610 <HAL_QSPI_Command>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e01f      	b.n	80015b2 <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
 8001572:	2302      	movs	r3, #2
 8001574:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
 8001576:	2302      	movs	r3, #2
 8001578:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 800157e:	2301      	movs	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8001582:	2310      	movs	r3, #16
 8001584:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800158a:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 800158c:	2305      	movs	r3, #5
 800158e:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001594:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001596:	463a      	mov	r2, r7
 8001598:	f107 0118 	add.w	r1, r7, #24
 800159c:	f241 3388 	movw	r3, #5000	; 0x1388
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <QSPI_WriteEnable+0x90>)
 80015a2:	f002 f9cc 	bl	800393e <HAL_QSPI_AutoPolling>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3750      	adds	r7, #80	; 0x50
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000090 	.word	0x20000090

080015c0 <CSP_QSPI_Write>:
  return HAL_OK;
}


uint8_t CSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b096      	sub	sp, #88	; 0x58
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80015d4:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80015d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d901      	bls.n	80015e2 <CSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4413      	add	r3, r2
 80015ec:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80015ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 80015f4:	2312      	movs	r3, #18
 80015f6:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80015f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80015fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001602:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001604:	2300      	movs	r3, #0
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001608:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800160c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001616:	2300      	movs	r3, #0
 8001618:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800161a:	2300      	movs	r3, #0
 800161c:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 800161e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001620:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8001622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001624:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 8001626:	f7ff ff81 	bl	800152c <QSPI_WriteEnable>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <CSP_QSPI_Write+0x74>
    {
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e038      	b.n	80016a6 <CSP_QSPI_Write+0xe6>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	f241 3288 	movw	r2, #5000	; 0x1388
 800163c:	4619      	mov	r1, r3
 800163e:	481c      	ldr	r0, [pc, #112]	; (80016b0 <CSP_QSPI_Write+0xf0>)
 8001640:	f001 ffe6 	bl	8003610 <HAL_QSPI_Command>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <CSP_QSPI_Write+0x8e>
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e02b      	b.n	80016a6 <CSP_QSPI_Write+0xe6>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800164e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001652:	68f9      	ldr	r1, [r7, #12]
 8001654:	4816      	ldr	r0, [pc, #88]	; (80016b0 <CSP_QSPI_Write+0xf0>)
 8001656:	f002 f839 	bl	80036cc <HAL_QSPI_Transmit>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <CSP_QSPI_Write+0xa4>
    {
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e020      	b.n	80016a6 <CSP_QSPI_Write+0xe6>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady() != HAL_OK)
 8001664:	f7ff ff2a 	bl	80014bc <QSPI_AutoPollingMemReady>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <CSP_QSPI_Write+0xb2>
    {
      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e019      	b.n	80016a6 <CSP_QSPI_Write+0xe6>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8001672:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001676:	4413      	add	r3, r2
 8001678:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8001682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001684:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001688:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800168a:	429a      	cmp	r2, r3
 800168c:	d203      	bcs.n	8001696 <CSP_QSPI_Write+0xd6>
 800168e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	e001      	b.n	800169a <CSP_QSPI_Write+0xda>
 8001696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169a:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 800169c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800169e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d3bc      	bcc.n	800161e <CSP_QSPI_Write+0x5e>

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3758      	adds	r7, #88	; 0x58
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000090 	.word	0x20000090

080016b4 <CSP_QSPI_Read>:


uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b092      	sub	sp, #72	; 0x48
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80016c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80016c6:	23eb      	movs	r3, #235	; 0xeb
 80016c8:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80016ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80016d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d4:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80016da:	2300      	movs	r3, #0
 80016dc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80016de:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80016e4:	230a      	movs	r3, #10
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80016f0:	2300      	movs	r3, #0
 80016f2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80016f4:	2300      	movs	r3, #0
 80016f6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001700:	4619      	mov	r1, r3
 8001702:	4816      	ldr	r0, [pc, #88]	; (800175c <CSP_QSPI_Read+0xa8>)
 8001704:	f001 ff84 	bl	8003610 <HAL_QSPI_Command>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <CSP_QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e01f      	b.n	8001752 <CSP_QSPI_Read+0x9e>
  }

  /* Set S# timing for Read command */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <CSP_QSPI_Read+0xa8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <CSP_QSPI_Read+0xa8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001724:	605a      	str	r2, [r3, #4]

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001726:	f241 3288 	movw	r2, #5000	; 0x1388
 800172a:	68f9      	ldr	r1, [r7, #12]
 800172c:	480b      	ldr	r0, [pc, #44]	; (800175c <CSP_QSPI_Read+0xa8>)
 800172e:	f002 f864 	bl	80037fa <HAL_QSPI_Receive>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <CSP_QSPI_Read+0x88>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e00a      	b.n	8001752 <CSP_QSPI_Read+0x9e>
  }

  /* Restore S# timing for nonRead commands */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <CSP_QSPI_Read+0xa8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <CSP_QSPI_Read+0xa8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 800174e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3748      	adds	r7, #72	; 0x48
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000090 	.word	0x20000090

08001760 <MX_RTC_Init>:
/* USER CODE END 0 */

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = { 0 };
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001774:	2300      	movs	r3, #0
 8001776:	603b      	str	r3, [r7, #0]

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <MX_RTC_Init+0xb0>)
 800177a:	4a26      	ldr	r2, [pc, #152]	; (8001814 <MX_RTC_Init+0xb4>)
 800177c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <MX_RTC_Init+0xb0>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <MX_RTC_Init+0xb0>)
 8001786:	227f      	movs	r2, #127	; 0x7f
 8001788:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <MX_RTC_Init+0xb0>)
 800178c:	22ff      	movs	r2, #255	; 0xff
 800178e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <MX_RTC_Init+0xb0>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <MX_RTC_Init+0xb0>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_RTC_Init+0xb0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_RTC_Init+0xb0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80017a8:	4819      	ldr	r0, [pc, #100]	; (8001810 <MX_RTC_Init+0xb0>)
 80017aa:	f003 fe11 	bl	80053d0 <HAL_RTC_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_RTC_Init+0x58>
		Error_Handler();
 80017b4:	f7ff fd36 	bl	8001224 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	4619      	mov	r1, r3
 80017d2:	480f      	ldr	r0, [pc, #60]	; (8001810 <MX_RTC_Init+0xb0>)
 80017d4:	f003 fe77 	bl	80054c6 <HAL_RTC_SetTime>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_RTC_Init+0x82>
		Error_Handler();
 80017de:	f7ff fd21 	bl	8001224 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017e2:	2301      	movs	r3, #1
 80017e4:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 80017e6:	2301      	movs	r3, #1
 80017e8:	707b      	strb	r3, [r7, #1]
	sDate.Date = 1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80017f2:	463b      	mov	r3, r7
 80017f4:	2200      	movs	r2, #0
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_RTC_Init+0xb0>)
 80017fa:	f003 ff5d 	bl	80056b8 <HAL_RTC_SetDate>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_RTC_Init+0xa8>
		Error_Handler();
 8001804:	f7ff fd0e 	bl	8001224 <Error_Handler>
	}

}
 8001808:	bf00      	nop
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200000d4 	.word	0x200000d4
 8001814:	40002800 	.word	0x40002800

08001818 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle) {
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

	if (rtcHandle->Instance == RTC) {
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a08      	ldr	r2, [pc, #32]	; (8001848 <HAL_RTC_MspInit+0x30>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d107      	bne.n	800183a <HAL_RTC_MspInit+0x22>
		/* USER CODE BEGIN RTC_MspInit 0 */

		/* USER CODE END RTC_MspInit 0 */
		/* RTC clock enable */
		__HAL_RCC_RTC_ENABLE();
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_RTC_MspInit+0x34>)
 800182c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001830:	4a06      	ldr	r2, [pc, #24]	; (800184c <HAL_RTC_MspInit+0x34>)
 8001832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		/* USER CODE BEGIN RTC_MspInit 1 */

		/* USER CODE END RTC_MspInit 1 */
	}
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40002800 	.word	0x40002800
 800184c:	40021000 	.word	0x40021000

08001850 <setDate>:
		/* USER CODE END RTC_MspDeInit 1 */
	}
}

/* USER CODE BEGIN 1 */
uint8_t setDate(int day, int month, int year, int weekDay) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
	RTC_DateTypeDef Date;
	Date.Date = day;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	75bb      	strb	r3, [r7, #22]
	Date.Month = month;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	757b      	strb	r3, [r7, #21]
	Date.WeekDay = weekDay;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	753b      	strb	r3, [r7, #20]
	Date.Year = year;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	75fb      	strb	r3, [r7, #23]

	if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) == HAL_OK)
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	2200      	movs	r2, #0
 800187c:	4619      	mov	r1, r3
 800187e:	4806      	ldr	r0, [pc, #24]	; (8001898 <setDate+0x48>)
 8001880:	f003 ff1a 	bl	80056b8 <HAL_RTC_SetDate>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <setDate+0x3e>
		return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <setDate+0x40>
	else
		return HAL_ERROR;
 800188e:	2301      	movs	r3, #1

}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200000d4 	.word	0x200000d4

0800189c <setTime>:
uint8_t setTime(int sec, int min, int hour) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
	RTC_TimeTypeDef Time;
	Time.Seconds = sec;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	75bb      	strb	r3, [r7, #22]
	Time.Minutes = min;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	757b      	strb	r3, [r7, #21]
	Time.Hours = hour;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	753b      	strb	r3, [r7, #20]

	if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2200      	movs	r2, #0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4806      	ldr	r0, [pc, #24]	; (80018dc <setTime+0x40>)
 80018c4:	f003 fdff 	bl	80054c6 <HAL_RTC_SetTime>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <setTime+0x36>
		return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <setTime+0x38>
	else
		return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1

}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3728      	adds	r7, #40	; 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200000d4 	.word	0x200000d4

080018e0 <RTCtoSec>:

uint32_t RTCtoSec() {
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef Time;
	RTC_DateTypeDef Date;
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	2200      	movs	r2, #0
 80018ec:	4619      	mov	r1, r3
 80018ee:	483e      	ldr	r0, [pc, #248]	; (80019e8 <RTCtoSec+0x108>)
 80018f0:	f003 fe86 	bl	8005600 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	4619      	mov	r1, r3
 80018fa:	483b      	ldr	r0, [pc, #236]	; (80019e8 <RTCtoSec+0x108>)
 80018fc:	f003 ff63 	bl	80057c6 <HAL_RTC_GetDate>
	uint32_t timeSec = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
	timeSec += Time.Seconds; //Adding seconds
 8001904:	7abb      	ldrb	r3, [r7, #10]
 8001906:	461a      	mov	r2, r3
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	4413      	add	r3, r2
 800190c:	61fb      	str	r3, [r7, #28]
	timeSec += (Time.Minutes * 60); //Convert minutes to seconds
 800190e:	7a7b      	ldrb	r3, [r7, #9]
 8001910:	461a      	mov	r2, r3
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	461a      	mov	r2, r3
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	4413      	add	r3, r2
 8001920:	61fb      	str	r3, [r7, #28]
	timeSec += (Time.Hours * 3600); //Convert hours to seconds
 8001922:	7a3b      	ldrb	r3, [r7, #8]
 8001924:	461a      	mov	r2, r3
 8001926:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800192a:	fb03 f302 	mul.w	r3, r3, r2
 800192e:	461a      	mov	r2, r3
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	4413      	add	r3, r2
 8001934:	61fb      	str	r3, [r7, #28]
	timeSec += (Date.Date * 24 * 3600); //Convert date to seconds
 8001936:	79bb      	ldrb	r3, [r7, #6]
 8001938:	461a      	mov	r2, r3
 800193a:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <RTCtoSec+0x10c>)
 800193c:	fb03 f302 	mul.w	r3, r3, r2
 8001940:	461a      	mov	r2, r3
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	4413      	add	r3, r2
 8001946:	61fb      	str	r3, [r7, #28]
	timeSec += monthToSec(Date.Month, Date.Year);
 8001948:	797b      	ldrb	r3, [r7, #5]
 800194a:	79fa      	ldrb	r2, [r7, #7]
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f850 	bl	80019f4 <monthToSec>
 8001954:	4602      	mov	r2, r0
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	4413      	add	r3, r2
 800195a:	61fb      	str	r3, [r7, #28]
	timeSec += (Date.Date * 24 * 3600); //Convert month to seconds
 800195c:	79bb      	ldrb	r3, [r7, #6]
 800195e:	461a      	mov	r2, r3
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <RTCtoSec+0x10c>)
 8001962:	fb03 f302 	mul.w	r3, r3, r2
 8001966:	461a      	mov	r2, r3
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	4413      	add	r3, r2
 800196c:	61fb      	str	r3, [r7, #28]
	timeSec += (Date.Year * 365.25 * 24 * 3600); //convert year to seconds
 800196e:	69f8      	ldr	r0, [r7, #28]
 8001970:	f7fe fd6c 	bl	800044c <__aeabi_ui2d>
 8001974:	4604      	mov	r4, r0
 8001976:	460d      	mov	r5, r1
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fd76 	bl	800046c <__aeabi_i2d>
 8001980:	a315      	add	r3, pc, #84	; (adr r3, 80019d8 <RTCtoSec+0xf8>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	f7fe fddb 	bl	8000540 <__aeabi_dmul>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <RTCtoSec+0x110>)
 8001998:	f7fe fdd2 	bl	8000540 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	a30e      	add	r3, pc, #56	; (adr r3, 80019e0 <RTCtoSec+0x100>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe fdc9 	bl	8000540 <__aeabi_dmul>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4620      	mov	r0, r4
 80019b4:	4629      	mov	r1, r5
 80019b6:	f7fe fc0d 	bl	80001d4 <__adddf3>
 80019ba:	4603      	mov	r3, r0
 80019bc:	460c      	mov	r4, r1
 80019be:	4618      	mov	r0, r3
 80019c0:	4621      	mov	r1, r4
 80019c2:	f7fe ffcf 	bl	8000964 <__aeabi_d2uiz>
 80019c6:	4603      	mov	r3, r0
 80019c8:	61fb      	str	r3, [r7, #28]
	return timeSec;
 80019ca:	69fb      	ldr	r3, [r7, #28]

}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdb0      	pop	{r4, r5, r7, pc}
 80019d4:	f3af 8000 	nop.w
 80019d8:	00000000 	.word	0x00000000
 80019dc:	4076d400 	.word	0x4076d400
 80019e0:	00000000 	.word	0x00000000
 80019e4:	40ac2000 	.word	0x40ac2000
 80019e8:	200000d4 	.word	0x200000d4
 80019ec:	00015180 	.word	0x00015180
 80019f0:	40380000 	.word	0x40380000

080019f4 <monthToSec>:
uint32_t monthToSec(uint8_t month, uint8_t year) {
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	460a      	mov	r2, r1
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	4613      	mov	r3, r2
 8001a02:	71bb      	strb	r3, [r7, #6]
	uint32_t sec = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
	if (year % 4 == 0 && year != 0 && month >= 2)
 8001a08:	79bb      	ldrb	r3, [r7, #6]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d108      	bne.n	8001a26 <monthToSec+0x32>
 8001a14:	79bb      	ldrb	r3, [r7, #6]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d005      	beq.n	8001a26 <monthToSec+0x32>
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d902      	bls.n	8001a26 <monthToSec+0x32>
		sec += 1;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3301      	adds	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
	switch (month) {
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	2b0b      	cmp	r3, #11
 8001a2c:	d868      	bhi.n	8001b00 <monthToSec+0x10c>
 8001a2e:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <monthToSec+0x40>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a65 	.word	0x08001a65
 8001a38:	08001a73 	.word	0x08001a73
 8001a3c:	08001a81 	.word	0x08001a81
 8001a40:	08001a8f 	.word	0x08001a8f
 8001a44:	08001a9d 	.word	0x08001a9d
 8001a48:	08001aab 	.word	0x08001aab
 8001a4c:	08001ab5 	.word	0x08001ab5
 8001a50:	08001ac3 	.word	0x08001ac3
 8001a54:	08001ad1 	.word	0x08001ad1
 8001a58:	08001adb 	.word	0x08001adb
 8001a5c:	08001ae9 	.word	0x08001ae9
 8001a60:	08001af7 	.word	0x08001af7
	case 1:
		sec += ((31 * 1 + 30 * 0) * 24 * 3600);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f503 1323 	add.w	r3, r3, #2670592	; 0x28c000
 8001a6a:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8001a6e:	60fb      	str	r3, [r7, #12]
		break;
 8001a70:	e046      	b.n	8001b00 <monthToSec+0x10c>
	case 2:
		sec += ((31 * 1 + 30 * 0 + 28) * 24 * 3600);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f503 039b 	add.w	r3, r3, #5079040	; 0x4d8000
 8001a78:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
 8001a7c:	60fb      	str	r3, [r7, #12]
		break;
 8001a7e:	e03f      	b.n	8001b00 <monthToSec+0x10c>
	case 3:
		sec += ((31 * 2 + 28) * 24 * 3600);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f503 03ed 	add.w	r3, r3, #7766016	; 0x768000
 8001a86:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001a8a:	60fb      	str	r3, [r7, #12]
		break;
 8001a8c:	e038      	b.n	8001b00 <monthToSec+0x10c>
	case 4:
		sec += ((31 * 2 + 30 + 28) * 24 * 3600);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f503 031e 	add.w	r3, r3, #10354688	; 0x9e0000
 8001a94:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8001a98:	60fb      	str	r3, [r7, #12]
		break;
 8001a9a:	e031      	b.n	8001b00 <monthToSec+0x10c>
	case 5:
		sec += ((31 * 3 + 30 + 28) * 24 * 3600);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f503 0347 	add.w	r3, r3, #13041664	; 0xc70000
 8001aa2:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8001aa6:	60fb      	str	r3, [r7, #12]
		break;
 8001aa8:	e02a      	b.n	8001b00 <monthToSec+0x10c>
	case 6:
		sec += ((31 * 3 + 30 * 2 + 28) * 24 * 3600);
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <monthToSec+0x11c>)
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
		break;
 8001ab2:	e025      	b.n	8001b00 <monthToSec+0x10c>
	case 7:
		sec += ((31 * 4 + 30 * 2 + 28) * 24 * 3600);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f103 738b 	add.w	r3, r3, #18219008	; 0x1160000
 8001aba:	f503 33bf 	add.w	r3, r3, #97792	; 0x17e00
 8001abe:	60fb      	str	r3, [r7, #12]
		break;
 8001ac0:	e01e      	b.n	8001b00 <monthToSec+0x10c>
	case 8:
		sec += ((31 * 5 + 30 * 2 + 28) * 24 * 3600);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f103 73a0 	add.w	r3, r3, #20971520	; 0x1400000
 8001ac8:	f503 43b9 	add.w	r3, r3, #23680	; 0x5c80
 8001acc:	60fb      	str	r3, [r7, #12]
		break;
 8001ace:	e017      	b.n	8001b00 <monthToSec+0x10c>
	case 9:
		sec += ((31 * 5 + 30 * 3 + 28) * 24 * 3600);
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <monthToSec+0x120>)
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
		break;
 8001ad8:	e012      	b.n	8001b00 <monthToSec+0x10c>
	case 10:
		sec += ((31 * 6 + 30 * 3 + 28) * 24 * 3600);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f103 73c8 	add.w	r3, r3, #26214400	; 0x1900000
 8001ae0:	f503 4348 	add.w	r3, r3, #51200	; 0xc800
 8001ae4:	60fb      	str	r3, [r7, #12]
		break;
 8001ae6:	e00b      	b.n	8001b00 <monthToSec+0x10c>
	case 11:
		sec += ((31 * 6 + 30 * 4 + 28) * 24 * 3600);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f103 73dc 	add.w	r3, r3, #28835840	; 0x1b80000
 8001aee:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8001af2:	60fb      	str	r3, [r7, #12]
		break;
 8001af4:	e004      	b.n	8001b00 <monthToSec+0x10c>
	case 12:
		sec += ((31 * 7 + 30 * 4 + 28) * 24 * 3600);
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <monthToSec+0x124>)
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
		break;
 8001afe:	bf00      	nop
	}
	return sec;
 8001b00:	68fb      	ldr	r3, [r7, #12]

}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	00ee9f80 	.word	0x00ee9f80
 8001b14:	0167e980 	.word	0x0167e980
 8001b18:	01e13380 	.word	0x01e13380

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_MspInit+0x44>)
 8001b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_MspInit+0x44>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_MspInit+0x44>)
 8001b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_MspInit+0x44>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_MspInit+0x44>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6593      	str	r3, [r2, #88]	; 0x58
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_MspInit+0x44>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <HardFault_Handler+0x4>

08001b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <MemManage_Handler+0x4>

08001b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb8:	f000 f99c 	bl	8001ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <SystemInit+0x64>)
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bca:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <SystemInit+0x64>)
 8001bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <SystemInit+0x68>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <SystemInit+0x68>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <SystemInit+0x68>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <SystemInit+0x68>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <SystemInit+0x68>)
 8001bec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001bf0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001bf4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <SystemInit+0x68>)
 8001bf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bfc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <SystemInit+0x68>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <SystemInit+0x68>)
 8001c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <SystemInit+0x68>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SystemInit+0x64>)
 8001c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c16:	609a      	str	r2, [r3, #8]
#endif
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000ed00 	.word	0xe000ed00
 8001c28:	40021000 	.word	0x40021000

08001c2c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0310 	add.w	r3, r7, #16
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <MX_TIM2_Init+0x98>)
 8001c4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <MX_TIM2_Init+0x98>)
 8001c54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <MX_TIM2_Init+0x98>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MX_TIM2_Init+0x98>)
 8001c62:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_TIM2_Init+0x98>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <MX_TIM2_Init+0x98>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c74:	4813      	ldr	r0, [pc, #76]	; (8001cc4 <MX_TIM2_Init+0x98>)
 8001c76:	f003 fec5 	bl	8005a04 <HAL_TIM_Base_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001c80:	f7ff fad0 	bl	8001224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <MX_TIM2_Init+0x98>)
 8001c92:	f003 ff0e 	bl	8005ab2 <HAL_TIM_ConfigClockSource>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001c9c:	f7ff fac2 	bl	8001224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_TIM2_Init+0x98>)
 8001cae:	f004 f8ed 	bl	8005e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001cb8:	f7ff fab4 	bl	8001224 <Error_Handler>
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200000f8 	.word	0x200000f8

08001cc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd8:	d10b      	bne.n	8001cf2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_TIM_Base_MspInit+0x38>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <HAL_TIM_Base_MspInit+0x38>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_TIM_Base_MspInit+0x38>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000

08001d04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d0a:	4a15      	ldr	r2, [pc, #84]	; (8001d60 <MX_USART2_UART_Init+0x5c>)
 8001d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d48:	f004 f928 	bl	8005f9c <HAL_UART_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d52:	f7ff fa67 	bl	8001224 <Error_Handler>
  }

}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000144 	.word	0x20000144
 8001d60:	40004400 	.word	0x40004400

08001d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a17      	ldr	r2, [pc, #92]	; (8001de0 <HAL_UART_MspInit+0x7c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d128      	bne.n	8001dd8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d86:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_UART_MspInit+0x80>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <HAL_UART_MspInit+0x80>)
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d90:	6593      	str	r3, [r2, #88]	; 0x58
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_UART_MspInit+0x80>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_UART_MspInit+0x80>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	4a10      	ldr	r2, [pc, #64]	; (8001de4 <HAL_UART_MspInit+0x80>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <HAL_UART_MspInit+0x80>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001db6:	230c      	movs	r3, #12
 8001db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd4:	f001 f972 	bl	80030bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	; 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40004400 	.word	0x40004400
 8001de4:	40021000 	.word	0x40021000

08001de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dec:	f7ff fee8 	bl	8001bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001df0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001df2:	e003      	b.n	8001dfc <LoopCopyDataInit>

08001df4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001df6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001df8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001dfa:	3104      	adds	r1, #4

08001dfc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001dfc:	480a      	ldr	r0, [pc, #40]	; (8001e28 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e00:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e02:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e04:	d3f6      	bcc.n	8001df4 <CopyDataInit>
	ldr	r2, =_sbss
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e08:	e002      	b.n	8001e10 <LoopFillZerobss>

08001e0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e0a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e0c:	f842 3b04 	str.w	r3, [r2], #4

08001e10 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <LoopForever+0x16>)
	cmp	r2, r3
 8001e12:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e14:	d3f9      	bcc.n	8001e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e16:	f004 fcfb 	bl	8006810 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e1a:	f7ff f885 	bl	8000f28 <main>

08001e1e <LoopForever>:

LoopForever:
    b LoopForever
 8001e1e:	e7fe      	b.n	8001e1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e20:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001e24:	080068d8 	.word	0x080068d8
	ldr	r0, =_sdata
 8001e28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e2c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001e30:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001e34:	200001c8 	.word	0x200001c8

08001e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_2_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <HAL_Init+0x3c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <HAL_Init+0x3c>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e52:	2003      	movs	r0, #3
 8001e54:	f001 f8c0 	bl	8002fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f000 f80f 	bl	8001e7c <HAL_InitTick>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	e001      	b.n	8001e6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e6a:	f7ff fe57 	bl	8001b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40022000 	.word	0x40022000

08001e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_InitTick+0x6c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d023      	beq.n	8001ed8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_InitTick+0x70>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_InitTick+0x6c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 f8bd 	bl	8003026 <HAL_SYSTICK_Config>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d809      	bhi.n	8001ecc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ec0:	f001 f895 	bl	8002fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <HAL_InitTick+0x74>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e007      	b.n	8001edc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e004      	b.n	8001edc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	e001      	b.n	8001edc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	20000004 	.word	0x20000004

08001ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x20>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x24>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_IncTick+0x24>)
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000008 	.word	0x20000008
 8001f18:	200001c4 	.word	0x200001c4

08001f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_GetTick+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	200001c4 	.word	0x200001c4

08001f34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	609a      	str	r2, [r3, #8]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3360      	adds	r3, #96	; 0x60
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <LL_ADC_SetOffset+0x44>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fd4:	bf00      	nop
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	03fff000 	.word	0x03fff000

08001fe4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3360      	adds	r3, #96	; 0x60
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3360      	adds	r3, #96	; 0x60
 8002020:	461a      	mov	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	431a      	orrs	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002046:	b480      	push	{r7}
 8002048:	b087      	sub	sp, #28
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	3330      	adds	r3, #48	; 0x30
 8002056:	461a      	mov	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	4413      	add	r3, r2
 8002064:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	211f      	movs	r1, #31
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	401a      	ands	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0e9b      	lsrs	r3, r3, #26
 800207e:	f003 011f 	and.w	r1, r3, #31
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	431a      	orrs	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002092:	bf00      	nop
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800209e:	b480      	push	{r7}
 80020a0:	b087      	sub	sp, #28
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3314      	adds	r3, #20
 80020ae:	461a      	mov	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	0e5b      	lsrs	r3, r3, #25
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	4413      	add	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	0d1b      	lsrs	r3, r3, #20
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	2107      	movs	r1, #7
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	401a      	ands	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	0d1b      	lsrs	r3, r3, #20
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	431a      	orrs	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020e8:	bf00      	nop
 80020ea:	371c      	adds	r7, #28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210c:	43db      	mvns	r3, r3
 800210e:	401a      	ands	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0318 	and.w	r3, r3, #24
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002118:	40d9      	lsrs	r1, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	400b      	ands	r3, r1
 800211e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002122:	431a      	orrs	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	0007ffff 	.word	0x0007ffff

0800213c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800214c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6093      	str	r3, [r2, #8]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002174:	d101      	bne.n	800217a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002198:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800219c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021c4:	d101      	bne.n	80021ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <LL_ADC_IsEnabled+0x18>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <LL_ADC_IsEnabled+0x1a>
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b04      	cmp	r3, #4
 8002210:	d101      	bne.n	8002216 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b08      	cmp	r3, #8
 8002236:	d101      	bne.n	800223c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e134      	b.n	80024d0 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002270:	2b00      	cmp	r3, #0
 8002272:	d109      	bne.n	8002288 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7fe fd8b 	bl	8000d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff67 	bl	8002160 <LL_ADC_IsDeepPowerDownEnabled>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d004      	beq.n	80022a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff4d 	bl	800213c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ff82 	bl	80021b0 <LL_ADC_IsInternalRegulatorEnabled>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d113      	bne.n	80022da <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ff66 	bl	8002188 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80022bc:	4b86      	ldr	r3, [pc, #536]	; (80024d8 <HAL_ADC_Init+0x28c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	099b      	lsrs	r3, r3, #6
 80022c2:	4a86      	ldr	r2, [pc, #536]	; (80024dc <HAL_ADC_Init+0x290>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	099b      	lsrs	r3, r3, #6
 80022ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022cc:	e002      	b.n	80022d4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f9      	bne.n	80022ce <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff66 	bl	80021b0 <LL_ADC_IsInternalRegulatorEnabled>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10d      	bne.n	8002306 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff77 	bl	80021fe <LL_ADC_REG_IsConversionOngoing>
 8002310:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	f040 80cf 	bne.w	80024be <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 80cb 	bne.w	80024be <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002330:	f043 0202 	orr.w	r2, r3, #2
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff4b 	bl	80021d8 <LL_ADC_IsEnabled>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d115      	bne.n	8002374 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002348:	4865      	ldr	r0, [pc, #404]	; (80024e0 <HAL_ADC_Init+0x294>)
 800234a:	f7ff ff45 	bl	80021d8 <LL_ADC_IsEnabled>
 800234e:	4604      	mov	r4, r0
 8002350:	4864      	ldr	r0, [pc, #400]	; (80024e4 <HAL_ADC_Init+0x298>)
 8002352:	f7ff ff41 	bl	80021d8 <LL_ADC_IsEnabled>
 8002356:	4603      	mov	r3, r0
 8002358:	431c      	orrs	r4, r3
 800235a:	4863      	ldr	r0, [pc, #396]	; (80024e8 <HAL_ADC_Init+0x29c>)
 800235c:	f7ff ff3c 	bl	80021d8 <LL_ADC_IsEnabled>
 8002360:	4603      	mov	r3, r0
 8002362:	4323      	orrs	r3, r4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4619      	mov	r1, r3
 800236e:	485f      	ldr	r0, [pc, #380]	; (80024ec <HAL_ADC_Init+0x2a0>)
 8002370:	f7ff fde0 	bl	8001f34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7e5b      	ldrb	r3, [r3, #25]
 8002378:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800237e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002384:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800238a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002392:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d106      	bne.n	80023b0 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	3b01      	subs	r3, #1
 80023a8:	045b      	lsls	r3, r3, #17
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_ADC_Init+0x2a4>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	430b      	orrs	r3, r1
 80023de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff0a 	bl	80021fe <LL_ADC_REG_IsConversionOngoing>
 80023ea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff17 	bl	8002224 <LL_ADC_INJ_IsConversionOngoing>
 80023f6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d13d      	bne.n	800247a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d13a      	bne.n	800247a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002408:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002410:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002420:	f023 0302 	bic.w	r3, r3, #2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	69b9      	ldr	r1, [r7, #24]
 800242a:	430b      	orrs	r3, r1
 800242c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002434:	2b01      	cmp	r3, #1
 8002436:	d118      	bne.n	800246a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002442:	f023 0304 	bic.w	r3, r3, #4
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800244e:	4311      	orrs	r1, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002454:	4311      	orrs	r1, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800245a:	430a      	orrs	r2, r1
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	611a      	str	r2, [r3, #16]
 8002468:	e007      	b.n	800247a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d10c      	bne.n	800249c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f023 010f 	bic.w	r1, r3, #15
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	1e5a      	subs	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
 800249a:	e007      	b.n	80024ac <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 020f 	bic.w	r2, r2, #15
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	f023 0303 	bic.w	r3, r3, #3
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
 80024bc:	e007      	b.n	80024ce <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f043 0210 	orr.w	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3724      	adds	r7, #36	; 0x24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	20000000 	.word	0x20000000
 80024dc:	053e2d63 	.word	0x053e2d63
 80024e0:	50040000 	.word	0x50040000
 80024e4:	50040100 	.word	0x50040100
 80024e8:	50040200 	.word	0x50040200
 80024ec:	50040300 	.word	0x50040300
 80024f0:	fff0c007 	.word	0xfff0c007

080024f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b0b6      	sub	sp, #216	; 0xd8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x22>
 8002512:	2302      	movs	r3, #2
 8002514:	e3c6      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x7b0>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fe6b 	bl	80021fe <LL_ADC_REG_IsConversionOngoing>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	f040 83a7 	bne.w	8002c7e <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b05      	cmp	r3, #5
 8002536:	d824      	bhi.n	8002582 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	3b02      	subs	r3, #2
 800253e:	2b03      	cmp	r3, #3
 8002540:	d81b      	bhi.n	800257a <HAL_ADC_ConfigChannel+0x86>
 8002542:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <HAL_ADC_ConfigChannel+0x54>)
 8002544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002548:	08002559 	.word	0x08002559
 800254c:	08002561 	.word	0x08002561
 8002550:	08002569 	.word	0x08002569
 8002554:	08002571 	.word	0x08002571
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	220c      	movs	r2, #12
 800255c:	605a      	str	r2, [r3, #4]
          break;
 800255e:	e011      	b.n	8002584 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2212      	movs	r2, #18
 8002564:	605a      	str	r2, [r3, #4]
          break;
 8002566:	e00d      	b.n	8002584 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2218      	movs	r2, #24
 800256c:	605a      	str	r2, [r3, #4]
          break;
 800256e:	e009      	b.n	8002584 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002576:	605a      	str	r2, [r3, #4]
          break;
 8002578:	e004      	b.n	8002584 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2206      	movs	r2, #6
 800257e:	605a      	str	r2, [r3, #4]
          break;
 8002580:	e000      	b.n	8002584 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002582:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	f7ff fd58 	bl	8002046 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fe2f 	bl	80021fe <LL_ADC_REG_IsConversionOngoing>
 80025a0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fe3b 	bl	8002224 <LL_ADC_INJ_IsConversionOngoing>
 80025ae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 81a6 	bne.w	8002908 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f040 81a1 	bne.w	8002908 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	461a      	mov	r2, r3
 80025d4:	f7ff fd63 	bl	800209e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	08db      	lsrs	r3, r3, #3
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d00a      	beq.n	8002610 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6919      	ldr	r1, [r3, #16]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800260a:	f7ff fcc7 	bl	8001f9c <LL_ADC_SetOffset>
 800260e:	e17b      	b.n	8002908 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fce4 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10a      	bne.n	800263c <HAL_ADC_ConfigChannel+0x148>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fcd9 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002632:	4603      	mov	r3, r0
 8002634:	0e9b      	lsrs	r3, r3, #26
 8002636:	f003 021f 	and.w	r2, r3, #31
 800263a:	e01e      	b.n	800267a <HAL_ADC_ConfigChannel+0x186>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fcce 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002648:	4603      	mov	r3, r0
 800264a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800265a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800265e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002662:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800266a:	2320      	movs	r3, #32
 800266c:	e004      	b.n	8002678 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800266e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002682:	2b00      	cmp	r3, #0
 8002684:	d105      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x19e>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0e9b      	lsrs	r3, r3, #26
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	e018      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x1d0>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80026a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80026ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80026b6:	2320      	movs	r3, #32
 80026b8:	e004      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80026ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d106      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2200      	movs	r2, #0
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fc9d 	bl	8002010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2101      	movs	r1, #1
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fc81 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x20e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2101      	movs	r1, #1
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fc76 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	0e9b      	lsrs	r3, r3, #26
 80026fc:	f003 021f 	and.w	r2, r3, #31
 8002700:	e01e      	b.n	8002740 <HAL_ADC_ConfigChannel+0x24c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2101      	movs	r1, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fc6b 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 800270e:	4603      	mov	r3, r0
 8002710:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002718:	fa93 f3a3 	rbit	r3, r3
 800271c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002720:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002724:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002728:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002730:	2320      	movs	r3, #32
 8002732:	e004      	b.n	800273e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002734:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002748:	2b00      	cmp	r3, #0
 800274a:	d105      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x264>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0e9b      	lsrs	r3, r3, #26
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	e018      	b.n	800278a <HAL_ADC_ConfigChannel+0x296>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800276c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002770:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800277c:	2320      	movs	r3, #32
 800277e:	e004      	b.n	800278a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002780:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800278a:	429a      	cmp	r2, r3
 800278c:	d106      	bne.n	800279c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2200      	movs	r2, #0
 8002794:	2101      	movs	r1, #1
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fc3a 	bl	8002010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2102      	movs	r1, #2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fc1e 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10a      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x2d4>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2102      	movs	r1, #2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fc13 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 80027be:	4603      	mov	r3, r0
 80027c0:	0e9b      	lsrs	r3, r3, #26
 80027c2:	f003 021f 	and.w	r2, r3, #31
 80027c6:	e01e      	b.n	8002806 <HAL_ADC_ConfigChannel+0x312>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2102      	movs	r1, #2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fc08 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80027e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80027ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80027f6:	2320      	movs	r3, #32
 80027f8:	e004      	b.n	8002804 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80027fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280e:	2b00      	cmp	r3, #0
 8002810:	d105      	bne.n	800281e <HAL_ADC_ConfigChannel+0x32a>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	0e9b      	lsrs	r3, r3, #26
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	e016      	b.n	800284c <HAL_ADC_ConfigChannel+0x358>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002830:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002832:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002836:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800283e:	2320      	movs	r3, #32
 8002840:	e004      	b.n	800284c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002842:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800284c:	429a      	cmp	r2, r3
 800284e:	d106      	bne.n	800285e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2200      	movs	r2, #0
 8002856:	2102      	movs	r1, #2
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fbd9 	bl	8002010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2103      	movs	r1, #3
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fbbd 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <HAL_ADC_ConfigChannel+0x396>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2103      	movs	r1, #3
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fbb2 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002880:	4603      	mov	r3, r0
 8002882:	0e9b      	lsrs	r3, r3, #26
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	e017      	b.n	80028ba <HAL_ADC_ConfigChannel+0x3c6>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2103      	movs	r1, #3
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fba7 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80028a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028a4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80028a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80028ac:	2320      	movs	r3, #32
 80028ae:	e003      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80028b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d105      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x3de>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0e9b      	lsrs	r3, r3, #26
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	e011      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x402>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80028e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80028e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80028ea:	2320      	movs	r3, #32
 80028ec:	e003      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80028ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d106      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2200      	movs	r2, #0
 8002900:	2103      	movs	r1, #3
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fb84 	bl	8002010 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fc63 	bl	80021d8 <LL_ADC_IsEnabled>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	f040 813f 	bne.w	8002b98 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6819      	ldr	r1, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	461a      	mov	r2, r3
 8002928:	f7ff fbe4 	bl	80020f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a8e      	ldr	r2, [pc, #568]	; (8002b6c <HAL_ADC_ConfigChannel+0x678>)
 8002932:	4293      	cmp	r3, r2
 8002934:	f040 8130 	bne.w	8002b98 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10b      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x46c>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0e9b      	lsrs	r3, r3, #26
 800294e:	3301      	adds	r3, #1
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	2b09      	cmp	r3, #9
 8002956:	bf94      	ite	ls
 8002958:	2301      	movls	r3, #1
 800295a:	2300      	movhi	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	e019      	b.n	8002994 <HAL_ADC_ConfigChannel+0x4a0>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800296e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002970:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002978:	2320      	movs	r3, #32
 800297a:	e003      	b.n	8002984 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800297c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	3301      	adds	r3, #1
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2b09      	cmp	r3, #9
 800298c:	bf94      	ite	ls
 800298e:	2301      	movls	r3, #1
 8002990:	2300      	movhi	r3, #0
 8002992:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002994:	2b00      	cmp	r3, #0
 8002996:	d079      	beq.n	8002a8c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d107      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x4c0>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0e9b      	lsrs	r3, r3, #26
 80029aa:	3301      	adds	r3, #1
 80029ac:	069b      	lsls	r3, r3, #26
 80029ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029b2:	e015      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x4ec>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80029c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80029cc:	2320      	movs	r3, #32
 80029ce:	e003      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80029d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	069b      	lsls	r3, r3, #26
 80029dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x50c>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0e9b      	lsrs	r3, r3, #26
 80029f2:	3301      	adds	r3, #1
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	2101      	movs	r1, #1
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	e017      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x53c>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	e003      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	3301      	adds	r3, #1
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	ea42 0103 	orr.w	r1, r2, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x562>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	3301      	adds	r3, #1
 8002a48:	f003 021f 	and.w	r2, r3, #31
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	051b      	lsls	r3, r3, #20
 8002a54:	e018      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x594>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e003      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	e080      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d107      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x5b4>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0e9b      	lsrs	r3, r3, #26
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	069b      	lsls	r3, r3, #26
 8002aa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aa6:	e015      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x5e0>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	e003      	b.n	8002acc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	069b      	lsls	r3, r3, #26
 8002ad0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x600>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	0e9b      	lsrs	r3, r3, #26
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	2101      	movs	r1, #1
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	e017      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x630>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	61fb      	str	r3, [r7, #28]
  return result;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	e003      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2101      	movs	r1, #1
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	ea42 0103 	orr.w	r1, r2, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10d      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x65c>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f003 021f 	and.w	r2, r3, #31
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	3b1e      	subs	r3, #30
 8002b48:	051b      	lsls	r3, r3, #20
 8002b4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	e01d      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x698>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	613b      	str	r3, [r7, #16]
  return result;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d103      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	e005      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x684>
 8002b6c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f003 021f 	and.w	r2, r3, #31
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	3b1e      	subs	r3, #30
 8002b86:	051b      	lsls	r3, r3, #20
 8002b88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	6892      	ldr	r2, [r2, #8]
 8002b92:	4619      	mov	r1, r3
 8002b94:	f7ff fa83 	bl	800209e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b43      	ldr	r3, [pc, #268]	; (8002cac <HAL_ADC_ConfigChannel+0x7b8>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d079      	beq.n	8002c98 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ba4:	4842      	ldr	r0, [pc, #264]	; (8002cb0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ba6:	f7ff f9eb 	bl	8001f80 <LL_ADC_GetCommonPathInternalCh>
 8002baa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a40      	ldr	r2, [pc, #256]	; (8002cb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d12b      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d125      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a3b      	ldr	r2, [pc, #236]	; (8002cb8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_ADC_ConfigChannel+0x6e4>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a3a      	ldr	r2, [pc, #232]	; (8002cbc <HAL_ADC_ConfigChannel+0x7c8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d15c      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002be0:	4619      	mov	r1, r3
 8002be2:	4833      	ldr	r0, [pc, #204]	; (8002cb0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002be4:	f7ff f9b9 	bl	8001f5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002be8:	4b35      	ldr	r3, [pc, #212]	; (8002cc0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	099b      	lsrs	r3, r3, #6
 8002bee:	4a35      	ldr	r2, [pc, #212]	; (8002cc4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	099a      	lsrs	r2, r3, #6
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c00:	e002      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f9      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c0e:	e040      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2c      	ldr	r2, [pc, #176]	; (8002cc8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d118      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x758>
 8002c1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d112      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a23      	ldr	r2, [pc, #140]	; (8002cb8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <HAL_ADC_ConfigChannel+0x746>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a21      	ldr	r2, [pc, #132]	; (8002cbc <HAL_ADC_ConfigChannel+0x7c8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d12d      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c42:	4619      	mov	r1, r3
 8002c44:	481a      	ldr	r0, [pc, #104]	; (8002cb0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c46:	f7ff f988 	bl	8001f5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c4a:	e024      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1e      	ldr	r2, [pc, #120]	; (8002ccc <HAL_ADC_ConfigChannel+0x7d8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d120      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d11a      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d115      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c74:	4619      	mov	r1, r3
 8002c76:	480e      	ldr	r0, [pc, #56]	; (8002cb0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c78:	f7ff f96f 	bl	8001f5a <LL_ADC_SetCommonPathInternalCh>
 8002c7c:	e00c      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002c90:	e002      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c96:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ca0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	37d8      	adds	r7, #216	; 0xd8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	80080000 	.word	0x80080000
 8002cb0:	50040300 	.word	0x50040300
 8002cb4:	c7520000 	.word	0xc7520000
 8002cb8:	50040000 	.word	0x50040000
 8002cbc:	50040200 	.word	0x50040200
 8002cc0:	20000000 	.word	0x20000000
 8002cc4:	053e2d63 	.word	0x053e2d63
 8002cc8:	cb840000 	.word	0xcb840000
 8002ccc:	80000001 	.word	0x80000001

08002cd0 <LL_ADC_IsEnabled>:
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <LL_ADC_IsEnabled+0x18>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <LL_ADC_IsEnabled+0x1a>
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d101      	bne.n	8002d0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b09f      	sub	sp, #124	; 0x7c
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e08f      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a47      	ldr	r2, [pc, #284]	; (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d102      	bne.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002d4c:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	e001      	b.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f043 0220 	orr.w	r2, r3, #32
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e072      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ffbd 	bl	8002cf6 <LL_ADC_REG_IsConversionOngoing>
 8002d7c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ffb7 	bl	8002cf6 <LL_ADC_REG_IsConversionOngoing>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d154      	bne.n	8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d151      	bne.n	8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d94:	4b35      	ldr	r3, [pc, #212]	; (8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d96:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d02c      	beq.n	8002dfa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002db2:	035b      	lsls	r3, r3, #13
 8002db4:	430b      	orrs	r3, r1
 8002db6:	431a      	orrs	r2, r3
 8002db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dbc:	4829      	ldr	r0, [pc, #164]	; (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002dbe:	f7ff ff87 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	4828      	ldr	r0, [pc, #160]	; (8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002dc6:	f7ff ff83 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	431c      	orrs	r4, r3
 8002dce:	4828      	ldr	r0, [pc, #160]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002dd0:	f7ff ff7e 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4323      	orrs	r3, r4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d137      	bne.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002de4:	f023 030f 	bic.w	r3, r3, #15
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	6811      	ldr	r1, [r2, #0]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	6892      	ldr	r2, [r2, #8]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002df8:	e028      	b.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e06:	4817      	ldr	r0, [pc, #92]	; (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002e08:	f7ff ff62 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	4816      	ldr	r0, [pc, #88]	; (8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002e10:	f7ff ff5e 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002e14:	4603      	mov	r3, r0
 8002e16:	431c      	orrs	r4, r3
 8002e18:	4815      	ldr	r0, [pc, #84]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e1a:	f7ff ff59 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4323      	orrs	r3, r4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d112      	bne.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e2e:	f023 030f 	bic.w	r3, r3, #15
 8002e32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e34:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e36:	e009      	b.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3c:	f043 0220 	orr.w	r2, r3, #32
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e4a:	e000      	b.n	8002e4e <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e56:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	377c      	adds	r7, #124	; 0x7c
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd90      	pop	{r4, r7, pc}
 8002e62:	bf00      	nop
 8002e64:	50040000 	.word	0x50040000
 8002e68:	50040100 	.word	0x50040100
 8002e6c:	50040300 	.word	0x50040300
 8002e70:	50040200 	.word	0x50040200

08002e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e90:	4013      	ands	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ea6:	4a04      	ldr	r2, [pc, #16]	; (8002eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	60d3      	str	r3, [r2, #12]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	0a1b      	lsrs	r3, r3, #8
 8002ec6:	f003 0307 	and.w	r3, r3, #7
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	db0a      	blt.n	8002f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	490c      	ldr	r1, [pc, #48]	; (8002f24 <__NVIC_SetPriority+0x4c>)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	0112      	lsls	r2, r2, #4
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	440b      	add	r3, r1
 8002efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f00:	e00a      	b.n	8002f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	4908      	ldr	r1, [pc, #32]	; (8002f28 <__NVIC_SetPriority+0x50>)
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	3b04      	subs	r3, #4
 8002f10:	0112      	lsls	r2, r2, #4
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	440b      	add	r3, r1
 8002f16:	761a      	strb	r2, [r3, #24]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000e100 	.word	0xe000e100
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f1c3 0307 	rsb	r3, r3, #7
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	bf28      	it	cs
 8002f4a:	2304      	movcs	r3, #4
 8002f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3304      	adds	r3, #4
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d902      	bls.n	8002f5c <NVIC_EncodePriority+0x30>
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3b03      	subs	r3, #3
 8002f5a:	e000      	b.n	8002f5e <NVIC_EncodePriority+0x32>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	401a      	ands	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	43d9      	mvns	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	4313      	orrs	r3, r2
         );
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3724      	adds	r7, #36	; 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa4:	d301      	bcc.n	8002faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00f      	b.n	8002fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002faa:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <SysTick_Config+0x40>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fb2:	210f      	movs	r1, #15
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fb8:	f7ff ff8e 	bl	8002ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <SysTick_Config+0x40>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fc2:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <SysTick_Config+0x40>)
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	e000e010 	.word	0xe000e010

08002fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff47 	bl	8002e74 <__NVIC_SetPriorityGrouping>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003000:	f7ff ff5c 	bl	8002ebc <__NVIC_GetPriorityGrouping>
 8003004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	6978      	ldr	r0, [r7, #20]
 800300c:	f7ff ff8e 	bl	8002f2c <NVIC_EncodePriority>
 8003010:	4602      	mov	r2, r0
 8003012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff5d 	bl	8002ed8 <__NVIC_SetPriority>
}
 800301e:	bf00      	nop
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ffb0 	bl	8002f94 <SysTick_Config>
 8003034:	4603      	mov	r3, r0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d008      	beq.n	8003068 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2204      	movs	r2, #4
 800305a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e022      	b.n	80030ae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 020e 	bic.w	r2, r2, #14
 8003076:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308c:	f003 021c 	and.w	r2, r3, #28
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	2101      	movs	r1, #1
 8003096:	fa01 f202 	lsl.w	r2, r1, r2
 800309a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ca:	e17f      	b.n	80033cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	4013      	ands	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8171 	beq.w	80033c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d00b      	beq.n	8003104 <HAL_GPIO_Init+0x48>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d007      	beq.n	8003104 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030f8:	2b11      	cmp	r3, #17
 80030fa:	d003      	beq.n	8003104 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b12      	cmp	r3, #18
 8003102:	d130      	bne.n	8003166 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2203      	movs	r2, #3
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800313a:	2201      	movs	r2, #1
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f003 0201 	and.w	r2, r3, #1
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b03      	cmp	r3, #3
 8003170:	d118      	bne.n	80031a4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003178:	2201      	movs	r2, #1
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	08db      	lsrs	r3, r3, #3
 800318e:	f003 0201 	and.w	r2, r3, #1
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x128>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b12      	cmp	r3, #18
 80031e2:	d123      	bne.n	800322c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	08da      	lsrs	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3208      	adds	r2, #8
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	08da      	lsrs	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3208      	adds	r2, #8
 8003226:	6939      	ldr	r1, [r7, #16]
 8003228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0203 	and.w	r2, r3, #3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80ac 	beq.w	80033c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326e:	4b5e      	ldr	r3, [pc, #376]	; (80033e8 <HAL_GPIO_Init+0x32c>)
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	4a5d      	ldr	r2, [pc, #372]	; (80033e8 <HAL_GPIO_Init+0x32c>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6613      	str	r3, [r2, #96]	; 0x60
 800327a:	4b5b      	ldr	r3, [pc, #364]	; (80033e8 <HAL_GPIO_Init+0x32c>)
 800327c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003286:	4a59      	ldr	r2, [pc, #356]	; (80033ec <HAL_GPIO_Init+0x330>)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032b0:	d025      	beq.n	80032fe <HAL_GPIO_Init+0x242>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a4e      	ldr	r2, [pc, #312]	; (80033f0 <HAL_GPIO_Init+0x334>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01f      	beq.n	80032fa <HAL_GPIO_Init+0x23e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a4d      	ldr	r2, [pc, #308]	; (80033f4 <HAL_GPIO_Init+0x338>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d019      	beq.n	80032f6 <HAL_GPIO_Init+0x23a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4c      	ldr	r2, [pc, #304]	; (80033f8 <HAL_GPIO_Init+0x33c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <HAL_GPIO_Init+0x236>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4b      	ldr	r2, [pc, #300]	; (80033fc <HAL_GPIO_Init+0x340>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00d      	beq.n	80032ee <HAL_GPIO_Init+0x232>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4a      	ldr	r2, [pc, #296]	; (8003400 <HAL_GPIO_Init+0x344>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <HAL_GPIO_Init+0x22e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a49      	ldr	r2, [pc, #292]	; (8003404 <HAL_GPIO_Init+0x348>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_GPIO_Init+0x22a>
 80032e2:	2306      	movs	r3, #6
 80032e4:	e00c      	b.n	8003300 <HAL_GPIO_Init+0x244>
 80032e6:	2307      	movs	r3, #7
 80032e8:	e00a      	b.n	8003300 <HAL_GPIO_Init+0x244>
 80032ea:	2305      	movs	r3, #5
 80032ec:	e008      	b.n	8003300 <HAL_GPIO_Init+0x244>
 80032ee:	2304      	movs	r3, #4
 80032f0:	e006      	b.n	8003300 <HAL_GPIO_Init+0x244>
 80032f2:	2303      	movs	r3, #3
 80032f4:	e004      	b.n	8003300 <HAL_GPIO_Init+0x244>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e002      	b.n	8003300 <HAL_GPIO_Init+0x244>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_GPIO_Init+0x244>
 80032fe:	2300      	movs	r3, #0
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	f002 0203 	and.w	r2, r2, #3
 8003306:	0092      	lsls	r2, r2, #2
 8003308:	4093      	lsls	r3, r2
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003310:	4936      	ldr	r1, [pc, #216]	; (80033ec <HAL_GPIO_Init+0x330>)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	089b      	lsrs	r3, r3, #2
 8003316:	3302      	adds	r3, #2
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800331e:	4b3a      	ldr	r3, [pc, #232]	; (8003408 <HAL_GPIO_Init+0x34c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	43db      	mvns	r3, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003342:	4a31      	ldr	r2, [pc, #196]	; (8003408 <HAL_GPIO_Init+0x34c>)
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003348:	4b2f      	ldr	r3, [pc, #188]	; (8003408 <HAL_GPIO_Init+0x34c>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	43db      	mvns	r3, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4013      	ands	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800336c:	4a26      	ldr	r2, [pc, #152]	; (8003408 <HAL_GPIO_Init+0x34c>)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003372:	4b25      	ldr	r3, [pc, #148]	; (8003408 <HAL_GPIO_Init+0x34c>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003396:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <HAL_GPIO_Init+0x34c>)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800339c:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <HAL_GPIO_Init+0x34c>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033c0:	4a11      	ldr	r2, [pc, #68]	; (8003408 <HAL_GPIO_Init+0x34c>)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	3301      	adds	r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fa22 f303 	lsr.w	r3, r2, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f47f ae78 	bne.w	80030cc <HAL_GPIO_Init+0x10>
  }
}
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40010000 	.word	0x40010000
 80033f0:	48000400 	.word	0x48000400
 80033f4:	48000800 	.word	0x48000800
 80033f8:	48000c00 	.word	0x48000c00
 80033fc:	48001000 	.word	0x48001000
 8003400:	48001400 	.word	0x48001400
 8003404:	48001800 	.word	0x48001800
 8003408:	40010400 	.word	0x40010400

0800340c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	807b      	strh	r3, [r7, #2]
 8003418:	4613      	mov	r3, r2
 800341a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800341c:	787b      	ldrb	r3, [r7, #1]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003422:	887a      	ldrh	r2, [r7, #2]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003428:	e002      	b.n	8003430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40007000 	.word	0x40007000

0800345c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <HAL_PWREx_GetVoltageRange+0x18>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40007000 	.word	0x40007000

08003478 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003486:	d130      	bne.n	80034ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003488:	4b23      	ldr	r3, [pc, #140]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003494:	d038      	beq.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800349e:	4a1e      	ldr	r2, [pc, #120]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034a6:	4b1d      	ldr	r3, [pc, #116]	; (800351c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2232      	movs	r2, #50	; 0x32
 80034ac:	fb02 f303 	mul.w	r3, r2, r3
 80034b0:	4a1b      	ldr	r2, [pc, #108]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	0c9b      	lsrs	r3, r3, #18
 80034b8:	3301      	adds	r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034bc:	e002      	b.n	80034c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d0:	d102      	bne.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f2      	bne.n	80034be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e4:	d110      	bne.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e00f      	b.n	800350a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ea:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f6:	d007      	beq.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034f8:	4b07      	ldr	r3, [pc, #28]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003500:	4a05      	ldr	r2, [pc, #20]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003506:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40007000 	.word	0x40007000
 800351c:	20000000 	.word	0x20000000
 8003520:	431bde83 	.word	0x431bde83

08003524 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af02      	add	r7, sp, #8
 800352a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800352c:	f7fe fcf6 	bl	8001f1c <HAL_GetTick>
 8003530:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e063      	b.n	8003604 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10b      	bne.n	8003560 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7fd ff33 	bl	80013bc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003556:	f241 3188 	movw	r1, #5000	; 0x1388
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fad3 	bl	8003b06 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	3b01      	subs	r3, #1
 8003570:	021a      	lsls	r2, r3, #8
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	2120      	movs	r1, #32
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 facb 	bl	8003b22 <QSPI_WaitFlagStateUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003590:	7afb      	ldrb	r3, [r7, #11]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d131      	bne.n	80035fa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035a0:	f023 0310 	bic.w	r3, r3, #16
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6852      	ldr	r2, [r2, #4]
 80035a8:	0611      	lsls	r1, r2, #24
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68d2      	ldr	r2, [r2, #12]
 80035ae:	4311      	orrs	r1, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	430b      	orrs	r3, r1
 80035b6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <HAL_QSPI_Init+0xe8>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6912      	ldr	r2, [r2, #16]
 80035c6:	0411      	lsls	r1, r2, #16
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6952      	ldr	r2, [r2, #20]
 80035cc:	4311      	orrs	r1, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6992      	ldr	r2, [r2, #24]
 80035d2:	4311      	orrs	r1, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	430b      	orrs	r3, r1
 80035da:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003602:	7afb      	ldrb	r3, [r7, #11]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	ffe0f8fe 	.word	0xffe0f8fe

08003610 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800361c:	f7fe fc7e 	bl	8001f1c <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_QSPI_Command+0x22>
 800362e:	2302      	movs	r3, #2
 8003630:	e048      	b.n	80036c4 <HAL_QSPI_Command+0xb4>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d137      	bne.n	80036b6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2200      	movs	r2, #0
 800365c:	2120      	movs	r1, #32
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 fa5f 	bl	8003b22 <QSPI_WaitFlagStateUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003668:	7dfb      	ldrb	r3, [r7, #23]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d125      	bne.n	80036ba <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800366e:	2200      	movs	r2, #0
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fa8c 	bl	8003b90 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d115      	bne.n	80036ac <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2201      	movs	r2, #1
 8003688:	2102      	movs	r1, #2
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fa49 	bl	8003b22 <QSPI_WaitFlagStateUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10f      	bne.n	80036ba <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2202      	movs	r2, #2
 80036a0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80036aa:	e006      	b.n	80036ba <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80036b4:	e001      	b.n	80036ba <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80036b6:	2302      	movs	r3, #2
 80036b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	; 0x28
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80036dc:	f7fe fc1e 	bl	8001f1c <HAL_GetTick>
 80036e0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3320      	adds	r3, #32
 80036e8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_QSPI_Transmit+0x2e>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e07b      	b.n	80037f2 <HAL_QSPI_Transmit+0x126>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d16a      	bne.n	80037e4 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d05b      	beq.n	80037d2 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2212      	movs	r2, #18
 800371e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800374e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003750:	e01b      	b.n	800378a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2201      	movs	r2, #1
 800375a:	2104      	movs	r1, #4
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f9e0 	bl	8003b22 <QSPI_WaitFlagStateUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003766:	7ffb      	ldrb	r3, [r7, #31]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d113      	bne.n	8003794 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	1e5a      	subs	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1df      	bne.n	8003752 <HAL_QSPI_Transmit+0x86>
 8003792:	e000      	b.n	8003796 <HAL_QSPI_Transmit+0xca>
          break;
 8003794:	bf00      	nop
      }

      if (status == HAL_OK)
 8003796:	7ffb      	ldrb	r3, [r7, #31]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d115      	bne.n	80037c8 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2201      	movs	r2, #1
 80037a4:	2102      	movs	r1, #2
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f9bb 	bl	8003b22 <QSPI_WaitFlagStateUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80037b0:	7ffb      	ldrb	r3, [r7, #31]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d108      	bne.n	80037c8 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2202      	movs	r2, #2
 80037bc:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f934 	bl	8003a2c <HAL_QSPI_Abort>
 80037c4:	4603      	mov	r3, r0
 80037c6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80037d0:	e00a      	b.n	80037e8 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	f043 0208 	orr.w	r2, r3, #8
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e001      	b.n	80037e8 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
 80037e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80037f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b08a      	sub	sp, #40	; 0x28
 80037fe:	af02      	add	r7, sp, #8
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800380a:	f7fe fb87 	bl	8001f1c <HAL_GetTick>
 800380e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3320      	adds	r3, #32
 800381e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_QSPI_Receive+0x36>
 800382c:	2302      	movs	r3, #2
 800382e:	e082      	b.n	8003936 <HAL_QSPI_Receive+0x13c>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	d171      	bne.n	8003928 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d062      	beq.n	8003916 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2222      	movs	r2, #34	; 0x22
 8003854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003888:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003892:	e01c      	b.n	80038ce <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2201      	movs	r2, #1
 800389c:	2106      	movs	r1, #6
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f93f 	bl	8003b22 <QSPI_WaitFlagStateUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80038a8:	7ffb      	ldrb	r3, [r7, #31]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d114      	bne.n	80038d8 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	7812      	ldrb	r2, [r2, #0]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	1e5a      	subs	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1de      	bne.n	8003894 <HAL_QSPI_Receive+0x9a>
 80038d6:	e000      	b.n	80038da <HAL_QSPI_Receive+0xe0>
          break;
 80038d8:	bf00      	nop
      }

      if (status == HAL_OK)
 80038da:	7ffb      	ldrb	r3, [r7, #31]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d115      	bne.n	800390c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2201      	movs	r2, #1
 80038e8:	2102      	movs	r1, #2
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f919 	bl	8003b22 <QSPI_WaitFlagStateUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80038f4:	7ffb      	ldrb	r3, [r7, #31]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d108      	bne.n	800390c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2202      	movs	r2, #2
 8003900:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f892 	bl	8003a2c <HAL_QSPI_Abort>
 8003908:	4603      	mov	r3, r0
 800390a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003914:	e00a      	b.n	800392c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	f043 0208 	orr.w	r2, r3, #8
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e001      	b.n	800392c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003928:	2302      	movs	r3, #2
 800392a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003934:	7ffb      	ldrb	r3, [r7, #31]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b088      	sub	sp, #32
 8003942:	af02      	add	r7, sp, #8
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
 800394a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800394c:	f7fe fae6 	bl	8001f1c <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_QSPI_AutoPolling+0x24>
 800395e:	2302      	movs	r3, #2
 8003960:	e060      	b.n	8003a24 <HAL_QSPI_AutoPolling+0xe6>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	d14f      	bne.n	8003a16 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2242      	movs	r2, #66	; 0x42
 8003980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2200      	movs	r2, #0
 800398c:	2120      	movs	r1, #32
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f8c7 	bl	8003b22 <QSPI_WaitFlagStateUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d13d      	bne.n	8003a1a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6812      	ldr	r2, [r2, #0]
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6852      	ldr	r2, [r2, #4]
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6892      	ldr	r2, [r2, #8]
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80039d4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80039de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f8d3 	bl	8003b90 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2201      	movs	r2, #1
 80039f2:	2108      	movs	r1, #8
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f894 	bl	8003b22 <QSPI_WaitFlagStateUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003a14:	e001      	b.n	8003a1a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
 8003a18:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003a38:	f7fe fa70 	bl	8001f1c <HAL_GetTick>
 8003a3c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d056      	beq.n	8003afc <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d017      	beq.n	8003a94 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0204 	bic.w	r2, r2, #4
 8003a72:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff fae0 	bl	800303e <HAL_DMA_Abort>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	f043 0204 	orr.w	r2, r3, #4
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0202 	orr.w	r2, r2, #2
 8003aa2:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2201      	movs	r2, #1
 8003aae:	2102      	movs	r1, #2
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f836 	bl	8003b22 <QSPI_WaitFlagStateUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10e      	bne.n	8003ade <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2120      	movs	r1, #32
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f824 	bl	8003b22 <QSPI_WaitFlagStateUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003af2:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b32:	e01a      	b.n	8003b6a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b3a:	d016      	beq.n	8003b6a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3c:	f7fe f9ee 	bl	8001f1c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d302      	bcc.n	8003b52 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10b      	bne.n	8003b6a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2204      	movs	r2, #4
 8003b56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	f043 0201 	orr.w	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e00e      	b.n	8003b88 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf14      	ite	ne
 8003b78:	2301      	movne	r3, #1
 8003b7a:	2300      	moveq	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	461a      	mov	r2, r3
 8003b80:	79fb      	ldrb	r3, [r7, #7]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d1d6      	bne.n	8003b34 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d009      	beq.n	8003bb8 <QSPI_Config+0x28>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003baa:	d005      	beq.n	8003bb8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3a01      	subs	r2, #1
 8003bb6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80b9 	beq.w	8003d34 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d05f      	beq.n	8003c8a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	6892      	ldr	r2, [r2, #8]
 8003bd2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d031      	beq.n	8003c40 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	431a      	orrs	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bea:	431a      	orrs	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	049b      	lsls	r3, r3, #18
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	431a      	orrs	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	ea42 0103 	orr.w	r1, r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c30:	f000 812e 	beq.w	8003e90 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	6852      	ldr	r2, [r2, #4]
 8003c3c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003c3e:	e127      	b.n	8003e90 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	431a      	orrs	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	049b      	lsls	r3, r3, #18
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	ea42 0103 	orr.w	r1, r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	615a      	str	r2, [r3, #20]
}
 8003c88:	e102      	b.n	8003e90 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d02e      	beq.n	8003cf0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	049b      	lsls	r3, r3, #18
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	ea42 0103 	orr.w	r1, r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ce0:	f000 80d6 	beq.w	8003e90 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	6852      	ldr	r2, [r2, #4]
 8003cec:	619a      	str	r2, [r3, #24]
}
 8003cee:	e0cf      	b.n	8003e90 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	431a      	orrs	r2, r3
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	049b      	lsls	r3, r3, #18
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	ea42 0103 	orr.w	r1, r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	615a      	str	r2, [r3, #20]
}
 8003d32:	e0ad      	b.n	8003e90 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d058      	beq.n	8003dee <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	6892      	ldr	r2, [r2, #8]
 8003d44:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d02d      	beq.n	8003daa <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	431a      	orrs	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	431a      	orrs	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	049b      	lsls	r3, r3, #18
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	ea42 0103 	orr.w	r1, r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d9c:	d078      	beq.n	8003e90 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	6852      	ldr	r2, [r2, #4]
 8003da6:	619a      	str	r2, [r3, #24]
}
 8003da8:	e072      	b.n	8003e90 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	431a      	orrs	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db8:	431a      	orrs	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	049b      	lsls	r3, r3, #18
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	ea42 0103 	orr.w	r1, r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	615a      	str	r2, [r3, #20]
}
 8003dec:	e050      	b.n	8003e90 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d02a      	beq.n	8003e4c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	049b      	lsls	r3, r3, #18
 8003e12:	431a      	orrs	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	ea42 0103 	orr.w	r1, r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003e3e:	d027      	beq.n	8003e90 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	6852      	ldr	r2, [r2, #4]
 8003e48:	619a      	str	r2, [r3, #24]
}
 8003e4a:	e021      	b.n	8003e90 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01d      	beq.n	8003e90 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e62:	431a      	orrs	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	049b      	lsls	r3, r3, #18
 8003e70:	431a      	orrs	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	431a      	orrs	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	ea42 0103 	orr.w	r1, r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	615a      	str	r2, [r3, #20]
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e3d4      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eae:	4ba1      	ldr	r3, [pc, #644]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb8:	4b9e      	ldr	r3, [pc, #632]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 80e4 	beq.w	8004098 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x4a>
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	f040 808b 	bne.w	8003ff4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	f040 8087 	bne.w	8003ff4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ee6:	4b93      	ldr	r3, [pc, #588]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_RCC_OscConfig+0x62>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e3ac      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1a      	ldr	r2, [r3, #32]
 8003f02:	4b8c      	ldr	r3, [pc, #560]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d004      	beq.n	8003f18 <HAL_RCC_OscConfig+0x7c>
 8003f0e:	4b89      	ldr	r3, [pc, #548]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f16:	e005      	b.n	8003f24 <HAL_RCC_OscConfig+0x88>
 8003f18:	4b86      	ldr	r3, [pc, #536]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1e:	091b      	lsrs	r3, r3, #4
 8003f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d223      	bcs.n	8003f70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fd3f 	bl	80049b0 <RCC_SetFlashLatencyFromMSIRange>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e38d      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f3c:	4b7d      	ldr	r3, [pc, #500]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a7c      	ldr	r2, [pc, #496]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f42:	f043 0308 	orr.w	r3, r3, #8
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4b7a      	ldr	r3, [pc, #488]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	4977      	ldr	r1, [pc, #476]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f5a:	4b76      	ldr	r3, [pc, #472]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	4972      	ldr	r1, [pc, #456]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	604b      	str	r3, [r1, #4]
 8003f6e:	e025      	b.n	8003fbc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f70:	4b70      	ldr	r3, [pc, #448]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a6f      	ldr	r2, [pc, #444]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f76:	f043 0308 	orr.w	r3, r3, #8
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4b6d      	ldr	r3, [pc, #436]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	496a      	ldr	r1, [pc, #424]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f8e:	4b69      	ldr	r3, [pc, #420]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	4965      	ldr	r1, [pc, #404]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fcff 	bl	80049b0 <RCC_SetFlashLatencyFromMSIRange>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e34d      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fbc:	f000 fc36 	bl	800482c <HAL_RCC_GetSysClockFreq>
 8003fc0:	4601      	mov	r1, r0
 8003fc2:	4b5c      	ldr	r3, [pc, #368]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	4a5a      	ldr	r2, [pc, #360]	; (8004138 <HAL_RCC_OscConfig+0x29c>)
 8003fce:	5cd3      	ldrb	r3, [r2, r3]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	fa21 f303 	lsr.w	r3, r1, r3
 8003fd8:	4a58      	ldr	r2, [pc, #352]	; (800413c <HAL_RCC_OscConfig+0x2a0>)
 8003fda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fdc:	4b58      	ldr	r3, [pc, #352]	; (8004140 <HAL_RCC_OscConfig+0x2a4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fd ff4b 	bl	8001e7c <HAL_InitTick>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d052      	beq.n	8004096 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	e331      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d032      	beq.n	8004062 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ffc:	4b4d      	ldr	r3, [pc, #308]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a4c      	ldr	r2, [pc, #304]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004008:	f7fd ff88 	bl	8001f1c <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004010:	f7fd ff84 	bl	8001f1c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e31a      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004022:	4b44      	ldr	r3, [pc, #272]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800402e:	4b41      	ldr	r3, [pc, #260]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a40      	ldr	r2, [pc, #256]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8004034:	f043 0308 	orr.w	r3, r3, #8
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b3e      	ldr	r3, [pc, #248]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	493b      	ldr	r1, [pc, #236]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800404c:	4b39      	ldr	r3, [pc, #228]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	4936      	ldr	r1, [pc, #216]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 800405c:	4313      	orrs	r3, r2
 800405e:	604b      	str	r3, [r1, #4]
 8004060:	e01a      	b.n	8004098 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004062:	4b34      	ldr	r3, [pc, #208]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a33      	ldr	r2, [pc, #204]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800406e:	f7fd ff55 	bl	8001f1c <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004076:	f7fd ff51 	bl	8001f1c <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e2e7      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004088:	4b2a      	ldr	r3, [pc, #168]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f0      	bne.n	8004076 <HAL_RCC_OscConfig+0x1da>
 8004094:	e000      	b.n	8004098 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004096:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d074      	beq.n	800418e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d005      	beq.n	80040b6 <HAL_RCC_OscConfig+0x21a>
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b0c      	cmp	r3, #12
 80040ae:	d10e      	bne.n	80040ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d10b      	bne.n	80040ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b6:	4b1f      	ldr	r3, [pc, #124]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d064      	beq.n	800418c <HAL_RCC_OscConfig+0x2f0>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d160      	bne.n	800418c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e2c4      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d6:	d106      	bne.n	80040e6 <HAL_RCC_OscConfig+0x24a>
 80040d8:	4b16      	ldr	r3, [pc, #88]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a15      	ldr	r2, [pc, #84]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 80040de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	e01d      	b.n	8004122 <HAL_RCC_OscConfig+0x286>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ee:	d10c      	bne.n	800410a <HAL_RCC_OscConfig+0x26e>
 80040f0:	4b10      	ldr	r3, [pc, #64]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0f      	ldr	r2, [pc, #60]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 80040f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8004102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	e00b      	b.n	8004122 <HAL_RCC_OscConfig+0x286>
 800410a:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a09      	ldr	r2, [pc, #36]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8004110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4b07      	ldr	r3, [pc, #28]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a06      	ldr	r2, [pc, #24]	; (8004134 <HAL_RCC_OscConfig+0x298>)
 800411c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004120:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01c      	beq.n	8004164 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412a:	f7fd fef7 	bl	8001f1c <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004130:	e011      	b.n	8004156 <HAL_RCC_OscConfig+0x2ba>
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000
 8004138:	08006880 	.word	0x08006880
 800413c:	20000000 	.word	0x20000000
 8004140:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004144:	f7fd feea 	bl	8001f1c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e280      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004156:	4baf      	ldr	r3, [pc, #700]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x2a8>
 8004162:	e014      	b.n	800418e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fd feda 	bl	8001f1c <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800416c:	f7fd fed6 	bl	8001f1c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e26c      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800417e:	4ba5      	ldr	r3, [pc, #660]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x2d0>
 800418a:	e000      	b.n	800418e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d060      	beq.n	800425c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	2b04      	cmp	r3, #4
 800419e:	d005      	beq.n	80041ac <HAL_RCC_OscConfig+0x310>
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b0c      	cmp	r3, #12
 80041a4:	d119      	bne.n	80041da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d116      	bne.n	80041da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041ac:	4b99      	ldr	r3, [pc, #612]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_OscConfig+0x328>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e249      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c4:	4b93      	ldr	r3, [pc, #588]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	061b      	lsls	r3, r3, #24
 80041d2:	4990      	ldr	r1, [pc, #576]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d8:	e040      	b.n	800425c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d023      	beq.n	800422a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e2:	4b8c      	ldr	r3, [pc, #560]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a8b      	ldr	r2, [pc, #556]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80041e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ee:	f7fd fe95 	bl	8001f1c <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f6:	f7fd fe91 	bl	8001f1c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e227      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004208:	4b82      	ldr	r3, [pc, #520]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004214:	4b7f      	ldr	r3, [pc, #508]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	061b      	lsls	r3, r3, #24
 8004222:	497c      	ldr	r1, [pc, #496]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004224:	4313      	orrs	r3, r2
 8004226:	604b      	str	r3, [r1, #4]
 8004228:	e018      	b.n	800425c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422a:	4b7a      	ldr	r3, [pc, #488]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a79      	ldr	r2, [pc, #484]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7fd fe71 	bl	8001f1c <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800423e:	f7fd fe6d 	bl	8001f1c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e203      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004250:	4b70      	ldr	r3, [pc, #448]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f0      	bne.n	800423e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d03c      	beq.n	80042e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01c      	beq.n	80042aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004270:	4b68      	ldr	r3, [pc, #416]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004276:	4a67      	ldr	r2, [pc, #412]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fd fe4c 	bl	8001f1c <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004288:	f7fd fe48 	bl	8001f1c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e1de      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800429a:	4b5e      	ldr	r3, [pc, #376]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 800429c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ef      	beq.n	8004288 <HAL_RCC_OscConfig+0x3ec>
 80042a8:	e01b      	b.n	80042e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042aa:	4b5a      	ldr	r3, [pc, #360]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80042ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b0:	4a58      	ldr	r2, [pc, #352]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ba:	f7fd fe2f 	bl	8001f1c <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c2:	f7fd fe2b 	bl	8001f1c <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e1c1      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d4:	4b4f      	ldr	r3, [pc, #316]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80042d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ef      	bne.n	80042c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80a6 	beq.w	800443c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f0:	2300      	movs	r3, #0
 80042f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042f4:	4b47      	ldr	r3, [pc, #284]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10d      	bne.n	800431c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004300:	4b44      	ldr	r3, [pc, #272]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	4a43      	ldr	r2, [pc, #268]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800430a:	6593      	str	r3, [r2, #88]	; 0x58
 800430c:	4b41      	ldr	r3, [pc, #260]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 800430e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004318:	2301      	movs	r3, #1
 800431a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800431c:	4b3e      	ldr	r3, [pc, #248]	; (8004418 <HAL_RCC_OscConfig+0x57c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d118      	bne.n	800435a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004328:	4b3b      	ldr	r3, [pc, #236]	; (8004418 <HAL_RCC_OscConfig+0x57c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a3a      	ldr	r2, [pc, #232]	; (8004418 <HAL_RCC_OscConfig+0x57c>)
 800432e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004332:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004334:	f7fd fdf2 	bl	8001f1c <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433c:	f7fd fdee 	bl	8001f1c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e184      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800434e:	4b32      	ldr	r3, [pc, #200]	; (8004418 <HAL_RCC_OscConfig+0x57c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d108      	bne.n	8004374 <HAL_RCC_OscConfig+0x4d8>
 8004362:	4b2c      	ldr	r3, [pc, #176]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	4a2a      	ldr	r2, [pc, #168]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004372:	e024      	b.n	80043be <HAL_RCC_OscConfig+0x522>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b05      	cmp	r3, #5
 800437a:	d110      	bne.n	800439e <HAL_RCC_OscConfig+0x502>
 800437c:	4b25      	ldr	r3, [pc, #148]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	4a24      	ldr	r2, [pc, #144]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004384:	f043 0304 	orr.w	r3, r3, #4
 8004388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800438c:	4b21      	ldr	r3, [pc, #132]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	4a20      	ldr	r2, [pc, #128]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800439c:	e00f      	b.n	80043be <HAL_RCC_OscConfig+0x522>
 800439e:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a4:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043a6:	f023 0301 	bic.w	r3, r3, #1
 80043aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043ae:	4b19      	ldr	r3, [pc, #100]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	4a17      	ldr	r2, [pc, #92]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043b6:	f023 0304 	bic.w	r3, r3, #4
 80043ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d016      	beq.n	80043f4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c6:	f7fd fda9 	bl	8001f1c <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fd fda5 	bl	8001f1c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e139      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCC_OscConfig+0x578>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0ed      	beq.n	80043ce <HAL_RCC_OscConfig+0x532>
 80043f2:	e01a      	b.n	800442a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fd fd92 	bl	8001f1c <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043fa:	e00f      	b.n	800441c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fc:	f7fd fd8e 	bl	8001f1c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	; 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d906      	bls.n	800441c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e122      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800441c:	4b90      	ldr	r3, [pc, #576]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e8      	bne.n	80043fc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800442a:	7ffb      	ldrb	r3, [r7, #31]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d105      	bne.n	800443c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004430:	4b8b      	ldr	r3, [pc, #556]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 8004432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004434:	4a8a      	ldr	r2, [pc, #552]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 8004436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8108 	beq.w	8004656 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	2b02      	cmp	r3, #2
 800444c:	f040 80d0 	bne.w	80045f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004450:	4b83      	ldr	r3, [pc, #524]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f003 0203 	and.w	r2, r3, #3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	429a      	cmp	r2, r3
 8004462:	d130      	bne.n	80044c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	3b01      	subs	r3, #1
 8004470:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d127      	bne.n	80044c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004480:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d11f      	bne.n	80044c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004490:	2a07      	cmp	r2, #7
 8004492:	bf14      	ite	ne
 8004494:	2201      	movne	r2, #1
 8004496:	2200      	moveq	r2, #0
 8004498:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800449a:	4293      	cmp	r3, r2
 800449c:	d113      	bne.n	80044c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	3b01      	subs	r3, #1
 80044ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d109      	bne.n	80044c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	085b      	lsrs	r3, r3, #1
 80044be:	3b01      	subs	r3, #1
 80044c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d06e      	beq.n	80045a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b0c      	cmp	r3, #12
 80044ca:	d069      	beq.n	80045a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044cc:	4b64      	ldr	r3, [pc, #400]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d105      	bne.n	80044e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044d8:	4b61      	ldr	r3, [pc, #388]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0b7      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044e8:	4b5d      	ldr	r3, [pc, #372]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a5c      	ldr	r2, [pc, #368]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 80044ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044f4:	f7fd fd12 	bl	8001f1c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fc:	f7fd fd0e 	bl	8001f1c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e0a4      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450e:	4b54      	ldr	r3, [pc, #336]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800451a:	4b51      	ldr	r3, [pc, #324]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	4b51      	ldr	r3, [pc, #324]	; (8004664 <HAL_RCC_OscConfig+0x7c8>)
 8004520:	4013      	ands	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800452a:	3a01      	subs	r2, #1
 800452c:	0112      	lsls	r2, r2, #4
 800452e:	4311      	orrs	r1, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004534:	0212      	lsls	r2, r2, #8
 8004536:	4311      	orrs	r1, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800453c:	0852      	lsrs	r2, r2, #1
 800453e:	3a01      	subs	r2, #1
 8004540:	0552      	lsls	r2, r2, #21
 8004542:	4311      	orrs	r1, r2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004548:	0852      	lsrs	r2, r2, #1
 800454a:	3a01      	subs	r2, #1
 800454c:	0652      	lsls	r2, r2, #25
 800454e:	4311      	orrs	r1, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004554:	0912      	lsrs	r2, r2, #4
 8004556:	0452      	lsls	r2, r2, #17
 8004558:	430a      	orrs	r2, r1
 800455a:	4941      	ldr	r1, [pc, #260]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 800455c:	4313      	orrs	r3, r2
 800455e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004560:	4b3f      	ldr	r3, [pc, #252]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a3e      	ldr	r2, [pc, #248]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 8004566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800456a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800456c:	4b3c      	ldr	r3, [pc, #240]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4a3b      	ldr	r2, [pc, #236]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 8004572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004576:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004578:	f7fd fcd0 	bl	8001f1c <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004580:	f7fd fccc 	bl	8001f1c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e062      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004592:	4b33      	ldr	r3, [pc, #204]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800459e:	e05a      	b.n	8004656 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e059      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a4:	4b2e      	ldr	r3, [pc, #184]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d152      	bne.n	8004656 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045b0:	4b2b      	ldr	r3, [pc, #172]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a2a      	ldr	r2, [pc, #168]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 80045b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045bc:	4b28      	ldr	r3, [pc, #160]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4a27      	ldr	r2, [pc, #156]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 80045c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045c8:	f7fd fca8 	bl	8001f1c <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d0:	f7fd fca4 	bl	8001f1c <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e03a      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e2:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x734>
 80045ee:	e032      	b.n	8004656 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b0c      	cmp	r3, #12
 80045f4:	d02d      	beq.n	8004652 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a19      	ldr	r2, [pc, #100]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 80045fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004600:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004602:	4b17      	ldr	r3, [pc, #92]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d105      	bne.n	800461a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800460e:	4b14      	ldr	r3, [pc, #80]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	4a13      	ldr	r2, [pc, #76]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 8004614:	f023 0303 	bic.w	r3, r3, #3
 8004618:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800461a:	4b11      	ldr	r3, [pc, #68]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	4a10      	ldr	r2, [pc, #64]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 8004620:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004628:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462a:	f7fd fc77 	bl	8001f1c <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004632:	f7fd fc73 	bl	8001f1c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e009      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCC_OscConfig+0x7c4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f0      	bne.n	8004632 <HAL_RCC_OscConfig+0x796>
 8004650:	e001      	b.n	8004656 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3720      	adds	r7, #32
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	f99d808c 	.word	0xf99d808c

08004668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e0c8      	b.n	800480e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800467c:	4b66      	ldr	r3, [pc, #408]	; (8004818 <HAL_RCC_ClockConfig+0x1b0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d910      	bls.n	80046ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468a:	4b63      	ldr	r3, [pc, #396]	; (8004818 <HAL_RCC_ClockConfig+0x1b0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 0207 	bic.w	r2, r3, #7
 8004692:	4961      	ldr	r1, [pc, #388]	; (8004818 <HAL_RCC_ClockConfig+0x1b0>)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	4313      	orrs	r3, r2
 8004698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b5f      	ldr	r3, [pc, #380]	; (8004818 <HAL_RCC_ClockConfig+0x1b0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0b0      	b.n	800480e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d04c      	beq.n	8004752 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d107      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c0:	4b56      	ldr	r3, [pc, #344]	; (800481c <HAL_RCC_ClockConfig+0x1b4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d121      	bne.n	8004710 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e09e      	b.n	800480e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046d8:	4b50      	ldr	r3, [pc, #320]	; (800481c <HAL_RCC_ClockConfig+0x1b4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d115      	bne.n	8004710 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e092      	b.n	800480e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046f0:	4b4a      	ldr	r3, [pc, #296]	; (800481c <HAL_RCC_ClockConfig+0x1b4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d109      	bne.n	8004710 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e086      	b.n	800480e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004700:	4b46      	ldr	r3, [pc, #280]	; (800481c <HAL_RCC_ClockConfig+0x1b4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e07e      	b.n	800480e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004710:	4b42      	ldr	r3, [pc, #264]	; (800481c <HAL_RCC_ClockConfig+0x1b4>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f023 0203 	bic.w	r2, r3, #3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	493f      	ldr	r1, [pc, #252]	; (800481c <HAL_RCC_ClockConfig+0x1b4>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004722:	f7fd fbfb 	bl	8001f1c <HAL_GetTick>
 8004726:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004728:	e00a      	b.n	8004740 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800472a:	f7fd fbf7 	bl	8001f1c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	f241 3288 	movw	r2, #5000	; 0x1388
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e066      	b.n	800480e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004740:	4b36      	ldr	r3, [pc, #216]	; (800481c <HAL_RCC_ClockConfig+0x1b4>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 020c 	and.w	r2, r3, #12
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	429a      	cmp	r2, r3
 8004750:	d1eb      	bne.n	800472a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d008      	beq.n	8004770 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800475e:	4b2f      	ldr	r3, [pc, #188]	; (800481c <HAL_RCC_ClockConfig+0x1b4>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	492c      	ldr	r1, [pc, #176]	; (800481c <HAL_RCC_ClockConfig+0x1b4>)
 800476c:	4313      	orrs	r3, r2
 800476e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004770:	4b29      	ldr	r3, [pc, #164]	; (8004818 <HAL_RCC_ClockConfig+0x1b0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d210      	bcs.n	80047a0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477e:	4b26      	ldr	r3, [pc, #152]	; (8004818 <HAL_RCC_ClockConfig+0x1b0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 0207 	bic.w	r2, r3, #7
 8004786:	4924      	ldr	r1, [pc, #144]	; (8004818 <HAL_RCC_ClockConfig+0x1b0>)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800478e:	4b22      	ldr	r3, [pc, #136]	; (8004818 <HAL_RCC_ClockConfig+0x1b0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e036      	b.n	800480e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ac:	4b1b      	ldr	r3, [pc, #108]	; (800481c <HAL_RCC_ClockConfig+0x1b4>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4918      	ldr	r1, [pc, #96]	; (800481c <HAL_RCC_ClockConfig+0x1b4>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d009      	beq.n	80047de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ca:	4b14      	ldr	r3, [pc, #80]	; (800481c <HAL_RCC_ClockConfig+0x1b4>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4910      	ldr	r1, [pc, #64]	; (800481c <HAL_RCC_ClockConfig+0x1b4>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047de:	f000 f825 	bl	800482c <HAL_RCC_GetSysClockFreq>
 80047e2:	4601      	mov	r1, r0
 80047e4:	4b0d      	ldr	r3, [pc, #52]	; (800481c <HAL_RCC_ClockConfig+0x1b4>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	091b      	lsrs	r3, r3, #4
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	4a0c      	ldr	r2, [pc, #48]	; (8004820 <HAL_RCC_ClockConfig+0x1b8>)
 80047f0:	5cd3      	ldrb	r3, [r2, r3]
 80047f2:	f003 031f 	and.w	r3, r3, #31
 80047f6:	fa21 f303 	lsr.w	r3, r1, r3
 80047fa:	4a0a      	ldr	r2, [pc, #40]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047fe:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <HAL_RCC_ClockConfig+0x1c0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fd fb3a 	bl	8001e7c <HAL_InitTick>
 8004808:	4603      	mov	r3, r0
 800480a:	72fb      	strb	r3, [r7, #11]

  return status;
 800480c:	7afb      	ldrb	r3, [r7, #11]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40022000 	.word	0x40022000
 800481c:	40021000 	.word	0x40021000
 8004820:	08006880 	.word	0x08006880
 8004824:	20000000 	.word	0x20000000
 8004828:	20000004 	.word	0x20000004

0800482c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800482c:	b480      	push	{r7}
 800482e:	b089      	sub	sp, #36	; 0x24
 8004830:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	2300      	movs	r3, #0
 8004838:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800483a:	4b3d      	ldr	r3, [pc, #244]	; (8004930 <HAL_RCC_GetSysClockFreq+0x104>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004844:	4b3a      	ldr	r3, [pc, #232]	; (8004930 <HAL_RCC_GetSysClockFreq+0x104>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <HAL_RCC_GetSysClockFreq+0x34>
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b0c      	cmp	r3, #12
 8004858:	d121      	bne.n	800489e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d11e      	bne.n	800489e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004860:	4b33      	ldr	r3, [pc, #204]	; (8004930 <HAL_RCC_GetSysClockFreq+0x104>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d107      	bne.n	800487c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800486c:	4b30      	ldr	r3, [pc, #192]	; (8004930 <HAL_RCC_GetSysClockFreq+0x104>)
 800486e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004872:	0a1b      	lsrs	r3, r3, #8
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	e005      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800487c:	4b2c      	ldr	r3, [pc, #176]	; (8004930 <HAL_RCC_GetSysClockFreq+0x104>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004888:	4a2a      	ldr	r2, [pc, #168]	; (8004934 <HAL_RCC_GetSysClockFreq+0x108>)
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004890:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10d      	bne.n	80048b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800489c:	e00a      	b.n	80048b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d102      	bne.n	80048aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048a4:	4b24      	ldr	r3, [pc, #144]	; (8004938 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	e004      	b.n	80048b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048b0:	4b22      	ldr	r3, [pc, #136]	; (800493c <HAL_RCC_GetSysClockFreq+0x110>)
 80048b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b0c      	cmp	r3, #12
 80048b8:	d133      	bne.n	8004922 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048ba:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_RCC_GetSysClockFreq+0x104>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d002      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0xa4>
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d003      	beq.n	80048d6 <HAL_RCC_GetSysClockFreq+0xaa>
 80048ce:	e005      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048d0:	4b19      	ldr	r3, [pc, #100]	; (8004938 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048d2:	617b      	str	r3, [r7, #20]
      break;
 80048d4:	e005      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048d6:	4b19      	ldr	r3, [pc, #100]	; (800493c <HAL_RCC_GetSysClockFreq+0x110>)
 80048d8:	617b      	str	r3, [r7, #20]
      break;
 80048da:	e002      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	617b      	str	r3, [r7, #20]
      break;
 80048e0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048e2:	4b13      	ldr	r3, [pc, #76]	; (8004930 <HAL_RCC_GetSysClockFreq+0x104>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	3301      	adds	r3, #1
 80048ee:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048f0:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <HAL_RCC_GetSysClockFreq+0x104>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	0a1b      	lsrs	r3, r3, #8
 80048f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	fb02 f203 	mul.w	r2, r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	fbb2 f3f3 	udiv	r3, r2, r3
 8004906:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <HAL_RCC_GetSysClockFreq+0x104>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	0e5b      	lsrs	r3, r3, #25
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	3301      	adds	r3, #1
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004922:	69bb      	ldr	r3, [r7, #24]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3724      	adds	r7, #36	; 0x24
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	40021000 	.word	0x40021000
 8004934:	08006898 	.word	0x08006898
 8004938:	00f42400 	.word	0x00f42400
 800493c:	007a1200 	.word	0x007a1200

08004940 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <HAL_RCC_GetHCLKFreq+0x14>)
 8004946:	681b      	ldr	r3, [r3, #0]
}
 8004948:	4618      	mov	r0, r3
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000000 	.word	0x20000000

08004958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800495c:	f7ff fff0 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 8004960:	4601      	mov	r1, r0
 8004962:	4b06      	ldr	r3, [pc, #24]	; (800497c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	0a1b      	lsrs	r3, r3, #8
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	4a04      	ldr	r2, [pc, #16]	; (8004980 <HAL_RCC_GetPCLK1Freq+0x28>)
 800496e:	5cd3      	ldrb	r3, [r2, r3]
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004978:	4618      	mov	r0, r3
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40021000 	.word	0x40021000
 8004980:	08006890 	.word	0x08006890

08004984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004988:	f7ff ffda 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 800498c:	4601      	mov	r1, r0
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0adb      	lsrs	r3, r3, #11
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4a04      	ldr	r2, [pc, #16]	; (80049ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800499a:	5cd3      	ldrb	r3, [r2, r3]
 800499c:	f003 031f 	and.w	r3, r3, #31
 80049a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40021000 	.word	0x40021000
 80049ac:	08006890 	.word	0x08006890

080049b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049bc:	4b2a      	ldr	r3, [pc, #168]	; (8004a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049c8:	f7fe fd48 	bl	800345c <HAL_PWREx_GetVoltageRange>
 80049cc:	6178      	str	r0, [r7, #20]
 80049ce:	e014      	b.n	80049fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049d0:	4b25      	ldr	r3, [pc, #148]	; (8004a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d4:	4a24      	ldr	r2, [pc, #144]	; (8004a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049da:	6593      	str	r3, [r2, #88]	; 0x58
 80049dc:	4b22      	ldr	r3, [pc, #136]	; (8004a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049e8:	f7fe fd38 	bl	800345c <HAL_PWREx_GetVoltageRange>
 80049ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049ee:	4b1e      	ldr	r3, [pc, #120]	; (8004a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f2:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a00:	d10b      	bne.n	8004a1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b80      	cmp	r3, #128	; 0x80
 8004a06:	d919      	bls.n	8004a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2ba0      	cmp	r3, #160	; 0xa0
 8004a0c:	d902      	bls.n	8004a14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a0e:	2302      	movs	r3, #2
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	e013      	b.n	8004a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a14:	2301      	movs	r3, #1
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	e010      	b.n	8004a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b80      	cmp	r3, #128	; 0x80
 8004a1e:	d902      	bls.n	8004a26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a20:	2303      	movs	r3, #3
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	e00a      	b.n	8004a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b80      	cmp	r3, #128	; 0x80
 8004a2a:	d102      	bne.n	8004a32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	e004      	b.n	8004a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b70      	cmp	r3, #112	; 0x70
 8004a36:	d101      	bne.n	8004a3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a38:	2301      	movs	r3, #1
 8004a3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f023 0207 	bic.w	r2, r3, #7
 8004a44:	4909      	ldr	r1, [pc, #36]	; (8004a6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a4c:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d001      	beq.n	8004a5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40022000 	.word	0x40022000

08004a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a78:	2300      	movs	r3, #0
 8004a7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d03f      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a94:	d01c      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a9a:	d802      	bhi.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00e      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004aa0:	e01f      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004aa2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aa6:	d003      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004aa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004aac:	d01c      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004aae:	e018      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ab0:	4b85      	ldr	r3, [pc, #532]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4a84      	ldr	r2, [pc, #528]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004abc:	e015      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fab9 	bl	800503c <RCCEx_PLLSAI1_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ace:	e00c      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3320      	adds	r3, #32
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fba0 	bl	800521c <RCCEx_PLLSAI2_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ae0:	e003      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ae6:	e000      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aea:	7cfb      	ldrb	r3, [r7, #19]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10b      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004af0:	4b75      	ldr	r3, [pc, #468]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004afe:	4972      	ldr	r1, [pc, #456]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b06:	e001      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b08:	7cfb      	ldrb	r3, [r7, #19]
 8004b0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d03f      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b20:	d01c      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004b22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b26:	d802      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00e      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004b2c:	e01f      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b32:	d003      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004b34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b38:	d01c      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004b3a:	e018      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b3c:	4b62      	ldr	r3, [pc, #392]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4a61      	ldr	r2, [pc, #388]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b48:	e015      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fa73 	bl	800503c <RCCEx_PLLSAI1_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b5a:	e00c      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3320      	adds	r3, #32
 8004b60:	2100      	movs	r1, #0
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fb5a 	bl	800521c <RCCEx_PLLSAI2_Config>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b6c:	e003      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	74fb      	strb	r3, [r7, #19]
      break;
 8004b72:	e000      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b76:	7cfb      	ldrb	r3, [r7, #19]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10b      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b7c:	4b52      	ldr	r3, [pc, #328]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b8a:	494f      	ldr	r1, [pc, #316]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b92:	e001      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b94:	7cfb      	ldrb	r3, [r7, #19]
 8004b96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80a0 	beq.w	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004baa:	4b47      	ldr	r3, [pc, #284]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00d      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc0:	4b41      	ldr	r3, [pc, #260]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc4:	4a40      	ldr	r2, [pc, #256]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bca:	6593      	str	r3, [r2, #88]	; 0x58
 8004bcc:	4b3e      	ldr	r3, [pc, #248]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bdc:	4b3b      	ldr	r3, [pc, #236]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a3a      	ldr	r2, [pc, #232]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004be8:	f7fd f998 	bl	8001f1c <HAL_GetTick>
 8004bec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bee:	e009      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf0:	f7fd f994 	bl	8001f1c <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d902      	bls.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	74fb      	strb	r3, [r7, #19]
        break;
 8004c02:	e005      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c04:	4b31      	ldr	r3, [pc, #196]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0ef      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004c10:	7cfb      	ldrb	r3, [r7, #19]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d15c      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c16:	4b2c      	ldr	r3, [pc, #176]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01f      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d019      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c34:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c40:	4b21      	ldr	r3, [pc, #132]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c46:	4a20      	ldr	r2, [pc, #128]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c50:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c56:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c60:	4a19      	ldr	r2, [pc, #100]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d016      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c72:	f7fd f953 	bl	8001f1c <HAL_GetTick>
 8004c76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c78:	e00b      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7a:	f7fd f94f 	bl	8001f1c <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d902      	bls.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	74fb      	strb	r3, [r7, #19]
            break;
 8004c90:	e006      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c92:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0ec      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004ca0:	7cfb      	ldrb	r3, [r7, #19]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10c      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ca6:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb6:	4904      	ldr	r1, [pc, #16]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cbe:	e009      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cc0:	7cfb      	ldrb	r3, [r7, #19]
 8004cc2:	74bb      	strb	r3, [r7, #18]
 8004cc4:	e006      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd0:	7cfb      	ldrb	r3, [r7, #19]
 8004cd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cd4:	7c7b      	ldrb	r3, [r7, #17]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d105      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cda:	4b9e      	ldr	r3, [pc, #632]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cde:	4a9d      	ldr	r2, [pc, #628]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cf2:	4b98      	ldr	r3, [pc, #608]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f023 0203 	bic.w	r2, r3, #3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	4994      	ldr	r1, [pc, #592]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d14:	4b8f      	ldr	r3, [pc, #572]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f023 020c 	bic.w	r2, r3, #12
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d22:	498c      	ldr	r1, [pc, #560]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d36:	4b87      	ldr	r3, [pc, #540]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	4983      	ldr	r1, [pc, #524]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d58:	4b7e      	ldr	r3, [pc, #504]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	497b      	ldr	r1, [pc, #492]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0310 	and.w	r3, r3, #16
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d7a:	4b76      	ldr	r3, [pc, #472]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d88:	4972      	ldr	r1, [pc, #456]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d9c:	4b6d      	ldr	r3, [pc, #436]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004daa:	496a      	ldr	r1, [pc, #424]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dbe:	4b65      	ldr	r3, [pc, #404]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dcc:	4961      	ldr	r1, [pc, #388]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004de0:	4b5c      	ldr	r3, [pc, #368]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dee:	4959      	ldr	r1, [pc, #356]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e02:	4b54      	ldr	r3, [pc, #336]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e10:	4950      	ldr	r1, [pc, #320]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e24:	4b4b      	ldr	r3, [pc, #300]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e32:	4948      	ldr	r1, [pc, #288]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e46:	4b43      	ldr	r3, [pc, #268]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e54:	493f      	ldr	r1, [pc, #252]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d028      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e68:	4b3a      	ldr	r3, [pc, #232]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e76:	4937      	ldr	r1, [pc, #220]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e86:	d106      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e88:	4b32      	ldr	r3, [pc, #200]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4a31      	ldr	r2, [pc, #196]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e92:	60d3      	str	r3, [r2, #12]
 8004e94:	e011      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e9e:	d10c      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 f8c8 	bl	800503c <RCCEx_PLLSAI1_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004eb6:	7cfb      	ldrb	r3, [r7, #19]
 8004eb8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d028      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ec6:	4b23      	ldr	r3, [pc, #140]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ecc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	491f      	ldr	r1, [pc, #124]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee4:	d106      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee6:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004eec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ef0:	60d3      	str	r3, [r2, #12]
 8004ef2:	e011      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3304      	adds	r3, #4
 8004f02:	2101      	movs	r1, #1
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 f899 	bl	800503c <RCCEx_PLLSAI1_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f0e:	7cfb      	ldrb	r3, [r7, #19]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004f14:	7cfb      	ldrb	r3, [r7, #19]
 8004f16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d02b      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f24:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f32:	4908      	ldr	r1, [pc, #32]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f42:	d109      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4a02      	ldr	r2, [pc, #8]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f4e:	60d3      	str	r3, [r2, #12]
 8004f50:	e014      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f60:	d10c      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3304      	adds	r3, #4
 8004f66:	2101      	movs	r1, #1
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 f867 	bl	800503c <RCCEx_PLLSAI1_Config>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f72:	7cfb      	ldrb	r3, [r7, #19]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004f78:	7cfb      	ldrb	r3, [r7, #19]
 8004f7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d02f      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f88:	4b2b      	ldr	r3, [pc, #172]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f96:	4928      	ldr	r1, [pc, #160]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fa6:	d10d      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	2102      	movs	r1, #2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 f844 	bl	800503c <RCCEx_PLLSAI1_Config>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fb8:	7cfb      	ldrb	r3, [r7, #19]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d014      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004fbe:	7cfb      	ldrb	r3, [r7, #19]
 8004fc0:	74bb      	strb	r3, [r7, #18]
 8004fc2:	e011      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fcc:	d10c      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3320      	adds	r3, #32
 8004fd2:	2102      	movs	r1, #2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f921 	bl	800521c <RCCEx_PLLSAI2_Config>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fde:	7cfb      	ldrb	r3, [r7, #19]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ff4:	4b10      	ldr	r3, [pc, #64]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005002:	490d      	ldr	r1, [pc, #52]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00b      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005016:	4b08      	ldr	r3, [pc, #32]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005026:	4904      	ldr	r1, [pc, #16]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800502e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021000 	.word	0x40021000

0800503c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800504a:	4b73      	ldr	r3, [pc, #460]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d018      	beq.n	8005088 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005056:	4b70      	ldr	r3, [pc, #448]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0203 	and.w	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d10d      	bne.n	8005082 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
       ||
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800506e:	4b6a      	ldr	r3, [pc, #424]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
       ||
 800507e:	429a      	cmp	r2, r3
 8005080:	d044      	beq.n	800510c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	73fb      	strb	r3, [r7, #15]
 8005086:	e041      	b.n	800510c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d00c      	beq.n	80050aa <RCCEx_PLLSAI1_Config+0x6e>
 8005090:	2b03      	cmp	r3, #3
 8005092:	d013      	beq.n	80050bc <RCCEx_PLLSAI1_Config+0x80>
 8005094:	2b01      	cmp	r3, #1
 8005096:	d120      	bne.n	80050da <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005098:	4b5f      	ldr	r3, [pc, #380]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11d      	bne.n	80050e0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a8:	e01a      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050aa:	4b5b      	ldr	r3, [pc, #364]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d116      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ba:	e013      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050bc:	4b56      	ldr	r3, [pc, #344]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10f      	bne.n	80050e8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050c8:	4b53      	ldr	r3, [pc, #332]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d109      	bne.n	80050e8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050d8:	e006      	b.n	80050e8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
      break;
 80050de:	e004      	b.n	80050ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80050e0:	bf00      	nop
 80050e2:	e002      	b.n	80050ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80050e4:	bf00      	nop
 80050e6:	e000      	b.n	80050ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80050e8:	bf00      	nop
    }

    if(status == HAL_OK)
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10d      	bne.n	800510c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050f0:	4b49      	ldr	r3, [pc, #292]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6819      	ldr	r1, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	3b01      	subs	r3, #1
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	430b      	orrs	r3, r1
 8005106:	4944      	ldr	r1, [pc, #272]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005108:	4313      	orrs	r3, r2
 800510a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d17d      	bne.n	800520e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005112:	4b41      	ldr	r3, [pc, #260]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a40      	ldr	r2, [pc, #256]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005118:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800511c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511e:	f7fc fefd 	bl	8001f1c <HAL_GetTick>
 8005122:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005124:	e009      	b.n	800513a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005126:	f7fc fef9 	bl	8001f1c <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d902      	bls.n	800513a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	73fb      	strb	r3, [r7, #15]
        break;
 8005138:	e005      	b.n	8005146 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800513a:	4b37      	ldr	r3, [pc, #220]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1ef      	bne.n	8005126 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d160      	bne.n	800520e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d111      	bne.n	8005176 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005152:	4b31      	ldr	r3, [pc, #196]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800515a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6892      	ldr	r2, [r2, #8]
 8005162:	0211      	lsls	r1, r2, #8
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	68d2      	ldr	r2, [r2, #12]
 8005168:	0912      	lsrs	r2, r2, #4
 800516a:	0452      	lsls	r2, r2, #17
 800516c:	430a      	orrs	r2, r1
 800516e:	492a      	ldr	r1, [pc, #168]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005170:	4313      	orrs	r3, r2
 8005172:	610b      	str	r3, [r1, #16]
 8005174:	e027      	b.n	80051c6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d112      	bne.n	80051a2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800517c:	4b26      	ldr	r3, [pc, #152]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005184:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6892      	ldr	r2, [r2, #8]
 800518c:	0211      	lsls	r1, r2, #8
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6912      	ldr	r2, [r2, #16]
 8005192:	0852      	lsrs	r2, r2, #1
 8005194:	3a01      	subs	r2, #1
 8005196:	0552      	lsls	r2, r2, #21
 8005198:	430a      	orrs	r2, r1
 800519a:	491f      	ldr	r1, [pc, #124]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 800519c:	4313      	orrs	r3, r2
 800519e:	610b      	str	r3, [r1, #16]
 80051a0:	e011      	b.n	80051c6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051a2:	4b1d      	ldr	r3, [pc, #116]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6892      	ldr	r2, [r2, #8]
 80051b2:	0211      	lsls	r1, r2, #8
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6952      	ldr	r2, [r2, #20]
 80051b8:	0852      	lsrs	r2, r2, #1
 80051ba:	3a01      	subs	r2, #1
 80051bc:	0652      	lsls	r2, r2, #25
 80051be:	430a      	orrs	r2, r1
 80051c0:	4915      	ldr	r1, [pc, #84]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051c6:	4b14      	ldr	r3, [pc, #80]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a13      	ldr	r2, [pc, #76]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d2:	f7fc fea3 	bl	8001f1c <HAL_GetTick>
 80051d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051d8:	e009      	b.n	80051ee <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051da:	f7fc fe9f 	bl	8001f1c <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d902      	bls.n	80051ee <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	73fb      	strb	r3, [r7, #15]
          break;
 80051ec:	e005      	b.n	80051fa <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051ee:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0ef      	beq.n	80051da <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d106      	bne.n	800520e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	4903      	ldr	r1, [pc, #12]	; (8005218 <RCCEx_PLLSAI1_Config+0x1dc>)
 800520a:	4313      	orrs	r3, r2
 800520c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800520e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40021000 	.word	0x40021000

0800521c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800522a:	4b68      	ldr	r3, [pc, #416]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d018      	beq.n	8005268 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005236:	4b65      	ldr	r3, [pc, #404]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f003 0203 	and.w	r2, r3, #3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d10d      	bne.n	8005262 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
       ||
 800524a:	2b00      	cmp	r3, #0
 800524c:	d009      	beq.n	8005262 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800524e:	4b5f      	ldr	r3, [pc, #380]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
       ||
 800525e:	429a      	cmp	r2, r3
 8005260:	d044      	beq.n	80052ec <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
 8005266:	e041      	b.n	80052ec <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b02      	cmp	r3, #2
 800526e:	d00c      	beq.n	800528a <RCCEx_PLLSAI2_Config+0x6e>
 8005270:	2b03      	cmp	r3, #3
 8005272:	d013      	beq.n	800529c <RCCEx_PLLSAI2_Config+0x80>
 8005274:	2b01      	cmp	r3, #1
 8005276:	d120      	bne.n	80052ba <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005278:	4b54      	ldr	r3, [pc, #336]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d11d      	bne.n	80052c0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005288:	e01a      	b.n	80052c0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800528a:	4b50      	ldr	r3, [pc, #320]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005292:	2b00      	cmp	r3, #0
 8005294:	d116      	bne.n	80052c4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800529a:	e013      	b.n	80052c4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800529c:	4b4b      	ldr	r3, [pc, #300]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10f      	bne.n	80052c8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052a8:	4b48      	ldr	r3, [pc, #288]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d109      	bne.n	80052c8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052b8:	e006      	b.n	80052c8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	73fb      	strb	r3, [r7, #15]
      break;
 80052be:	e004      	b.n	80052ca <RCCEx_PLLSAI2_Config+0xae>
      break;
 80052c0:	bf00      	nop
 80052c2:	e002      	b.n	80052ca <RCCEx_PLLSAI2_Config+0xae>
      break;
 80052c4:	bf00      	nop
 80052c6:	e000      	b.n	80052ca <RCCEx_PLLSAI2_Config+0xae>
      break;
 80052c8:	bf00      	nop
    }

    if(status == HAL_OK)
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10d      	bne.n	80052ec <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052d0:	4b3e      	ldr	r3, [pc, #248]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6819      	ldr	r1, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	430b      	orrs	r3, r1
 80052e6:	4939      	ldr	r1, [pc, #228]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d167      	bne.n	80053c2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052f2:	4b36      	ldr	r3, [pc, #216]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a35      	ldr	r2, [pc, #212]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80052f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fe:	f7fc fe0d 	bl	8001f1c <HAL_GetTick>
 8005302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005304:	e009      	b.n	800531a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005306:	f7fc fe09 	bl	8001f1c <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d902      	bls.n	800531a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	73fb      	strb	r3, [r7, #15]
        break;
 8005318:	e005      	b.n	8005326 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800531a:	4b2c      	ldr	r3, [pc, #176]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1ef      	bne.n	8005306 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d14a      	bne.n	80053c2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d111      	bne.n	8005356 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005332:	4b26      	ldr	r3, [pc, #152]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800533a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6892      	ldr	r2, [r2, #8]
 8005342:	0211      	lsls	r1, r2, #8
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	68d2      	ldr	r2, [r2, #12]
 8005348:	0912      	lsrs	r2, r2, #4
 800534a:	0452      	lsls	r2, r2, #17
 800534c:	430a      	orrs	r2, r1
 800534e:	491f      	ldr	r1, [pc, #124]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005350:	4313      	orrs	r3, r2
 8005352:	614b      	str	r3, [r1, #20]
 8005354:	e011      	b.n	800537a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005356:	4b1d      	ldr	r3, [pc, #116]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800535e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6892      	ldr	r2, [r2, #8]
 8005366:	0211      	lsls	r1, r2, #8
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6912      	ldr	r2, [r2, #16]
 800536c:	0852      	lsrs	r2, r2, #1
 800536e:	3a01      	subs	r2, #1
 8005370:	0652      	lsls	r2, r2, #25
 8005372:	430a      	orrs	r2, r1
 8005374:	4915      	ldr	r1, [pc, #84]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005376:	4313      	orrs	r3, r2
 8005378:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800537a:	4b14      	ldr	r3, [pc, #80]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a13      	ldr	r2, [pc, #76]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005384:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005386:	f7fc fdc9 	bl	8001f1c <HAL_GetTick>
 800538a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800538c:	e009      	b.n	80053a2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800538e:	f7fc fdc5 	bl	8001f1c <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d902      	bls.n	80053a2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	73fb      	strb	r3, [r7, #15]
          break;
 80053a0:	e005      	b.n	80053ae <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053a2:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0ef      	beq.n	800538e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d106      	bne.n	80053c2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053b4:	4b05      	ldr	r3, [pc, #20]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80053b6:	695a      	ldr	r2, [r3, #20]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	4903      	ldr	r1, [pc, #12]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b0>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40021000 	.word	0x40021000

080053d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d06c      	beq.n	80054bc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fc fa0e 	bl	8001818 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	22ca      	movs	r2, #202	; 0xca
 800540a:	625a      	str	r2, [r3, #36]	; 0x24
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2253      	movs	r2, #83	; 0x53
 8005412:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fa49 	bl	80058ac <RTC_EnterInitMode>
 800541a:	4603      	mov	r3, r0
 800541c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d14b      	bne.n	80054bc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6812      	ldr	r2, [r2, #0]
 800542e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005436:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6899      	ldr	r1, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	68d2      	ldr	r2, [r2, #12]
 800545e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6919      	ldr	r1, [r3, #16]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	041a      	lsls	r2, r3, #16
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fa4d 	bl	8005914 <RTC_ExitInitMode>
 800547a:	4603      	mov	r3, r0
 800547c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d11b      	bne.n	80054bc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0203 	bic.w	r2, r2, #3
 8005492:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	22ff      	movs	r2, #255	; 0xff
 80054b2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80054c6:	b590      	push	{r4, r7, lr}
 80054c8:	b087      	sub	sp, #28
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_RTC_SetTime+0x1a>
 80054dc:	2302      	movs	r3, #2
 80054de:	e08b      	b.n	80055f8 <HAL_RTC_SetTime+0x132>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	22ca      	movs	r2, #202	; 0xca
 80054f6:	625a      	str	r2, [r3, #36]	; 0x24
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2253      	movs	r2, #83	; 0x53
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f9d3 	bl	80058ac <RTC_EnterInitMode>
 8005506:	4603      	mov	r3, r0
 8005508:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800550a:	7cfb      	ldrb	r3, [r7, #19]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d163      	bne.n	80055d8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d126      	bne.n	8005564 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d102      	bne.n	800552a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2200      	movs	r2, #0
 8005528:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fa2e 	bl	8005990 <RTC_ByteToBcd2>
 8005534:	4603      	mov	r3, r0
 8005536:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fa27 	bl	8005990 <RTC_ByteToBcd2>
 8005542:	4603      	mov	r3, r0
 8005544:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005546:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	789b      	ldrb	r3, [r3, #2]
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fa1f 	bl	8005990 <RTC_ByteToBcd2>
 8005552:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005554:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	78db      	ldrb	r3, [r3, #3]
 800555c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	e018      	b.n	8005596 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d102      	bne.n	8005578 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2200      	movs	r2, #0
 8005576:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	785b      	ldrb	r3, [r3, #1]
 8005582:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005584:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800558a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	78db      	ldrb	r3, [r3, #3]
 8005590:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80055a0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80055a4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055b4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6899      	ldr	r1, [r3, #8]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	431a      	orrs	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f9a0 	bl	8005914 <RTC_ExitInitMode>
 80055d4:	4603      	mov	r3, r0
 80055d6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	22ff      	movs	r2, #255	; 0xff
 80055de:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80055e0:	7cfb      	ldrb	r3, [r7, #19]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d103      	bne.n	80055ee <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80055f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	371c      	adds	r7, #28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd90      	pop	{r4, r7, pc}

08005600 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800562e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005632:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	0c1b      	lsrs	r3, r3, #16
 8005638:	b2db      	uxtb	r3, r3
 800563a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800563e:	b2da      	uxtb	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	0a1b      	lsrs	r3, r3, #8
 8005648:	b2db      	uxtb	r3, r3
 800564a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800564e:	b2da      	uxtb	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	0d9b      	lsrs	r3, r3, #22
 8005666:	b2db      	uxtb	r3, r3
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	b2da      	uxtb	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d11a      	bne.n	80056ae <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f000 f9a7 	bl	80059d0 <RTC_Bcd2ToByte>
 8005682:	4603      	mov	r3, r0
 8005684:	461a      	mov	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	785b      	ldrb	r3, [r3, #1]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 f99e 	bl	80059d0 <RTC_Bcd2ToByte>
 8005694:	4603      	mov	r3, r0
 8005696:	461a      	mov	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	789b      	ldrb	r3, [r3, #2]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 f995 	bl	80059d0 <RTC_Bcd2ToByte>
 80056a6:	4603      	mov	r3, r0
 80056a8:	461a      	mov	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_RTC_SetDate+0x1a>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e075      	b.n	80057be <HAL_RTC_SetDate+0x106>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2202      	movs	r2, #2
 80056de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10e      	bne.n	8005706 <HAL_RTC_SetDate+0x4e>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d008      	beq.n	8005706 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	f023 0310 	bic.w	r3, r3, #16
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	330a      	adds	r3, #10
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d11c      	bne.n	8005746 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	78db      	ldrb	r3, [r3, #3]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 f93d 	bl	8005990 <RTC_ByteToBcd2>
 8005716:	4603      	mov	r3, r0
 8005718:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	4618      	mov	r0, r3
 8005720:	f000 f936 	bl	8005990 <RTC_ByteToBcd2>
 8005724:	4603      	mov	r3, r0
 8005726:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005728:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	789b      	ldrb	r3, [r3, #2]
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f92e 	bl	8005990 <RTC_ByteToBcd2>
 8005734:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005736:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	e00e      	b.n	8005764 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	78db      	ldrb	r3, [r3, #3]
 800574a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	785b      	ldrb	r3, [r3, #1]
 8005750:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005752:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005758:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	22ca      	movs	r2, #202	; 0xca
 800576a:	625a      	str	r2, [r3, #36]	; 0x24
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2253      	movs	r2, #83	; 0x53
 8005772:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f899 	bl	80058ac <RTC_EnterInitMode>
 800577a:	4603      	mov	r3, r0
 800577c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800577e:	7cfb      	ldrb	r3, [r7, #19]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10c      	bne.n	800579e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800578e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005792:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f8bd 	bl	8005914 <RTC_ExitInitMode>
 800579a:	4603      	mov	r3, r0
 800579c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	22ff      	movs	r2, #255	; 0xff
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80057a6:	7cfb      	ldrb	r3, [r7, #19]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d103      	bne.n	80057b4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80057bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd90      	pop	{r4, r7, pc}

080057c6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b086      	sub	sp, #24
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057e0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	0c1b      	lsrs	r3, r3, #16
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	f003 031f 	and.w	r3, r3, #31
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005804:	b2da      	uxtb	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	0b5b      	lsrs	r3, r3, #13
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	b2da      	uxtb	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d11a      	bne.n	8005856 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	78db      	ldrb	r3, [r3, #3]
 8005824:	4618      	mov	r0, r3
 8005826:	f000 f8d3 	bl	80059d0 <RTC_Bcd2ToByte>
 800582a:	4603      	mov	r3, r0
 800582c:	461a      	mov	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	4618      	mov	r0, r3
 8005838:	f000 f8ca 	bl	80059d0 <RTC_Bcd2ToByte>
 800583c:	4603      	mov	r3, r0
 800583e:	461a      	mov	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	789b      	ldrb	r3, [r3, #2]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 f8c1 	bl	80059d0 <RTC_Bcd2ToByte>
 800584e:	4603      	mov	r3, r0
 8005850:	461a      	mov	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005876:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005878:	f7fc fb50 	bl	8001f1c <HAL_GetTick>
 800587c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800587e:	e009      	b.n	8005894 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005880:	f7fc fb4c 	bl	8001f1c <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800588e:	d901      	bls.n	8005894 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e007      	b.n	80058a4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0ee      	beq.n	8005880 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d120      	bne.n	8005908 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80058d0:	f7fc fb24 	bl	8001f1c <HAL_GetTick>
 80058d4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80058d6:	e00d      	b.n	80058f4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80058d8:	f7fc fb20 	bl	8001f1c <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058e6:	d905      	bls.n	80058f4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2203      	movs	r2, #3
 80058f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <RTC_EnterInitMode+0x5c>
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	2b03      	cmp	r3, #3
 8005906:	d1e7      	bne.n	80058d8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005920:	4b1a      	ldr	r3, [pc, #104]	; (800598c <RTC_ExitInitMode+0x78>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	4a19      	ldr	r2, [pc, #100]	; (800598c <RTC_ExitInitMode+0x78>)
 8005926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800592a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800592c:	4b17      	ldr	r3, [pc, #92]	; (800598c <RTC_ExitInitMode+0x78>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10c      	bne.n	8005952 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff ff91 	bl	8005860 <HAL_RTC_WaitForSynchro>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01e      	beq.n	8005982 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2203      	movs	r2, #3
 8005948:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	73fb      	strb	r3, [r7, #15]
 8005950:	e017      	b.n	8005982 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005952:	4b0e      	ldr	r3, [pc, #56]	; (800598c <RTC_ExitInitMode+0x78>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	4a0d      	ldr	r2, [pc, #52]	; (800598c <RTC_ExitInitMode+0x78>)
 8005958:	f023 0320 	bic.w	r3, r3, #32
 800595c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff ff7e 	bl	8005860 <HAL_RTC_WaitForSynchro>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d005      	beq.n	8005976 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2203      	movs	r2, #3
 800596e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <RTC_ExitInitMode+0x78>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	4a04      	ldr	r2, [pc, #16]	; (800598c <RTC_ExitInitMode+0x78>)
 800597c:	f043 0320 	orr.w	r3, r3, #32
 8005980:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40002800 	.word	0x40002800

08005990 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	4603      	mov	r3, r0
 8005998:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800599e:	79fb      	ldrb	r3, [r7, #7]
 80059a0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80059a2:	e005      	b.n	80059b0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3301      	adds	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80059aa:	7afb      	ldrb	r3, [r7, #11]
 80059ac:	3b0a      	subs	r3, #10
 80059ae:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80059b0:	7afb      	ldrb	r3, [r7, #11]
 80059b2:	2b09      	cmp	r3, #9
 80059b4:	d8f6      	bhi.n	80059a4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	7afb      	ldrb	r3, [r7, #11]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	b2db      	uxtb	r3, r3
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	091b      	lsrs	r3, r3, #4
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	0092      	lsls	r2, r2, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	4413      	add	r3, r2
 80059f6:	b2db      	uxtb	r3, r3
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e049      	b.n	8005aaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fc f94c 	bl	8001cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4619      	mov	r1, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	f000 f8ee 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_TIM_ConfigClockSource+0x18>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e0a8      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x16a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005aec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005af4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d067      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x124>
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	d80b      	bhi.n	8005b22 <HAL_TIM_ConfigClockSource+0x70>
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d073      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0x144>
 8005b0e:	2b10      	cmp	r3, #16
 8005b10:	d802      	bhi.n	8005b18 <HAL_TIM_ConfigClockSource+0x66>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d06f      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b16:	e078      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d06c      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0x144>
 8005b1c:	2b30      	cmp	r3, #48	; 0x30
 8005b1e:	d06a      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005b20:	e073      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005b22:	2b70      	cmp	r3, #112	; 0x70
 8005b24:	d00d      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x90>
 8005b26:	2b70      	cmp	r3, #112	; 0x70
 8005b28:	d804      	bhi.n	8005b34 <HAL_TIM_ConfigClockSource+0x82>
 8005b2a:	2b50      	cmp	r3, #80	; 0x50
 8005b2c:	d033      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0xe4>
 8005b2e:	2b60      	cmp	r3, #96	; 0x60
 8005b30:	d041      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005b32:	e06a      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b38:	d066      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0x156>
 8005b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3e:	d017      	beq.n	8005b70 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005b40:	e063      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6899      	ldr	r1, [r3, #8]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f000 f97b 	bl	8005e4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	609a      	str	r2, [r3, #8]
      break;
 8005b6e:	e04c      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6818      	ldr	r0, [r3, #0]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	6899      	ldr	r1, [r3, #8]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f000 f964 	bl	8005e4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b92:	609a      	str	r2, [r3, #8]
      break;
 8005b94:	e039      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6859      	ldr	r1, [r3, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f000 f8d8 	bl	8005d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2150      	movs	r1, #80	; 0x50
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 f931 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 8005bb4:	e029      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6859      	ldr	r1, [r3, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f000 f8f7 	bl	8005db6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2160      	movs	r1, #96	; 0x60
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 f921 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 8005bd4:	e019      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6859      	ldr	r1, [r3, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	461a      	mov	r2, r3
 8005be4:	f000 f8b8 	bl	8005d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2140      	movs	r1, #64	; 0x40
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 f911 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 8005bf4:	e009      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f000 f908 	bl	8005e16 <TIM_ITRx_SetConfig>
        break;
 8005c06:	e000      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005c08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a40      	ldr	r2, [pc, #256]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c42:	d00f      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a3d      	ldr	r2, [pc, #244]	; (8005d3c <TIM_Base_SetConfig+0x118>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3c      	ldr	r2, [pc, #240]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d007      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a3b      	ldr	r2, [pc, #236]	; (8005d44 <TIM_Base_SetConfig+0x120>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a3a      	ldr	r2, [pc, #232]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d108      	bne.n	8005c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a2f      	ldr	r2, [pc, #188]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d01f      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c84:	d01b      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2c      	ldr	r2, [pc, #176]	; (8005d3c <TIM_Base_SetConfig+0x118>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d017      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2b      	ldr	r2, [pc, #172]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d013      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2a      	ldr	r2, [pc, #168]	; (8005d44 <TIM_Base_SetConfig+0x120>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00f      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a29      	ldr	r2, [pc, #164]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00b      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a28      	ldr	r2, [pc, #160]	; (8005d4c <TIM_Base_SetConfig+0x128>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d007      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a27      	ldr	r2, [pc, #156]	; (8005d50 <TIM_Base_SetConfig+0x12c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d003      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a26      	ldr	r2, [pc, #152]	; (8005d54 <TIM_Base_SetConfig+0x130>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d108      	bne.n	8005cd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a10      	ldr	r2, [pc, #64]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00f      	beq.n	8005d1c <TIM_Base_SetConfig+0xf8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a12      	ldr	r2, [pc, #72]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00b      	beq.n	8005d1c <TIM_Base_SetConfig+0xf8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a11      	ldr	r2, [pc, #68]	; (8005d4c <TIM_Base_SetConfig+0x128>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d007      	beq.n	8005d1c <TIM_Base_SetConfig+0xf8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a10      	ldr	r2, [pc, #64]	; (8005d50 <TIM_Base_SetConfig+0x12c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_Base_SetConfig+0xf8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a0f      	ldr	r2, [pc, #60]	; (8005d54 <TIM_Base_SetConfig+0x130>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d103      	bne.n	8005d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	615a      	str	r2, [r3, #20]
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40012c00 	.word	0x40012c00
 8005d3c:	40000400 	.word	0x40000400
 8005d40:	40000800 	.word	0x40000800
 8005d44:	40000c00 	.word	0x40000c00
 8005d48:	40013400 	.word	0x40013400
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400
 8005d54:	40014800 	.word	0x40014800

08005d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f023 0201 	bic.w	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f023 030a 	bic.w	r3, r3, #10
 8005d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b087      	sub	sp, #28
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f023 0210 	bic.w	r2, r3, #16
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	031b      	lsls	r3, r3, #12
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005df2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f043 0307 	orr.w	r3, r3, #7
 8005e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	609a      	str	r2, [r3, #8]
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	021a      	lsls	r2, r3, #8
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	609a      	str	r2, [r3, #8]
}
 8005e80:	bf00      	nop
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e068      	b.n	8005f76 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a2e      	ldr	r2, [pc, #184]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d004      	beq.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a2d      	ldr	r2, [pc, #180]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d108      	bne.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ede:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1e      	ldr	r2, [pc, #120]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d01d      	beq.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f16:	d018      	beq.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1b      	ldr	r2, [pc, #108]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d013      	beq.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1a      	ldr	r2, [pc, #104]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00e      	beq.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d009      	beq.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d004      	beq.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a14      	ldr	r2, [pc, #80]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d10c      	bne.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40013400 	.word	0x40013400
 8005f8c:	40000400 	.word	0x40000400
 8005f90:	40000800 	.word	0x40000800
 8005f94:	40000c00 	.word	0x40000c00
 8005f98:	40014000 	.word	0x40014000

08005f9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e040      	b.n	8006030 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d106      	bne.n	8005fc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fb fed0 	bl	8001d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2224      	movs	r2, #36	; 0x24
 8005fc8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0201 	bic.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f82c 	bl	8006038 <UART_SetConfig>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d101      	bne.n	8005fea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e022      	b.n	8006030 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 faaa 	bl	800654c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006016:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fb31 	bl	8006690 <UART_CheckIdleState>
 800602e:	4603      	mov	r3, r0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006038:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800603c:	b088      	sub	sp, #32
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	4313      	orrs	r3, r2
 800605c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4bac      	ldr	r3, [pc, #688]	; (8006318 <UART_SetConfig+0x2e0>)
 8006066:	4013      	ands	r3, r2
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	69f9      	ldr	r1, [r7, #28]
 800606e:	430b      	orrs	r3, r1
 8006070:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4aa2      	ldr	r2, [pc, #648]	; (800631c <UART_SetConfig+0x2e4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d004      	beq.n	80060a2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	4313      	orrs	r3, r2
 80060a0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a99      	ldr	r2, [pc, #612]	; (8006320 <UART_SetConfig+0x2e8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d121      	bne.n	8006104 <UART_SetConfig+0xcc>
 80060c0:	4b98      	ldr	r3, [pc, #608]	; (8006324 <UART_SetConfig+0x2ec>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d816      	bhi.n	80060fc <UART_SetConfig+0xc4>
 80060ce:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <UART_SetConfig+0x9c>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	080060f1 	.word	0x080060f1
 80060dc:	080060eb 	.word	0x080060eb
 80060e0:	080060f7 	.word	0x080060f7
 80060e4:	2301      	movs	r3, #1
 80060e6:	76fb      	strb	r3, [r7, #27]
 80060e8:	e0e8      	b.n	80062bc <UART_SetConfig+0x284>
 80060ea:	2302      	movs	r3, #2
 80060ec:	76fb      	strb	r3, [r7, #27]
 80060ee:	e0e5      	b.n	80062bc <UART_SetConfig+0x284>
 80060f0:	2304      	movs	r3, #4
 80060f2:	76fb      	strb	r3, [r7, #27]
 80060f4:	e0e2      	b.n	80062bc <UART_SetConfig+0x284>
 80060f6:	2308      	movs	r3, #8
 80060f8:	76fb      	strb	r3, [r7, #27]
 80060fa:	e0df      	b.n	80062bc <UART_SetConfig+0x284>
 80060fc:	2310      	movs	r3, #16
 80060fe:	76fb      	strb	r3, [r7, #27]
 8006100:	bf00      	nop
 8006102:	e0db      	b.n	80062bc <UART_SetConfig+0x284>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a87      	ldr	r2, [pc, #540]	; (8006328 <UART_SetConfig+0x2f0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d134      	bne.n	8006178 <UART_SetConfig+0x140>
 800610e:	4b85      	ldr	r3, [pc, #532]	; (8006324 <UART_SetConfig+0x2ec>)
 8006110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006114:	f003 030c 	and.w	r3, r3, #12
 8006118:	2b0c      	cmp	r3, #12
 800611a:	d829      	bhi.n	8006170 <UART_SetConfig+0x138>
 800611c:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <UART_SetConfig+0xec>)
 800611e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006122:	bf00      	nop
 8006124:	08006159 	.word	0x08006159
 8006128:	08006171 	.word	0x08006171
 800612c:	08006171 	.word	0x08006171
 8006130:	08006171 	.word	0x08006171
 8006134:	08006165 	.word	0x08006165
 8006138:	08006171 	.word	0x08006171
 800613c:	08006171 	.word	0x08006171
 8006140:	08006171 	.word	0x08006171
 8006144:	0800615f 	.word	0x0800615f
 8006148:	08006171 	.word	0x08006171
 800614c:	08006171 	.word	0x08006171
 8006150:	08006171 	.word	0x08006171
 8006154:	0800616b 	.word	0x0800616b
 8006158:	2300      	movs	r3, #0
 800615a:	76fb      	strb	r3, [r7, #27]
 800615c:	e0ae      	b.n	80062bc <UART_SetConfig+0x284>
 800615e:	2302      	movs	r3, #2
 8006160:	76fb      	strb	r3, [r7, #27]
 8006162:	e0ab      	b.n	80062bc <UART_SetConfig+0x284>
 8006164:	2304      	movs	r3, #4
 8006166:	76fb      	strb	r3, [r7, #27]
 8006168:	e0a8      	b.n	80062bc <UART_SetConfig+0x284>
 800616a:	2308      	movs	r3, #8
 800616c:	76fb      	strb	r3, [r7, #27]
 800616e:	e0a5      	b.n	80062bc <UART_SetConfig+0x284>
 8006170:	2310      	movs	r3, #16
 8006172:	76fb      	strb	r3, [r7, #27]
 8006174:	bf00      	nop
 8006176:	e0a1      	b.n	80062bc <UART_SetConfig+0x284>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a6b      	ldr	r2, [pc, #428]	; (800632c <UART_SetConfig+0x2f4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d120      	bne.n	80061c4 <UART_SetConfig+0x18c>
 8006182:	4b68      	ldr	r3, [pc, #416]	; (8006324 <UART_SetConfig+0x2ec>)
 8006184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006188:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800618c:	2b10      	cmp	r3, #16
 800618e:	d00f      	beq.n	80061b0 <UART_SetConfig+0x178>
 8006190:	2b10      	cmp	r3, #16
 8006192:	d802      	bhi.n	800619a <UART_SetConfig+0x162>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d005      	beq.n	80061a4 <UART_SetConfig+0x16c>
 8006198:	e010      	b.n	80061bc <UART_SetConfig+0x184>
 800619a:	2b20      	cmp	r3, #32
 800619c:	d005      	beq.n	80061aa <UART_SetConfig+0x172>
 800619e:	2b30      	cmp	r3, #48	; 0x30
 80061a0:	d009      	beq.n	80061b6 <UART_SetConfig+0x17e>
 80061a2:	e00b      	b.n	80061bc <UART_SetConfig+0x184>
 80061a4:	2300      	movs	r3, #0
 80061a6:	76fb      	strb	r3, [r7, #27]
 80061a8:	e088      	b.n	80062bc <UART_SetConfig+0x284>
 80061aa:	2302      	movs	r3, #2
 80061ac:	76fb      	strb	r3, [r7, #27]
 80061ae:	e085      	b.n	80062bc <UART_SetConfig+0x284>
 80061b0:	2304      	movs	r3, #4
 80061b2:	76fb      	strb	r3, [r7, #27]
 80061b4:	e082      	b.n	80062bc <UART_SetConfig+0x284>
 80061b6:	2308      	movs	r3, #8
 80061b8:	76fb      	strb	r3, [r7, #27]
 80061ba:	e07f      	b.n	80062bc <UART_SetConfig+0x284>
 80061bc:	2310      	movs	r3, #16
 80061be:	76fb      	strb	r3, [r7, #27]
 80061c0:	bf00      	nop
 80061c2:	e07b      	b.n	80062bc <UART_SetConfig+0x284>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a59      	ldr	r2, [pc, #356]	; (8006330 <UART_SetConfig+0x2f8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d120      	bne.n	8006210 <UART_SetConfig+0x1d8>
 80061ce:	4b55      	ldr	r3, [pc, #340]	; (8006324 <UART_SetConfig+0x2ec>)
 80061d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	d00f      	beq.n	80061fc <UART_SetConfig+0x1c4>
 80061dc:	2b40      	cmp	r3, #64	; 0x40
 80061de:	d802      	bhi.n	80061e6 <UART_SetConfig+0x1ae>
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <UART_SetConfig+0x1b8>
 80061e4:	e010      	b.n	8006208 <UART_SetConfig+0x1d0>
 80061e6:	2b80      	cmp	r3, #128	; 0x80
 80061e8:	d005      	beq.n	80061f6 <UART_SetConfig+0x1be>
 80061ea:	2bc0      	cmp	r3, #192	; 0xc0
 80061ec:	d009      	beq.n	8006202 <UART_SetConfig+0x1ca>
 80061ee:	e00b      	b.n	8006208 <UART_SetConfig+0x1d0>
 80061f0:	2300      	movs	r3, #0
 80061f2:	76fb      	strb	r3, [r7, #27]
 80061f4:	e062      	b.n	80062bc <UART_SetConfig+0x284>
 80061f6:	2302      	movs	r3, #2
 80061f8:	76fb      	strb	r3, [r7, #27]
 80061fa:	e05f      	b.n	80062bc <UART_SetConfig+0x284>
 80061fc:	2304      	movs	r3, #4
 80061fe:	76fb      	strb	r3, [r7, #27]
 8006200:	e05c      	b.n	80062bc <UART_SetConfig+0x284>
 8006202:	2308      	movs	r3, #8
 8006204:	76fb      	strb	r3, [r7, #27]
 8006206:	e059      	b.n	80062bc <UART_SetConfig+0x284>
 8006208:	2310      	movs	r3, #16
 800620a:	76fb      	strb	r3, [r7, #27]
 800620c:	bf00      	nop
 800620e:	e055      	b.n	80062bc <UART_SetConfig+0x284>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a47      	ldr	r2, [pc, #284]	; (8006334 <UART_SetConfig+0x2fc>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d124      	bne.n	8006264 <UART_SetConfig+0x22c>
 800621a:	4b42      	ldr	r3, [pc, #264]	; (8006324 <UART_SetConfig+0x2ec>)
 800621c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006228:	d012      	beq.n	8006250 <UART_SetConfig+0x218>
 800622a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800622e:	d802      	bhi.n	8006236 <UART_SetConfig+0x1fe>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <UART_SetConfig+0x20c>
 8006234:	e012      	b.n	800625c <UART_SetConfig+0x224>
 8006236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800623a:	d006      	beq.n	800624a <UART_SetConfig+0x212>
 800623c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006240:	d009      	beq.n	8006256 <UART_SetConfig+0x21e>
 8006242:	e00b      	b.n	800625c <UART_SetConfig+0x224>
 8006244:	2300      	movs	r3, #0
 8006246:	76fb      	strb	r3, [r7, #27]
 8006248:	e038      	b.n	80062bc <UART_SetConfig+0x284>
 800624a:	2302      	movs	r3, #2
 800624c:	76fb      	strb	r3, [r7, #27]
 800624e:	e035      	b.n	80062bc <UART_SetConfig+0x284>
 8006250:	2304      	movs	r3, #4
 8006252:	76fb      	strb	r3, [r7, #27]
 8006254:	e032      	b.n	80062bc <UART_SetConfig+0x284>
 8006256:	2308      	movs	r3, #8
 8006258:	76fb      	strb	r3, [r7, #27]
 800625a:	e02f      	b.n	80062bc <UART_SetConfig+0x284>
 800625c:	2310      	movs	r3, #16
 800625e:	76fb      	strb	r3, [r7, #27]
 8006260:	bf00      	nop
 8006262:	e02b      	b.n	80062bc <UART_SetConfig+0x284>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a2c      	ldr	r2, [pc, #176]	; (800631c <UART_SetConfig+0x2e4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d124      	bne.n	80062b8 <UART_SetConfig+0x280>
 800626e:	4b2d      	ldr	r3, [pc, #180]	; (8006324 <UART_SetConfig+0x2ec>)
 8006270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006274:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800627c:	d012      	beq.n	80062a4 <UART_SetConfig+0x26c>
 800627e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006282:	d802      	bhi.n	800628a <UART_SetConfig+0x252>
 8006284:	2b00      	cmp	r3, #0
 8006286:	d007      	beq.n	8006298 <UART_SetConfig+0x260>
 8006288:	e012      	b.n	80062b0 <UART_SetConfig+0x278>
 800628a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800628e:	d006      	beq.n	800629e <UART_SetConfig+0x266>
 8006290:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006294:	d009      	beq.n	80062aa <UART_SetConfig+0x272>
 8006296:	e00b      	b.n	80062b0 <UART_SetConfig+0x278>
 8006298:	2300      	movs	r3, #0
 800629a:	76fb      	strb	r3, [r7, #27]
 800629c:	e00e      	b.n	80062bc <UART_SetConfig+0x284>
 800629e:	2302      	movs	r3, #2
 80062a0:	76fb      	strb	r3, [r7, #27]
 80062a2:	e00b      	b.n	80062bc <UART_SetConfig+0x284>
 80062a4:	2304      	movs	r3, #4
 80062a6:	76fb      	strb	r3, [r7, #27]
 80062a8:	e008      	b.n	80062bc <UART_SetConfig+0x284>
 80062aa:	2308      	movs	r3, #8
 80062ac:	76fb      	strb	r3, [r7, #27]
 80062ae:	e005      	b.n	80062bc <UART_SetConfig+0x284>
 80062b0:	2310      	movs	r3, #16
 80062b2:	76fb      	strb	r3, [r7, #27]
 80062b4:	bf00      	nop
 80062b6:	e001      	b.n	80062bc <UART_SetConfig+0x284>
 80062b8:	2310      	movs	r3, #16
 80062ba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a16      	ldr	r2, [pc, #88]	; (800631c <UART_SetConfig+0x2e4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	f040 8087 	bne.w	80063d6 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062c8:	7efb      	ldrb	r3, [r7, #27]
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d836      	bhi.n	800633c <UART_SetConfig+0x304>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <UART_SetConfig+0x29c>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	080062f9 	.word	0x080062f9
 80062d8:	0800633d 	.word	0x0800633d
 80062dc:	08006301 	.word	0x08006301
 80062e0:	0800633d 	.word	0x0800633d
 80062e4:	08006307 	.word	0x08006307
 80062e8:	0800633d 	.word	0x0800633d
 80062ec:	0800633d 	.word	0x0800633d
 80062f0:	0800633d 	.word	0x0800633d
 80062f4:	0800630f 	.word	0x0800630f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f8:	f7fe fb2e 	bl	8004958 <HAL_RCC_GetPCLK1Freq>
 80062fc:	6178      	str	r0, [r7, #20]
        break;
 80062fe:	e022      	b.n	8006346 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006300:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <UART_SetConfig+0x300>)
 8006302:	617b      	str	r3, [r7, #20]
        break;
 8006304:	e01f      	b.n	8006346 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006306:	f7fe fa91 	bl	800482c <HAL_RCC_GetSysClockFreq>
 800630a:	6178      	str	r0, [r7, #20]
        break;
 800630c:	e01b      	b.n	8006346 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800630e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006312:	617b      	str	r3, [r7, #20]
        break;
 8006314:	e017      	b.n	8006346 <UART_SetConfig+0x30e>
 8006316:	bf00      	nop
 8006318:	efff69f3 	.word	0xefff69f3
 800631c:	40008000 	.word	0x40008000
 8006320:	40013800 	.word	0x40013800
 8006324:	40021000 	.word	0x40021000
 8006328:	40004400 	.word	0x40004400
 800632c:	40004800 	.word	0x40004800
 8006330:	40004c00 	.word	0x40004c00
 8006334:	40005000 	.word	0x40005000
 8006338:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	76bb      	strb	r3, [r7, #26]
        break;
 8006344:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 80f1 	beq.w	8006530 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	4413      	add	r3, r2
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	429a      	cmp	r2, r3
 800635c:	d305      	bcc.n	800636a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	429a      	cmp	r2, r3
 8006368:	d902      	bls.n	8006370 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	76bb      	strb	r3, [r7, #26]
 800636e:	e0df      	b.n	8006530 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	4619      	mov	r1, r3
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	f04f 0400 	mov.w	r4, #0
 8006380:	0214      	lsls	r4, r2, #8
 8006382:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006386:	020b      	lsls	r3, r1, #8
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6852      	ldr	r2, [r2, #4]
 800638c:	0852      	lsrs	r2, r2, #1
 800638e:	4611      	mov	r1, r2
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	eb13 0b01 	adds.w	fp, r3, r1
 8006398:	eb44 0c02 	adc.w	ip, r4, r2
 800639c:	4658      	mov	r0, fp
 800639e:	4661      	mov	r1, ip
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f04f 0400 	mov.w	r4, #0
 80063a8:	461a      	mov	r2, r3
 80063aa:	4623      	mov	r3, r4
 80063ac:	f7fa fafa 	bl	80009a4 <__aeabi_uldivmod>
 80063b0:	4603      	mov	r3, r0
 80063b2:	460c      	mov	r4, r1
 80063b4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063bc:	d308      	bcc.n	80063d0 <UART_SetConfig+0x398>
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063c4:	d204      	bcs.n	80063d0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	60da      	str	r2, [r3, #12]
 80063ce:	e0af      	b.n	8006530 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	76bb      	strb	r3, [r7, #26]
 80063d4:	e0ac      	b.n	8006530 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063de:	d15b      	bne.n	8006498 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80063e0:	7efb      	ldrb	r3, [r7, #27]
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d827      	bhi.n	8006436 <UART_SetConfig+0x3fe>
 80063e6:	a201      	add	r2, pc, #4	; (adr r2, 80063ec <UART_SetConfig+0x3b4>)
 80063e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ec:	08006411 	.word	0x08006411
 80063f0:	08006419 	.word	0x08006419
 80063f4:	08006421 	.word	0x08006421
 80063f8:	08006437 	.word	0x08006437
 80063fc:	08006427 	.word	0x08006427
 8006400:	08006437 	.word	0x08006437
 8006404:	08006437 	.word	0x08006437
 8006408:	08006437 	.word	0x08006437
 800640c:	0800642f 	.word	0x0800642f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006410:	f7fe faa2 	bl	8004958 <HAL_RCC_GetPCLK1Freq>
 8006414:	6178      	str	r0, [r7, #20]
        break;
 8006416:	e013      	b.n	8006440 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006418:	f7fe fab4 	bl	8004984 <HAL_RCC_GetPCLK2Freq>
 800641c:	6178      	str	r0, [r7, #20]
        break;
 800641e:	e00f      	b.n	8006440 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006420:	4b49      	ldr	r3, [pc, #292]	; (8006548 <UART_SetConfig+0x510>)
 8006422:	617b      	str	r3, [r7, #20]
        break;
 8006424:	e00c      	b.n	8006440 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006426:	f7fe fa01 	bl	800482c <HAL_RCC_GetSysClockFreq>
 800642a:	6178      	str	r0, [r7, #20]
        break;
 800642c:	e008      	b.n	8006440 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006432:	617b      	str	r3, [r7, #20]
        break;
 8006434:	e004      	b.n	8006440 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	76bb      	strb	r3, [r7, #26]
        break;
 800643e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d074      	beq.n	8006530 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	005a      	lsls	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	085b      	lsrs	r3, r3, #1
 8006450:	441a      	add	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	fbb2 f3f3 	udiv	r3, r2, r3
 800645a:	b29b      	uxth	r3, r3
 800645c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b0f      	cmp	r3, #15
 8006462:	d916      	bls.n	8006492 <UART_SetConfig+0x45a>
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800646a:	d212      	bcs.n	8006492 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	b29b      	uxth	r3, r3
 8006470:	f023 030f 	bic.w	r3, r3, #15
 8006474:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	085b      	lsrs	r3, r3, #1
 800647a:	b29b      	uxth	r3, r3
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	b29a      	uxth	r2, r3
 8006482:	89fb      	ldrh	r3, [r7, #14]
 8006484:	4313      	orrs	r3, r2
 8006486:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	89fa      	ldrh	r2, [r7, #14]
 800648e:	60da      	str	r2, [r3, #12]
 8006490:	e04e      	b.n	8006530 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	76bb      	strb	r3, [r7, #26]
 8006496:	e04b      	b.n	8006530 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006498:	7efb      	ldrb	r3, [r7, #27]
 800649a:	2b08      	cmp	r3, #8
 800649c:	d827      	bhi.n	80064ee <UART_SetConfig+0x4b6>
 800649e:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <UART_SetConfig+0x46c>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064c9 	.word	0x080064c9
 80064a8:	080064d1 	.word	0x080064d1
 80064ac:	080064d9 	.word	0x080064d9
 80064b0:	080064ef 	.word	0x080064ef
 80064b4:	080064df 	.word	0x080064df
 80064b8:	080064ef 	.word	0x080064ef
 80064bc:	080064ef 	.word	0x080064ef
 80064c0:	080064ef 	.word	0x080064ef
 80064c4:	080064e7 	.word	0x080064e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c8:	f7fe fa46 	bl	8004958 <HAL_RCC_GetPCLK1Freq>
 80064cc:	6178      	str	r0, [r7, #20]
        break;
 80064ce:	e013      	b.n	80064f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064d0:	f7fe fa58 	bl	8004984 <HAL_RCC_GetPCLK2Freq>
 80064d4:	6178      	str	r0, [r7, #20]
        break;
 80064d6:	e00f      	b.n	80064f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064d8:	4b1b      	ldr	r3, [pc, #108]	; (8006548 <UART_SetConfig+0x510>)
 80064da:	617b      	str	r3, [r7, #20]
        break;
 80064dc:	e00c      	b.n	80064f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064de:	f7fe f9a5 	bl	800482c <HAL_RCC_GetSysClockFreq>
 80064e2:	6178      	str	r0, [r7, #20]
        break;
 80064e4:	e008      	b.n	80064f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ea:	617b      	str	r3, [r7, #20]
        break;
 80064ec:	e004      	b.n	80064f8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	76bb      	strb	r3, [r7, #26]
        break;
 80064f6:	bf00      	nop
    }

    if (pclk != 0U)
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d018      	beq.n	8006530 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	085a      	lsrs	r2, r3, #1
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	441a      	add	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006510:	b29b      	uxth	r3, r3
 8006512:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	2b0f      	cmp	r3, #15
 8006518:	d908      	bls.n	800652c <UART_SetConfig+0x4f4>
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006520:	d204      	bcs.n	800652c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	60da      	str	r2, [r3, #12]
 800652a:	e001      	b.n	8006530 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800653c:	7ebb      	ldrb	r3, [r7, #26]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3720      	adds	r7, #32
 8006542:	46bd      	mov	sp, r7
 8006544:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006548:	00f42400 	.word	0x00f42400

0800654c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00a      	beq.n	8006576 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00a      	beq.n	80065ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00a      	beq.n	80065fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01a      	beq.n	8006662 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800664a:	d10a      	bne.n	8006662 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	605a      	str	r2, [r3, #4]
  }
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af02      	add	r7, sp, #8
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800669e:	f7fb fc3d 	bl	8001f1c <HAL_GetTick>
 80066a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0308 	and.w	r3, r3, #8
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d10e      	bne.n	80066d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f82a 	bl	800671a <UART_WaitOnFlagUntilTimeout>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e020      	b.n	8006712 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d10e      	bne.n	80066fc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f814 	bl	800671a <UART_WaitOnFlagUntilTimeout>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e00a      	b.n	8006712 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	603b      	str	r3, [r7, #0]
 8006726:	4613      	mov	r3, r2
 8006728:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800672a:	e05d      	b.n	80067e8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006732:	d059      	beq.n	80067e8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006734:	f7fb fbf2 	bl	8001f1c <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	429a      	cmp	r2, r3
 8006742:	d302      	bcc.n	800674a <UART_WaitOnFlagUntilTimeout+0x30>
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d11b      	bne.n	8006782 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006758:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 0201 	bic.w	r2, r2, #1
 8006768:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2220      	movs	r2, #32
 8006774:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e042      	b.n	8006808 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	d02b      	beq.n	80067e8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800679a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800679e:	d123      	bne.n	80067e8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067b8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2220      	movs	r2, #32
 80067ce:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2220      	movs	r2, #32
 80067da:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e00f      	b.n	8006808 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	69da      	ldr	r2, [r3, #28]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	4013      	ands	r3, r2
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	bf0c      	ite	eq
 80067f8:	2301      	moveq	r3, #1
 80067fa:	2300      	movne	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	461a      	mov	r2, r3
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	429a      	cmp	r2, r3
 8006804:	d092      	beq.n	800672c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <__libc_init_array>:
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	4e0d      	ldr	r6, [pc, #52]	; (8006848 <__libc_init_array+0x38>)
 8006814:	4c0d      	ldr	r4, [pc, #52]	; (800684c <__libc_init_array+0x3c>)
 8006816:	1ba4      	subs	r4, r4, r6
 8006818:	10a4      	asrs	r4, r4, #2
 800681a:	2500      	movs	r5, #0
 800681c:	42a5      	cmp	r5, r4
 800681e:	d109      	bne.n	8006834 <__libc_init_array+0x24>
 8006820:	4e0b      	ldr	r6, [pc, #44]	; (8006850 <__libc_init_array+0x40>)
 8006822:	4c0c      	ldr	r4, [pc, #48]	; (8006854 <__libc_init_array+0x44>)
 8006824:	f000 f820 	bl	8006868 <_init>
 8006828:	1ba4      	subs	r4, r4, r6
 800682a:	10a4      	asrs	r4, r4, #2
 800682c:	2500      	movs	r5, #0
 800682e:	42a5      	cmp	r5, r4
 8006830:	d105      	bne.n	800683e <__libc_init_array+0x2e>
 8006832:	bd70      	pop	{r4, r5, r6, pc}
 8006834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006838:	4798      	blx	r3
 800683a:	3501      	adds	r5, #1
 800683c:	e7ee      	b.n	800681c <__libc_init_array+0xc>
 800683e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006842:	4798      	blx	r3
 8006844:	3501      	adds	r5, #1
 8006846:	e7f2      	b.n	800682e <__libc_init_array+0x1e>
 8006848:	080068d0 	.word	0x080068d0
 800684c:	080068d0 	.word	0x080068d0
 8006850:	080068d0 	.word	0x080068d0
 8006854:	080068d4 	.word	0x080068d4

08006858 <memset>:
 8006858:	4402      	add	r2, r0
 800685a:	4603      	mov	r3, r0
 800685c:	4293      	cmp	r3, r2
 800685e:	d100      	bne.n	8006862 <memset+0xa>
 8006860:	4770      	bx	lr
 8006862:	f803 1b01 	strb.w	r1, [r3], #1
 8006866:	e7f9      	b.n	800685c <memset+0x4>

08006868 <_init>:
 8006868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686a:	bf00      	nop
 800686c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800686e:	bc08      	pop	{r3}
 8006870:	469e      	mov	lr, r3
 8006872:	4770      	bx	lr

08006874 <_fini>:
 8006874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006876:	bf00      	nop
 8006878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687a:	bc08      	pop	{r3}
 800687c:	469e      	mov	lr, r3
 800687e:	4770      	bx	lr
