
stmProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0800ebe8  0800ebe8  0001ebe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f398  0800f398  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800f398  0800f398  0001f398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3a0  0800f3a0  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3a0  0800f3a0  0001f3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3a4  0800f3a4  0001f3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800f3a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000248  0800f5f0  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  0800f5f0  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf35  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004109  00000000  00000000  0003c1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  000402b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001748  00000000  00000000  00041c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d648  00000000  00000000  00043360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebd5  00000000  00000000  000709a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111f69  00000000  00000000  0008f57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a14e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008654  00000000  00000000  001a1538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ebcc 	.word	0x0800ebcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0800ebcc 	.word	0x0800ebcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ce:	4b2f      	ldr	r3, [pc, #188]	; (800118c <MX_ADC1_Init+0xe0>)
 80010d0:	4a2f      	ldr	r2, [pc, #188]	; (8001190 <MX_ADC1_Init+0xe4>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <MX_ADC1_Init+0xe0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <MX_ADC1_Init+0xe0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <MX_ADC1_Init+0xe0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <MX_ADC1_Init+0xe0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <MX_ADC1_Init+0xe0>)
 80010ee:	2204      	movs	r2, #4
 80010f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <MX_ADC1_Init+0xe0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <MX_ADC1_Init+0xe0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <MX_ADC1_Init+0xe0>)
 8001100:	2201      	movs	r2, #1
 8001102:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <MX_ADC1_Init+0xe0>)
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_ADC1_Init+0xe0>)
 800110e:	2200      	movs	r2, #0
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_ADC1_Init+0xe0>)
 8001114:	2200      	movs	r2, #0
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_ADC1_Init+0xe0>)
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_ADC1_Init+0xe0>)
 8001122:	2200      	movs	r2, #0
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_ADC1_Init+0xe0>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800112e:	4817      	ldr	r0, [pc, #92]	; (800118c <MX_ADC1_Init+0xe0>)
 8001130:	f001 fe46 	bl	8002dc0 <HAL_ADC_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800113a:	f000 fae1 	bl	8001700 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4810      	ldr	r0, [pc, #64]	; (800118c <MX_ADC1_Init+0xe0>)
 800114a:	f002 fd93 	bl	8003c74 <HAL_ADCEx_MultiModeConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001154:	f000 fad4 	bl	8001700 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_ADC1_Init+0xe8>)
 800115a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800115c:	2306      	movs	r3, #6
 800115e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001164:	237f      	movs	r3, #127	; 0x7f
 8001166:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001168:	2304      	movs	r3, #4
 800116a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_ADC1_Init+0xe0>)
 8001176:	f002 f90f 	bl	8003398 <HAL_ADC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001180:	f000 fabe 	bl	8001700 <Error_Handler>
  }

}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000264 	.word	0x20000264
 8001190:	50040000 	.word	0x50040000
 8001194:	19200040 	.word	0x19200040

08001198 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a15      	ldr	r2, [pc, #84]	; (800120c <HAL_ADC_MspInit+0x74>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d124      	bne.n	8001204 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_ADC_MspInit+0x78>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	4a14      	ldr	r2, [pc, #80]	; (8001210 <HAL_ADC_MspInit+0x78>)
 80011c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_ADC_MspInit+0x78>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <HAL_ADC_MspInit+0x78>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <HAL_ADC_MspInit+0x78>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_ADC_MspInit+0x78>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = SIG_Pin;
 80011ea:	2302      	movs	r3, #2
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011ee:	230b      	movs	r3, #11
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SIG_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f003 f96c 	bl	80044dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	50040000 	.word	0x50040000
 8001210:	40021000 	.word	0x40021000

08001214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_DMA_Init+0x38>)
 800121c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <MX_DMA_Init+0x38>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6493      	str	r3, [r2, #72]	; 0x48
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_DMA_Init+0x38>)
 8001228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2010      	movs	r0, #16
 8001238:	f002 fea3 	bl	8003f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800123c:	2010      	movs	r0, #16
 800123e:	f002 febc 	bl	8003fba <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b44      	ldr	r3, [pc, #272]	; (8001378 <MX_GPIO_Init+0x128>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a43      	ldr	r2, [pc, #268]	; (8001378 <MX_GPIO_Init+0x128>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b41      	ldr	r3, [pc, #260]	; (8001378 <MX_GPIO_Init+0x128>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <MX_GPIO_Init+0x128>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a3d      	ldr	r2, [pc, #244]	; (8001378 <MX_GPIO_Init+0x128>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <MX_GPIO_Init+0x128>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <MX_GPIO_Init+0x128>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a37      	ldr	r2, [pc, #220]	; (8001378 <MX_GPIO_Init+0x128>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b35      	ldr	r3, [pc, #212]	; (8001378 <MX_GPIO_Init+0x128>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ae:	4b32      	ldr	r3, [pc, #200]	; (8001378 <MX_GPIO_Init+0x128>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a31      	ldr	r2, [pc, #196]	; (8001378 <MX_GPIO_Init+0x128>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <MX_GPIO_Init+0x128>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <MX_GPIO_Init+0x128>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a2b      	ldr	r2, [pc, #172]	; (8001378 <MX_GPIO_Init+0x128>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b29      	ldr	r3, [pc, #164]	; (8001378 <MX_GPIO_Init+0x128>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4b26      	ldr	r3, [pc, #152]	; (8001378 <MX_GPIO_Init+0x128>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a25      	ldr	r2, [pc, #148]	; (8001378 <MX_GPIO_Init+0x128>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <MX_GPIO_Init+0x128>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S0_Pin|S1_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2121      	movs	r1, #33	; 0x21
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f003 fb8b 	bl	8004a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001308:	481c      	ldr	r0, [pc, #112]	; (800137c <MX_GPIO_Init+0x12c>)
 800130a:	f003 fb85 	bl	8004a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S2_Pin|S3_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	21c0      	movs	r1, #192	; 0xc0
 8001312:	481b      	ldr	r0, [pc, #108]	; (8001380 <MX_GPIO_Init+0x130>)
 8001314:	f003 fb80 	bl	8004a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin;
 8001318:	2321      	movs	r3, #33	; 0x21
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001332:	f003 f8d3 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_Pin;
 8001336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	480b      	ldr	r0, [pc, #44]	; (800137c <MX_GPIO_Init+0x12c>)
 8001350:	f003 f8c4 	bl	80044dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = S2_Pin|S3_Pin;
 8001354:	23c0      	movs	r3, #192	; 0xc0
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_GPIO_Init+0x130>)
 800136c:	f003 f8b6 	bl	80044dc <HAL_GPIO_Init>

}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	; 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000
 800137c:	48001000 	.word	0x48001000
 8001380:	48000400 	.word	0x48000400

08001384 <readMeasurements>:
		}
	}
}

void readMeasurements(ADC_HandleTypeDef *hadc, Measurement *m)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	uint16_t i;

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001394:	482d      	ldr	r0, [pc, #180]	; (800144c <readMeasurements+0xc8>)
 8001396:	f003 fb3f 	bl	8004a18 <HAL_GPIO_WritePin>

	for(i = 0; i < MEAS_NUM; ++i)
 800139a:	2300      	movs	r3, #0
 800139c:	81fb      	strh	r3, [r7, #14]
 800139e:	e047      	b.n	8001430 <readMeasurements+0xac>
	{
		HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, (i>>0) & 0x01);
 80013a0:	89fb      	ldrh	r3, [r7, #14]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	2101      	movs	r1, #1
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f003 fb31 	bl	8004a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, (i>>1) & 0x01);
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	2120      	movs	r1, #32
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f003 fb24 	bl	8004a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, (i>>2) & 0x01);
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	2140      	movs	r1, #64	; 0x40
 80013e2:	481b      	ldr	r0, [pc, #108]	; (8001450 <readMeasurements+0xcc>)
 80013e4:	f003 fb18 	bl	8004a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, (i>>3) & 0x01);
 80013e8:	89fb      	ldrh	r3, [r7, #14]
 80013ea:	08db      	lsrs	r3, r3, #3
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	4815      	ldr	r0, [pc, #84]	; (8001450 <readMeasurements+0xcc>)
 80013fc:	f003 fb0c 	bl	8004a18 <HAL_GPIO_WritePin>

		HAL_ADC_Start(hadc);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f001 fe31 	bl	8003068 <HAL_ADC_Start>

		if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 8001406:	210a      	movs	r1, #10
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f001 fee7 	bl	80031dc <HAL_ADC_PollForConversion>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10a      	bne.n	800142a <readMeasurements+0xa6>
		{
			m->meas[i] = HAL_ADC_GetValue(hadc);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f001 ffb1 	bl	800337c <HAL_ADC_GetValue>
 800141a:	4602      	mov	r2, r0
 800141c:	89fb      	ldrh	r3, [r7, #14]
 800141e:	b291      	uxth	r1, r2
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	460a      	mov	r2, r1
 8001428:	809a      	strh	r2, [r3, #4]
	for(i = 0; i < MEAS_NUM; ++i)
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	3301      	adds	r3, #1
 800142e:	81fb      	strh	r3, [r7, #14]
 8001430:	89fb      	ldrh	r3, [r7, #14]
 8001432:	2b08      	cmp	r3, #8
 8001434:	d9b4      	bls.n	80013a0 <readMeasurements+0x1c>
		}
	}

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143c:	4803      	ldr	r0, [pc, #12]	; (800144c <readMeasurements+0xc8>)
 800143e:	f003 faeb 	bl	8004a18 <HAL_GPIO_WritePin>
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	48001000 	.word	0x48001000
 8001450:	48000400 	.word	0x48000400

08001454 <HAL_RTC_AlarmAEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	  if(f_data_ready == RESET && init_ready == SET && working_mode == 1)
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_RTC_AlarmAEventCallback+0x60>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d122      	bne.n	80014aa <HAL_RTC_AlarmAEventCallback+0x56>
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_RTC_AlarmAEventCallback+0x64>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d11e      	bne.n	80014aa <HAL_RTC_AlarmAEventCallback+0x56>
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_RTC_AlarmAEventCallback+0x68>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d11a      	bne.n	80014aa <HAL_RTC_AlarmAEventCallback+0x56>
	  {
		  if(++interval_counter >= meas_interval)
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <HAL_RTC_AlarmAEventCallback+0x6c>)
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_RTC_AlarmAEventCallback+0x70>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d30e      	bcc.n	80014aa <HAL_RTC_AlarmAEventCallback+0x56>
		  {
			  readMeasurements(&hadc1, &mes);
 800148c:	490e      	ldr	r1, [pc, #56]	; (80014c8 <HAL_RTC_AlarmAEventCallback+0x74>)
 800148e:	480f      	ldr	r0, [pc, #60]	; (80014cc <HAL_RTC_AlarmAEventCallback+0x78>)
 8001490:	f7ff ff78 	bl	8001384 <readMeasurements>
			  mes.time = getCurrTimestamp();
 8001494:	f000 ff36 	bl	8002304 <getCurrTimestamp>
 8001498:	4603      	mov	r3, r0
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <HAL_RTC_AlarmAEventCallback+0x74>)
 800149c:	6013      	str	r3, [r2, #0]
			  f_data_ready = SET;
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_RTC_AlarmAEventCallback+0x60>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
			  interval_counter = 0;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_RTC_AlarmAEventCallback+0x6c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
		  }
	  }

}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200002f8 	.word	0x200002f8
 80014b8:	200002dc 	.word	0x200002dc
 80014bc:	20000001 	.word	0x20000001
 80014c0:	200002dd 	.word	0x200002dd
 80014c4:	20000002 	.word	0x20000002
 80014c8:	200002e0 	.word	0x200002e0
 80014cc:	20000264 	.word	0x20000264

080014d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	parseCommand(RxBuff);
 80014d8:	4807      	ldr	r0, [pc, #28]	; (80014f8 <HAL_UART_RxCpltCallback+0x28>)
 80014da:	f000 fa19 	bl	8001910 <parseCommand>
	HAL_UART_Receive_DMA(&huart2, RxBuff, rx_command_size);
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <HAL_UART_RxCpltCallback+0x2c>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	4904      	ldr	r1, [pc, #16]	; (80014f8 <HAL_UART_RxCpltCallback+0x28>)
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <HAL_UART_RxCpltCallback+0x30>)
 80014ea:	f006 fbd9 	bl	8007ca0 <HAL_UART_Receive_DMA>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200002c8 	.word	0x200002c8
 80014fc:	20000000 	.word	0x20000000
 8001500:	200003bc 	.word	0x200003bc

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b083      	sub	sp, #12
 8001508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150a:	f001 f9d5 	bl	80028b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150e:	f000 f85b 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001512:	f7ff fe9d 	bl	8001250 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8001516:	f000 fa73 	bl	8001a00 <MX_QUADSPI_Init>
  MX_ADC1_Init();
 800151a:	f7ff fdc7 	bl	80010ac <MX_ADC1_Init>
  MX_RTC_Init();
 800151e:	f000 fdf7 	bl	8002110 <MX_RTC_Init>
  MX_DMA_Init();
 8001522:	f7ff fe77 	bl	8001214 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001526:	f001 f8bd 	bl	80026a4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800152a:	f001 f84f 	bl	80025cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


	 //Inicjalizacja

	 if (CSP_QUADSPI_Init() != HAL_OK) {
 800152e:	f000 faef 	bl	8001b10 <CSP_QUADSPI_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <main+0x38>
	 Error_Handler();
 8001538:	f000 f8e2 	bl	8001700 <Error_Handler>
	 }

	 if (CSP_QSPI_Erase_Chip() != HAL_OK) {
 800153c:	f000 fb1e 	bl	8001b7c <CSP_QSPI_Erase_Chip>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <main+0x46>
	 Error_Handler();
 8001546:	f000 f8db 	bl	8001700 <Error_Handler>
	 }


	 //Ustawienie daty i godziny
	 if (setDate(25, 04, 22, 1) != HAL_OK)
 800154a:	2301      	movs	r3, #1
 800154c:	2216      	movs	r2, #22
 800154e:	2104      	movs	r1, #4
 8001550:	2019      	movs	r0, #25
 8001552:	f000 fe8f 	bl	8002274 <setDate>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <main+0x5c>
		 Error_Handler();
 800155c:	f000 f8d0 	bl	8001700 <Error_Handler>

	 if (setTime(00,10,17) != HAL_OK)
 8001560:	2211      	movs	r2, #17
 8001562:	210a      	movs	r1, #10
 8001564:	2000      	movs	r0, #0
 8001566:	f000 feab 	bl	80022c0 <setTime>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <main+0x70>
		 Error_Handler();
 8001570:	f000 f8c6 	bl	8001700 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_UART_Receive_DMA(&huart2, RxBuff, rx_command_size);
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <main+0xac>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b29b      	uxth	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	490d      	ldr	r1, [pc, #52]	; (80015b4 <main+0xb0>)
 800157e:	480e      	ldr	r0, [pc, #56]	; (80015b8 <main+0xb4>)
 8001580:	f006 fb8e 	bl	8007ca0 <HAL_UART_Receive_DMA>
	init_ready = SET;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <main+0xb8>)
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
	while (1) {
		if(f_data_ready == SET)
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <main+0xbc>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d1fb      	bne.n	800158a <main+0x86>
		{
			storeData(mes);
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <main+0xc0>)
 8001594:	466c      	mov	r4, sp
 8001596:	f103 0210 	add.w	r2, r3, #16
 800159a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800159e:	e884 0003 	stmia.w	r4, {r0, r1}
 80015a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a4:	f000 f8b6 	bl	8001714 <storeData>
			f_data_ready = RESET;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <main+0xbc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
		if(f_data_ready == SET)
 80015ae:	e7ec      	b.n	800158a <main+0x86>
 80015b0:	20000000 	.word	0x20000000
 80015b4:	200002c8 	.word	0x200002c8
 80015b8:	200003bc 	.word	0x200003bc
 80015bc:	200002dc 	.word	0x200002dc
 80015c0:	200002f8 	.word	0x200002f8
 80015c4:	200002e0 	.word	0x200002e0

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0b8      	sub	sp, #224	; 0xe0
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015d2:	2244      	movs	r2, #68	; 0x44
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f007 fba6 	bl	8008d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ec:	463b      	mov	r3, r7
 80015ee:	2288      	movs	r2, #136	; 0x88
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f007 fb98 	bl	8008d28 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015f8:	f003 fa26 	bl	8004a48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015fc:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <SystemClock_Config+0x130>)
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001602:	4a3d      	ldr	r2, [pc, #244]	; (80016f8 <SystemClock_Config+0x130>)
 8001604:	f023 0318 	bic.w	r3, r3, #24
 8001608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800160c:	2306      	movs	r3, #6
 800160e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001612:	2301      	movs	r3, #1
 8001614:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800161c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001620:	2310      	movs	r3, #16
 8001622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001626:	2302      	movs	r3, #2
 8001628:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800162c:	2302      	movs	r3, #2
 800162e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001632:	2301      	movs	r3, #1
 8001634:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001638:	230a      	movs	r3, #10
 800163a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800163e:	2307      	movs	r3, #7
 8001640:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001650:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001654:	4618      	mov	r0, r3
 8001656:	f003 ff4b 	bl	80054f0 <HAL_RCC_OscConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001660:	f000 f84e 	bl	8001700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001664:	230f      	movs	r3, #15
 8001666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166a:	2303      	movs	r3, #3
 800166c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001682:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001686:	2104      	movs	r1, #4
 8001688:	4618      	mov	r0, r3
 800168a:	f004 fb19 	bl	8005cc0 <HAL_RCC_ClockConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001694:	f000 f834 	bl	8001700 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <SystemClock_Config+0x134>)
 800169a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800169c:	2300      	movs	r3, #0
 800169e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80016a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016a4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80016ae:	2302      	movs	r3, #2
 80016b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016b2:	2301      	movs	r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80016b6:	2308      	movs	r3, #8
 80016b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016ba:	2307      	movs	r3, #7
 80016bc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016be:	2302      	movs	r3, #2
 80016c0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80016c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ca:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 fcfc 	bl	80060cc <HAL_RCCEx_PeriphCLKConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x116>
  {
    Error_Handler();
 80016da:	f000 f811 	bl	8001700 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016e2:	f003 f9cf 	bl	8004a84 <HAL_PWREx_ControlVoltageScaling>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80016ec:	f000 f808 	bl	8001700 <Error_Handler>
  }
}
 80016f0:	bf00      	nop
 80016f2:	37e0      	adds	r7, #224	; 0xe0
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40021000 	.word	0x40021000
 80016fc:	00024002 	.word	0x00024002

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("ERROR\r\n");
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <Error_Handler+0x10>)
 8001706:	f008 fd69 	bl	800a1dc <puts>
  /* USER CODE END Error_Handler_Debug */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	0800ebe8 	.word	0x0800ebe8

08001714 <storeData>:

//Variable with current address
uint32_t curAddr = 0;

//Write date and data to memory
HAL_StatusTypeDef storeData(struct measurement mes) {
 8001714:	b084      	sub	sp, #16
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	f107 0c18 	add.w	ip, r7, #24
 8001720:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	if ((curAddr + 22) >= FLASH_SIZE_HERE)
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <storeData+0x9c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3316      	adds	r3, #22
 800172a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800172e:	d301      	bcc.n	8001734 <storeData+0x20>
		return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e036      	b.n	80017a2 <storeData+0x8e>
	uint32_t tmp2;
	tmp2 = mes.time;
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	60bb      	str	r3, [r7, #8]
	if (CSP_QSPI_Write(&tmp2, curAddr, 4) != HAL_OK)
 8001738:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <storeData+0x9c>)
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	2204      	movs	r2, #4
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fc14 	bl	8001f70 <CSP_QSPI_Write>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <storeData+0x3e>
		return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e027      	b.n	80017a2 <storeData+0x8e>

	curAddr = curAddr + 4;
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <storeData+0x9c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3304      	adds	r3, #4
 8001758:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <storeData+0x9c>)
 800175a:	6013      	str	r3, [r2, #0]
	uint16_t tmp = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 9; i++) {
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	e019      	b.n	800179a <storeData+0x86>
		tmp = mes.meas[i];
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	3318      	adds	r3, #24
 800176c:	443b      	add	r3, r7
 800176e:	889b      	ldrh	r3, [r3, #4]
 8001770:	80fb      	strh	r3, [r7, #6]
		if (CSP_QSPI_Write(&tmp, curAddr, 2) != HAL_OK)
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <storeData+0x9c>)
 8001774:	6819      	ldr	r1, [r3, #0]
 8001776:	1dbb      	adds	r3, r7, #6
 8001778:	2202      	movs	r2, #2
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fbf8 	bl	8001f70 <CSP_QSPI_Write>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <storeData+0x76>
			return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00b      	b.n	80017a2 <storeData+0x8e>
		curAddr = curAddr + 2;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <storeData+0x9c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3302      	adds	r3, #2
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <storeData+0x9c>)
 8001792:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 9; i++) {
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3301      	adds	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b08      	cmp	r3, #8
 800179e:	dde2      	ble.n	8001766 <storeData+0x52>
	}
	return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017ac:	b004      	add	sp, #16
 80017ae:	4770      	bx	lr
 80017b0:	200002fc 	.word	0x200002fc

080017b4 <sendData>:

uint16_t sendData() {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	; 0x30
 80017b8:	af00      	add	r7, sp, #0
	uint16_t dataNum = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint32_t tmpCurAddr = curAddr;
 80017be:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <sendData+0xc4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	623b      	str	r3, [r7, #32]
	uint16_t readData[11];
	uint32_t timestamp;

	if (curAddr < 18)
 80017c4:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <sendData+0xc4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b11      	cmp	r3, #17
 80017ca:	d801      	bhi.n	80017d0 <sendData+0x1c>
		return dataNum;
 80017cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017ce:	e04e      	b.n	800186e <sendData+0xba>

	for (int i = 0; i < (tmpCurAddr / 22); i++) \
 80017d0:	2300      	movs	r3, #0
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d4:	e039      	b.n	800184a <sendData+0x96>
	{
		if (CSP_QSPI_Read(&readData, dataNum * 22, 22) != HAL_OK)
 80017d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017d8:	2216      	movs	r2, #22
 80017da:	fb02 f303 	mul.w	r3, r2, r3
 80017de:	4619      	mov	r1, r3
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2216      	movs	r2, #22
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fc3d 	bl	8002064 <CSP_QSPI_Read>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <sendData+0x40>
			Error_Handler();
 80017f0:	f7ff ff86 	bl	8001700 <Error_Handler>
		dataNum++;
 80017f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017f6:	3301      	adds	r3, #1
 80017f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		curAddr -= 22;
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <sendData+0xc4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3b16      	subs	r3, #22
 8001800:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <sendData+0xc4>)
 8001802:	6013      	str	r3, [r2, #0]
		timestamp = (readData[1] << 16) | readData[0];
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	041b      	lsls	r3, r3, #16
 8001808:	88ba      	ldrh	r2, [r7, #4]
 800180a:	4313      	orrs	r3, r2
 800180c:	61fb      	str	r3, [r7, #28]
		printf("%d. %lu ", i, timestamp);
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001812:	481a      	ldr	r0, [pc, #104]	; (800187c <sendData+0xc8>)
 8001814:	f008 fc5c 	bl	800a0d0 <iprintf>

		for (int j = 2; j < 11; j++)
 8001818:	2302      	movs	r3, #2
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
 800181c:	e00c      	b.n	8001838 <sendData+0x84>
		{
			printf("%d ", readData[j]);
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	3330      	adds	r3, #48	; 0x30
 8001824:	443b      	add	r3, r7
 8001826:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800182a:	4619      	mov	r1, r3
 800182c:	4814      	ldr	r0, [pc, #80]	; (8001880 <sendData+0xcc>)
 800182e:	f008 fc4f 	bl	800a0d0 <iprintf>
		for (int j = 2; j < 11; j++)
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	3301      	adds	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	2b0a      	cmp	r3, #10
 800183c:	ddef      	ble.n	800181e <sendData+0x6a>
		}
		printf("\n\r");
 800183e:	4811      	ldr	r0, [pc, #68]	; (8001884 <sendData+0xd0>)
 8001840:	f008 fc46 	bl	800a0d0 <iprintf>
	for (int i = 0; i < (tmpCurAddr / 22); i++) \
 8001844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001846:	3301      	adds	r3, #1
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <sendData+0xd4>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	091a      	lsrs	r2, r3, #4
 8001854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001856:	429a      	cmp	r2, r3
 8001858:	d8bd      	bhi.n	80017d6 <sendData+0x22>
	}

	if(CSP_QSPI_EraseSector(0, tmpCurAddr) != HAL_OK)
 800185a:	6a39      	ldr	r1, [r7, #32]
 800185c:	2000      	movs	r0, #0
 800185e:	f000 fad9 	bl	8001e14 <CSP_QSPI_EraseSector>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <sendData+0xb8>
		Error_Handler();
 8001868:	f7ff ff4a 	bl	8001700 <Error_Handler>

	return dataNum;
 800186c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800186e:	4618      	mov	r0, r3
 8001870:	3730      	adds	r7, #48	; 0x30
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200002fc 	.word	0x200002fc
 800187c:	0800ebf0 	.word	0x0800ebf0
 8001880:	0800ebfc 	.word	0x0800ebfc
 8001884:	0800ec00 	.word	0x0800ec00
 8001888:	ba2e8ba3 	.word	0xba2e8ba3

0800188c <printCurrTime>:
#include "parser.h"

void printCurrTime()
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b092      	sub	sp, #72	; 0x48
 8001890:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  time_t timestamp;
  struct tm currTime;

  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001892:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001896:	2200      	movs	r2, #0
 8001898:	4619      	mov	r1, r3
 800189a:	481b      	ldr	r0, [pc, #108]	; (8001908 <printCurrTime+0x7c>)
 800189c:	f005 f9ea 	bl	8006c74 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80018a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4817      	ldr	r0, [pc, #92]	; (8001908 <printCurrTime+0x7c>)
 80018aa:	f005 fac6 	bl	8006e3a <HAL_RTC_GetDate>

  currTime.tm_year = currentDate.Year + 100;
 80018ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018b2:	3364      	adds	r3, #100	; 0x64
 80018b4:	61bb      	str	r3, [r7, #24]
  currTime.tm_mday = currentDate.Date;
 80018b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80018ba:	613b      	str	r3, [r7, #16]
  currTime.tm_mon  = currentDate.Month - 1;
 80018bc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80018c0:	3b01      	subs	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]

  currTime.tm_hour = currentTime.Hours;
 80018c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018c8:	60fb      	str	r3, [r7, #12]
  currTime.tm_min  = currentTime.Minutes;
 80018ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80018ce:	60bb      	str	r3, [r7, #8]
  currTime.tm_sec  = currentTime.Seconds;
 80018d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80018d4:	607b      	str	r3, [r7, #4]

  timestamp = mktime(&currTime);
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	4618      	mov	r0, r3
 80018da:	f007 fb05 	bl	8008ee8 <mktime>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

  printf("%s as timestamp %lu\r\n",ctime(&timestamp), (uint32_t)timestamp);
 80018e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ea:	4618      	mov	r0, r3
 80018ec:	f007 f8c8 	bl	8008a80 <ctime>
 80018f0:	4601      	mov	r1, r0
 80018f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018f6:	4613      	mov	r3, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <printCurrTime+0x80>)
 80018fc:	f008 fbe8 	bl	800a0d0 <iprintf>
}
 8001900:	bf00      	nop
 8001902:	3748      	adds	r7, #72	; 0x48
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000344 	.word	0x20000344
 800190c:	0800ec04 	.word	0x0800ec04

08001910 <parseCommand>:

uint8_t parseCommand(uint8_t *buf)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	uint8_t val;

	switch(buf[0])
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	3b44      	subs	r3, #68	; 0x44
 800191e:	2b10      	cmp	r3, #16
 8001920:	d85a      	bhi.n	80019d8 <parseCommand+0xc8>
 8001922:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <parseCommand+0x18>)
 8001924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001928:	08001973 	.word	0x08001973
 800192c:	080019d9 	.word	0x080019d9
 8001930:	080019d9 	.word	0x080019d9
 8001934:	080019d9 	.word	0x080019d9
 8001938:	080019d9 	.word	0x080019d9
 800193c:	0800199b 	.word	0x0800199b
 8001940:	080019d9 	.word	0x080019d9
 8001944:	080019d9 	.word	0x080019d9
 8001948:	080019d9 	.word	0x080019d9
 800194c:	080019d9 	.word	0x080019d9
 8001950:	080019d9 	.word	0x080019d9
 8001954:	080019d9 	.word	0x080019d9
 8001958:	0800197f 	.word	0x0800197f
 800195c:	080019d9 	.word	0x080019d9
 8001960:	080019d9 	.word	0x080019d9
 8001964:	0800198d 	.word	0x0800198d
 8001968:	0800196d 	.word	0x0800196d
	{
	case 'T': // print current time and timestamp
		printCurrTime();
 800196c:	f7ff ff8e 	bl	800188c <printCurrTime>
		break;
 8001970:	e034      	b.n	80019dc <parseCommand+0xcc>
	case 'D': // print all saved measurments and clear memory
		printf("New measurments:\r\n");
 8001972:	481d      	ldr	r0, [pc, #116]	; (80019e8 <parseCommand+0xd8>)
 8001974:	f008 fc32 	bl	800a1dc <puts>
		sendData();
 8001978:	f7ff ff1c 	bl	80017b4 <sendData>
		break;
 800197c:	e02e      	b.n	80019dc <parseCommand+0xcc>
	case 'P': // stop making new measurements
		working_mode = 0;
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <parseCommand+0xdc>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
		printf("Woorking mode: Stop\r\n");
 8001984:	481a      	ldr	r0, [pc, #104]	; (80019f0 <parseCommand+0xe0>)
 8001986:	f008 fc29 	bl	800a1dc <puts>
		break;
 800198a:	e027      	b.n	80019dc <parseCommand+0xcc>
	case 'S': // start making new measurements
		working_mode = 1;
 800198c:	4b17      	ldr	r3, [pc, #92]	; (80019ec <parseCommand+0xdc>)
 800198e:	2201      	movs	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
		printf("Woorking mode: Start\r\n");
 8001992:	4818      	ldr	r0, [pc, #96]	; (80019f4 <parseCommand+0xe4>)
 8001994:	f008 fc22 	bl	800a1dc <puts>
		break;
 8001998:	e020      	b.n	80019dc <parseCommand+0xcc>
	case 'I': // change interval between measurements
		val = (buf[1] - '0') * 10 + (buf[2] - '0');
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3301      	adds	r3, #1
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3302      	adds	r3, #2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4413      	add	r3, r2
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	3b10      	subs	r3, #16
 80019b6:	73fb      	strb	r3, [r7, #15]
		if(val > 0 && val < 100)
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <parseCommand+0xba>
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	2b63      	cmp	r3, #99	; 0x63
 80019c2:	d802      	bhi.n	80019ca <parseCommand+0xba>
			meas_interval = val;
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <parseCommand+0xe8>)
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	7013      	strb	r3, [r2, #0]
		printf("Current interval: %d\r\n", meas_interval);
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <parseCommand+0xe8>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	4619      	mov	r1, r3
 80019d0:	480a      	ldr	r0, [pc, #40]	; (80019fc <parseCommand+0xec>)
 80019d2:	f008 fb7d 	bl	800a0d0 <iprintf>
		break;
 80019d6:	e001      	b.n	80019dc <parseCommand+0xcc>
	default:
		return 1;
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <parseCommand+0xce>
	}

	return 0;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	0800ec1c 	.word	0x0800ec1c
 80019ec:	20000001 	.word	0x20000001
 80019f0:	0800ec30 	.word	0x0800ec30
 80019f4:	0800ec48 	.word	0x0800ec48
 80019f8:	20000002 	.word	0x20000002
 80019fc:	0800ec60 	.word	0x0800ec60

08001a00 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_QUADSPI_Init+0x44>)
 8001a06:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <MX_QUADSPI_Init+0x48>)
 8001a08:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_QUADSPI_Init+0x44>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_QUADSPI_Init+0x44>)
 8001a12:	2204      	movs	r2, #4
 8001a14:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_QUADSPI_Init+0x44>)
 8001a18:	2210      	movs	r2, #16
 8001a1a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_QUADSPI_Init+0x44>)
 8001a1e:	2217      	movs	r2, #23
 8001a20:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_QUADSPI_Init+0x44>)
 8001a24:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001a28:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_QUADSPI_Init+0x44>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <MX_QUADSPI_Init+0x44>)
 8001a32:	f003 f87d 	bl	8004b30 <HAL_QSPI_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_QUADSPI_Init+0x40>
  {
    Error_Handler();
 8001a3c:	f7ff fe60 	bl	8001700 <Error_Handler>
  }

}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000300 	.word	0x20000300
 8001a48:	a0001000 	.word	0xa0001000

08001a4c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <HAL_QSPI_MspInit+0x7c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d128      	bne.n	8001ac0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_QSPI_MspInit+0x80>)
 8001a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a72:	4a16      	ldr	r2, [pc, #88]	; (8001acc <HAL_QSPI_MspInit+0x80>)
 8001a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a78:	6513      	str	r3, [r2, #80]	; 0x50
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <HAL_QSPI_MspInit+0x80>)
 8001a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_QSPI_MspInit+0x80>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	4a10      	ldr	r2, [pc, #64]	; (8001acc <HAL_QSPI_MspInit+0x80>)
 8001a8c:	f043 0310 	orr.w	r3, r3, #16
 8001a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <HAL_QSPI_MspInit+0x80>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001a9e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001aa2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <HAL_QSPI_MspInit+0x84>)
 8001abc:	f002 fd0e 	bl	80044dc <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3728      	adds	r7, #40	; 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	a0001000 	.word	0xa0001000
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	48001000 	.word	0x48001000

08001ad4 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_QSPI_MspDeInit+0x30>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10a      	bne.n	8001afc <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_QSPI_MspDeInit+0x34>)
 8001ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aea:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <HAL_QSPI_MspDeInit+0x34>)
 8001aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001af0:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001af2:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <HAL_QSPI_MspDeInit+0x38>)
 8001af8:	f002 fe9a 	bl	8004830 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	a0001000 	.word	0xa0001000
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	48001000 	.word	0x48001000

08001b10 <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */

uint8_t CSP_QUADSPI_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <CSP_QUADSPI_Init+0x64>)
 8001b16:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <CSP_QUADSPI_Init+0x68>)
 8001b18:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8001b1a:	4816      	ldr	r0, [pc, #88]	; (8001b74 <CSP_QUADSPI_Init+0x64>)
 8001b1c:	f003 f87e 	bl	8004c1c <HAL_QSPI_DeInit>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <CSP_QUADSPI_Init+0x1a>
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e021      	b.n	8001b6e <CSP_QUADSPI_Init+0x5e>
    }

    MX_QUADSPI_Init();
 8001b2a:	f7ff ff69 	bl	8001a00 <MX_QUADSPI_Init>

    if (QSPI_ResetChip() != HAL_OK) {
 8001b2e:	f000 f9c1 	bl	8001eb4 <QSPI_ResetChip>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <CSP_QUADSPI_Init+0x2c>
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e018      	b.n	8001b6e <CSP_QUADSPI_Init+0x5e>
    }

    HAL_Delay(1);
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f000 ff37 	bl	80029b0 <HAL_Delay>

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8001b42:	f000 f857 	bl	8001bf4 <QSPI_AutoPollingMemReady>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <CSP_QUADSPI_Init+0x40>
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e00e      	b.n	8001b6e <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
 8001b50:	f000 f888 	bl	8001c64 <QSPI_WriteEnable>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <CSP_QUADSPI_Init+0x4e>

        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e007      	b.n	8001b6e <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_Configuration() != HAL_OK) {
 8001b5e:	f000 f8cb 	bl	8001cf8 <QSPI_Configuration>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <CSP_QUADSPI_Init+0x5c>
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <CSP_QUADSPI_Init+0x5e>
    }

    return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000300 	.word	0x20000300
 8001b78:	a0001000 	.word	0xa0001000

08001b7c <CSP_QSPI_Erase_Chip>:


uint8_t CSP_QSPI_Erase_Chip(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08e      	sub	sp, #56	; 0x38
 8001b80:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;


    if (QSPI_WriteEnable() != HAL_OK) {
 8001b82:	f000 f86f 	bl	8001c64 <QSPI_WriteEnable>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <CSP_QSPI_Erase_Chip+0x14>
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e02b      	b.n	8001be8 <CSP_QSPI_Erase_Chip+0x6c>
    }


    /* Erasing Sequence --------------------------------- */
    sCommand.Instruction = BULK_ERASE_CMD;
 8001b90:	23c7      	movs	r3, #199	; 0xc7
 8001b92:	603b      	str	r3, [r7, #0]
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b98:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9e:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001bac:	2300      	movs	r3, #0
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
    sCommand.Address = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	607b      	str	r3, [r7, #4]
    sCommand.DataMode = QSPI_DATA_NONE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DummyCycles = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]


    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_MAX_DELAY)
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <CSP_QSPI_Erase_Chip+0x74>)
 8001bca:	f003 f84b 	bl	8004c64 <HAL_QSPI_Command>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <CSP_QSPI_Erase_Chip+0x5c>
        != HAL_OK) {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e007      	b.n	8001be8 <CSP_QSPI_Erase_Chip+0x6c>
    }

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8001bd8:	f000 f80c 	bl	8001bf4 <QSPI_AutoPollingMemReady>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <CSP_QSPI_Erase_Chip+0x6a>
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <CSP_QSPI_Erase_Chip+0x6c>
    }

    return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3738      	adds	r7, #56	; 0x38
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000300 	.word	0x20000300

08001bf4 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b094      	sub	sp, #80	; 0x50
 8001bf8:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8001c00:	2305      	movs	r3, #5
 8001c02:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c10:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match = 0x00;
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
    sConfig.Mask = N25Q128A_SR_WIP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8001c32:	2310      	movs	r3, #16
 8001c34:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c3a:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_MAX_DELAY) != HAL_OK)
 8001c3c:	463a      	mov	r2, r7
 8001c3e:	f107 0118 	add.w	r1, r7, #24
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <QSPI_AutoPollingMemReady+0x6c>)
 8001c48:	f003 f9a3 	bl	8004f92 <HAL_QSPI_AutoPolling>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <QSPI_AutoPollingMemReady+0x62>
    {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <QSPI_AutoPollingMemReady+0x64>
    }

    return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3750      	adds	r7, #80	; 0x50
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000300 	.word	0x20000300

08001c64 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b094      	sub	sp, #80	; 0x50
 8001c68:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 8001c70:	2306      	movs	r3, #6
 8001c72:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001c90:	f107 0318 	add.w	r3, r7, #24
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4816      	ldr	r0, [pc, #88]	; (8001cf4 <QSPI_WriteEnable+0x90>)
 8001c9c:	f002 ffe2 	bl	8004c64 <HAL_QSPI_Command>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e01f      	b.n	8001cea <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
 8001caa:	2302      	movs	r3, #2
 8001cac:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8001cba:	2310      	movs	r3, #16
 8001cbc:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001cbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cc2:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 8001cc4:	2305      	movs	r3, #5
 8001cc6:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001cce:	463a      	mov	r2, r7
 8001cd0:	f107 0118 	add.w	r1, r7, #24
 8001cd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cd8:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <QSPI_WriteEnable+0x90>)
 8001cda:	f003 f95a 	bl	8004f92 <HAL_QSPI_AutoPolling>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3750      	adds	r7, #80	; 0x50
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000300 	.word	0x20000300

08001cf8 <QSPI_Configuration>:


/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b092      	sub	sp, #72	; 0x48
 8001cfc:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    uint8_t reg;

    /*read configuration register*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d02:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction = READ_VOL_CFG_REG_CMD;
 8001d04:	2385      	movs	r3, #133	; 0x85
 8001d06:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001d22:	2300      	movs	r3, #0
 8001d24:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.NbData = 1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d30:	4619      	mov	r1, r3
 8001d32:	4837      	ldr	r0, [pc, #220]	; (8001e10 <QSPI_Configuration+0x118>)
 8001d34:	f002 ff96 	bl	8004c64 <HAL_QSPI_Command>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <QSPI_Configuration+0x4a>
        != HAL_OK) {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e061      	b.n	8001e06 <QSPI_Configuration+0x10e>
    }


    if (HAL_QSPI_Receive(&hqspi, &reg,
 8001d42:	1cfb      	adds	r3, r7, #3
 8001d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4831      	ldr	r0, [pc, #196]	; (8001e10 <QSPI_Configuration+0x118>)
 8001d4c:	f003 f87f 	bl	8004e4e <HAL_QSPI_Receive>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <QSPI_Configuration+0x62>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e055      	b.n	8001e06 <QSPI_Configuration+0x10e>
    }



    if (QSPI_WriteEnable() != HAL_OK) {
 8001d5a:	f7ff ff83 	bl	8001c64 <QSPI_WriteEnable>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <QSPI_Configuration+0x70>

        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e04e      	b.n	8001e06 <QSPI_Configuration+0x10e>
    }


    /*set dummy cycles*/
    MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	b25a      	sxtb	r2, r3
 8001d72:	23f0      	movs	r3, #240	; 0xf0
 8001d74:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d80:	647b      	str	r3, [r7, #68]	; 0x44
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <QSPI_Configuration+0x94>
  {
    return 32U;
 8001d88:	2320      	movs	r3, #32
 8001d8a:	e003      	b.n	8001d94 <QSPI_Configuration+0x9c>
  }
  return __builtin_clz(value);
 8001d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	4619      	mov	r1, r3
 8001d96:	230a      	movs	r3, #10
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	b25b      	sxtb	r3, r3
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	b25b      	sxtb	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	70fb      	strb	r3, [r7, #3]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001da8:	61fb      	str	r3, [r7, #28]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001db2:	2300      	movs	r3, #0
 8001db4:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001db6:	2300      	movs	r3, #0
 8001db8:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8001dba:	2381      	movs	r3, #129	; 0x81
 8001dbc:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001dc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
    sCommand.NbData = 1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480d      	ldr	r0, [pc, #52]	; (8001e10 <QSPI_Configuration+0x118>)
 8001dda:	f002 ff43 	bl	8004c64 <HAL_QSPI_Command>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <QSPI_Configuration+0xf0>
        != HAL_OK) {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e00e      	b.n	8001e06 <QSPI_Configuration+0x10e>
    }

    if (HAL_QSPI_Transmit(&hqspi, &reg,
 8001de8:	1cfb      	adds	r3, r7, #3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4619      	mov	r1, r3
 8001df0:	4807      	ldr	r0, [pc, #28]	; (8001e10 <QSPI_Configuration+0x118>)
 8001df2:	f002 ff95 	bl	8004d20 <HAL_QSPI_Transmit>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <QSPI_Configuration+0x10c>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        Error_Handler();
 8001dfc:	f7ff fc80 	bl	8001700 <Error_Handler>
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <QSPI_Configuration+0x10e>
    }
    return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3748      	adds	r7, #72	; 0x48
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000300 	.word	0x20000300

08001e14 <CSP_QSPI_EraseSector>:

uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress, uint32_t EraseEndAddress)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b090      	sub	sp, #64	; 0x40
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]

    QSPI_CommandTypeDef sCommand;

    EraseStartAddress = EraseStartAddress
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	041b      	lsls	r3, r3, #16
 8001e24:	607b      	str	r3, [r7, #4]
                        - EraseStartAddress % N25Q128A_SECTOR_SIZE;

    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2a:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e30:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.Instruction = SECTOR_ERASE_CMD;
 8001e42:	23d8      	movs	r3, #216	; 0xd8
 8001e44:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8001e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24

    sCommand.DataMode = QSPI_DATA_NONE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]

    while (EraseEndAddress >= EraseStartAddress)
 8001e54:	e022      	b.n	8001e9c <CSP_QSPI_EraseSector+0x88>
    {
        sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e5c:	60fb      	str	r3, [r7, #12]

        if (QSPI_WriteEnable() != HAL_OK) {
 8001e5e:	f7ff ff01 	bl	8001c64 <QSPI_WriteEnable>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <CSP_QSPI_EraseSector+0x58>
            return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e01c      	b.n	8001ea6 <CSP_QSPI_EraseSector+0x92>
        }

        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e74:	4619      	mov	r1, r3
 8001e76:	480e      	ldr	r0, [pc, #56]	; (8001eb0 <CSP_QSPI_EraseSector+0x9c>)
 8001e78:	f002 fef4 	bl	8004c64 <HAL_QSPI_Command>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <CSP_QSPI_EraseSector+0x72>
            != HAL_OK) {
            return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00f      	b.n	8001ea6 <CSP_QSPI_EraseSector+0x92>
        }
        EraseStartAddress += N25Q128A_SECTOR_SIZE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001e8c:	607b      	str	r3, [r7, #4]

        if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8001e8e:	f7ff feb1 	bl	8001bf4 <QSPI_AutoPollingMemReady>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <CSP_QSPI_EraseSector+0x88>
            return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e004      	b.n	8001ea6 <CSP_QSPI_EraseSector+0x92>
    while (EraseEndAddress >= EraseStartAddress)
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d2d8      	bcs.n	8001e56 <CSP_QSPI_EraseSector+0x42>
        }
    }

    return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3740      	adds	r7, #64	; 0x40
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000300 	.word	0x20000300

08001eb4 <QSPI_ResetChip>:
    }
    return HAL_OK;
}

uint8_t QSPI_ResetChip()
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b090      	sub	sp, #64	; 0x40
 8001eb8:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec2:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec8:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 8001eda:	2366      	movs	r3, #102	; 0x66
 8001edc:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	481d      	ldr	r0, [pc, #116]	; (8001f6c <QSPI_ResetChip+0xb8>)
 8001ef8:	f002 feb4 	bl	8004c64 <HAL_QSPI_Command>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e02e      	b.n	8001f64 <QSPI_ResetChip+0xb0>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 8001f06:	2300      	movs	r3, #0
 8001f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f0a:	e003      	b.n	8001f14 <QSPI_ResetChip+0x60>
        __NOP();
 8001f0c:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 8001f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f10:	3301      	adds	r3, #1
 8001f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f16:	2b2e      	cmp	r3, #46	; 0x2e
 8001f18:	d9f8      	bls.n	8001f0c <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f1e:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f24:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001f32:	2300      	movs	r3, #0
 8001f34:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_MEMORY_CMD;
 8001f36:	2399      	movs	r3, #153	; 0x99
 8001f38:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4619      	mov	r1, r3
 8001f52:	4806      	ldr	r0, [pc, #24]	; (8001f6c <QSPI_ResetChip+0xb8>)
 8001f54:	f002 fe86 	bl	8004c64 <HAL_QSPI_Command>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <QSPI_ResetChip+0xb0>
    }
    return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3740      	adds	r7, #64	; 0x40
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000300 	.word	0x20000300

08001f70 <CSP_QSPI_Write>:
  return HAL_OK;
}


uint8_t CSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b096      	sub	sp, #88	; 0x58
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001f84:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8001f86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d901      	bls.n	8001f92 <CSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8001fa4:	2312      	movs	r3, #18
 8001fa6:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001fa8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001fae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fb2:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001fb8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8001fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fd0:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 8001fd6:	f7ff fe45 	bl	8001c64 <QSPI_WriteEnable>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <CSP_QSPI_Write+0x74>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e038      	b.n	8002056 <CSP_QSPI_Write+0xe6>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fec:	4619      	mov	r1, r3
 8001fee:	481c      	ldr	r0, [pc, #112]	; (8002060 <CSP_QSPI_Write+0xf0>)
 8001ff0:	f002 fe38 	bl	8004c64 <HAL_QSPI_Command>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <CSP_QSPI_Write+0x8e>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e02b      	b.n	8002056 <CSP_QSPI_Write+0xe6>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002002:	68f9      	ldr	r1, [r7, #12]
 8002004:	4816      	ldr	r0, [pc, #88]	; (8002060 <CSP_QSPI_Write+0xf0>)
 8002006:	f002 fe8b 	bl	8004d20 <HAL_QSPI_Transmit>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <CSP_QSPI_Write+0xa4>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e020      	b.n	8002056 <CSP_QSPI_Write+0xe6>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady() != HAL_OK)
 8002014:	f7ff fdee 	bl	8001bf4 <QSPI_AutoPollingMemReady>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <CSP_QSPI_Write+0xb2>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e019      	b.n	8002056 <CSP_QSPI_Write+0xe6>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8002022:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002026:	4413      	add	r3, r2
 8002028:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202e:	4413      	add	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8002032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002034:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002038:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800203a:	429a      	cmp	r2, r3
 800203c:	d203      	bcs.n	8002046 <CSP_QSPI_Write+0xd6>
 800203e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	e001      	b.n	800204a <CSP_QSPI_Write+0xda>
 8002046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800204a:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 800204c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800204e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002050:	429a      	cmp	r2, r3
 8002052:	d3bc      	bcc.n	8001fce <CSP_QSPI_Write+0x5e>

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3758      	adds	r7, #88	; 0x58
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000300 	.word	0x20000300

08002064 <CSP_QSPI_Read>:


uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b092      	sub	sp, #72	; 0x48
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8002076:	23eb      	movs	r3, #235	; 0xeb
 8002078:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800207a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002084:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800208a:	2300      	movs	r3, #0
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800208e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8002094:	230a      	movs	r3, #10
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80020a0:	2300      	movs	r3, #0
 80020a2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80020a4:	2300      	movs	r3, #0
 80020a6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4619      	mov	r1, r3
 80020b2:	4816      	ldr	r0, [pc, #88]	; (800210c <CSP_QSPI_Read+0xa8>)
 80020b4:	f002 fdd6 	bl	8004c64 <HAL_QSPI_Command>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <CSP_QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e01f      	b.n	8002102 <CSP_QSPI_Read+0x9e>
  }

  /* Set S# timing for Read command */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <CSP_QSPI_Read+0xa8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <CSP_QSPI_Read+0xa8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d4:	605a      	str	r2, [r3, #4]

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	68f9      	ldr	r1, [r7, #12]
 80020dc:	480b      	ldr	r0, [pc, #44]	; (800210c <CSP_QSPI_Read+0xa8>)
 80020de:	f002 feb6 	bl	8004e4e <HAL_QSPI_Receive>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <CSP_QSPI_Read+0x88>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e00a      	b.n	8002102 <CSP_QSPI_Read+0x9e>
  }

  /* Restore S# timing for nonRead commands */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <CSP_QSPI_Read+0xa8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <CSP_QSPI_Read+0xa8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 80020fe:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3748      	adds	r7, #72	; 0x48
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000300 	.word	0x20000300

08002110 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b092      	sub	sp, #72	; 0x48
 8002114:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8002116:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
 8002124:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002126:	2300      	movs	r3, #0
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	222c      	movs	r2, #44	; 0x2c
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f006 fdf9 	bl	8008d28 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002136:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <MX_RTC_Init+0x118>)
 8002138:	4a3c      	ldr	r2, [pc, #240]	; (800222c <MX_RTC_Init+0x11c>)
 800213a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800213c:	4b3a      	ldr	r3, [pc, #232]	; (8002228 <MX_RTC_Init+0x118>)
 800213e:	2200      	movs	r2, #0
 8002140:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002142:	4b39      	ldr	r3, [pc, #228]	; (8002228 <MX_RTC_Init+0x118>)
 8002144:	227f      	movs	r2, #127	; 0x7f
 8002146:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002148:	4b37      	ldr	r3, [pc, #220]	; (8002228 <MX_RTC_Init+0x118>)
 800214a:	22ff      	movs	r2, #255	; 0xff
 800214c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800214e:	4b36      	ldr	r3, [pc, #216]	; (8002228 <MX_RTC_Init+0x118>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002154:	4b34      	ldr	r3, [pc, #208]	; (8002228 <MX_RTC_Init+0x118>)
 8002156:	2200      	movs	r2, #0
 8002158:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800215a:	4b33      	ldr	r3, [pc, #204]	; (8002228 <MX_RTC_Init+0x118>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002160:	4b31      	ldr	r3, [pc, #196]	; (8002228 <MX_RTC_Init+0x118>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002166:	4830      	ldr	r0, [pc, #192]	; (8002228 <MX_RTC_Init+0x118>)
 8002168:	f004 fc6c 	bl	8006a44 <HAL_RTC_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002172:	f7ff fac5 	bl	8001700 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8002176:	230c      	movs	r3, #12
 8002178:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002188:	2300      	movs	r3, #0
 800218a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002190:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002194:	2200      	movs	r2, #0
 8002196:	4619      	mov	r1, r3
 8002198:	4823      	ldr	r0, [pc, #140]	; (8002228 <MX_RTC_Init+0x118>)
 800219a:	f004 fcce 	bl	8006b3a <HAL_RTC_SetTime>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80021a4:	f7ff faac 	bl	8001700 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80021a8:	2301      	movs	r3, #1
 80021aa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_APRIL;
 80021ae:	2304      	movs	r3, #4
 80021b0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 25;
 80021b4:	2319      	movs	r3, #25
 80021b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 22;
 80021ba:	2316      	movs	r3, #22
 80021bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80021c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021c4:	2200      	movs	r2, #0
 80021c6:	4619      	mov	r1, r3
 80021c8:	4817      	ldr	r0, [pc, #92]	; (8002228 <MX_RTC_Init+0x118>)
 80021ca:	f004 fdaf 	bl	8006d2c <HAL_RTC_SetDate>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80021d4:	f7ff fa94 	bl	8001700 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 80021f0:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 80021f4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 80021fe:	2301      	movs	r3, #1
 8002200:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8002204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	2200      	movs	r2, #0
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_RTC_Init+0x118>)
 8002212:	f004 fe5f 	bl	8006ed4 <HAL_RTC_SetAlarm_IT>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 800221c:	f7ff fa70 	bl	8001700 <Error_Handler>
  }

}
 8002220:	bf00      	nop
 8002222:	3748      	adds	r7, #72	; 0x48
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000344 	.word	0x20000344
 800222c:	40002800 	.word	0x40002800

08002230 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0b      	ldr	r2, [pc, #44]	; (800226c <HAL_RTC_MspInit+0x3c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d10f      	bne.n	8002262 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RTC_MspInit+0x40>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	4a09      	ldr	r2, [pc, #36]	; (8002270 <HAL_RTC_MspInit+0x40>)
 800224a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800224e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	2029      	movs	r0, #41	; 0x29
 8002258:	f001 fe93 	bl	8003f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800225c:	2029      	movs	r0, #41	; 0x29
 800225e:	f001 feac 	bl	8003fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40002800 	.word	0x40002800
 8002270:	40021000 	.word	0x40021000

08002274 <setDate>:
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef setDate(uint8_t day, uint8_t month, uint8_t year, uint8_t weekDay) {
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	4604      	mov	r4, r0
 800227c:	4608      	mov	r0, r1
 800227e:	4611      	mov	r1, r2
 8002280:	461a      	mov	r2, r3
 8002282:	4623      	mov	r3, r4
 8002284:	71fb      	strb	r3, [r7, #7]
 8002286:	4603      	mov	r3, r0
 8002288:	71bb      	strb	r3, [r7, #6]
 800228a:	460b      	mov	r3, r1
 800228c:	717b      	strb	r3, [r7, #5]
 800228e:	4613      	mov	r3, r2
 8002290:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef Date;
	Date.Date = day;
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	73bb      	strb	r3, [r7, #14]
	Date.Month = month;
 8002296:	79bb      	ldrb	r3, [r7, #6]
 8002298:	737b      	strb	r3, [r7, #13]
	Date.WeekDay = weekDay;
 800229a:	793b      	ldrb	r3, [r7, #4]
 800229c:	733b      	strb	r3, [r7, #12]
	Date.Year = year;
 800229e:	797b      	ldrb	r3, [r7, #5]
 80022a0:	73fb      	strb	r3, [r7, #15]

	return HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80022a2:	f107 030c 	add.w	r3, r7, #12
 80022a6:	2200      	movs	r2, #0
 80022a8:	4619      	mov	r1, r3
 80022aa:	4804      	ldr	r0, [pc, #16]	; (80022bc <setDate+0x48>)
 80022ac:	f004 fd3e 	bl	8006d2c <HAL_RTC_SetDate>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000344 	.word	0x20000344

080022c0 <setTime>:
HAL_StatusTypeDef setTime(uint8_t sec, uint8_t min, uint8_t hour) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
 80022ca:	460b      	mov	r3, r1
 80022cc:	71bb      	strb	r3, [r7, #6]
 80022ce:	4613      	mov	r3, r2
 80022d0:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef Time;
	Time.Seconds = sec;
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	73bb      	strb	r3, [r7, #14]
	Time.Minutes = min;
 80022d6:	79bb      	ldrb	r3, [r7, #6]
 80022d8:	737b      	strb	r3, [r7, #13]
	Time.Hours = hour;
 80022da:	797b      	ldrb	r3, [r7, #5]
 80022dc:	733b      	strb	r3, [r7, #12]
	Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
	Time.StoreOperation = RTC_STOREOPERATION_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]

	return HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80022e6:	f107 030c 	add.w	r3, r7, #12
 80022ea:	2200      	movs	r2, #0
 80022ec:	4619      	mov	r1, r3
 80022ee:	4804      	ldr	r0, [pc, #16]	; (8002300 <setTime+0x40>)
 80022f0:	f004 fc23 	bl	8006b3a <HAL_RTC_SetTime>
 80022f4:	4603      	mov	r3, r0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000344 	.word	0x20000344

08002304 <getCurrTimestamp>:

uint32_t getCurrTimestamp()
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b092      	sub	sp, #72	; 0x48
 8002308:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef currentTime;
	  RTC_DateTypeDef currentDate;
	  time_t timestamp;
	  struct tm currTime;

	  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800230a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800230e:	2200      	movs	r2, #0
 8002310:	4619      	mov	r1, r3
 8002312:	4814      	ldr	r0, [pc, #80]	; (8002364 <getCurrTimestamp+0x60>)
 8002314:	f004 fcae 	bl	8006c74 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8002318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800231c:	2200      	movs	r2, #0
 800231e:	4619      	mov	r1, r3
 8002320:	4810      	ldr	r0, [pc, #64]	; (8002364 <getCurrTimestamp+0x60>)
 8002322:	f004 fd8a 	bl	8006e3a <HAL_RTC_GetDate>

	  currTime.tm_year = currentDate.Year + 100;
 8002326:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800232a:	3364      	adds	r3, #100	; 0x64
 800232c:	61bb      	str	r3, [r7, #24]
	  currTime.tm_mday = currentDate.Date;
 800232e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002332:	613b      	str	r3, [r7, #16]
	  currTime.tm_mon  = currentDate.Month - 1;
 8002334:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002338:	3b01      	subs	r3, #1
 800233a:	617b      	str	r3, [r7, #20]

	  currTime.tm_hour = currentTime.Hours;
 800233c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002340:	60fb      	str	r3, [r7, #12]
	  currTime.tm_min  = currentTime.Minutes;
 8002342:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002346:	60bb      	str	r3, [r7, #8]
	  currTime.tm_sec  = currentTime.Seconds;
 8002348:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800234c:	607b      	str	r3, [r7, #4]

	  timestamp = mktime(&currTime);
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	4618      	mov	r0, r3
 8002352:	f006 fdc9 	bl	8008ee8 <mktime>
 8002356:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

	  return (uint32_t)timestamp;
 800235a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800235c:	4618      	mov	r0, r3
 800235e:	3748      	adds	r7, #72	; 0x48
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000344 	.word	0x20000344

08002368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_MspInit+0x44>)
 8002370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002372:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_MspInit+0x44>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6613      	str	r3, [r2, #96]	; 0x60
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <HAL_MspInit+0x44>)
 800237c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	607b      	str	r3, [r7, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_MspInit+0x44>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	4a08      	ldr	r2, [pc, #32]	; (80023ac <HAL_MspInit+0x44>)
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002390:	6593      	str	r3, [r2, #88]	; 0x58
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_MspInit+0x44>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000

080023b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <HardFault_Handler+0x4>

080023c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <MemManage_Handler+0x4>

080023ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <BusFault_Handler+0x4>

080023d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <UsageFault_Handler+0x4>

080023d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002404:	f000 fab4 	bl	8002970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}

0800240c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <DMA1_Channel6_IRQHandler+0x10>)
 8002412:	f001 ff84 	bl	800431e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	2000043c 	.word	0x2000043c

08002420 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <USART2_IRQHandler+0x10>)
 8002426:	f005 fcbf 	bl	8007da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200003bc 	.word	0x200003bc

08002434 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <RTC_Alarm_IRQHandler+0x10>)
 800243a:	f004 fe87 	bl	800714c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000344 	.word	0x20000344

08002448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
	return 1;
 800244c:	2301      	movs	r3, #1
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_kill>:

int _kill(int pid, int sig)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002462:	f006 fb15 	bl	8008a90 <__errno>
 8002466:	4603      	mov	r3, r0
 8002468:	2216      	movs	r2, #22
 800246a:	601a      	str	r2, [r3, #0]
	return -1;
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <_exit>:

void _exit (int status)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ffe7 	bl	8002458 <_kill>
	while (1) {}		/* Make sure we hang here */
 800248a:	e7fe      	b.n	800248a <_exit+0x12>

0800248c <_close>:
	}
	return len;
}

int _close(int file)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	return -1;
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024b4:	605a      	str	r2, [r3, #4]
	return 0;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <_isatty>:

int _isatty(int file)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	return 1;
 80024cc:	2301      	movs	r3, #1
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024da:	b480      	push	{r7}
 80024dc:	b085      	sub	sp, #20
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
	return 0;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <_sbrk+0x5c>)
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <_sbrk+0x60>)
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <_sbrk+0x64>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <_sbrk+0x64>)
 8002512:	4a12      	ldr	r2, [pc, #72]	; (800255c <_sbrk+0x68>)
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	429a      	cmp	r2, r3
 8002522:	d207      	bcs.n	8002534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002524:	f006 fab4 	bl	8008a90 <__errno>
 8002528:	4603      	mov	r3, r0
 800252a:	220c      	movs	r2, #12
 800252c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	e009      	b.n	8002548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <_sbrk+0x64>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <_sbrk+0x64>)
 8002544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002546:	68fb      	ldr	r3, [r7, #12]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20018000 	.word	0x20018000
 8002554:	00000400 	.word	0x00000400
 8002558:	2000036c 	.word	0x2000036c
 800255c:	200004c0 	.word	0x200004c0

08002560 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <SystemInit+0x64>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <SystemInit+0x64>)
 800256c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <SystemInit+0x68>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <SystemInit+0x68>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <SystemInit+0x68>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <SystemInit+0x68>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <SystemInit+0x68>)
 800258c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002590:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002594:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <SystemInit+0x68>)
 8002598:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800259c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <SystemInit+0x68>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <SystemInit+0x68>)
 80025a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80025aa:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <SystemInit+0x68>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <SystemInit+0x64>)
 80025b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025b6:	609a      	str	r2, [r3, #8]
#endif
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed00 	.word	0xe000ed00
 80025c8:	40021000 	.word	0x40021000

080025cc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025d2:	f107 0310 	add.w	r3, r7, #16
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <MX_TIM2_Init+0x98>)
 80025ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <MX_TIM2_Init+0x98>)
 80025f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <MX_TIM2_Init+0x98>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8002600:	4b18      	ldr	r3, [pc, #96]	; (8002664 <MX_TIM2_Init+0x98>)
 8002602:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002606:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002608:	4b16      	ldr	r3, [pc, #88]	; (8002664 <MX_TIM2_Init+0x98>)
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <MX_TIM2_Init+0x98>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002614:	4813      	ldr	r0, [pc, #76]	; (8002664 <MX_TIM2_Init+0x98>)
 8002616:	f004 febb 	bl	8007390 <HAL_TIM_Base_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002620:	f7ff f86e 	bl	8001700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002628:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800262a:	f107 0310 	add.w	r3, r7, #16
 800262e:	4619      	mov	r1, r3
 8002630:	480c      	ldr	r0, [pc, #48]	; (8002664 <MX_TIM2_Init+0x98>)
 8002632:	f004 ff04 	bl	800743e <HAL_TIM_ConfigClockSource>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800263c:	f7ff f860 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002640:	2320      	movs	r3, #32
 8002642:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	4619      	mov	r1, r3
 800264c:	4805      	ldr	r0, [pc, #20]	; (8002664 <MX_TIM2_Init+0x98>)
 800264e:	f005 f8f1 	bl	8007834 <HAL_TIMEx_MasterConfigSynchronization>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002658:	f7ff f852 	bl	8001700 <Error_Handler>
  }

}
 800265c:	bf00      	nop
 800265e:	3720      	adds	r7, #32
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000370 	.word	0x20000370

08002668 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002678:	d10b      	bne.n	8002692 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_TIM_Base_MspInit+0x38>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	4a08      	ldr	r2, [pc, #32]	; (80026a0 <HAL_TIM_Base_MspInit+0x38>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_TIM_Base_MspInit+0x38>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000

080026a4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026aa:	4a15      	ldr	r2, [pc, #84]	; (8002700 <MX_USART2_UART_Init+0x5c>)
 80026ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026be:	2200      	movs	r2, #0
 80026c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026ca:	220c      	movs	r2, #12
 80026cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026da:	4b08      	ldr	r3, [pc, #32]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026dc:	2200      	movs	r2, #0
 80026de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026e6:	4805      	ldr	r0, [pc, #20]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026e8:	f005 f92c 	bl	8007944 <HAL_UART_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80026f2:	f7ff f805 	bl	8001700 <Error_Handler>
  }

}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200003bc 	.word	0x200003bc
 8002700:	40004400 	.word	0x40004400

08002704 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a2f      	ldr	r2, [pc, #188]	; (80027e0 <HAL_UART_MspInit+0xdc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d158      	bne.n	80027d8 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002726:	4b2f      	ldr	r3, [pc, #188]	; (80027e4 <HAL_UART_MspInit+0xe0>)
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	4a2e      	ldr	r2, [pc, #184]	; (80027e4 <HAL_UART_MspInit+0xe0>)
 800272c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002730:	6593      	str	r3, [r2, #88]	; 0x58
 8002732:	4b2c      	ldr	r3, [pc, #176]	; (80027e4 <HAL_UART_MspInit+0xe0>)
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800273e:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <HAL_UART_MspInit+0xe0>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002742:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <HAL_UART_MspInit+0xe0>)
 8002744:	f043 0308 	orr.w	r3, r3, #8
 8002748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274a:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <HAL_UART_MspInit+0xe0>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002756:	2360      	movs	r3, #96	; 0x60
 8002758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002766:	2307      	movs	r3, #7
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800276a:	f107 0314 	add.w	r3, r7, #20
 800276e:	4619      	mov	r1, r3
 8002770:	481d      	ldr	r0, [pc, #116]	; (80027e8 <HAL_UART_MspInit+0xe4>)
 8002772:	f001 feb3 	bl	80044dc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_UART_MspInit+0xe8>)
 8002778:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <HAL_UART_MspInit+0xec>)
 800277a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_UART_MspInit+0xe8>)
 800277e:	2202      	movs	r2, #2
 8002780:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_UART_MspInit+0xe8>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <HAL_UART_MspInit+0xe8>)
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <HAL_UART_MspInit+0xe8>)
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_UART_MspInit+0xe8>)
 8002796:	2200      	movs	r2, #0
 8002798:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <HAL_UART_MspInit+0xe8>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_UART_MspInit+0xe8>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_UART_MspInit+0xe8>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80027ac:	480f      	ldr	r0, [pc, #60]	; (80027ec <HAL_UART_MspInit+0xe8>)
 80027ae:	f001 fc1f 	bl	8003ff0 <HAL_DMA_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 80027b8:	f7fe ffa2 	bl	8001700 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <HAL_UART_MspInit+0xe8>)
 80027c0:	66da      	str	r2, [r3, #108]	; 0x6c
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <HAL_UART_MspInit+0xe8>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027c8:	2200      	movs	r2, #0
 80027ca:	2100      	movs	r1, #0
 80027cc:	2026      	movs	r0, #38	; 0x26
 80027ce:	f001 fbd8 	bl	8003f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027d2:	2026      	movs	r0, #38	; 0x26
 80027d4:	f001 fbf1 	bl	8003fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80027d8:	bf00      	nop
 80027da:	3728      	adds	r7, #40	; 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40004400 	.word	0x40004400
 80027e4:	40021000 	.word	0x40021000
 80027e8:	48000c00 	.word	0x48000c00
 80027ec:	2000043c 	.word	0x2000043c
 80027f0:	4002006c 	.word	0x4002006c

080027f4 <_read>:
  }
}

/* USER CODE BEGIN 1 */
int _read(int file, char *ptr, int len)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  /* read one byte only, according to _fstat returning character device type */
  hstatus = HAL_UART_Receive(&huart2, (uint8_t*) ptr, 1, HAL_MAX_DELAY);
 8002800:	f04f 33ff 	mov.w	r3, #4294967295
 8002804:	2201      	movs	r2, #1
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	4807      	ldr	r0, [pc, #28]	; (8002828 <_read+0x34>)
 800280a:	f005 f97c 	bl	8007b06 <HAL_UART_Receive>
 800280e:	4603      	mov	r3, r0
 8002810:	75fb      	strb	r3, [r7, #23]
  if (hstatus == HAL_OK)
 8002812:	7dfb      	ldrb	r3, [r7, #23]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <_read+0x28>
    return 1;
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <_read+0x2a>
  else
    return 0;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200003bc 	.word	0x200003bc

0800282c <_write>:

int _write(int file, char *ptr, int len)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  /* write full string */
  hstatus = HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	b29a      	uxth	r2, r3
 800283c:	f04f 33ff 	mov.w	r3, #4294967295
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	4807      	ldr	r0, [pc, #28]	; (8002860 <_write+0x34>)
 8002844:	f005 f8cc 	bl	80079e0 <HAL_UART_Transmit>
 8002848:	4603      	mov	r3, r0
 800284a:	75fb      	strb	r3, [r7, #23]
  if (hstatus == HAL_OK)
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <_write+0x2a>
    return len;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	e000      	b.n	8002858 <_write+0x2c>
  else
    return 0;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	200003bc 	.word	0x200003bc

08002864 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800289c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002868:	f7ff fe7a 	bl	8002560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800286c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800286e:	e003      	b.n	8002878 <LoopCopyDataInit>

08002870 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002872:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002874:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002876:	3104      	adds	r1, #4

08002878 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002878:	480a      	ldr	r0, [pc, #40]	; (80028a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800287c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800287e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002880:	d3f6      	bcc.n	8002870 <CopyDataInit>
	ldr	r2, =_sbss
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8002884:	e002      	b.n	800288c <LoopFillZerobss>

08002886 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002886:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002888:	f842 3b04 	str.w	r3, [r2], #4

0800288c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <LoopForever+0x16>)
	cmp	r2, r3
 800288e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002890:	d3f9      	bcc.n	8002886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002892:	f006 f903 	bl	8008a9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002896:	f7fe fe35 	bl	8001504 <main>

0800289a <LoopForever>:

LoopForever:
    b LoopForever
 800289a:	e7fe      	b.n	800289a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800289c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80028a0:	0800f3a8 	.word	0x0800f3a8
	ldr	r0, =_sdata
 80028a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80028a8:	20000248 	.word	0x20000248
	ldr	r2, =_sbss
 80028ac:	20000248 	.word	0x20000248
	ldr	r3, = _ebss
 80028b0:	200004c0 	.word	0x200004c0

080028b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028b4:	e7fe      	b.n	80028b4 <ADC1_2_IRQHandler>
	...

080028b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <HAL_Init+0x3c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <HAL_Init+0x3c>)
 80028c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028ce:	2003      	movs	r0, #3
 80028d0:	f001 fb4c 	bl	8003f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028d4:	2000      	movs	r0, #0
 80028d6:	f000 f80f 	bl	80028f8 <HAL_InitTick>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	71fb      	strb	r3, [r7, #7]
 80028e4:	e001      	b.n	80028ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028e6:	f7ff fd3f 	bl	8002368 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028ea:	79fb      	ldrb	r3, [r7, #7]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40022000 	.word	0x40022000

080028f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002904:	4b17      	ldr	r3, [pc, #92]	; (8002964 <HAL_InitTick+0x6c>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d023      	beq.n	8002954 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <HAL_InitTick+0x70>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b14      	ldr	r3, [pc, #80]	; (8002964 <HAL_InitTick+0x6c>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800291a:	fbb3 f3f1 	udiv	r3, r3, r1
 800291e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002922:	4618      	mov	r0, r3
 8002924:	f001 fb57 	bl	8003fd6 <HAL_SYSTICK_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b0f      	cmp	r3, #15
 8002932:	d809      	bhi.n	8002948 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002934:	2200      	movs	r2, #0
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	f04f 30ff 	mov.w	r0, #4294967295
 800293c:	f001 fb21 	bl	8003f82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002940:	4a0a      	ldr	r2, [pc, #40]	; (800296c <HAL_InitTick+0x74>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e007      	b.n	8002958 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
 800294c:	e004      	b.n	8002958 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	e001      	b.n	8002958 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000010 	.word	0x20000010
 8002968:	20000008 	.word	0x20000008
 800296c:	2000000c 	.word	0x2000000c

08002970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_IncTick+0x20>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_IncTick+0x24>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4413      	add	r3, r2
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <HAL_IncTick+0x24>)
 8002982:	6013      	str	r3, [r2, #0]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000010 	.word	0x20000010
 8002994:	20000484 	.word	0x20000484

08002998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return uwTick;
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_GetTick+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000484 	.word	0x20000484

080029b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029b8:	f7ff ffee 	bl	8002998 <HAL_GetTick>
 80029bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d005      	beq.n	80029d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_Delay+0x44>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029d6:	bf00      	nop
 80029d8:	f7ff ffde 	bl	8002998 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d8f7      	bhi.n	80029d8 <HAL_Delay+0x28>
  {
  }
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000010 	.word	0x20000010

080029f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	609a      	str	r2, [r3, #8]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3360      	adds	r3, #96	; 0x60
 8002a72:	461a      	mov	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <LL_ADC_SetOffset+0x44>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	03fff000 	.word	0x03fff000

08002aa8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3360      	adds	r3, #96	; 0x60
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3360      	adds	r3, #96	; 0x60
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002afe:	bf00      	nop
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3330      	adds	r3, #48	; 0x30
 8002b40:	461a      	mov	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	4413      	add	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	211f      	movs	r1, #31
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	401a      	ands	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	0e9b      	lsrs	r3, r3, #26
 8002b68:	f003 011f 	and.w	r1, r3, #31
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	431a      	orrs	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b7c:	bf00      	nop
 8002b7e:	371c      	adds	r7, #28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3314      	adds	r3, #20
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	0e5b      	lsrs	r3, r3, #25
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	4413      	add	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	0d1b      	lsrs	r3, r3, #20
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2107      	movs	r1, #7
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	0d1b      	lsrs	r3, r3, #20
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bd2:	bf00      	nop
 8002bd4:	371c      	adds	r7, #28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 0318 	and.w	r3, r3, #24
 8002c02:	4908      	ldr	r1, [pc, #32]	; (8002c24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c04:	40d9      	lsrs	r1, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	400b      	ands	r3, r1
 8002c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	0007ffff 	.word	0x0007ffff

08002c28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 031f 	and.w	r3, r3, #31
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6093      	str	r3, [r2, #8]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c98:	d101      	bne.n	8002c9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce8:	d101      	bne.n	8002cee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <LL_ADC_IsEnabled+0x18>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <LL_ADC_IsEnabled+0x1a>
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d5e:	f043 0204 	orr.w	r2, r3, #4
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d101      	bne.n	8002d8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d101      	bne.n	8002db0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e134      	b.n	8003044 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d109      	bne.n	8002dfc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7fe f9d5 	bl	8001198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff3f 	bl	8002c84 <LL_ADC_IsDeepPowerDownEnabled>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d004      	beq.n	8002e16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff25 	bl	8002c60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ff5a 	bl	8002cd4 <LL_ADC_IsInternalRegulatorEnabled>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d113      	bne.n	8002e4e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff ff3e 	bl	8002cac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002e30:	4b86      	ldr	r3, [pc, #536]	; (800304c <HAL_ADC_Init+0x28c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	099b      	lsrs	r3, r3, #6
 8002e36:	4a86      	ldr	r2, [pc, #536]	; (8003050 <HAL_ADC_Init+0x290>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	099b      	lsrs	r3, r3, #6
 8002e3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e40:	e002      	b.n	8002e48 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f9      	bne.n	8002e42 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ff3e 	bl	8002cd4 <LL_ADC_IsInternalRegulatorEnabled>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10d      	bne.n	8002e7a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	f043 0210 	orr.w	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	f043 0201 	orr.w	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ff77 	bl	8002d72 <LL_ADC_REG_IsConversionOngoing>
 8002e84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f040 80cf 	bne.w	8003032 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 80cb 	bne.w	8003032 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ea4:	f043 0202 	orr.w	r2, r3, #2
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff37 	bl	8002d24 <LL_ADC_IsEnabled>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d115      	bne.n	8002ee8 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ebc:	4865      	ldr	r0, [pc, #404]	; (8003054 <HAL_ADC_Init+0x294>)
 8002ebe:	f7ff ff31 	bl	8002d24 <LL_ADC_IsEnabled>
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	4864      	ldr	r0, [pc, #400]	; (8003058 <HAL_ADC_Init+0x298>)
 8002ec6:	f7ff ff2d 	bl	8002d24 <LL_ADC_IsEnabled>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	431c      	orrs	r4, r3
 8002ece:	4863      	ldr	r0, [pc, #396]	; (800305c <HAL_ADC_Init+0x29c>)
 8002ed0:	f7ff ff28 	bl	8002d24 <LL_ADC_IsEnabled>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4323      	orrs	r3, r4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d105      	bne.n	8002ee8 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	485f      	ldr	r0, [pc, #380]	; (8003060 <HAL_ADC_Init+0x2a0>)
 8002ee4:	f7ff fd88 	bl	80029f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	7e5b      	ldrb	r3, [r3, #25]
 8002eec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ef2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ef8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002efe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f06:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d106      	bne.n	8002f24 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	045b      	lsls	r3, r3, #17
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	4b47      	ldr	r3, [pc, #284]	; (8003064 <HAL_ADC_Init+0x2a4>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	69b9      	ldr	r1, [r7, #24]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff0a 	bl	8002d72 <LL_ADC_REG_IsConversionOngoing>
 8002f5e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ff17 	bl	8002d98 <LL_ADC_INJ_IsConversionOngoing>
 8002f6a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d13d      	bne.n	8002fee <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d13a      	bne.n	8002fee <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f7c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f84:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f94:	f023 0302 	bic.w	r3, r3, #2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	69b9      	ldr	r1, [r7, #24]
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d118      	bne.n	8002fde <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002fb6:	f023 0304 	bic.w	r3, r3, #4
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fc2:	4311      	orrs	r1, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002fc8:	4311      	orrs	r1, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	611a      	str	r2, [r3, #16]
 8002fdc:	e007      	b.n	8002fee <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d10c      	bne.n	8003010 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	f023 010f 	bic.w	r1, r3, #15
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	1e5a      	subs	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
 800300e:	e007      	b.n	8003020 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 020f 	bic.w	r2, r2, #15
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003024:	f023 0303 	bic.w	r3, r3, #3
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	655a      	str	r2, [r3, #84]	; 0x54
 8003030:	e007      	b.n	8003042 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	f043 0210 	orr.w	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003042:	7ffb      	ldrb	r3, [r7, #31]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3724      	adds	r7, #36	; 0x24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd90      	pop	{r4, r7, pc}
 800304c:	20000008 	.word	0x20000008
 8003050:	053e2d63 	.word	0x053e2d63
 8003054:	50040000 	.word	0x50040000
 8003058:	50040100 	.word	0x50040100
 800305c:	50040200 	.word	0x50040200
 8003060:	50040300 	.word	0x50040300
 8003064:	fff0c007 	.word	0xfff0c007

08003068 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003070:	4857      	ldr	r0, [pc, #348]	; (80031d0 <HAL_ADC_Start+0x168>)
 8003072:	f7ff fdd9 	bl	8002c28 <LL_ADC_GetMultimode>
 8003076:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fe78 	bl	8002d72 <LL_ADC_REG_IsConversionOngoing>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	f040 809c 	bne.w	80031c2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_ADC_Start+0x30>
 8003094:	2302      	movs	r3, #2
 8003096:	e097      	b.n	80031c8 <HAL_ADC_Start+0x160>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fd67 	bl	8003b74 <ADC_Enable>
 80030a6:	4603      	mov	r3, r0
 80030a8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f040 8083 	bne.w	80031b8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a42      	ldr	r2, [pc, #264]	; (80031d4 <HAL_ADC_Start+0x16c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d002      	beq.n	80030d6 <HAL_ADC_Start+0x6e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	e000      	b.n	80030d8 <HAL_ADC_Start+0x70>
 80030d6:	4b40      	ldr	r3, [pc, #256]	; (80031d8 <HAL_ADC_Start+0x170>)
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	4293      	cmp	r3, r2
 80030de:	d002      	beq.n	80030e6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fe:	d106      	bne.n	800310e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	f023 0206 	bic.w	r2, r3, #6
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	659a      	str	r2, [r3, #88]	; 0x58
 800310c:	e002      	b.n	8003114 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	221c      	movs	r2, #28
 800311a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a2a      	ldr	r2, [pc, #168]	; (80031d4 <HAL_ADC_Start+0x16c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d002      	beq.n	8003134 <HAL_ADC_Start+0xcc>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	e000      	b.n	8003136 <HAL_ADC_Start+0xce>
 8003134:	4b28      	ldr	r3, [pc, #160]	; (80031d8 <HAL_ADC_Start+0x170>)
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	4293      	cmp	r3, r2
 800313c:	d008      	beq.n	8003150 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	2b05      	cmp	r3, #5
 8003148:	d002      	beq.n	8003150 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b09      	cmp	r3, #9
 800314e:	d114      	bne.n	800317a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003166:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fde9 	bl	8002d4a <LL_ADC_REG_StartConversion>
 8003178:	e025      	b.n	80031c6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <HAL_ADC_Start+0x16c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d002      	beq.n	8003196 <HAL_ADC_Start+0x12e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	e000      	b.n	8003198 <HAL_ADC_Start+0x130>
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_ADC_Start+0x170>)
 8003198:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00f      	beq.n	80031c6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
 80031b6:	e006      	b.n	80031c6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80031c0:	e001      	b.n	80031c6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
 80031c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80031c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	50040300 	.word	0x50040300
 80031d4:	50040100 	.word	0x50040100
 80031d8:	50040000 	.word	0x50040000

080031dc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031e6:	4862      	ldr	r0, [pc, #392]	; (8003370 <HAL_ADC_PollForConversion+0x194>)
 80031e8:	f7ff fd1e 	bl	8002c28 <LL_ADC_GetMultimode>
 80031ec:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d102      	bne.n	80031fc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80031f6:	2308      	movs	r3, #8
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	e02a      	b.n	8003252 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b05      	cmp	r3, #5
 8003206:	d002      	beq.n	800320e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2b09      	cmp	r3, #9
 800320c:	d111      	bne.n	8003232 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e09d      	b.n	8003368 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800322c:	2304      	movs	r3, #4
 800322e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003230:	e00f      	b.n	8003252 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003232:	484f      	ldr	r0, [pc, #316]	; (8003370 <HAL_ADC_PollForConversion+0x194>)
 8003234:	f7ff fd06 	bl	8002c44 <LL_ADC_GetMultiDMATransfer>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e08c      	b.n	8003368 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800324e:	2304      	movs	r3, #4
 8003250:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003252:	f7ff fba1 	bl	8002998 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003258:	e01a      	b.n	8003290 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d016      	beq.n	8003290 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003262:	f7ff fb99 	bl	8002998 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <HAL_ADC_PollForConversion+0x9c>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10b      	bne.n	8003290 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	f043 0204 	orr.w	r2, r3, #4
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e06b      	b.n	8003368 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0dd      	beq.n	800325a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fc2b 	bl	8002b0a <LL_ADC_REG_IsTriggerSourceSWStart>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01c      	beq.n	80032f4 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7e5b      	ldrb	r3, [r3, #25]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d118      	bne.n	80032f4 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d111      	bne.n	80032f4 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <HAL_ADC_PollForConversion+0x198>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d002      	beq.n	8003304 <HAL_ADC_PollForConversion+0x128>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	e000      	b.n	8003306 <HAL_ADC_PollForConversion+0x12a>
 8003304:	4b1c      	ldr	r3, [pc, #112]	; (8003378 <HAL_ADC_PollForConversion+0x19c>)
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	4293      	cmp	r3, r2
 800330c:	d008      	beq.n	8003320 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b05      	cmp	r3, #5
 8003318:	d002      	beq.n	8003320 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b09      	cmp	r3, #9
 800331e:	d104      	bne.n	800332a <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	e00c      	b.n	8003344 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a11      	ldr	r2, [pc, #68]	; (8003374 <HAL_ADC_PollForConversion+0x198>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d002      	beq.n	800333a <HAL_ADC_PollForConversion+0x15e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	e000      	b.n	800333c <HAL_ADC_PollForConversion+0x160>
 800333a:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <HAL_ADC_PollForConversion+0x19c>)
 800333c:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	2b08      	cmp	r3, #8
 8003348:	d104      	bne.n	8003354 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2208      	movs	r2, #8
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e008      	b.n	8003366 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	220c      	movs	r2, #12
 8003364:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	50040300 	.word	0x50040300
 8003374:	50040100 	.word	0x50040100
 8003378:	50040000 	.word	0x50040000

0800337c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b0b6      	sub	sp, #216	; 0xd8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x22>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e3c6      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x7b0>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fcd3 	bl	8002d72 <LL_ADC_REG_IsConversionOngoing>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f040 83a7 	bne.w	8003b22 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b05      	cmp	r3, #5
 80033da:	d824      	bhi.n	8003426 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	3b02      	subs	r3, #2
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d81b      	bhi.n	800341e <HAL_ADC_ConfigChannel+0x86>
 80033e6:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <HAL_ADC_ConfigChannel+0x54>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	080033fd 	.word	0x080033fd
 80033f0:	08003405 	.word	0x08003405
 80033f4:	0800340d 	.word	0x0800340d
 80033f8:	08003415 	.word	0x08003415
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	220c      	movs	r2, #12
 8003400:	605a      	str	r2, [r3, #4]
          break;
 8003402:	e011      	b.n	8003428 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2212      	movs	r2, #18
 8003408:	605a      	str	r2, [r3, #4]
          break;
 800340a:	e00d      	b.n	8003428 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2218      	movs	r2, #24
 8003410:	605a      	str	r2, [r3, #4]
          break;
 8003412:	e009      	b.n	8003428 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800341a:	605a      	str	r2, [r3, #4]
          break;
 800341c:	e004      	b.n	8003428 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2206      	movs	r2, #6
 8003422:	605a      	str	r2, [r3, #4]
          break;
 8003424:	e000      	b.n	8003428 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003426:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	f7ff fb7b 	bl	8002b30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fc97 	bl	8002d72 <LL_ADC_REG_IsConversionOngoing>
 8003444:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fca3 	bl	8002d98 <LL_ADC_INJ_IsConversionOngoing>
 8003452:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003456:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 81a6 	bne.w	80037ac <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003464:	2b00      	cmp	r3, #0
 8003466:	f040 81a1 	bne.w	80037ac <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	461a      	mov	r2, r3
 8003478:	f7ff fb86 	bl	8002b88 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	08db      	lsrs	r3, r3, #3
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2b04      	cmp	r3, #4
 800349c:	d00a      	beq.n	80034b4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6919      	ldr	r1, [r3, #16]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034ae:	f7ff fad7 	bl	8002a60 <LL_ADC_SetOffset>
 80034b2:	e17b      	b.n	80037ac <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff faf4 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x148>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fae9 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 80034d6:	4603      	mov	r3, r0
 80034d8:	0e9b      	lsrs	r3, r3, #26
 80034da:	f003 021f 	and.w	r2, r3, #31
 80034de:	e01e      	b.n	800351e <HAL_ADC_ConfigChannel+0x186>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fade 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 80034fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003502:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003506:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 800350e:	2320      	movs	r3, #32
 8003510:	e004      	b.n	800351c <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 8003512:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x19e>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	0e9b      	lsrs	r3, r3, #26
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	e018      	b.n	8003568 <HAL_ADC_ConfigChannel+0x1d0>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800354a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800354e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003552:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800355a:	2320      	movs	r3, #32
 800355c:	e004      	b.n	8003568 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800355e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003568:	429a      	cmp	r2, r3
 800356a:	d106      	bne.n	800357a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2200      	movs	r2, #0
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff faad 	bl	8002ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2101      	movs	r1, #1
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fa91 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003586:	4603      	mov	r3, r0
 8003588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x20e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2101      	movs	r1, #1
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fa86 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 800359c:	4603      	mov	r3, r0
 800359e:	0e9b      	lsrs	r3, r3, #26
 80035a0:	f003 021f 	and.w	r2, r3, #31
 80035a4:	e01e      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x24c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2101      	movs	r1, #1
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fa7b 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035bc:	fa93 f3a3 	rbit	r3, r3
 80035c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80035c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80035cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80035d4:	2320      	movs	r3, #32
 80035d6:	e004      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80035d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035dc:	fab3 f383 	clz	r3, r3
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d105      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x264>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	0e9b      	lsrs	r3, r3, #26
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	e018      	b.n	800362e <HAL_ADC_ConfigChannel+0x296>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003608:	fa93 f3a3 	rbit	r3, r3
 800360c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003610:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003614:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003618:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003620:	2320      	movs	r3, #32
 8003622:	e004      	b.n	800362e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800362e:	429a      	cmp	r2, r3
 8003630:	d106      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	2101      	movs	r1, #1
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fa4a 	bl	8002ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2102      	movs	r1, #2
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff fa2e 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 800364c:	4603      	mov	r3, r0
 800364e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10a      	bne.n	800366c <HAL_ADC_ConfigChannel+0x2d4>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2102      	movs	r1, #2
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fa23 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003662:	4603      	mov	r3, r0
 8003664:	0e9b      	lsrs	r3, r3, #26
 8003666:	f003 021f 	and.w	r2, r3, #31
 800366a:	e01e      	b.n	80036aa <HAL_ADC_ConfigChannel+0x312>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2102      	movs	r1, #2
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fa18 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003678:	4603      	mov	r3, r0
 800367a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800368a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800368e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003692:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800369a:	2320      	movs	r3, #32
 800369c:	e004      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800369e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x32a>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	0e9b      	lsrs	r3, r3, #26
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	e016      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x358>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80036d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80036da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80036e2:	2320      	movs	r3, #32
 80036e4:	e004      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80036e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d106      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2200      	movs	r2, #0
 80036fa:	2102      	movs	r1, #2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff f9e9 	bl	8002ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2103      	movs	r1, #3
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff f9cd 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 800370e:	4603      	mov	r3, r0
 8003710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <HAL_ADC_ConfigChannel+0x396>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2103      	movs	r1, #3
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff f9c2 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 8003724:	4603      	mov	r3, r0
 8003726:	0e9b      	lsrs	r3, r3, #26
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	e017      	b.n	800375e <HAL_ADC_ConfigChannel+0x3c6>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2103      	movs	r1, #3
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff f9b7 	bl	8002aa8 <LL_ADC_GetOffsetChannel>
 800373a:	4603      	mov	r3, r0
 800373c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003748:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800374a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003750:	2320      	movs	r3, #32
 8003752:	e003      	b.n	800375c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x3de>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	0e9b      	lsrs	r3, r3, #26
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	e011      	b.n	800379a <HAL_ADC_ConfigChannel+0x402>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003786:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800378e:	2320      	movs	r3, #32
 8003790:	e003      	b.n	800379a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003794:	fab3 f383 	clz	r3, r3
 8003798:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800379a:	429a      	cmp	r2, r3
 800379c:	d106      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2200      	movs	r2, #0
 80037a4:	2103      	movs	r1, #3
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff f994 	bl	8002ad4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fab7 	bl	8002d24 <LL_ADC_IsEnabled>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f040 813f 	bne.w	8003a3c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6819      	ldr	r1, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f7ff fa08 	bl	8002be0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4a8e      	ldr	r2, [pc, #568]	; (8003a10 <HAL_ADC_ConfigChannel+0x678>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	f040 8130 	bne.w	8003a3c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10b      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x46c>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	0e9b      	lsrs	r3, r3, #26
 80037f2:	3301      	adds	r3, #1
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	2b09      	cmp	r3, #9
 80037fa:	bf94      	ite	ls
 80037fc:	2301      	movls	r3, #1
 80037fe:	2300      	movhi	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	e019      	b.n	8003838 <HAL_ADC_ConfigChannel+0x4a0>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003814:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800381c:	2320      	movs	r3, #32
 800381e:	e003      	b.n	8003828 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	3301      	adds	r3, #1
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2b09      	cmp	r3, #9
 8003830:	bf94      	ite	ls
 8003832:	2301      	movls	r3, #1
 8003834:	2300      	movhi	r3, #0
 8003836:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003838:	2b00      	cmp	r3, #0
 800383a:	d079      	beq.n	8003930 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003844:	2b00      	cmp	r3, #0
 8003846:	d107      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x4c0>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0e9b      	lsrs	r3, r3, #26
 800384e:	3301      	adds	r3, #1
 8003850:	069b      	lsls	r3, r3, #26
 8003852:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003856:	e015      	b.n	8003884 <HAL_ADC_ConfigChannel+0x4ec>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003860:	fa93 f3a3 	rbit	r3, r3
 8003864:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003868:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800386a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003870:	2320      	movs	r3, #32
 8003872:	e003      	b.n	800387c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	3301      	adds	r3, #1
 800387e:	069b      	lsls	r3, r3, #26
 8003880:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x50c>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	0e9b      	lsrs	r3, r3, #26
 8003896:	3301      	adds	r3, #1
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2101      	movs	r1, #1
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	e017      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x53c>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80038b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80038b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80038bc:	2320      	movs	r3, #32
 80038be:	e003      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80038c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c2:	fab3 f383 	clz	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	f003 031f 	and.w	r3, r3, #31
 80038ce:	2101      	movs	r1, #1
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	ea42 0103 	orr.w	r1, r2, r3
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x562>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	0e9b      	lsrs	r3, r3, #26
 80038ea:	3301      	adds	r3, #1
 80038ec:	f003 021f 	and.w	r2, r3, #31
 80038f0:	4613      	mov	r3, r2
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	4413      	add	r3, r2
 80038f6:	051b      	lsls	r3, r3, #20
 80038f8:	e018      	b.n	800392c <HAL_ADC_ConfigChannel+0x594>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800390c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003912:	2320      	movs	r3, #32
 8003914:	e003      	b.n	800391e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003918:	fab3 f383 	clz	r3, r3
 800391c:	b2db      	uxtb	r3, r3
 800391e:	3301      	adds	r3, #1
 8003920:	f003 021f 	and.w	r2, r3, #31
 8003924:	4613      	mov	r3, r2
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4413      	add	r3, r2
 800392a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800392c:	430b      	orrs	r3, r1
 800392e:	e080      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003938:	2b00      	cmp	r3, #0
 800393a:	d107      	bne.n	800394c <HAL_ADC_ConfigChannel+0x5b4>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	0e9b      	lsrs	r3, r3, #26
 8003942:	3301      	adds	r3, #1
 8003944:	069b      	lsls	r3, r3, #26
 8003946:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800394a:	e015      	b.n	8003978 <HAL_ADC_ConfigChannel+0x5e0>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003964:	2320      	movs	r3, #32
 8003966:	e003      	b.n	8003970 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	3301      	adds	r3, #1
 8003972:	069b      	lsls	r3, r3, #26
 8003974:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x600>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	0e9b      	lsrs	r3, r3, #26
 800398a:	3301      	adds	r3, #1
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	2101      	movs	r1, #1
 8003992:	fa01 f303 	lsl.w	r3, r1, r3
 8003996:	e017      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x630>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	61fb      	str	r3, [r7, #28]
  return result;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80039b0:	2320      	movs	r3, #32
 80039b2:	e003      	b.n	80039bc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	3301      	adds	r3, #1
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2101      	movs	r1, #1
 80039c4:	fa01 f303 	lsl.w	r3, r1, r3
 80039c8:	ea42 0103 	orr.w	r1, r2, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10d      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x65c>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	0e9b      	lsrs	r3, r3, #26
 80039de:	3301      	adds	r3, #1
 80039e0:	f003 021f 	and.w	r2, r3, #31
 80039e4:	4613      	mov	r3, r2
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	4413      	add	r3, r2
 80039ea:	3b1e      	subs	r3, #30
 80039ec:	051b      	lsls	r3, r3, #20
 80039ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039f2:	e01d      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x698>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	613b      	str	r3, [r7, #16]
  return result;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d103      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	e005      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x684>
 8003a10:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	f003 021f 	and.w	r2, r3, #31
 8003a22:	4613      	mov	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4413      	add	r3, r2
 8003a28:	3b1e      	subs	r3, #30
 8003a2a:	051b      	lsls	r3, r3, #20
 8003a2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a30:	430b      	orrs	r3, r1
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	6892      	ldr	r2, [r2, #8]
 8003a36:	4619      	mov	r1, r3
 8003a38:	f7ff f8a6 	bl	8002b88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b43      	ldr	r3, [pc, #268]	; (8003b50 <HAL_ADC_ConfigChannel+0x7b8>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d079      	beq.n	8003b3c <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a48:	4842      	ldr	r0, [pc, #264]	; (8003b54 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a4a:	f7fe fffb 	bl	8002a44 <LL_ADC_GetCommonPathInternalCh>
 8003a4e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a40      	ldr	r2, [pc, #256]	; (8003b58 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d12b      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d125      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a3b      	ldr	r2, [pc, #236]	; (8003b5c <HAL_ADC_ConfigChannel+0x7c4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <HAL_ADC_ConfigChannel+0x6e4>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a3a      	ldr	r2, [pc, #232]	; (8003b60 <HAL_ADC_ConfigChannel+0x7c8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d15c      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a84:	4619      	mov	r1, r3
 8003a86:	4833      	ldr	r0, [pc, #204]	; (8003b54 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a88:	f7fe ffc9 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003a8c:	4b35      	ldr	r3, [pc, #212]	; (8003b64 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	099b      	lsrs	r3, r3, #6
 8003a92:	4a35      	ldr	r2, [pc, #212]	; (8003b68 <HAL_ADC_ConfigChannel+0x7d0>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	099a      	lsrs	r2, r3, #6
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003aa4:	e002      	b.n	8003aac <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f9      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ab2:	e040      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <HAL_ADC_ConfigChannel+0x7d4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d118      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x758>
 8003abe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d112      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a23      	ldr	r2, [pc, #140]	; (8003b5c <HAL_ADC_ConfigChannel+0x7c4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d004      	beq.n	8003ade <HAL_ADC_ConfigChannel+0x746>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a21      	ldr	r2, [pc, #132]	; (8003b60 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d12d      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	481a      	ldr	r0, [pc, #104]	; (8003b54 <HAL_ADC_ConfigChannel+0x7bc>)
 8003aea:	f7fe ff98 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aee:	e024      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <HAL_ADC_ConfigChannel+0x7d8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d120      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003afa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d11a      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <HAL_ADC_ConfigChannel+0x7c4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d115      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b18:	4619      	mov	r1, r3
 8003b1a:	480e      	ldr	r0, [pc, #56]	; (8003b54 <HAL_ADC_ConfigChannel+0x7bc>)
 8003b1c:	f7fe ff7f 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
 8003b20:	e00c      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	f043 0220 	orr.w	r2, r3, #32
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003b34:	e002      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b3a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b44:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	37d8      	adds	r7, #216	; 0xd8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	80080000 	.word	0x80080000
 8003b54:	50040300 	.word	0x50040300
 8003b58:	c7520000 	.word	0xc7520000
 8003b5c:	50040000 	.word	0x50040000
 8003b60:	50040200 	.word	0x50040200
 8003b64:	20000008 	.word	0x20000008
 8003b68:	053e2d63 	.word	0x053e2d63
 8003b6c:	cb840000 	.word	0xcb840000
 8003b70:	80000001 	.word	0x80000001

08003b74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff f8cf 	bl	8002d24 <LL_ADC_IsEnabled>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d146      	bne.n	8003c1a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <ADC_Enable+0xb0>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00d      	beq.n	8003bb6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	f043 0210 	orr.w	r2, r3, #16
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003baa:	f043 0201 	orr.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e032      	b.n	8003c1c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff f89e 	bl	8002cfc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bc0:	f7fe feea 	bl	8002998 <HAL_GetTick>
 8003bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bc6:	e021      	b.n	8003c0c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff f8a9 	bl	8002d24 <LL_ADC_IsEnabled>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff f88d 	bl	8002cfc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003be2:	f7fe fed9 	bl	8002998 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d90d      	bls.n	8003c0c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf4:	f043 0210 	orr.w	r2, r3, #16
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	f043 0201 	orr.w	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e007      	b.n	8003c1c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d1d6      	bne.n	8003bc8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	8000003f 	.word	0x8000003f

08003c28 <LL_ADC_IsEnabled>:
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <LL_ADC_IsEnabled+0x18>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <LL_ADC_IsEnabled+0x1a>
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <LL_ADC_REG_IsConversionOngoing>:
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d101      	bne.n	8003c66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b09f      	sub	sp, #124	; 0x7c
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e08f      	b.n	8003db2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a47      	ldr	r2, [pc, #284]	; (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d102      	bne.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003ca4:	4b46      	ldr	r3, [pc, #280]	; (8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	e001      	b.n	8003cae <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb8:	f043 0220 	orr.w	r2, r3, #32
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e072      	b.n	8003db2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ffbd 	bl	8003c4e <LL_ADC_REG_IsConversionOngoing>
 8003cd4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff ffb7 	bl	8003c4e <LL_ADC_REG_IsConversionOngoing>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d154      	bne.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d151      	bne.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003cec:	4b35      	ldr	r3, [pc, #212]	; (8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003cee:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d02c      	beq.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d0a:	035b      	lsls	r3, r3, #13
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d12:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d14:	4829      	ldr	r0, [pc, #164]	; (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003d16:	f7ff ff87 	bl	8003c28 <LL_ADC_IsEnabled>
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	4828      	ldr	r0, [pc, #160]	; (8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003d1e:	f7ff ff83 	bl	8003c28 <LL_ADC_IsEnabled>
 8003d22:	4603      	mov	r3, r0
 8003d24:	431c      	orrs	r4, r3
 8003d26:	4828      	ldr	r0, [pc, #160]	; (8003dc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d28:	f7ff ff7e 	bl	8003c28 <LL_ADC_IsEnabled>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4323      	orrs	r3, r4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d137      	bne.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d3c:	f023 030f 	bic.w	r3, r3, #15
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	6811      	ldr	r1, [r2, #0]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	6892      	ldr	r2, [r2, #8]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d50:	e028      	b.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d5e:	4817      	ldr	r0, [pc, #92]	; (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003d60:	f7ff ff62 	bl	8003c28 <LL_ADC_IsEnabled>
 8003d64:	4604      	mov	r4, r0
 8003d66:	4816      	ldr	r0, [pc, #88]	; (8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003d68:	f7ff ff5e 	bl	8003c28 <LL_ADC_IsEnabled>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	431c      	orrs	r4, r3
 8003d70:	4815      	ldr	r0, [pc, #84]	; (8003dc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d72:	f7ff ff59 	bl	8003c28 <LL_ADC_IsEnabled>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4323      	orrs	r3, r4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d112      	bne.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d86:	f023 030f 	bic.w	r3, r3, #15
 8003d8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d8c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d8e:	e009      	b.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003da2:	e000      	b.n	8003da6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003da4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003dae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	377c      	adds	r7, #124	; 0x7c
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd90      	pop	{r4, r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	50040000 	.word	0x50040000
 8003dc0:	50040100 	.word	0x50040100
 8003dc4:	50040300 	.word	0x50040300
 8003dc8:	50040200 	.word	0x50040200

08003dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <__NVIC_SetPriorityGrouping+0x44>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003de8:	4013      	ands	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dfe:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <__NVIC_SetPriorityGrouping+0x44>)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	60d3      	str	r3, [r2, #12]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	e000ed00 	.word	0xe000ed00

08003e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <__NVIC_GetPriorityGrouping+0x18>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	0a1b      	lsrs	r3, r3, #8
 8003e1e:	f003 0307 	and.w	r3, r3, #7
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	db0b      	blt.n	8003e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	f003 021f 	and.w	r2, r3, #31
 8003e48:	4907      	ldr	r1, [pc, #28]	; (8003e68 <__NVIC_EnableIRQ+0x38>)
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	2001      	movs	r0, #1
 8003e52:	fa00 f202 	lsl.w	r2, r0, r2
 8003e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	e000e100 	.word	0xe000e100

08003e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	6039      	str	r1, [r7, #0]
 8003e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	db0a      	blt.n	8003e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	490c      	ldr	r1, [pc, #48]	; (8003eb8 <__NVIC_SetPriority+0x4c>)
 8003e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8a:	0112      	lsls	r2, r2, #4
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	440b      	add	r3, r1
 8003e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e94:	e00a      	b.n	8003eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	4908      	ldr	r1, [pc, #32]	; (8003ebc <__NVIC_SetPriority+0x50>)
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	3b04      	subs	r3, #4
 8003ea4:	0112      	lsls	r2, r2, #4
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	761a      	strb	r2, [r3, #24]
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	e000e100 	.word	0xe000e100
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b089      	sub	sp, #36	; 0x24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f1c3 0307 	rsb	r3, r3, #7
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	bf28      	it	cs
 8003ede:	2304      	movcs	r3, #4
 8003ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	2b06      	cmp	r3, #6
 8003ee8:	d902      	bls.n	8003ef0 <NVIC_EncodePriority+0x30>
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	3b03      	subs	r3, #3
 8003eee:	e000      	b.n	8003ef2 <NVIC_EncodePriority+0x32>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43da      	mvns	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	401a      	ands	r2, r3
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f08:	f04f 31ff 	mov.w	r1, #4294967295
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f12:	43d9      	mvns	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f18:	4313      	orrs	r3, r2
         );
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3724      	adds	r7, #36	; 0x24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f38:	d301      	bcc.n	8003f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e00f      	b.n	8003f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f3e:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <SysTick_Config+0x40>)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f46:	210f      	movs	r1, #15
 8003f48:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4c:	f7ff ff8e 	bl	8003e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <SysTick_Config+0x40>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f56:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <SysTick_Config+0x40>)
 8003f58:	2207      	movs	r2, #7
 8003f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	e000e010 	.word	0xe000e010

08003f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff ff29 	bl	8003dcc <__NVIC_SetPriorityGrouping>
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b086      	sub	sp, #24
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	4603      	mov	r3, r0
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f94:	f7ff ff3e 	bl	8003e14 <__NVIC_GetPriorityGrouping>
 8003f98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	6978      	ldr	r0, [r7, #20]
 8003fa0:	f7ff ff8e 	bl	8003ec0 <NVIC_EncodePriority>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003faa:	4611      	mov	r1, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff ff5d 	bl	8003e6c <__NVIC_SetPriority>
}
 8003fb2:	bf00      	nop
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff31 	bl	8003e30 <__NVIC_EnableIRQ>
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff ffa2 	bl	8003f28 <SysTick_Config>
 8003fe4:	4603      	mov	r3, r0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e098      	b.n	8004134 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	4b4d      	ldr	r3, [pc, #308]	; (8004140 <HAL_DMA_Init+0x150>)
 800400a:	429a      	cmp	r2, r3
 800400c:	d80f      	bhi.n	800402e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	4b4b      	ldr	r3, [pc, #300]	; (8004144 <HAL_DMA_Init+0x154>)
 8004016:	4413      	add	r3, r2
 8004018:	4a4b      	ldr	r2, [pc, #300]	; (8004148 <HAL_DMA_Init+0x158>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	091b      	lsrs	r3, r3, #4
 8004020:	009a      	lsls	r2, r3, #2
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a48      	ldr	r2, [pc, #288]	; (800414c <HAL_DMA_Init+0x15c>)
 800402a:	641a      	str	r2, [r3, #64]	; 0x40
 800402c:	e00e      	b.n	800404c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	4b46      	ldr	r3, [pc, #280]	; (8004150 <HAL_DMA_Init+0x160>)
 8004036:	4413      	add	r3, r2
 8004038:	4a43      	ldr	r2, [pc, #268]	; (8004148 <HAL_DMA_Init+0x158>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	091b      	lsrs	r3, r3, #4
 8004040:	009a      	lsls	r2, r3, #2
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a42      	ldr	r2, [pc, #264]	; (8004154 <HAL_DMA_Init+0x164>)
 800404a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004066:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004070:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800407c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004088:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a6:	d039      	beq.n	800411c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	4a27      	ldr	r2, [pc, #156]	; (800414c <HAL_DMA_Init+0x15c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d11a      	bne.n	80040e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80040b2:	4b29      	ldr	r3, [pc, #164]	; (8004158 <HAL_DMA_Init+0x168>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	f003 031c 	and.w	r3, r3, #28
 80040be:	210f      	movs	r1, #15
 80040c0:	fa01 f303 	lsl.w	r3, r1, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	4924      	ldr	r1, [pc, #144]	; (8004158 <HAL_DMA_Init+0x168>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80040cc:	4b22      	ldr	r3, [pc, #136]	; (8004158 <HAL_DMA_Init+0x168>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d8:	f003 031c 	and.w	r3, r3, #28
 80040dc:	fa01 f303 	lsl.w	r3, r1, r3
 80040e0:	491d      	ldr	r1, [pc, #116]	; (8004158 <HAL_DMA_Init+0x168>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
 80040e6:	e019      	b.n	800411c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80040e8:	4b1c      	ldr	r3, [pc, #112]	; (800415c <HAL_DMA_Init+0x16c>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f0:	f003 031c 	and.w	r3, r3, #28
 80040f4:	210f      	movs	r1, #15
 80040f6:	fa01 f303 	lsl.w	r3, r1, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	4917      	ldr	r1, [pc, #92]	; (800415c <HAL_DMA_Init+0x16c>)
 80040fe:	4013      	ands	r3, r2
 8004100:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004102:	4b16      	ldr	r3, [pc, #88]	; (800415c <HAL_DMA_Init+0x16c>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	f003 031c 	and.w	r3, r3, #28
 8004112:	fa01 f303 	lsl.w	r3, r1, r3
 8004116:	4911      	ldr	r1, [pc, #68]	; (800415c <HAL_DMA_Init+0x16c>)
 8004118:	4313      	orrs	r3, r2
 800411a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	40020407 	.word	0x40020407
 8004144:	bffdfff8 	.word	0xbffdfff8
 8004148:	cccccccd 	.word	0xcccccccd
 800414c:	40020000 	.word	0x40020000
 8004150:	bffdfbf8 	.word	0xbffdfbf8
 8004154:	40020400 	.word	0x40020400
 8004158:	400200a8 	.word	0x400200a8
 800415c:	400204a8 	.word	0x400204a8

08004160 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_DMA_Start_IT+0x20>
 800417c:	2302      	movs	r3, #2
 800417e:	e04b      	b.n	8004218 <HAL_DMA_Start_IT+0xb8>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d13a      	bne.n	800420a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0201 	bic.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f95f 	bl	800447c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 020e 	orr.w	r2, r2, #14
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e00f      	b.n	80041f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0204 	bic.w	r2, r2, #4
 80041e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 020a 	orr.w	r2, r2, #10
 80041f6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e005      	b.n	8004216 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004212:	2302      	movs	r3, #2
 8004214:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004216:	7dfb      	ldrb	r3, [r7, #23]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d008      	beq.n	800424a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2204      	movs	r2, #4
 800423c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e022      	b.n	8004290 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 020e 	bic.w	r2, r2, #14
 8004258:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0201 	bic.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	f003 021c 	and.w	r2, r3, #28
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2101      	movs	r1, #1
 8004278:	fa01 f202 	lsl.w	r2, r1, r2
 800427c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800428e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d005      	beq.n	80042c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2204      	movs	r2, #4
 80042b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
 80042be:	e029      	b.n	8004314 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 020e 	bic.w	r2, r2, #14
 80042ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e4:	f003 021c 	and.w	r2, r3, #28
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f202 	lsl.w	r2, r1, r2
 80042f2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
    }
  }
  return status;
 8004314:	7bfb      	ldrb	r3, [r7, #15]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b084      	sub	sp, #16
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f003 031c 	and.w	r3, r3, #28
 800433e:	2204      	movs	r2, #4
 8004340:	409a      	lsls	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4013      	ands	r3, r2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d026      	beq.n	8004398 <HAL_DMA_IRQHandler+0x7a>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d021      	beq.n	8004398 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d107      	bne.n	8004372 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0204 	bic.w	r2, r2, #4
 8004370:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	f003 021c 	and.w	r2, r3, #28
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2104      	movs	r1, #4
 8004380:	fa01 f202 	lsl.w	r2, r1, r2
 8004384:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	2b00      	cmp	r3, #0
 800438c:	d071      	beq.n	8004472 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004396:	e06c      	b.n	8004472 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439c:	f003 031c 	and.w	r3, r3, #28
 80043a0:	2202      	movs	r2, #2
 80043a2:	409a      	lsls	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d02e      	beq.n	800440a <HAL_DMA_IRQHandler+0xec>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d029      	beq.n	800440a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 020a 	bic.w	r2, r2, #10
 80043d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	f003 021c 	and.w	r2, r3, #28
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	2102      	movs	r1, #2
 80043ea:	fa01 f202 	lsl.w	r2, r1, r2
 80043ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d038      	beq.n	8004472 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004408:	e033      	b.n	8004472 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f003 031c 	and.w	r3, r3, #28
 8004412:	2208      	movs	r2, #8
 8004414:	409a      	lsls	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d02a      	beq.n	8004474 <HAL_DMA_IRQHandler+0x156>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d025      	beq.n	8004474 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 020e 	bic.w	r2, r2, #14
 8004436:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	f003 021c 	and.w	r2, r3, #28
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	2101      	movs	r1, #1
 8004446:	fa01 f202 	lsl.w	r2, r1, r2
 800444a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004466:	2b00      	cmp	r3, #0
 8004468:	d004      	beq.n	8004474 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004472:	bf00      	nop
 8004474:	bf00      	nop
}
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	f003 021c 	and.w	r2, r3, #28
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	2101      	movs	r1, #1
 8004498:	fa01 f202 	lsl.w	r2, r1, r2
 800449c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d108      	bne.n	80044c0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044be:	e007      	b.n	80044d0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ea:	e17f      	b.n	80047ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	2101      	movs	r1, #1
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	fa01 f303 	lsl.w	r3, r1, r3
 80044f8:	4013      	ands	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 8171 	beq.w	80047e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d00b      	beq.n	8004524 <HAL_GPIO_Init+0x48>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d007      	beq.n	8004524 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004518:	2b11      	cmp	r3, #17
 800451a:	d003      	beq.n	8004524 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b12      	cmp	r3, #18
 8004522:	d130      	bne.n	8004586 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	2203      	movs	r2, #3
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800455a:	2201      	movs	r2, #1
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	43db      	mvns	r3, r3
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4013      	ands	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	f003 0201 	and.w	r2, r3, #1
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	2b03      	cmp	r3, #3
 8004590:	d118      	bne.n	80045c4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004598:	2201      	movs	r2, #1
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4013      	ands	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	08db      	lsrs	r3, r3, #3
 80045ae:	f003 0201 	and.w	r2, r3, #1
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	2203      	movs	r2, #3
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43db      	mvns	r3, r3
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4013      	ands	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x128>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b12      	cmp	r3, #18
 8004602:	d123      	bne.n	800464c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	08da      	lsrs	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3208      	adds	r2, #8
 800460c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004610:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	220f      	movs	r2, #15
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4013      	ands	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	08da      	lsrs	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3208      	adds	r2, #8
 8004646:	6939      	ldr	r1, [r7, #16]
 8004648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	2203      	movs	r2, #3
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 0203 	and.w	r2, r3, #3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80ac 	beq.w	80047e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800468e:	4b5f      	ldr	r3, [pc, #380]	; (800480c <HAL_GPIO_Init+0x330>)
 8004690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004692:	4a5e      	ldr	r2, [pc, #376]	; (800480c <HAL_GPIO_Init+0x330>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6613      	str	r3, [r2, #96]	; 0x60
 800469a:	4b5c      	ldr	r3, [pc, #368]	; (800480c <HAL_GPIO_Init+0x330>)
 800469c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046a6:	4a5a      	ldr	r2, [pc, #360]	; (8004810 <HAL_GPIO_Init+0x334>)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	3302      	adds	r3, #2
 80046ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	220f      	movs	r2, #15
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046d0:	d025      	beq.n	800471e <HAL_GPIO_Init+0x242>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a4f      	ldr	r2, [pc, #316]	; (8004814 <HAL_GPIO_Init+0x338>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01f      	beq.n	800471a <HAL_GPIO_Init+0x23e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a4e      	ldr	r2, [pc, #312]	; (8004818 <HAL_GPIO_Init+0x33c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d019      	beq.n	8004716 <HAL_GPIO_Init+0x23a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a4d      	ldr	r2, [pc, #308]	; (800481c <HAL_GPIO_Init+0x340>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <HAL_GPIO_Init+0x236>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a4c      	ldr	r2, [pc, #304]	; (8004820 <HAL_GPIO_Init+0x344>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00d      	beq.n	800470e <HAL_GPIO_Init+0x232>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a4b      	ldr	r2, [pc, #300]	; (8004824 <HAL_GPIO_Init+0x348>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d007      	beq.n	800470a <HAL_GPIO_Init+0x22e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a4a      	ldr	r2, [pc, #296]	; (8004828 <HAL_GPIO_Init+0x34c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d101      	bne.n	8004706 <HAL_GPIO_Init+0x22a>
 8004702:	2306      	movs	r3, #6
 8004704:	e00c      	b.n	8004720 <HAL_GPIO_Init+0x244>
 8004706:	2307      	movs	r3, #7
 8004708:	e00a      	b.n	8004720 <HAL_GPIO_Init+0x244>
 800470a:	2305      	movs	r3, #5
 800470c:	e008      	b.n	8004720 <HAL_GPIO_Init+0x244>
 800470e:	2304      	movs	r3, #4
 8004710:	e006      	b.n	8004720 <HAL_GPIO_Init+0x244>
 8004712:	2303      	movs	r3, #3
 8004714:	e004      	b.n	8004720 <HAL_GPIO_Init+0x244>
 8004716:	2302      	movs	r3, #2
 8004718:	e002      	b.n	8004720 <HAL_GPIO_Init+0x244>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <HAL_GPIO_Init+0x244>
 800471e:	2300      	movs	r3, #0
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	f002 0203 	and.w	r2, r2, #3
 8004726:	0092      	lsls	r2, r2, #2
 8004728:	4093      	lsls	r3, r2
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004730:	4937      	ldr	r1, [pc, #220]	; (8004810 <HAL_GPIO_Init+0x334>)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	089b      	lsrs	r3, r3, #2
 8004736:	3302      	adds	r3, #2
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800473e:	4b3b      	ldr	r3, [pc, #236]	; (800482c <HAL_GPIO_Init+0x350>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	43db      	mvns	r3, r3
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4013      	ands	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004762:	4a32      	ldr	r2, [pc, #200]	; (800482c <HAL_GPIO_Init+0x350>)
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004768:	4b30      	ldr	r3, [pc, #192]	; (800482c <HAL_GPIO_Init+0x350>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	43db      	mvns	r3, r3
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4013      	ands	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800478c:	4a27      	ldr	r2, [pc, #156]	; (800482c <HAL_GPIO_Init+0x350>)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004792:	4b26      	ldr	r3, [pc, #152]	; (800482c <HAL_GPIO_Init+0x350>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	43db      	mvns	r3, r3
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	4013      	ands	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047b6:	4a1d      	ldr	r2, [pc, #116]	; (800482c <HAL_GPIO_Init+0x350>)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047bc:	4b1b      	ldr	r3, [pc, #108]	; (800482c <HAL_GPIO_Init+0x350>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	43db      	mvns	r3, r3
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4013      	ands	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047e0:	4a12      	ldr	r2, [pc, #72]	; (800482c <HAL_GPIO_Init+0x350>)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	3301      	adds	r3, #1
 80047ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	fa22 f303 	lsr.w	r3, r2, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f47f ae78 	bne.w	80044ec <HAL_GPIO_Init+0x10>
  }
}
 80047fc:	bf00      	nop
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000
 8004810:	40010000 	.word	0x40010000
 8004814:	48000400 	.word	0x48000400
 8004818:	48000800 	.word	0x48000800
 800481c:	48000c00 	.word	0x48000c00
 8004820:	48001000 	.word	0x48001000
 8004824:	48001400 	.word	0x48001400
 8004828:	48001800 	.word	0x48001800
 800482c:	40010400 	.word	0x40010400

08004830 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800483e:	e0cd      	b.n	80049dc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004840:	2201      	movs	r2, #1
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	4013      	ands	r3, r2
 800484c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80c0 	beq.w	80049d6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004856:	4a68      	ldr	r2, [pc, #416]	; (80049f8 <HAL_GPIO_DeInit+0x1c8>)
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	089b      	lsrs	r3, r3, #2
 800485c:	3302      	adds	r3, #2
 800485e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004862:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	220f      	movs	r2, #15
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4013      	ands	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800487e:	d025      	beq.n	80048cc <HAL_GPIO_DeInit+0x9c>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a5e      	ldr	r2, [pc, #376]	; (80049fc <HAL_GPIO_DeInit+0x1cc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d01f      	beq.n	80048c8 <HAL_GPIO_DeInit+0x98>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a5d      	ldr	r2, [pc, #372]	; (8004a00 <HAL_GPIO_DeInit+0x1d0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d019      	beq.n	80048c4 <HAL_GPIO_DeInit+0x94>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a5c      	ldr	r2, [pc, #368]	; (8004a04 <HAL_GPIO_DeInit+0x1d4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d013      	beq.n	80048c0 <HAL_GPIO_DeInit+0x90>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a5b      	ldr	r2, [pc, #364]	; (8004a08 <HAL_GPIO_DeInit+0x1d8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00d      	beq.n	80048bc <HAL_GPIO_DeInit+0x8c>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a5a      	ldr	r2, [pc, #360]	; (8004a0c <HAL_GPIO_DeInit+0x1dc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d007      	beq.n	80048b8 <HAL_GPIO_DeInit+0x88>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a59      	ldr	r2, [pc, #356]	; (8004a10 <HAL_GPIO_DeInit+0x1e0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d101      	bne.n	80048b4 <HAL_GPIO_DeInit+0x84>
 80048b0:	2306      	movs	r3, #6
 80048b2:	e00c      	b.n	80048ce <HAL_GPIO_DeInit+0x9e>
 80048b4:	2307      	movs	r3, #7
 80048b6:	e00a      	b.n	80048ce <HAL_GPIO_DeInit+0x9e>
 80048b8:	2305      	movs	r3, #5
 80048ba:	e008      	b.n	80048ce <HAL_GPIO_DeInit+0x9e>
 80048bc:	2304      	movs	r3, #4
 80048be:	e006      	b.n	80048ce <HAL_GPIO_DeInit+0x9e>
 80048c0:	2303      	movs	r3, #3
 80048c2:	e004      	b.n	80048ce <HAL_GPIO_DeInit+0x9e>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e002      	b.n	80048ce <HAL_GPIO_DeInit+0x9e>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <HAL_GPIO_DeInit+0x9e>
 80048cc:	2300      	movs	r3, #0
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	f002 0203 	and.w	r2, r2, #3
 80048d4:	0092      	lsls	r2, r2, #2
 80048d6:	4093      	lsls	r3, r2
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d132      	bne.n	8004944 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80048de:	4b4d      	ldr	r3, [pc, #308]	; (8004a14 <HAL_GPIO_DeInit+0x1e4>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	494b      	ldr	r1, [pc, #300]	; (8004a14 <HAL_GPIO_DeInit+0x1e4>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80048ec:	4b49      	ldr	r3, [pc, #292]	; (8004a14 <HAL_GPIO_DeInit+0x1e4>)
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	4947      	ldr	r1, [pc, #284]	; (8004a14 <HAL_GPIO_DeInit+0x1e4>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80048fa:	4b46      	ldr	r3, [pc, #280]	; (8004a14 <HAL_GPIO_DeInit+0x1e4>)
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	43db      	mvns	r3, r3
 8004902:	4944      	ldr	r1, [pc, #272]	; (8004a14 <HAL_GPIO_DeInit+0x1e4>)
 8004904:	4013      	ands	r3, r2
 8004906:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004908:	4b42      	ldr	r3, [pc, #264]	; (8004a14 <HAL_GPIO_DeInit+0x1e4>)
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	43db      	mvns	r3, r3
 8004910:	4940      	ldr	r1, [pc, #256]	; (8004a14 <HAL_GPIO_DeInit+0x1e4>)
 8004912:	4013      	ands	r3, r2
 8004914:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	220f      	movs	r2, #15
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004926:	4a34      	ldr	r2, [pc, #208]	; (80049f8 <HAL_GPIO_DeInit+0x1c8>)
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	089b      	lsrs	r3, r3, #2
 800492c:	3302      	adds	r3, #2
 800492e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	43da      	mvns	r2, r3
 8004936:	4830      	ldr	r0, [pc, #192]	; (80049f8 <HAL_GPIO_DeInit+0x1c8>)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	400a      	ands	r2, r1
 800493e:	3302      	adds	r3, #2
 8004940:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	2103      	movs	r1, #3
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	08da      	lsrs	r2, r3, #3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3208      	adds	r2, #8
 8004960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	220f      	movs	r2, #15
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	08d2      	lsrs	r2, r2, #3
 8004978:	4019      	ands	r1, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3208      	adds	r2, #8
 800497e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	2103      	movs	r1, #3
 800498c:	fa01 f303 	lsl.w	r3, r1, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	401a      	ands	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	2101      	movs	r1, #1
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	fa01 f303 	lsl.w	r3, r1, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	401a      	ands	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	2103      	movs	r1, #3
 80049b6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	401a      	ands	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c6:	2101      	movs	r1, #1
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	fa01 f303 	lsl.w	r3, r1, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	401a      	ands	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	3301      	adds	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	fa22 f303 	lsr.w	r3, r2, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f47f af2b 	bne.w	8004840 <HAL_GPIO_DeInit+0x10>
  }
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	40010000 	.word	0x40010000
 80049fc:	48000400 	.word	0x48000400
 8004a00:	48000800 	.word	0x48000800
 8004a04:	48000c00 	.word	0x48000c00
 8004a08:	48001000 	.word	0x48001000
 8004a0c:	48001400 	.word	0x48001400
 8004a10:	48001800 	.word	0x48001800
 8004a14:	40010400 	.word	0x40010400

08004a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
 8004a24:	4613      	mov	r3, r2
 8004a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a28:	787b      	ldrb	r3, [r7, #1]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a2e:	887a      	ldrh	r2, [r7, #2]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a34:	e002      	b.n	8004a3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a36:	887a      	ldrh	r2, [r7, #2]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a04      	ldr	r2, [pc, #16]	; (8004a64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a56:	6013      	str	r3, [r2, #0]
}
 8004a58:	bf00      	nop
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40007000 	.word	0x40007000

08004a68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a6c:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40007000 	.word	0x40007000

08004a84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a92:	d130      	bne.n	8004af6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a94:	4b23      	ldr	r3, [pc, #140]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa0:	d038      	beq.n	8004b14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004aa2:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aaa:	4a1e      	ldr	r2, [pc, #120]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ab0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2232      	movs	r2, #50	; 0x32
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	4a1b      	ldr	r2, [pc, #108]	; (8004b2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	0c9b      	lsrs	r3, r3, #18
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ac8:	e002      	b.n	8004ad0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ad0:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004adc:	d102      	bne.n	8004ae4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f2      	bne.n	8004aca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af0:	d110      	bne.n	8004b14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e00f      	b.n	8004b16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004af6:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b02:	d007      	beq.n	8004b14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b04:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b0c:	4a05      	ldr	r2, [pc, #20]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40007000 	.word	0x40007000
 8004b28:	20000008 	.word	0x20000008
 8004b2c:	431bde83 	.word	0x431bde83

08004b30 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004b38:	f7fd ff2e 	bl	8002998 <HAL_GetTick>
 8004b3c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e063      	b.n	8004c10 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10b      	bne.n	8004b6c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7fc ff75 	bl	8001a4c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004b62:	f241 3188 	movw	r1, #5000	; 0x1388
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 faf7 	bl	800515a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	021a      	lsls	r2, r3, #8
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2120      	movs	r1, #32
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 faef 	bl	8005176 <QSPI_WaitFlagStateUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004b9c:	7afb      	ldrb	r3, [r7, #11]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d131      	bne.n	8004c06 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004bac:	f023 0310 	bic.w	r3, r3, #16
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6852      	ldr	r2, [r2, #4]
 8004bb4:	0611      	lsls	r1, r2, #24
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68d2      	ldr	r2, [r2, #12]
 8004bba:	4311      	orrs	r1, r2
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <HAL_QSPI_Init+0xe8>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6912      	ldr	r2, [r2, #16]
 8004bd2:	0411      	lsls	r1, r2, #16
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6952      	ldr	r2, [r2, #20]
 8004bd8:	4311      	orrs	r1, r2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6992      	ldr	r2, [r2, #24]
 8004bde:	4311      	orrs	r1, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	430b      	orrs	r3, r1
 8004be6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004c0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	ffe0f8fe 	.word	0xffe0f8fe

08004c1c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e016      	b.n	8004c5c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fc ff48 	bl	8001ad4 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004c70:	f7fd fe92 	bl	8002998 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_QSPI_Command+0x22>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e048      	b.n	8004d18 <HAL_QSPI_Command+0xb4>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d137      	bne.n	8004d0a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2120      	movs	r1, #32
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fa5f 	bl	8005176 <QSPI_WaitFlagStateUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d125      	bne.n	8004d0e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fa8c 	bl	80051e4 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d115      	bne.n	8004d00 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	2102      	movs	r1, #2
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fa49 	bl	8005176 <QSPI_WaitFlagStateUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004ce8:	7dfb      	ldrb	r3, [r7, #23]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10f      	bne.n	8004d0e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004cfe:	e006      	b.n	8004d0e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004d08:	e001      	b.n	8004d0e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	; 0x28
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004d30:	f7fd fe32 	bl	8002998 <HAL_GetTick>
 8004d34:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3320      	adds	r3, #32
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_QSPI_Transmit+0x2e>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e07b      	b.n	8004e46 <HAL_QSPI_Transmit+0x126>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d16a      	bne.n	8004e38 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d05b      	beq.n	8004e26 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2212      	movs	r2, #18
 8004d72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004da2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8004da4:	e01b      	b.n	8004dde <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2201      	movs	r2, #1
 8004dae:	2104      	movs	r1, #4
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 f9e0 	bl	8005176 <QSPI_WaitFlagStateUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004dba:	7ffb      	ldrb	r3, [r7, #31]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d113      	bne.n	8004de8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	1e5a      	subs	r2, r3, #1
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1df      	bne.n	8004da6 <HAL_QSPI_Transmit+0x86>
 8004de6:	e000      	b.n	8004dea <HAL_QSPI_Transmit+0xca>
          break;
 8004de8:	bf00      	nop
      }

      if (status == HAL_OK)
 8004dea:	7ffb      	ldrb	r3, [r7, #31]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d115      	bne.n	8004e1c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	2201      	movs	r2, #1
 8004df8:	2102      	movs	r1, #2
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 f9bb 	bl	8005176 <QSPI_WaitFlagStateUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004e04:	7ffb      	ldrb	r3, [r7, #31]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d108      	bne.n	8004e1c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f934 	bl	8005080 <HAL_QSPI_Abort>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004e24:	e00a      	b.n	8004e3c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2a:	f043 0208 	orr.w	r2, r3, #8
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	77fb      	strb	r3, [r7, #31]
 8004e36:	e001      	b.n	8004e3c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004e44:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b08a      	sub	sp, #40	; 0x28
 8004e52:	af02      	add	r7, sp, #8
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004e5e:	f7fd fd9b 	bl	8002998 <HAL_GetTick>
 8004e62:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3320      	adds	r3, #32
 8004e72:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_QSPI_Receive+0x36>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e082      	b.n	8004f8a <HAL_QSPI_Receive+0x13c>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d171      	bne.n	8004f7c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d062      	beq.n	8004f6a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2222      	movs	r2, #34	; 0x22
 8004ea8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004edc:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004ee6:	e01c      	b.n	8004f22 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	2106      	movs	r1, #6
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 f93f 	bl	8005176 <QSPI_WaitFlagStateUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004efc:	7ffb      	ldrb	r3, [r7, #31]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d114      	bne.n	8004f2c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	7812      	ldrb	r2, [r2, #0]
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	1e5a      	subs	r2, r3, #1
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1de      	bne.n	8004ee8 <HAL_QSPI_Receive+0x9a>
 8004f2a:	e000      	b.n	8004f2e <HAL_QSPI_Receive+0xe0>
          break;
 8004f2c:	bf00      	nop
      }

      if (status == HAL_OK)
 8004f2e:	7ffb      	ldrb	r3, [r7, #31]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d115      	bne.n	8004f60 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	2102      	movs	r1, #2
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f919 	bl	8005176 <QSPI_WaitFlagStateUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004f48:	7ffb      	ldrb	r3, [r7, #31]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d108      	bne.n	8004f60 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2202      	movs	r2, #2
 8004f54:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f892 	bl	8005080 <HAL_QSPI_Abort>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004f68:	e00a      	b.n	8004f80 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	f043 0208 	orr.w	r2, r3, #8
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	77fb      	strb	r3, [r7, #31]
 8004f7a:	e001      	b.n	8004f80 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004f88:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b088      	sub	sp, #32
 8004f96:	af02      	add	r7, sp, #8
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
 8004f9e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004fa0:	f7fd fcfa 	bl	8002998 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_QSPI_AutoPolling+0x24>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e060      	b.n	8005078 <HAL_QSPI_AutoPolling+0xe6>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d14f      	bne.n	800506a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2242      	movs	r2, #66	; 0x42
 8004fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2120      	movs	r1, #32
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f8c7 	bl	8005176 <QSPI_WaitFlagStateUntilTimeout>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d13d      	bne.n	800506e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6812      	ldr	r2, [r2, #0]
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6852      	ldr	r2, [r2, #4]
 8005004:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6892      	ldr	r2, [r2, #8]
 800500e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	431a      	orrs	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005028:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f8d3 	bl	80051e4 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2201      	movs	r2, #1
 8005046:	2108      	movs	r1, #8
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f894 	bl	8005176 <QSPI_WaitFlagStateUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005052:	7dfb      	ldrb	r3, [r7, #23]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10a      	bne.n	800506e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2208      	movs	r2, #8
 800505e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005068:	e001      	b.n	800506e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800506a:	2302      	movs	r3, #2
 800506c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005076:	7dfb      	ldrb	r3, [r7, #23]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af02      	add	r7, sp, #8
 8005086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800508c:	f7fd fc84 	bl	8002998 <HAL_GetTick>
 8005090:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d056      	beq.n	8005150 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d017      	beq.n	80050e8 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0204 	bic.w	r2, r2, #4
 80050c6:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff f8a7 	bl	8004220 <HAL_DMA_Abort>
 80050d2:	4603      	mov	r3, r0
 80050d4:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e0:	f043 0204 	orr.w	r2, r3, #4
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0202 	orr.w	r2, r2, #2
 80050f6:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2201      	movs	r2, #1
 8005102:	2102      	movs	r1, #2
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f836 	bl	8005176 <QSPI_WaitFlagStateUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10e      	bne.n	8005132 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2202      	movs	r2, #2
 800511a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2200      	movs	r2, #0
 8005126:	2120      	movs	r1, #32
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f824 	bl	8005176 <QSPI_WaitFlagStateUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10b      	bne.n	8005150 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005146:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	641a      	str	r2, [r3, #64]	; 0x40
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	603b      	str	r3, [r7, #0]
 8005182:	4613      	mov	r3, r2
 8005184:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005186:	e01a      	b.n	80051be <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d016      	beq.n	80051be <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005190:	f7fd fc02 	bl	8002998 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	429a      	cmp	r2, r3
 800519e:	d302      	bcc.n	80051a6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10b      	bne.n	80051be <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2204      	movs	r2, #4
 80051aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	f043 0201 	orr.w	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e00e      	b.n	80051dc <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d1d6      	bne.n	8005188 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d009      	beq.n	800520c <QSPI_Config+0x28>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80051fe:	d005      	beq.n	800520c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3a01      	subs	r2, #1
 800520a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80b9 	beq.w	8005388 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d05f      	beq.n	80052de <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	6892      	ldr	r2, [r2, #8]
 8005226:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d031      	beq.n	8005294 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	431a      	orrs	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523e:	431a      	orrs	r2, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	431a      	orrs	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	049b      	lsls	r3, r3, #18
 800524c:	431a      	orrs	r2, r3
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	431a      	orrs	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	431a      	orrs	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	431a      	orrs	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	431a      	orrs	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	431a      	orrs	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	ea42 0103 	orr.w	r1, r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	430a      	orrs	r2, r1
 800527c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005284:	f000 812e 	beq.w	80054e4 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	6852      	ldr	r2, [r2, #4]
 8005290:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005292:	e127      	b.n	80054e4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	431a      	orrs	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a2:	431a      	orrs	r2, r3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	431a      	orrs	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	049b      	lsls	r3, r3, #18
 80052b0:	431a      	orrs	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	431a      	orrs	r2, r3
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	431a      	orrs	r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	ea42 0103 	orr.w	r1, r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	430a      	orrs	r2, r1
 80052da:	615a      	str	r2, [r3, #20]
}
 80052dc:	e102      	b.n	80054e4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d02e      	beq.n	8005344 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	431a      	orrs	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f4:	431a      	orrs	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	431a      	orrs	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	049b      	lsls	r3, r3, #18
 8005302:	431a      	orrs	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	431a      	orrs	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	431a      	orrs	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	431a      	orrs	r2, r3
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	431a      	orrs	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	ea42 0103 	orr.w	r1, r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	430a      	orrs	r2, r1
 800532c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005334:	f000 80d6 	beq.w	80054e4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	6852      	ldr	r2, [r2, #4]
 8005340:	619a      	str	r2, [r3, #24]
}
 8005342:	e0cf      	b.n	80054e4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	431a      	orrs	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	431a      	orrs	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	431a      	orrs	r2, r3
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	049b      	lsls	r3, r3, #18
 8005360:	431a      	orrs	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	431a      	orrs	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	431a      	orrs	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	431a      	orrs	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	ea42 0103 	orr.w	r1, r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	430a      	orrs	r2, r1
 8005384:	615a      	str	r2, [r3, #20]
}
 8005386:	e0ad      	b.n	80054e4 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d058      	beq.n	8005442 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	6892      	ldr	r2, [r2, #8]
 8005398:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d02d      	beq.n	80053fe <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	431a      	orrs	r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b0:	431a      	orrs	r2, r3
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	431a      	orrs	r2, r3
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	049b      	lsls	r3, r3, #18
 80053be:	431a      	orrs	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	ea42 0103 	orr.w	r1, r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053f0:	d078      	beq.n	80054e4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	6852      	ldr	r2, [r2, #4]
 80053fa:	619a      	str	r2, [r3, #24]
}
 80053fc:	e072      	b.n	80054e4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	431a      	orrs	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540c:	431a      	orrs	r2, r3
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	431a      	orrs	r2, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	049b      	lsls	r3, r3, #18
 800541a:	431a      	orrs	r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	431a      	orrs	r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	431a      	orrs	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	431a      	orrs	r2, r3
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	ea42 0103 	orr.w	r1, r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	430a      	orrs	r2, r1
 800543e:	615a      	str	r2, [r3, #20]
}
 8005440:	e050      	b.n	80054e4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d02a      	beq.n	80054a0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	431a      	orrs	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005458:	431a      	orrs	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	431a      	orrs	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	049b      	lsls	r3, r3, #18
 8005466:	431a      	orrs	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	431a      	orrs	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	431a      	orrs	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	431a      	orrs	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	ea42 0103 	orr.w	r1, r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	430a      	orrs	r2, r1
 800548a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005492:	d027      	beq.n	80054e4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	6852      	ldr	r2, [r2, #4]
 800549c:	619a      	str	r2, [r3, #24]
}
 800549e:	e021      	b.n	80054e4 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01d      	beq.n	80054e4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	431a      	orrs	r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b6:	431a      	orrs	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	431a      	orrs	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	049b      	lsls	r3, r3, #18
 80054c4:	431a      	orrs	r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	431a      	orrs	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	ea42 0103 	orr.w	r1, r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	615a      	str	r2, [r3, #20]
}
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e3d8      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005502:	4b97      	ldr	r3, [pc, #604]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800550c:	4b94      	ldr	r3, [pc, #592]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 80e4 	beq.w	80056ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <HAL_RCC_OscConfig+0x4a>
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b0c      	cmp	r3, #12
 800552e:	f040 808b 	bne.w	8005648 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b01      	cmp	r3, #1
 8005536:	f040 8087 	bne.w	8005648 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800553a:	4b89      	ldr	r3, [pc, #548]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_RCC_OscConfig+0x62>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e3b0      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1a      	ldr	r2, [r3, #32]
 8005556:	4b82      	ldr	r3, [pc, #520]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d004      	beq.n	800556c <HAL_RCC_OscConfig+0x7c>
 8005562:	4b7f      	ldr	r3, [pc, #508]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800556a:	e005      	b.n	8005578 <HAL_RCC_OscConfig+0x88>
 800556c:	4b7c      	ldr	r3, [pc, #496]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 800556e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005572:	091b      	lsrs	r3, r3, #4
 8005574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005578:	4293      	cmp	r3, r2
 800557a:	d223      	bcs.n	80055c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fd43 	bl	800600c <RCC_SetFlashLatencyFromMSIRange>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e391      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005590:	4b73      	ldr	r3, [pc, #460]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a72      	ldr	r2, [pc, #456]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005596:	f043 0308 	orr.w	r3, r3, #8
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	4b70      	ldr	r3, [pc, #448]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	496d      	ldr	r1, [pc, #436]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055ae:	4b6c      	ldr	r3, [pc, #432]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	4968      	ldr	r1, [pc, #416]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	604b      	str	r3, [r1, #4]
 80055c2:	e025      	b.n	8005610 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055c4:	4b66      	ldr	r3, [pc, #408]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a65      	ldr	r2, [pc, #404]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 80055ca:	f043 0308 	orr.w	r3, r3, #8
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	4b63      	ldr	r3, [pc, #396]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	4960      	ldr	r1, [pc, #384]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055e2:	4b5f      	ldr	r3, [pc, #380]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	495b      	ldr	r1, [pc, #364]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d109      	bne.n	8005610 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fd03 	bl	800600c <RCC_SetFlashLatencyFromMSIRange>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e351      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005610:	f000 fc38 	bl	8005e84 <HAL_RCC_GetSysClockFreq>
 8005614:	4602      	mov	r2, r0
 8005616:	4b52      	ldr	r3, [pc, #328]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	091b      	lsrs	r3, r3, #4
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	4950      	ldr	r1, [pc, #320]	; (8005764 <HAL_RCC_OscConfig+0x274>)
 8005622:	5ccb      	ldrb	r3, [r1, r3]
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
 800562c:	4a4e      	ldr	r2, [pc, #312]	; (8005768 <HAL_RCC_OscConfig+0x278>)
 800562e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005630:	4b4e      	ldr	r3, [pc, #312]	; (800576c <HAL_RCC_OscConfig+0x27c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f7fd f95f 	bl	80028f8 <HAL_InitTick>
 800563a:	4603      	mov	r3, r0
 800563c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800563e:	7bfb      	ldrb	r3, [r7, #15]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d052      	beq.n	80056ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	e335      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d032      	beq.n	80056b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005650:	4b43      	ldr	r3, [pc, #268]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a42      	ldr	r2, [pc, #264]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005656:	f043 0301 	orr.w	r3, r3, #1
 800565a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800565c:	f7fd f99c 	bl	8002998 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005664:	f7fd f998 	bl	8002998 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e31e      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005676:	4b3a      	ldr	r3, [pc, #232]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0f0      	beq.n	8005664 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005682:	4b37      	ldr	r3, [pc, #220]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a36      	ldr	r2, [pc, #216]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005688:	f043 0308 	orr.w	r3, r3, #8
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	4b34      	ldr	r3, [pc, #208]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	4931      	ldr	r1, [pc, #196]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 800569c:	4313      	orrs	r3, r2
 800569e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056a0:	4b2f      	ldr	r3, [pc, #188]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	492c      	ldr	r1, [pc, #176]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	604b      	str	r3, [r1, #4]
 80056b4:	e01a      	b.n	80056ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056b6:	4b2a      	ldr	r3, [pc, #168]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a29      	ldr	r2, [pc, #164]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 80056bc:	f023 0301 	bic.w	r3, r3, #1
 80056c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056c2:	f7fd f969 	bl	8002998 <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056ca:	f7fd f965 	bl	8002998 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e2eb      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056dc:	4b20      	ldr	r3, [pc, #128]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f0      	bne.n	80056ca <HAL_RCC_OscConfig+0x1da>
 80056e8:	e000      	b.n	80056ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d074      	beq.n	80057e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d005      	beq.n	800570a <HAL_RCC_OscConfig+0x21a>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2b0c      	cmp	r3, #12
 8005702:	d10e      	bne.n	8005722 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2b03      	cmp	r3, #3
 8005708:	d10b      	bne.n	8005722 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800570a:	4b15      	ldr	r3, [pc, #84]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d064      	beq.n	80057e0 <HAL_RCC_OscConfig+0x2f0>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d160      	bne.n	80057e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e2c8      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800572a:	d106      	bne.n	800573a <HAL_RCC_OscConfig+0x24a>
 800572c:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a0b      	ldr	r2, [pc, #44]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	e026      	b.n	8005788 <HAL_RCC_OscConfig+0x298>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005742:	d115      	bne.n	8005770 <HAL_RCC_OscConfig+0x280>
 8005744:	4b06      	ldr	r3, [pc, #24]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a05      	ldr	r2, [pc, #20]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 800574a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	4b03      	ldr	r3, [pc, #12]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a02      	ldr	r2, [pc, #8]	; (8005760 <HAL_RCC_OscConfig+0x270>)
 8005756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	e014      	b.n	8005788 <HAL_RCC_OscConfig+0x298>
 800575e:	bf00      	nop
 8005760:	40021000 	.word	0x40021000
 8005764:	0800ec84 	.word	0x0800ec84
 8005768:	20000008 	.word	0x20000008
 800576c:	2000000c 	.word	0x2000000c
 8005770:	4ba0      	ldr	r3, [pc, #640]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a9f      	ldr	r2, [pc, #636]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 8005776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	4b9d      	ldr	r3, [pc, #628]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a9c      	ldr	r2, [pc, #624]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 8005782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d013      	beq.n	80057b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7fd f902 	bl	8002998 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005798:	f7fd f8fe 	bl	8002998 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	; 0x64
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e284      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057aa:	4b92      	ldr	r3, [pc, #584]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0x2a8>
 80057b6:	e014      	b.n	80057e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7fd f8ee 	bl	8002998 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c0:	f7fd f8ea 	bl	8002998 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b64      	cmp	r3, #100	; 0x64
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e270      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057d2:	4b88      	ldr	r3, [pc, #544]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f0      	bne.n	80057c0 <HAL_RCC_OscConfig+0x2d0>
 80057de:	e000      	b.n	80057e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d060      	beq.n	80058b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d005      	beq.n	8005800 <HAL_RCC_OscConfig+0x310>
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b0c      	cmp	r3, #12
 80057f8:	d119      	bne.n	800582e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d116      	bne.n	800582e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005800:	4b7c      	ldr	r3, [pc, #496]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <HAL_RCC_OscConfig+0x328>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e24d      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005818:	4b76      	ldr	r3, [pc, #472]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	061b      	lsls	r3, r3, #24
 8005826:	4973      	ldr	r1, [pc, #460]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 8005828:	4313      	orrs	r3, r2
 800582a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800582c:	e040      	b.n	80058b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d023      	beq.n	800587e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005836:	4b6f      	ldr	r3, [pc, #444]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a6e      	ldr	r2, [pc, #440]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 800583c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005842:	f7fd f8a9 	bl	8002998 <HAL_GetTick>
 8005846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800584a:	f7fd f8a5 	bl	8002998 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e22b      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800585c:	4b65      	ldr	r3, [pc, #404]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0f0      	beq.n	800584a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005868:	4b62      	ldr	r3, [pc, #392]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	061b      	lsls	r3, r3, #24
 8005876:	495f      	ldr	r1, [pc, #380]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 8005878:	4313      	orrs	r3, r2
 800587a:	604b      	str	r3, [r1, #4]
 800587c:	e018      	b.n	80058b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800587e:	4b5d      	ldr	r3, [pc, #372]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a5c      	ldr	r2, [pc, #368]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 8005884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588a:	f7fd f885 	bl	8002998 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005892:	f7fd f881 	bl	8002998 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e207      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058a4:	4b53      	ldr	r3, [pc, #332]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1f0      	bne.n	8005892 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d03c      	beq.n	8005936 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01c      	beq.n	80058fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058c4:	4b4b      	ldr	r3, [pc, #300]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 80058c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ca:	4a4a      	ldr	r2, [pc, #296]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 80058cc:	f043 0301 	orr.w	r3, r3, #1
 80058d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d4:	f7fd f860 	bl	8002998 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058dc:	f7fd f85c 	bl	8002998 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e1e2      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058ee:	4b41      	ldr	r3, [pc, #260]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 80058f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0ef      	beq.n	80058dc <HAL_RCC_OscConfig+0x3ec>
 80058fc:	e01b      	b.n	8005936 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058fe:	4b3d      	ldr	r3, [pc, #244]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 8005900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005904:	4a3b      	ldr	r2, [pc, #236]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 8005906:	f023 0301 	bic.w	r3, r3, #1
 800590a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590e:	f7fd f843 	bl	8002998 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005916:	f7fd f83f 	bl	8002998 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e1c5      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005928:	4b32      	ldr	r3, [pc, #200]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 800592a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1ef      	bne.n	8005916 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 80a6 	beq.w	8005a90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005944:	2300      	movs	r3, #0
 8005946:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005948:	4b2a      	ldr	r3, [pc, #168]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10d      	bne.n	8005970 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005954:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	4a26      	ldr	r2, [pc, #152]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 800595a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800595e:	6593      	str	r3, [r2, #88]	; 0x58
 8005960:	4b24      	ldr	r3, [pc, #144]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005968:	60bb      	str	r3, [r7, #8]
 800596a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800596c:	2301      	movs	r3, #1
 800596e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005970:	4b21      	ldr	r3, [pc, #132]	; (80059f8 <HAL_RCC_OscConfig+0x508>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005978:	2b00      	cmp	r3, #0
 800597a:	d118      	bne.n	80059ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800597c:	4b1e      	ldr	r3, [pc, #120]	; (80059f8 <HAL_RCC_OscConfig+0x508>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a1d      	ldr	r2, [pc, #116]	; (80059f8 <HAL_RCC_OscConfig+0x508>)
 8005982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005986:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005988:	f7fd f806 	bl	8002998 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005990:	f7fd f802 	bl	8002998 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e188      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059a2:	4b15      	ldr	r3, [pc, #84]	; (80059f8 <HAL_RCC_OscConfig+0x508>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0f0      	beq.n	8005990 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d108      	bne.n	80059c8 <HAL_RCC_OscConfig+0x4d8>
 80059b6:	4b0f      	ldr	r3, [pc, #60]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 80059b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059bc:	4a0d      	ldr	r2, [pc, #52]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059c6:	e029      	b.n	8005a1c <HAL_RCC_OscConfig+0x52c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b05      	cmp	r3, #5
 80059ce:	d115      	bne.n	80059fc <HAL_RCC_OscConfig+0x50c>
 80059d0:	4b08      	ldr	r3, [pc, #32]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d6:	4a07      	ldr	r2, [pc, #28]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 80059d8:	f043 0304 	orr.w	r3, r3, #4
 80059dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059e0:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e6:	4a03      	ldr	r2, [pc, #12]	; (80059f4 <HAL_RCC_OscConfig+0x504>)
 80059e8:	f043 0301 	orr.w	r3, r3, #1
 80059ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059f0:	e014      	b.n	8005a1c <HAL_RCC_OscConfig+0x52c>
 80059f2:	bf00      	nop
 80059f4:	40021000 	.word	0x40021000
 80059f8:	40007000 	.word	0x40007000
 80059fc:	4b91      	ldr	r3, [pc, #580]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a02:	4a90      	ldr	r2, [pc, #576]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a0c:	4b8d      	ldr	r3, [pc, #564]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a12:	4a8c      	ldr	r2, [pc, #560]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005a14:	f023 0304 	bic.w	r3, r3, #4
 8005a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d016      	beq.n	8005a52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a24:	f7fc ffb8 	bl	8002998 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a2a:	e00a      	b.n	8005a42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2c:	f7fc ffb4 	bl	8002998 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e138      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a42:	4b80      	ldr	r3, [pc, #512]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0ed      	beq.n	8005a2c <HAL_RCC_OscConfig+0x53c>
 8005a50:	e015      	b.n	8005a7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a52:	f7fc ffa1 	bl	8002998 <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a58:	e00a      	b.n	8005a70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a5a:	f7fc ff9d 	bl	8002998 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e121      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a70:	4b74      	ldr	r3, [pc, #464]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1ed      	bne.n	8005a5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a7e:	7ffb      	ldrb	r3, [r7, #31]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d105      	bne.n	8005a90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a84:	4b6f      	ldr	r3, [pc, #444]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a88:	4a6e      	ldr	r2, [pc, #440]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 810c 	beq.w	8005cb2 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	f040 80d4 	bne.w	8005c4c <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005aa4:	4b67      	ldr	r3, [pc, #412]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f003 0203 	and.w	r2, r3, #3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d130      	bne.n	8005b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d127      	bne.n	8005b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d11f      	bne.n	8005b1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ae4:	2a07      	cmp	r2, #7
 8005ae6:	bf14      	ite	ne
 8005ae8:	2201      	movne	r2, #1
 8005aea:	2200      	moveq	r2, #0
 8005aec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d113      	bne.n	8005b1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afc:	085b      	lsrs	r3, r3, #1
 8005afe:	3b01      	subs	r3, #1
 8005b00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d109      	bne.n	8005b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	085b      	lsrs	r3, r3, #1
 8005b12:	3b01      	subs	r3, #1
 8005b14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d06e      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	2b0c      	cmp	r3, #12
 8005b1e:	d069      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b20:	4b48      	ldr	r3, [pc, #288]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d105      	bne.n	8005b38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005b2c:	4b45      	ldr	r3, [pc, #276]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e0bb      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b3c:	4b41      	ldr	r3, [pc, #260]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a40      	ldr	r2, [pc, #256]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b48:	f7fc ff26 	bl	8002998 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b50:	f7fc ff22 	bl	8002998 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e0a8      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b62:	4b38      	ldr	r3, [pc, #224]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b6e:	4b35      	ldr	r3, [pc, #212]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	4b35      	ldr	r3, [pc, #212]	; (8005c48 <HAL_RCC_OscConfig+0x758>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b7e:	3a01      	subs	r2, #1
 8005b80:	0112      	lsls	r2, r2, #4
 8005b82:	4311      	orrs	r1, r2
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b88:	0212      	lsls	r2, r2, #8
 8005b8a:	4311      	orrs	r1, r2
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b90:	0852      	lsrs	r2, r2, #1
 8005b92:	3a01      	subs	r2, #1
 8005b94:	0552      	lsls	r2, r2, #21
 8005b96:	4311      	orrs	r1, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b9c:	0852      	lsrs	r2, r2, #1
 8005b9e:	3a01      	subs	r2, #1
 8005ba0:	0652      	lsls	r2, r2, #25
 8005ba2:	4311      	orrs	r1, r2
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ba8:	0912      	lsrs	r2, r2, #4
 8005baa:	0452      	lsls	r2, r2, #17
 8005bac:	430a      	orrs	r2, r1
 8005bae:	4925      	ldr	r1, [pc, #148]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005bb4:	4b23      	ldr	r3, [pc, #140]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a22      	ldr	r2, [pc, #136]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bc0:	4b20      	ldr	r3, [pc, #128]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	4a1f      	ldr	r2, [pc, #124]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bcc:	f7fc fee4 	bl	8002998 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd4:	f7fc fee0 	bl	8002998 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e066      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005be6:	4b17      	ldr	r3, [pc, #92]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f0      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bf2:	e05e      	b.n	8005cb2 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e05d      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf8:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d156      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c04:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a0e      	ldr	r2, [pc, #56]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c10:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	4a0b      	ldr	r2, [pc, #44]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c1c:	f7fc febc 	bl	8002998 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c24:	f7fc feb8 	bl	8002998 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e03e      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c36:	4b03      	ldr	r3, [pc, #12]	; (8005c44 <HAL_RCC_OscConfig+0x754>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f0      	beq.n	8005c24 <HAL_RCC_OscConfig+0x734>
 8005c42:	e036      	b.n	8005cb2 <HAL_RCC_OscConfig+0x7c2>
 8005c44:	40021000 	.word	0x40021000
 8005c48:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b0c      	cmp	r3, #12
 8005c50:	d02d      	beq.n	8005cae <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c52:	4b1a      	ldr	r3, [pc, #104]	; (8005cbc <HAL_RCC_OscConfig+0x7cc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a19      	ldr	r2, [pc, #100]	; (8005cbc <HAL_RCC_OscConfig+0x7cc>)
 8005c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c5c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005c5e:	4b17      	ldr	r3, [pc, #92]	; (8005cbc <HAL_RCC_OscConfig+0x7cc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d105      	bne.n	8005c76 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005c6a:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <HAL_RCC_OscConfig+0x7cc>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <HAL_RCC_OscConfig+0x7cc>)
 8005c70:	f023 0303 	bic.w	r3, r3, #3
 8005c74:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c76:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <HAL_RCC_OscConfig+0x7cc>)
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	4a10      	ldr	r2, [pc, #64]	; (8005cbc <HAL_RCC_OscConfig+0x7cc>)
 8005c7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c86:	f7fc fe87 	bl	8002998 <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c8e:	f7fc fe83 	bl	8002998 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e009      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ca0:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <HAL_RCC_OscConfig+0x7cc>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f0      	bne.n	8005c8e <HAL_RCC_OscConfig+0x79e>
 8005cac:	e001      	b.n	8005cb2 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3720      	adds	r7, #32
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40021000 	.word	0x40021000

08005cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0c8      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cd4:	4b66      	ldr	r3, [pc, #408]	; (8005e70 <HAL_RCC_ClockConfig+0x1b0>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d910      	bls.n	8005d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce2:	4b63      	ldr	r3, [pc, #396]	; (8005e70 <HAL_RCC_ClockConfig+0x1b0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 0207 	bic.w	r2, r3, #7
 8005cea:	4961      	ldr	r1, [pc, #388]	; (8005e70 <HAL_RCC_ClockConfig+0x1b0>)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf2:	4b5f      	ldr	r3, [pc, #380]	; (8005e70 <HAL_RCC_ClockConfig+0x1b0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0b0      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d04c      	beq.n	8005daa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d107      	bne.n	8005d28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d18:	4b56      	ldr	r3, [pc, #344]	; (8005e74 <HAL_RCC_ClockConfig+0x1b4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d121      	bne.n	8005d68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e09e      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d107      	bne.n	8005d40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d30:	4b50      	ldr	r3, [pc, #320]	; (8005e74 <HAL_RCC_ClockConfig+0x1b4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d115      	bne.n	8005d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e092      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d107      	bne.n	8005d58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d48:	4b4a      	ldr	r3, [pc, #296]	; (8005e74 <HAL_RCC_ClockConfig+0x1b4>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d109      	bne.n	8005d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e086      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d58:	4b46      	ldr	r3, [pc, #280]	; (8005e74 <HAL_RCC_ClockConfig+0x1b4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e07e      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d68:	4b42      	ldr	r3, [pc, #264]	; (8005e74 <HAL_RCC_ClockConfig+0x1b4>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f023 0203 	bic.w	r2, r3, #3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	493f      	ldr	r1, [pc, #252]	; (8005e74 <HAL_RCC_ClockConfig+0x1b4>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d7a:	f7fc fe0d 	bl	8002998 <HAL_GetTick>
 8005d7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d80:	e00a      	b.n	8005d98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d82:	f7fc fe09 	bl	8002998 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e066      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d98:	4b36      	ldr	r3, [pc, #216]	; (8005e74 <HAL_RCC_ClockConfig+0x1b4>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 020c 	and.w	r2, r3, #12
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d1eb      	bne.n	8005d82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db6:	4b2f      	ldr	r3, [pc, #188]	; (8005e74 <HAL_RCC_ClockConfig+0x1b4>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	492c      	ldr	r1, [pc, #176]	; (8005e74 <HAL_RCC_ClockConfig+0x1b4>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc8:	4b29      	ldr	r3, [pc, #164]	; (8005e70 <HAL_RCC_ClockConfig+0x1b0>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d210      	bcs.n	8005df8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd6:	4b26      	ldr	r3, [pc, #152]	; (8005e70 <HAL_RCC_ClockConfig+0x1b0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f023 0207 	bic.w	r2, r3, #7
 8005dde:	4924      	ldr	r1, [pc, #144]	; (8005e70 <HAL_RCC_ClockConfig+0x1b0>)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de6:	4b22      	ldr	r3, [pc, #136]	; (8005e70 <HAL_RCC_ClockConfig+0x1b0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e036      	b.n	8005e66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d008      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e04:	4b1b      	ldr	r3, [pc, #108]	; (8005e74 <HAL_RCC_ClockConfig+0x1b4>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	4918      	ldr	r1, [pc, #96]	; (8005e74 <HAL_RCC_ClockConfig+0x1b4>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e22:	4b14      	ldr	r3, [pc, #80]	; (8005e74 <HAL_RCC_ClockConfig+0x1b4>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	4910      	ldr	r1, [pc, #64]	; (8005e74 <HAL_RCC_ClockConfig+0x1b4>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e36:	f000 f825 	bl	8005e84 <HAL_RCC_GetSysClockFreq>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	4b0d      	ldr	r3, [pc, #52]	; (8005e74 <HAL_RCC_ClockConfig+0x1b4>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	091b      	lsrs	r3, r3, #4
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	490c      	ldr	r1, [pc, #48]	; (8005e78 <HAL_RCC_ClockConfig+0x1b8>)
 8005e48:	5ccb      	ldrb	r3, [r1, r3]
 8005e4a:	f003 031f 	and.w	r3, r3, #31
 8005e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e52:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e56:	4b0a      	ldr	r3, [pc, #40]	; (8005e80 <HAL_RCC_ClockConfig+0x1c0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fc fd4c 	bl	80028f8 <HAL_InitTick>
 8005e60:	4603      	mov	r3, r0
 8005e62:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e64:	7afb      	ldrb	r3, [r7, #11]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40022000 	.word	0x40022000
 8005e74:	40021000 	.word	0x40021000
 8005e78:	0800ec84 	.word	0x0800ec84
 8005e7c:	20000008 	.word	0x20000008
 8005e80:	2000000c 	.word	0x2000000c

08005e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b089      	sub	sp, #36	; 0x24
 8005e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e92:	4b3e      	ldr	r3, [pc, #248]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 030c 	and.w	r3, r3, #12
 8005e9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e9c:	4b3b      	ldr	r3, [pc, #236]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2b0c      	cmp	r3, #12
 8005eb0:	d121      	bne.n	8005ef6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d11e      	bne.n	8005ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005eb8:	4b34      	ldr	r3, [pc, #208]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d107      	bne.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ec4:	4b31      	ldr	r3, [pc, #196]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eca:	0a1b      	lsrs	r3, r3, #8
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	61fb      	str	r3, [r7, #28]
 8005ed2:	e005      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ed4:	4b2d      	ldr	r3, [pc, #180]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	091b      	lsrs	r3, r3, #4
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ee0:	4a2b      	ldr	r2, [pc, #172]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10d      	bne.n	8005f0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ef4:	e00a      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d102      	bne.n	8005f02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005efc:	4b25      	ldr	r3, [pc, #148]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8005efe:	61bb      	str	r3, [r7, #24]
 8005f00:	e004      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d101      	bne.n	8005f0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f08:	4b23      	ldr	r3, [pc, #140]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	2b0c      	cmp	r3, #12
 8005f10:	d134      	bne.n	8005f7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f12:	4b1e      	ldr	r3, [pc, #120]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d003      	beq.n	8005f2a <HAL_RCC_GetSysClockFreq+0xa6>
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d003      	beq.n	8005f30 <HAL_RCC_GetSysClockFreq+0xac>
 8005f28:	e005      	b.n	8005f36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f2a:	4b1a      	ldr	r3, [pc, #104]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f2c:	617b      	str	r3, [r7, #20]
      break;
 8005f2e:	e005      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f30:	4b19      	ldr	r3, [pc, #100]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f32:	617b      	str	r3, [r7, #20]
      break;
 8005f34:	e002      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	617b      	str	r3, [r7, #20]
      break;
 8005f3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f3c:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	091b      	lsrs	r3, r3, #4
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	3301      	adds	r3, #1
 8005f48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f4a:	4b10      	ldr	r3, [pc, #64]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	0a1b      	lsrs	r3, r3, #8
 8005f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	fb03 f202 	mul.w	r2, r3, r2
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f62:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	0e5b      	lsrs	r3, r3, #25
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3724      	adds	r7, #36	; 0x24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	0800ec9c 	.word	0x0800ec9c
 8005f94:	00f42400 	.word	0x00f42400
 8005f98:	007a1200 	.word	0x007a1200

08005f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fa0:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20000008 	.word	0x20000008

08005fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fb8:	f7ff fff0 	bl	8005f9c <HAL_RCC_GetHCLKFreq>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	0a1b      	lsrs	r3, r3, #8
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	4904      	ldr	r1, [pc, #16]	; (8005fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fca:	5ccb      	ldrb	r3, [r1, r3]
 8005fcc:	f003 031f 	and.w	r3, r3, #31
 8005fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	0800ec94 	.word	0x0800ec94

08005fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fe4:	f7ff ffda 	bl	8005f9c <HAL_RCC_GetHCLKFreq>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	4b06      	ldr	r3, [pc, #24]	; (8006004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	0adb      	lsrs	r3, r3, #11
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	4904      	ldr	r1, [pc, #16]	; (8006008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ff6:	5ccb      	ldrb	r3, [r1, r3]
 8005ff8:	f003 031f 	and.w	r3, r3, #31
 8005ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006000:	4618      	mov	r0, r3
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40021000 	.word	0x40021000
 8006008:	0800ec94 	.word	0x0800ec94

0800600c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006014:	2300      	movs	r3, #0
 8006016:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006018:	4b2a      	ldr	r3, [pc, #168]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800601a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006024:	f7fe fd20 	bl	8004a68 <HAL_PWREx_GetVoltageRange>
 8006028:	6178      	str	r0, [r7, #20]
 800602a:	e014      	b.n	8006056 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800602c:	4b25      	ldr	r3, [pc, #148]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800602e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006030:	4a24      	ldr	r2, [pc, #144]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006036:	6593      	str	r3, [r2, #88]	; 0x58
 8006038:	4b22      	ldr	r3, [pc, #136]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800603a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006044:	f7fe fd10 	bl	8004a68 <HAL_PWREx_GetVoltageRange>
 8006048:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800604a:	4b1e      	ldr	r3, [pc, #120]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800604c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604e:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006054:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800605c:	d10b      	bne.n	8006076 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b80      	cmp	r3, #128	; 0x80
 8006062:	d919      	bls.n	8006098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2ba0      	cmp	r3, #160	; 0xa0
 8006068:	d902      	bls.n	8006070 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800606a:	2302      	movs	r3, #2
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	e013      	b.n	8006098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006070:	2301      	movs	r3, #1
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	e010      	b.n	8006098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b80      	cmp	r3, #128	; 0x80
 800607a:	d902      	bls.n	8006082 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800607c:	2303      	movs	r3, #3
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	e00a      	b.n	8006098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b80      	cmp	r3, #128	; 0x80
 8006086:	d102      	bne.n	800608e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006088:	2302      	movs	r3, #2
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	e004      	b.n	8006098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b70      	cmp	r3, #112	; 0x70
 8006092:	d101      	bne.n	8006098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006094:	2301      	movs	r3, #1
 8006096:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006098:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f023 0207 	bic.w	r2, r3, #7
 80060a0:	4909      	ldr	r1, [pc, #36]	; (80060c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060a8:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d001      	beq.n	80060ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	40021000 	.word	0x40021000
 80060c8:	40022000 	.word	0x40022000

080060cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060d4:	2300      	movs	r3, #0
 80060d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060d8:	2300      	movs	r3, #0
 80060da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d041      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060f0:	d02a      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060f6:	d824      	bhi.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060fc:	d008      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006102:	d81e      	bhi.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800610c:	d010      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800610e:	e018      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006110:	4b86      	ldr	r3, [pc, #536]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	4a85      	ldr	r2, [pc, #532]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800611a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800611c:	e015      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3304      	adds	r3, #4
 8006122:	2100      	movs	r1, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fabb 	bl	80066a0 <RCCEx_PLLSAI1_Config>
 800612a:	4603      	mov	r3, r0
 800612c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800612e:	e00c      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3320      	adds	r3, #32
 8006134:	2100      	movs	r1, #0
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fba6 	bl	8006888 <RCCEx_PLLSAI2_Config>
 800613c:	4603      	mov	r3, r0
 800613e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006140:	e003      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	74fb      	strb	r3, [r7, #19]
      break;
 8006146:	e000      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800614a:	7cfb      	ldrb	r3, [r7, #19]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006150:	4b76      	ldr	r3, [pc, #472]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006156:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800615e:	4973      	ldr	r1, [pc, #460]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006166:	e001      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006168:	7cfb      	ldrb	r3, [r7, #19]
 800616a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d041      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800617c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006180:	d02a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006182:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006186:	d824      	bhi.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800618c:	d008      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800618e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006192:	d81e      	bhi.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800619c:	d010      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800619e:	e018      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061a0:	4b62      	ldr	r3, [pc, #392]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4a61      	ldr	r2, [pc, #388]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061ac:	e015      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3304      	adds	r3, #4
 80061b2:	2100      	movs	r1, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fa73 	bl	80066a0 <RCCEx_PLLSAI1_Config>
 80061ba:	4603      	mov	r3, r0
 80061bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061be:	e00c      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3320      	adds	r3, #32
 80061c4:	2100      	movs	r1, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fb5e 	bl	8006888 <RCCEx_PLLSAI2_Config>
 80061cc:	4603      	mov	r3, r0
 80061ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061d0:	e003      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	74fb      	strb	r3, [r7, #19]
      break;
 80061d6:	e000      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80061d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061da:	7cfb      	ldrb	r3, [r7, #19]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10b      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061e0:	4b52      	ldr	r3, [pc, #328]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ee:	494f      	ldr	r1, [pc, #316]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061f6:	e001      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	7cfb      	ldrb	r3, [r7, #19]
 80061fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 80a0 	beq.w	800634a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800620a:	2300      	movs	r3, #0
 800620c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800620e:	4b47      	ldr	r3, [pc, #284]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800621e:	2300      	movs	r3, #0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00d      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006224:	4b41      	ldr	r3, [pc, #260]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006228:	4a40      	ldr	r2, [pc, #256]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800622a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622e:	6593      	str	r3, [r2, #88]	; 0x58
 8006230:	4b3e      	ldr	r3, [pc, #248]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006238:	60bb      	str	r3, [r7, #8]
 800623a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800623c:	2301      	movs	r3, #1
 800623e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006240:	4b3b      	ldr	r3, [pc, #236]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a3a      	ldr	r2, [pc, #232]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800624c:	f7fc fba4 	bl	8002998 <HAL_GetTick>
 8006250:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006252:	e009      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006254:	f7fc fba0 	bl	8002998 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b02      	cmp	r3, #2
 8006260:	d902      	bls.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	74fb      	strb	r3, [r7, #19]
        break;
 8006266:	e005      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006268:	4b31      	ldr	r3, [pc, #196]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0ef      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006274:	7cfb      	ldrb	r3, [r7, #19]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d15c      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800627a:	4b2c      	ldr	r3, [pc, #176]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800627c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006284:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01f      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	429a      	cmp	r2, r3
 8006296:	d019      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006298:	4b24      	ldr	r3, [pc, #144]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062a4:	4b21      	ldr	r3, [pc, #132]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062aa:	4a20      	ldr	r2, [pc, #128]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062b4:	4b1d      	ldr	r3, [pc, #116]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ba:	4a1c      	ldr	r2, [pc, #112]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062c4:	4a19      	ldr	r2, [pc, #100]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d016      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d6:	f7fc fb5f 	bl	8002998 <HAL_GetTick>
 80062da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062dc:	e00b      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062de:	f7fc fb5b 	bl	8002998 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d902      	bls.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	74fb      	strb	r3, [r7, #19]
            break;
 80062f4:	e006      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f6:	4b0d      	ldr	r3, [pc, #52]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0ec      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006304:	7cfb      	ldrb	r3, [r7, #19]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10c      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800630a:	4b08      	ldr	r3, [pc, #32]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800631a:	4904      	ldr	r1, [pc, #16]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800631c:	4313      	orrs	r3, r2
 800631e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006322:	e009      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006324:	7cfb      	ldrb	r3, [r7, #19]
 8006326:	74bb      	strb	r3, [r7, #18]
 8006328:	e006      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800632a:	bf00      	nop
 800632c:	40021000 	.word	0x40021000
 8006330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006334:	7cfb      	ldrb	r3, [r7, #19]
 8006336:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006338:	7c7b      	ldrb	r3, [r7, #17]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d105      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800633e:	4b9e      	ldr	r3, [pc, #632]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006342:	4a9d      	ldr	r2, [pc, #628]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006348:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006356:	4b98      	ldr	r3, [pc, #608]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635c:	f023 0203 	bic.w	r2, r3, #3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	4994      	ldr	r1, [pc, #592]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006378:	4b8f      	ldr	r3, [pc, #572]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637e:	f023 020c 	bic.w	r2, r3, #12
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006386:	498c      	ldr	r1, [pc, #560]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0304 	and.w	r3, r3, #4
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800639a:	4b87      	ldr	r3, [pc, #540]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	4983      	ldr	r1, [pc, #524]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063bc:	4b7e      	ldr	r3, [pc, #504]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ca:	497b      	ldr	r1, [pc, #492]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0310 	and.w	r3, r3, #16
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063de:	4b76      	ldr	r3, [pc, #472]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ec:	4972      	ldr	r1, [pc, #456]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006400:	4b6d      	ldr	r3, [pc, #436]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006406:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800640e:	496a      	ldr	r1, [pc, #424]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006422:	4b65      	ldr	r3, [pc, #404]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006428:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006430:	4961      	ldr	r1, [pc, #388]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006444:	4b5c      	ldr	r3, [pc, #368]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006452:	4959      	ldr	r1, [pc, #356]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006466:	4b54      	ldr	r3, [pc, #336]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006474:	4950      	ldr	r1, [pc, #320]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006476:	4313      	orrs	r3, r2
 8006478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006488:	4b4b      	ldr	r3, [pc, #300]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800648a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	4948      	ldr	r1, [pc, #288]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006498:	4313      	orrs	r3, r2
 800649a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064aa:	4b43      	ldr	r3, [pc, #268]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b8:	493f      	ldr	r1, [pc, #252]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d028      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064cc:	4b3a      	ldr	r3, [pc, #232]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064da:	4937      	ldr	r1, [pc, #220]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064ea:	d106      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064ec:	4b32      	ldr	r3, [pc, #200]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	4a31      	ldr	r2, [pc, #196]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064f6:	60d3      	str	r3, [r2, #12]
 80064f8:	e011      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006502:	d10c      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3304      	adds	r3, #4
 8006508:	2101      	movs	r1, #1
 800650a:	4618      	mov	r0, r3
 800650c:	f000 f8c8 	bl	80066a0 <RCCEx_PLLSAI1_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006514:	7cfb      	ldrb	r3, [r7, #19]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800651a:	7cfb      	ldrb	r3, [r7, #19]
 800651c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d028      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800652a:	4b23      	ldr	r3, [pc, #140]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006530:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006538:	491f      	ldr	r1, [pc, #124]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800653a:	4313      	orrs	r3, r2
 800653c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006548:	d106      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800654a:	4b1b      	ldr	r3, [pc, #108]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	4a1a      	ldr	r2, [pc, #104]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006554:	60d3      	str	r3, [r2, #12]
 8006556:	e011      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006560:	d10c      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3304      	adds	r3, #4
 8006566:	2101      	movs	r1, #1
 8006568:	4618      	mov	r0, r3
 800656a:	f000 f899 	bl	80066a0 <RCCEx_PLLSAI1_Config>
 800656e:	4603      	mov	r3, r0
 8006570:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006572:	7cfb      	ldrb	r3, [r7, #19]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006578:	7cfb      	ldrb	r3, [r7, #19]
 800657a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d02b      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006588:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800658a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006596:	4908      	ldr	r1, [pc, #32]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006598:	4313      	orrs	r3, r2
 800659a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065a6:	d109      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065a8:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	4a02      	ldr	r2, [pc, #8]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065b2:	60d3      	str	r3, [r2, #12]
 80065b4:	e014      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80065b6:	bf00      	nop
 80065b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065c4:	d10c      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3304      	adds	r3, #4
 80065ca:	2101      	movs	r1, #1
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 f867 	bl	80066a0 <RCCEx_PLLSAI1_Config>
 80065d2:	4603      	mov	r3, r0
 80065d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065d6:	7cfb      	ldrb	r3, [r7, #19]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80065dc:	7cfb      	ldrb	r3, [r7, #19]
 80065de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d02f      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065ec:	4b2b      	ldr	r3, [pc, #172]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065fa:	4928      	ldr	r1, [pc, #160]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800660a:	d10d      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3304      	adds	r3, #4
 8006610:	2102      	movs	r1, #2
 8006612:	4618      	mov	r0, r3
 8006614:	f000 f844 	bl	80066a0 <RCCEx_PLLSAI1_Config>
 8006618:	4603      	mov	r3, r0
 800661a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800661c:	7cfb      	ldrb	r3, [r7, #19]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d014      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006622:	7cfb      	ldrb	r3, [r7, #19]
 8006624:	74bb      	strb	r3, [r7, #18]
 8006626:	e011      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800662c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006630:	d10c      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3320      	adds	r3, #32
 8006636:	2102      	movs	r1, #2
 8006638:	4618      	mov	r0, r3
 800663a:	f000 f925 	bl	8006888 <RCCEx_PLLSAI2_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006642:	7cfb      	ldrb	r3, [r7, #19]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006648:	7cfb      	ldrb	r3, [r7, #19]
 800664a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006658:	4b10      	ldr	r3, [pc, #64]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006666:	490d      	ldr	r1, [pc, #52]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006668:	4313      	orrs	r3, r2
 800666a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800667a:	4b08      	ldr	r3, [pc, #32]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800667c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006680:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800668a:	4904      	ldr	r1, [pc, #16]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006692:	7cbb      	ldrb	r3, [r7, #18]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	40021000 	.word	0x40021000

080066a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066ae:	4b75      	ldr	r3, [pc, #468]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d018      	beq.n	80066ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80066ba:	4b72      	ldr	r3, [pc, #456]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f003 0203 	and.w	r2, r3, #3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d10d      	bne.n	80066e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
       ||
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80066d2:	4b6c      	ldr	r3, [pc, #432]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	091b      	lsrs	r3, r3, #4
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
       ||
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d047      	beq.n	8006776 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	73fb      	strb	r3, [r7, #15]
 80066ea:	e044      	b.n	8006776 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d018      	beq.n	8006726 <RCCEx_PLLSAI1_Config+0x86>
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d825      	bhi.n	8006744 <RCCEx_PLLSAI1_Config+0xa4>
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d002      	beq.n	8006702 <RCCEx_PLLSAI1_Config+0x62>
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d009      	beq.n	8006714 <RCCEx_PLLSAI1_Config+0x74>
 8006700:	e020      	b.n	8006744 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006702:	4b60      	ldr	r3, [pc, #384]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d11d      	bne.n	800674a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006712:	e01a      	b.n	800674a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006714:	4b5b      	ldr	r3, [pc, #364]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800671c:	2b00      	cmp	r3, #0
 800671e:	d116      	bne.n	800674e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006724:	e013      	b.n	800674e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006726:	4b57      	ldr	r3, [pc, #348]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10f      	bne.n	8006752 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006732:	4b54      	ldr	r3, [pc, #336]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d109      	bne.n	8006752 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006742:	e006      	b.n	8006752 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	73fb      	strb	r3, [r7, #15]
      break;
 8006748:	e004      	b.n	8006754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800674a:	bf00      	nop
 800674c:	e002      	b.n	8006754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800674e:	bf00      	nop
 8006750:	e000      	b.n	8006754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006752:	bf00      	nop
    }

    if(status == HAL_OK)
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10d      	bne.n	8006776 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800675a:	4b4a      	ldr	r3, [pc, #296]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6819      	ldr	r1, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	3b01      	subs	r3, #1
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	430b      	orrs	r3, r1
 8006770:	4944      	ldr	r1, [pc, #272]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006772:	4313      	orrs	r3, r2
 8006774:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006776:	7bfb      	ldrb	r3, [r7, #15]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d17d      	bne.n	8006878 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800677c:	4b41      	ldr	r3, [pc, #260]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a40      	ldr	r2, [pc, #256]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006782:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006788:	f7fc f906 	bl	8002998 <HAL_GetTick>
 800678c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800678e:	e009      	b.n	80067a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006790:	f7fc f902 	bl	8002998 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b02      	cmp	r3, #2
 800679c:	d902      	bls.n	80067a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	73fb      	strb	r3, [r7, #15]
        break;
 80067a2:	e005      	b.n	80067b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80067a4:	4b37      	ldr	r3, [pc, #220]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1ef      	bne.n	8006790 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d160      	bne.n	8006878 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d111      	bne.n	80067e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067bc:	4b31      	ldr	r3, [pc, #196]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80067c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6892      	ldr	r2, [r2, #8]
 80067cc:	0211      	lsls	r1, r2, #8
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	68d2      	ldr	r2, [r2, #12]
 80067d2:	0912      	lsrs	r2, r2, #4
 80067d4:	0452      	lsls	r2, r2, #17
 80067d6:	430a      	orrs	r2, r1
 80067d8:	492a      	ldr	r1, [pc, #168]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	610b      	str	r3, [r1, #16]
 80067de:	e027      	b.n	8006830 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d112      	bne.n	800680c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067e6:	4b27      	ldr	r3, [pc, #156]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80067ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6892      	ldr	r2, [r2, #8]
 80067f6:	0211      	lsls	r1, r2, #8
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6912      	ldr	r2, [r2, #16]
 80067fc:	0852      	lsrs	r2, r2, #1
 80067fe:	3a01      	subs	r2, #1
 8006800:	0552      	lsls	r2, r2, #21
 8006802:	430a      	orrs	r2, r1
 8006804:	491f      	ldr	r1, [pc, #124]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006806:	4313      	orrs	r3, r2
 8006808:	610b      	str	r3, [r1, #16]
 800680a:	e011      	b.n	8006830 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800680c:	4b1d      	ldr	r3, [pc, #116]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006814:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	6892      	ldr	r2, [r2, #8]
 800681c:	0211      	lsls	r1, r2, #8
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6952      	ldr	r2, [r2, #20]
 8006822:	0852      	lsrs	r2, r2, #1
 8006824:	3a01      	subs	r2, #1
 8006826:	0652      	lsls	r2, r2, #25
 8006828:	430a      	orrs	r2, r1
 800682a:	4916      	ldr	r1, [pc, #88]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800682c:	4313      	orrs	r3, r2
 800682e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006830:	4b14      	ldr	r3, [pc, #80]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a13      	ldr	r2, [pc, #76]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006836:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800683a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683c:	f7fc f8ac 	bl	8002998 <HAL_GetTick>
 8006840:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006842:	e009      	b.n	8006858 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006844:	f7fc f8a8 	bl	8002998 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d902      	bls.n	8006858 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	73fb      	strb	r3, [r7, #15]
          break;
 8006856:	e005      	b.n	8006864 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006858:	4b0a      	ldr	r3, [pc, #40]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0ef      	beq.n	8006844 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800686a:	4b06      	ldr	r3, [pc, #24]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	4904      	ldr	r1, [pc, #16]	; (8006884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006874:	4313      	orrs	r3, r2
 8006876:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006878:	7bfb      	ldrb	r3, [r7, #15]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	40021000 	.word	0x40021000

08006888 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006896:	4b6a      	ldr	r3, [pc, #424]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d018      	beq.n	80068d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80068a2:	4b67      	ldr	r3, [pc, #412]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f003 0203 	and.w	r2, r3, #3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d10d      	bne.n	80068ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
       ||
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d009      	beq.n	80068ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80068ba:	4b61      	ldr	r3, [pc, #388]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	091b      	lsrs	r3, r3, #4
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
       ||
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d047      	beq.n	800695e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	73fb      	strb	r3, [r7, #15]
 80068d2:	e044      	b.n	800695e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d018      	beq.n	800690e <RCCEx_PLLSAI2_Config+0x86>
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d825      	bhi.n	800692c <RCCEx_PLLSAI2_Config+0xa4>
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d002      	beq.n	80068ea <RCCEx_PLLSAI2_Config+0x62>
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d009      	beq.n	80068fc <RCCEx_PLLSAI2_Config+0x74>
 80068e8:	e020      	b.n	800692c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068ea:	4b55      	ldr	r3, [pc, #340]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d11d      	bne.n	8006932 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068fa:	e01a      	b.n	8006932 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068fc:	4b50      	ldr	r3, [pc, #320]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006904:	2b00      	cmp	r3, #0
 8006906:	d116      	bne.n	8006936 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800690c:	e013      	b.n	8006936 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800690e:	4b4c      	ldr	r3, [pc, #304]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10f      	bne.n	800693a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800691a:	4b49      	ldr	r3, [pc, #292]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800692a:	e006      	b.n	800693a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
      break;
 8006930:	e004      	b.n	800693c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006932:	bf00      	nop
 8006934:	e002      	b.n	800693c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006936:	bf00      	nop
 8006938:	e000      	b.n	800693c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800693a:	bf00      	nop
    }

    if(status == HAL_OK)
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10d      	bne.n	800695e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006942:	4b3f      	ldr	r3, [pc, #252]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6819      	ldr	r1, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	3b01      	subs	r3, #1
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	430b      	orrs	r3, r1
 8006958:	4939      	ldr	r1, [pc, #228]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800695a:	4313      	orrs	r3, r2
 800695c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d167      	bne.n	8006a34 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006964:	4b36      	ldr	r3, [pc, #216]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a35      	ldr	r2, [pc, #212]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800696a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800696e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006970:	f7fc f812 	bl	8002998 <HAL_GetTick>
 8006974:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006976:	e009      	b.n	800698c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006978:	f7fc f80e 	bl	8002998 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b02      	cmp	r3, #2
 8006984:	d902      	bls.n	800698c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	73fb      	strb	r3, [r7, #15]
        break;
 800698a:	e005      	b.n	8006998 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800698c:	4b2c      	ldr	r3, [pc, #176]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1ef      	bne.n	8006978 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d14a      	bne.n	8006a34 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d111      	bne.n	80069c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069a4:	4b26      	ldr	r3, [pc, #152]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80069ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6892      	ldr	r2, [r2, #8]
 80069b4:	0211      	lsls	r1, r2, #8
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	68d2      	ldr	r2, [r2, #12]
 80069ba:	0912      	lsrs	r2, r2, #4
 80069bc:	0452      	lsls	r2, r2, #17
 80069be:	430a      	orrs	r2, r1
 80069c0:	491f      	ldr	r1, [pc, #124]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	614b      	str	r3, [r1, #20]
 80069c6:	e011      	b.n	80069ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069c8:	4b1d      	ldr	r3, [pc, #116]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80069d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6892      	ldr	r2, [r2, #8]
 80069d8:	0211      	lsls	r1, r2, #8
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6912      	ldr	r2, [r2, #16]
 80069de:	0852      	lsrs	r2, r2, #1
 80069e0:	3a01      	subs	r2, #1
 80069e2:	0652      	lsls	r2, r2, #25
 80069e4:	430a      	orrs	r2, r1
 80069e6:	4916      	ldr	r1, [pc, #88]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80069ec:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f8:	f7fb ffce 	bl	8002998 <HAL_GetTick>
 80069fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069fe:	e009      	b.n	8006a14 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a00:	f7fb ffca 	bl	8002998 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d902      	bls.n	8006a14 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	73fb      	strb	r3, [r7, #15]
          break;
 8006a12:	e005      	b.n	8006a20 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a14:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0ef      	beq.n	8006a00 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006a26:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a28:	695a      	ldr	r2, [r3, #20]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	4904      	ldr	r1, [pc, #16]	; (8006a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40021000 	.word	0x40021000

08006a44 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d06c      	beq.n	8006b30 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fb fbe0 	bl	8002230 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	22ca      	movs	r2, #202	; 0xca
 8006a7e:	625a      	str	r2, [r3, #36]	; 0x24
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2253      	movs	r2, #83	; 0x53
 8006a86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fbcb 	bl	8007224 <RTC_EnterInitMode>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d14b      	bne.n	8006b30 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	6812      	ldr	r2, [r2, #0]
 8006aa2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aaa:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6899      	ldr	r1, [r3, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	68d2      	ldr	r2, [r2, #12]
 8006ad2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6919      	ldr	r1, [r3, #16]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	041a      	lsls	r2, r3, #16
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fbcf 	bl	800728c <RTC_ExitInitMode>
 8006aee:	4603      	mov	r3, r0
 8006af0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d11b      	bne.n	8006b30 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0203 	bic.w	r2, r2, #3
 8006b06:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69da      	ldr	r2, [r3, #28]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	22ff      	movs	r2, #255	; 0xff
 8006b26:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b3a:	b590      	push	{r4, r7, lr}
 8006b3c:	b087      	sub	sp, #28
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <HAL_RTC_SetTime+0x1a>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e08b      	b.n	8006c6c <HAL_RTC_SetTime+0x132>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	22ca      	movs	r2, #202	; 0xca
 8006b6a:	625a      	str	r2, [r3, #36]	; 0x24
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2253      	movs	r2, #83	; 0x53
 8006b72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 fb55 	bl	8007224 <RTC_EnterInitMode>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006b7e:	7cfb      	ldrb	r3, [r7, #19]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d163      	bne.n	8006c4c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d126      	bne.n	8006bd8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d102      	bne.n	8006b9e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fbb0 	bl	8007308 <RTC_ByteToBcd2>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fba9 	bl	8007308 <RTC_ByteToBcd2>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bba:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	789b      	ldrb	r3, [r3, #2]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 fba1 	bl	8007308 <RTC_ByteToBcd2>
 8006bc6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bc8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	78db      	ldrb	r3, [r3, #3]
 8006bd0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	e018      	b.n	8006c0a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d102      	bne.n	8006bec <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2200      	movs	r2, #0
 8006bea:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	785b      	ldrb	r3, [r3, #1]
 8006bf6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bf8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bfe:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	78db      	ldrb	r3, [r3, #3]
 8006c04:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006c14:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c18:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c28:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6899      	ldr	r1, [r3, #8]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	68da      	ldr	r2, [r3, #12]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 fb22 	bl	800728c <RTC_ExitInitMode>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	22ff      	movs	r2, #255	; 0xff
 8006c52:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006c54:	7cfb      	ldrb	r3, [r7, #19]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d103      	bne.n	8006c62 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006c6a:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd90      	pop	{r4, r7, pc}

08006c74 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006ca2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	0c1b      	lsrs	r3, r3, #16
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	0a1b      	lsrs	r3, r3, #8
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	0d9b      	lsrs	r3, r3, #22
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d11a      	bne.n	8006d22 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fb29 	bl	8007348 <RTC_Bcd2ToByte>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	785b      	ldrb	r3, [r3, #1]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fb20 	bl	8007348 <RTC_Bcd2ToByte>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	789b      	ldrb	r3, [r3, #2]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 fb17 	bl	8007348 <RTC_Bcd2ToByte>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d2c:	b590      	push	{r4, r7, lr}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_RTC_SetDate+0x1a>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e075      	b.n	8006e32 <HAL_RTC_SetDate+0x106>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2202      	movs	r2, #2
 8006d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10e      	bne.n	8006d7a <HAL_RTC_SetDate+0x4e>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	785b      	ldrb	r3, [r3, #1]
 8006d60:	f003 0310 	and.w	r3, r3, #16
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	785b      	ldrb	r3, [r3, #1]
 8006d6c:	f023 0310 	bic.w	r3, r3, #16
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	330a      	adds	r3, #10
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d11c      	bne.n	8006dba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	78db      	ldrb	r3, [r3, #3]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fabf 	bl	8007308 <RTC_ByteToBcd2>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fab8 	bl	8007308 <RTC_ByteToBcd2>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006d9c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	789b      	ldrb	r3, [r3, #2]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fab0 	bl	8007308 <RTC_ByteToBcd2>
 8006da8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006daa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	e00e      	b.n	8006dd8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	78db      	ldrb	r3, [r3, #3]
 8006dbe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	785b      	ldrb	r3, [r3, #1]
 8006dc4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006dc6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006dcc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	22ca      	movs	r2, #202	; 0xca
 8006dde:	625a      	str	r2, [r3, #36]	; 0x24
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2253      	movs	r2, #83	; 0x53
 8006de6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fa1b 	bl	8007224 <RTC_EnterInitMode>
 8006dee:	4603      	mov	r3, r0
 8006df0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006df2:	7cfb      	ldrb	r3, [r7, #19]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10c      	bne.n	8006e12 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e06:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 fa3f 	bl	800728c <RTC_ExitInitMode>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	22ff      	movs	r2, #255	; 0xff
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006e1a:	7cfb      	ldrb	r3, [r7, #19]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d103      	bne.n	8006e28 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006e30:	7cfb      	ldrb	r3, [r7, #19]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd90      	pop	{r4, r7, pc}

08006e3a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b086      	sub	sp, #24
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e54:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	0c1b      	lsrs	r3, r3, #16
 8006e5a:	b2da      	uxtb	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	0a1b      	lsrs	r3, r3, #8
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	0b5b      	lsrs	r3, r3, #13
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d11a      	bne.n	8006eca <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	78db      	ldrb	r3, [r3, #3]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 fa55 	bl	8007348 <RTC_Bcd2ToByte>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	785b      	ldrb	r3, [r3, #1]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fa4c 	bl	8007348 <RTC_Bcd2ToByte>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	789b      	ldrb	r3, [r3, #2]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 fa43 	bl	8007348 <RTC_Bcd2ToByte>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006ed4:	b590      	push	{r4, r7, lr}
 8006ed6:	b089      	sub	sp, #36	; 0x24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d101      	bne.n	8006eee <HAL_RTC_SetAlarm_IT+0x1a>
 8006eea:	2302      	movs	r3, #2
 8006eec:	e127      	b.n	800713e <HAL_RTC_SetAlarm_IT+0x26a>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2202      	movs	r2, #2
 8006efa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d137      	bne.n	8006f74 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d102      	bne.n	8006f18 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2200      	movs	r2, #0
 8006f16:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 f9f3 	bl	8007308 <RTC_ByteToBcd2>
 8006f22:	4603      	mov	r3, r0
 8006f24:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	785b      	ldrb	r3, [r3, #1]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 f9ec 	bl	8007308 <RTC_ByteToBcd2>
 8006f30:	4603      	mov	r3, r0
 8006f32:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f34:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	789b      	ldrb	r3, [r3, #2]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 f9e4 	bl	8007308 <RTC_ByteToBcd2>
 8006f40:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f42:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	78db      	ldrb	r3, [r3, #3]
 8006f4a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f4c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 f9d6 	bl	8007308 <RTC_ByteToBcd2>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f60:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f68:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	e023      	b.n	8006fbc <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d102      	bne.n	8006f88 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2200      	movs	r2, #0
 8006f86:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	785b      	ldrb	r3, [r3, #1]
 8006f92:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f94:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f9a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	78db      	ldrb	r3, [r3, #3]
 8006fa0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006fa2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006faa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006fac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006fb2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	22ca      	movs	r2, #202	; 0xca
 8006fce:	625a      	str	r2, [r3, #36]	; 0x24
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2253      	movs	r2, #83	; 0x53
 8006fd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe0:	d14a      	bne.n	8007078 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ff0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007002:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8007004:	f7fb fcc8 	bl	8002998 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800700a:	e015      	b.n	8007038 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800700c:	f7fb fcc4 	bl	8002998 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800701a:	d90d      	bls.n	8007038 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	22ff      	movs	r2, #255	; 0xff
 8007022:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2203      	movs	r2, #3
 8007028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e082      	b.n	800713e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0e2      	beq.n	800700c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007064:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007074:	609a      	str	r2, [r3, #8]
 8007076:	e049      	b.n	800710c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007086:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	b2da      	uxtb	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007098:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800709a:	f7fb fc7d 	bl	8002998 <HAL_GetTick>
 800709e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80070a0:	e015      	b.n	80070ce <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80070a2:	f7fb fc79 	bl	8002998 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070b0:	d90d      	bls.n	80070ce <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	22ff      	movs	r2, #255	; 0xff
 80070b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2203      	movs	r2, #3
 80070be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e037      	b.n	800713e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0e2      	beq.n	80070a2 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070fa:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800710a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800710c:	4b0e      	ldr	r3, [pc, #56]	; (8007148 <HAL_RTC_SetAlarm_IT+0x274>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a0d      	ldr	r2, [pc, #52]	; (8007148 <HAL_RTC_SetAlarm_IT+0x274>)
 8007112:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007116:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_RTC_SetAlarm_IT+0x274>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	4a0a      	ldr	r2, [pc, #40]	; (8007148 <HAL_RTC_SetAlarm_IT+0x274>)
 800711e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007122:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	22ff      	movs	r2, #255	; 0xff
 800712a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3724      	adds	r7, #36	; 0x24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd90      	pop	{r4, r7, pc}
 8007146:	bf00      	nop
 8007148:	40010400 	.word	0x40010400

0800714c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007154:	4b1f      	ldr	r3, [pc, #124]	; (80071d4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007156:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800715a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d012      	beq.n	8007190 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007188:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fa f962 	bl	8001454 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d012      	beq.n	80071c4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f462 7220 	orn	r2, r2, #640	; 0x280
 80071bc:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f8dc 	bl	800737c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40010400 	.word	0x40010400

080071d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071ee:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80071f0:	f7fb fbd2 	bl	8002998 <HAL_GetTick>
 80071f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80071f6:	e009      	b.n	800720c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071f8:	f7fb fbce 	bl	8002998 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007206:	d901      	bls.n	800720c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e007      	b.n	800721c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f003 0320 	and.w	r3, r3, #32
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0ee      	beq.n	80071f8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d120      	bne.n	8007280 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f04f 32ff 	mov.w	r2, #4294967295
 8007246:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007248:	f7fb fba6 	bl	8002998 <HAL_GetTick>
 800724c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800724e:	e00d      	b.n	800726c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007250:	f7fb fba2 	bl	8002998 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800725e:	d905      	bls.n	800726c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2203      	movs	r2, #3
 8007268:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	d102      	bne.n	8007280 <RTC_EnterInitMode+0x5c>
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	2b03      	cmp	r3, #3
 800727e:	d1e7      	bne.n	8007250 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007298:	4b1a      	ldr	r3, [pc, #104]	; (8007304 <RTC_ExitInitMode+0x78>)
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	4a19      	ldr	r2, [pc, #100]	; (8007304 <RTC_ExitInitMode+0x78>)
 800729e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80072a4:	4b17      	ldr	r3, [pc, #92]	; (8007304 <RTC_ExitInitMode+0x78>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10c      	bne.n	80072ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff ff91 	bl	80071d8 <HAL_RTC_WaitForSynchro>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01e      	beq.n	80072fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2203      	movs	r2, #3
 80072c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	73fb      	strb	r3, [r7, #15]
 80072c8:	e017      	b.n	80072fa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80072ca:	4b0e      	ldr	r3, [pc, #56]	; (8007304 <RTC_ExitInitMode+0x78>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	4a0d      	ldr	r2, [pc, #52]	; (8007304 <RTC_ExitInitMode+0x78>)
 80072d0:	f023 0320 	bic.w	r3, r3, #32
 80072d4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff ff7e 	bl	80071d8 <HAL_RTC_WaitForSynchro>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d005      	beq.n	80072ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2203      	movs	r2, #3
 80072e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <RTC_ExitInitMode+0x78>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	4a04      	ldr	r2, [pc, #16]	; (8007304 <RTC_ExitInitMode+0x78>)
 80072f4:	f043 0320 	orr.w	r3, r3, #32
 80072f8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	40002800 	.word	0x40002800

08007308 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800731a:	e005      	b.n	8007328 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3301      	adds	r3, #1
 8007320:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007322:	7afb      	ldrb	r3, [r7, #11]
 8007324:	3b0a      	subs	r3, #10
 8007326:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	2b09      	cmp	r3, #9
 800732c:	d8f6      	bhi.n	800731c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	b2da      	uxtb	r2, r3
 8007336:	7afb      	ldrb	r3, [r7, #11]
 8007338:	4313      	orrs	r3, r2
 800733a:	b2db      	uxtb	r3, r3
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	091b      	lsrs	r3, r3, #4
 8007356:	b2db      	uxtb	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	0092      	lsls	r2, r2, #2
 800735c:	4413      	add	r3, r2
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007362:	79fb      	ldrb	r3, [r7, #7]
 8007364:	f003 030f 	and.w	r3, r3, #15
 8007368:	b2da      	uxtb	r2, r3
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	4413      	add	r3, r2
 800736e:	b2db      	uxtb	r3, r3
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e049      	b.n	8007436 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d106      	bne.n	80073bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fb f956 	bl	8002668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4619      	mov	r1, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	f000 f8fc 	bl	80075cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800744e:	2b01      	cmp	r3, #1
 8007450:	d101      	bne.n	8007456 <HAL_TIM_ConfigClockSource+0x18>
 8007452:	2302      	movs	r3, #2
 8007454:	e0b5      	b.n	80075c2 <HAL_TIM_ConfigClockSource+0x184>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2202      	movs	r2, #2
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007474:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007478:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007480:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007492:	d03e      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0xd4>
 8007494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007498:	f200 8087 	bhi.w	80075aa <HAL_TIM_ConfigClockSource+0x16c>
 800749c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a0:	f000 8085 	beq.w	80075ae <HAL_TIM_ConfigClockSource+0x170>
 80074a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a8:	d87f      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x16c>
 80074aa:	2b70      	cmp	r3, #112	; 0x70
 80074ac:	d01a      	beq.n	80074e4 <HAL_TIM_ConfigClockSource+0xa6>
 80074ae:	2b70      	cmp	r3, #112	; 0x70
 80074b0:	d87b      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x16c>
 80074b2:	2b60      	cmp	r3, #96	; 0x60
 80074b4:	d050      	beq.n	8007558 <HAL_TIM_ConfigClockSource+0x11a>
 80074b6:	2b60      	cmp	r3, #96	; 0x60
 80074b8:	d877      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x16c>
 80074ba:	2b50      	cmp	r3, #80	; 0x50
 80074bc:	d03c      	beq.n	8007538 <HAL_TIM_ConfigClockSource+0xfa>
 80074be:	2b50      	cmp	r3, #80	; 0x50
 80074c0:	d873      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x16c>
 80074c2:	2b40      	cmp	r3, #64	; 0x40
 80074c4:	d058      	beq.n	8007578 <HAL_TIM_ConfigClockSource+0x13a>
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d86f      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x16c>
 80074ca:	2b30      	cmp	r3, #48	; 0x30
 80074cc:	d064      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x15a>
 80074ce:	2b30      	cmp	r3, #48	; 0x30
 80074d0:	d86b      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x16c>
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d060      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x15a>
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d867      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x16c>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d05c      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x15a>
 80074de:	2b10      	cmp	r3, #16
 80074e0:	d05a      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80074e2:	e062      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	6899      	ldr	r1, [r3, #8]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f000 f97e 	bl	80077f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007506:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	609a      	str	r2, [r3, #8]
      break;
 8007510:	e04e      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	6899      	ldr	r1, [r3, #8]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f000 f967 	bl	80077f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007534:	609a      	str	r2, [r3, #8]
      break;
 8007536:	e03b      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	6859      	ldr	r1, [r3, #4]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	461a      	mov	r2, r3
 8007546:	f000 f8db 	bl	8007700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2150      	movs	r1, #80	; 0x50
 8007550:	4618      	mov	r0, r3
 8007552:	f000 f934 	bl	80077be <TIM_ITRx_SetConfig>
      break;
 8007556:	e02b      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6818      	ldr	r0, [r3, #0]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	6859      	ldr	r1, [r3, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	461a      	mov	r2, r3
 8007566:	f000 f8fa 	bl	800775e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2160      	movs	r1, #96	; 0x60
 8007570:	4618      	mov	r0, r3
 8007572:	f000 f924 	bl	80077be <TIM_ITRx_SetConfig>
      break;
 8007576:	e01b      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	6859      	ldr	r1, [r3, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	461a      	mov	r2, r3
 8007586:	f000 f8bb 	bl	8007700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2140      	movs	r1, #64	; 0x40
 8007590:	4618      	mov	r0, r3
 8007592:	f000 f914 	bl	80077be <TIM_ITRx_SetConfig>
      break;
 8007596:	e00b      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4619      	mov	r1, r3
 80075a2:	4610      	mov	r0, r2
 80075a4:	f000 f90b 	bl	80077be <TIM_ITRx_SetConfig>
        break;
 80075a8:	e002      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80075aa:	bf00      	nop
 80075ac:	e000      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80075ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a40      	ldr	r2, [pc, #256]	; (80076e0 <TIM_Base_SetConfig+0x114>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d013      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ea:	d00f      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a3d      	ldr	r2, [pc, #244]	; (80076e4 <TIM_Base_SetConfig+0x118>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d00b      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a3c      	ldr	r2, [pc, #240]	; (80076e8 <TIM_Base_SetConfig+0x11c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d007      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a3b      	ldr	r2, [pc, #236]	; (80076ec <TIM_Base_SetConfig+0x120>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d003      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a3a      	ldr	r2, [pc, #232]	; (80076f0 <TIM_Base_SetConfig+0x124>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d108      	bne.n	800761e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a2f      	ldr	r2, [pc, #188]	; (80076e0 <TIM_Base_SetConfig+0x114>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d01f      	beq.n	8007666 <TIM_Base_SetConfig+0x9a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762c:	d01b      	beq.n	8007666 <TIM_Base_SetConfig+0x9a>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a2c      	ldr	r2, [pc, #176]	; (80076e4 <TIM_Base_SetConfig+0x118>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d017      	beq.n	8007666 <TIM_Base_SetConfig+0x9a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a2b      	ldr	r2, [pc, #172]	; (80076e8 <TIM_Base_SetConfig+0x11c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d013      	beq.n	8007666 <TIM_Base_SetConfig+0x9a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a2a      	ldr	r2, [pc, #168]	; (80076ec <TIM_Base_SetConfig+0x120>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00f      	beq.n	8007666 <TIM_Base_SetConfig+0x9a>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a29      	ldr	r2, [pc, #164]	; (80076f0 <TIM_Base_SetConfig+0x124>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d00b      	beq.n	8007666 <TIM_Base_SetConfig+0x9a>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a28      	ldr	r2, [pc, #160]	; (80076f4 <TIM_Base_SetConfig+0x128>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d007      	beq.n	8007666 <TIM_Base_SetConfig+0x9a>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a27      	ldr	r2, [pc, #156]	; (80076f8 <TIM_Base_SetConfig+0x12c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d003      	beq.n	8007666 <TIM_Base_SetConfig+0x9a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a26      	ldr	r2, [pc, #152]	; (80076fc <TIM_Base_SetConfig+0x130>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d108      	bne.n	8007678 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800766c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	4313      	orrs	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	4313      	orrs	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a10      	ldr	r2, [pc, #64]	; (80076e0 <TIM_Base_SetConfig+0x114>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d00f      	beq.n	80076c4 <TIM_Base_SetConfig+0xf8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a12      	ldr	r2, [pc, #72]	; (80076f0 <TIM_Base_SetConfig+0x124>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d00b      	beq.n	80076c4 <TIM_Base_SetConfig+0xf8>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a11      	ldr	r2, [pc, #68]	; (80076f4 <TIM_Base_SetConfig+0x128>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d007      	beq.n	80076c4 <TIM_Base_SetConfig+0xf8>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a10      	ldr	r2, [pc, #64]	; (80076f8 <TIM_Base_SetConfig+0x12c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d003      	beq.n	80076c4 <TIM_Base_SetConfig+0xf8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a0f      	ldr	r2, [pc, #60]	; (80076fc <TIM_Base_SetConfig+0x130>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d103      	bne.n	80076cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	615a      	str	r2, [r3, #20]
}
 80076d2:	bf00      	nop
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	40012c00 	.word	0x40012c00
 80076e4:	40000400 	.word	0x40000400
 80076e8:	40000800 	.word	0x40000800
 80076ec:	40000c00 	.word	0x40000c00
 80076f0:	40013400 	.word	0x40013400
 80076f4:	40014000 	.word	0x40014000
 80076f8:	40014400 	.word	0x40014400
 80076fc:	40014800 	.word	0x40014800

08007700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	f023 0201 	bic.w	r2, r3, #1
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800772a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f023 030a 	bic.w	r3, r3, #10
 800773c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	4313      	orrs	r3, r2
 8007744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	621a      	str	r2, [r3, #32]
}
 8007752:	bf00      	nop
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800775e:	b480      	push	{r7}
 8007760:	b087      	sub	sp, #28
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	f023 0210 	bic.w	r2, r3, #16
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007788:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	031b      	lsls	r3, r3, #12
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4313      	orrs	r3, r2
 8007792:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800779a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	621a      	str	r2, [r3, #32]
}
 80077b2:	bf00      	nop
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077be:	b480      	push	{r7}
 80077c0:	b085      	sub	sp, #20
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	4313      	orrs	r3, r2
 80077dc:	f043 0307 	orr.w	r3, r3, #7
 80077e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	609a      	str	r2, [r3, #8]
}
 80077e8:	bf00      	nop
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800780e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	021a      	lsls	r2, r3, #8
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	431a      	orrs	r2, r3
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	4313      	orrs	r3, r2
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	4313      	orrs	r3, r2
 8007820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	609a      	str	r2, [r3, #8]
}
 8007828:	bf00      	nop
 800782a:	371c      	adds	r7, #28
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007848:	2302      	movs	r3, #2
 800784a:	e068      	b.n	800791e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2202      	movs	r2, #2
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a2e      	ldr	r2, [pc, #184]	; (800792c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d004      	beq.n	8007880 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a2d      	ldr	r2, [pc, #180]	; (8007930 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d108      	bne.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007886:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007898:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a1e      	ldr	r2, [pc, #120]	; (800792c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d01d      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078be:	d018      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a1b      	ldr	r2, [pc, #108]	; (8007934 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d013      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a1a      	ldr	r2, [pc, #104]	; (8007938 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d00e      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a18      	ldr	r2, [pc, #96]	; (800793c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d009      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a13      	ldr	r2, [pc, #76]	; (8007930 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d004      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a14      	ldr	r2, [pc, #80]	; (8007940 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d10c      	bne.n	800790c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	4313      	orrs	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40012c00 	.word	0x40012c00
 8007930:	40013400 	.word	0x40013400
 8007934:	40000400 	.word	0x40000400
 8007938:	40000800 	.word	0x40000800
 800793c:	40000c00 	.word	0x40000c00
 8007940:	40014000 	.word	0x40014000

08007944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e040      	b.n	80079d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795a:	2b00      	cmp	r3, #0
 800795c:	d106      	bne.n	800796c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7fa fecc 	bl	8002704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2224      	movs	r2, #36	; 0x24
 8007970:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0201 	bic.w	r2, r2, #1
 8007980:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fb74 	bl	8008070 <UART_SetConfig>
 8007988:	4603      	mov	r3, r0
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e022      	b.n	80079d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fe22 	bl	80085e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f042 0201 	orr.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fea9 	bl	8008728 <UART_CheckIdleState>
 80079d6:	4603      	mov	r3, r0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08a      	sub	sp, #40	; 0x28
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	f040 8081 	bne.w	8007afc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <HAL_UART_Transmit+0x26>
 8007a00:	88fb      	ldrh	r3, [r7, #6]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e079      	b.n	8007afe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_UART_Transmit+0x38>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e072      	b.n	8007afe <HAL_UART_Transmit+0x11e>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2221      	movs	r2, #33	; 0x21
 8007a2a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007a2c:	f7fa ffb4 	bl	8002998 <HAL_GetTick>
 8007a30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	88fa      	ldrh	r2, [r7, #6]
 8007a36:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	88fa      	ldrh	r2, [r7, #6]
 8007a3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a4a:	d108      	bne.n	8007a5e <HAL_UART_Transmit+0x7e>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d104      	bne.n	8007a5e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8007a54:	2300      	movs	r3, #0
 8007a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	61bb      	str	r3, [r7, #24]
 8007a5c:	e003      	b.n	8007a66 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a62:	2300      	movs	r3, #0
 8007a64:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007a6e:	e02d      	b.n	8007acc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2200      	movs	r2, #0
 8007a78:	2180      	movs	r1, #128	; 0x80
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fe99 	bl	80087b2 <UART_WaitOnFlagUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e039      	b.n	8007afe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10b      	bne.n	8007aa8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	881a      	ldrh	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a9c:	b292      	uxth	r2, r2
 8007a9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	3302      	adds	r3, #2
 8007aa4:	61bb      	str	r3, [r7, #24]
 8007aa6:	e008      	b.n	8007aba <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	781a      	ldrb	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	b292      	uxth	r2, r2
 8007ab2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1cb      	bne.n	8007a70 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2140      	movs	r1, #64	; 0x40
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 fe65 	bl	80087b2 <UART_WaitOnFlagUntilTimeout>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e005      	b.n	8007afe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2220      	movs	r2, #32
 8007af6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	e000      	b.n	8007afe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007afc:	2302      	movs	r3, #2
  }
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3720      	adds	r7, #32
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b08a      	sub	sp, #40	; 0x28
 8007b0a:	af02      	add	r7, sp, #8
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	603b      	str	r3, [r7, #0]
 8007b12:	4613      	mov	r3, r2
 8007b14:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b1a:	2b20      	cmp	r3, #32
 8007b1c:	f040 80bb 	bne.w	8007c96 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <HAL_UART_Receive+0x26>
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e0b3      	b.n	8007c98 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_UART_Receive+0x38>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e0ac      	b.n	8007c98 <HAL_UART_Receive+0x192>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2222      	movs	r2, #34	; 0x22
 8007b50:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007b52:	f7fa ff21 	bl	8002998 <HAL_GetTick>
 8007b56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	88fa      	ldrh	r2, [r7, #6]
 8007b5c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	88fa      	ldrh	r2, [r7, #6]
 8007b64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b70:	d10e      	bne.n	8007b90 <HAL_UART_Receive+0x8a>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d105      	bne.n	8007b86 <HAL_UART_Receive+0x80>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b84:	e02d      	b.n	8007be2 <HAL_UART_Receive+0xdc>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	22ff      	movs	r2, #255	; 0xff
 8007b8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b8e:	e028      	b.n	8007be2 <HAL_UART_Receive+0xdc>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10d      	bne.n	8007bb4 <HAL_UART_Receive+0xae>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d104      	bne.n	8007baa <HAL_UART_Receive+0xa4>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	22ff      	movs	r2, #255	; 0xff
 8007ba4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ba8:	e01b      	b.n	8007be2 <HAL_UART_Receive+0xdc>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	227f      	movs	r2, #127	; 0x7f
 8007bae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bb2:	e016      	b.n	8007be2 <HAL_UART_Receive+0xdc>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bbc:	d10d      	bne.n	8007bda <HAL_UART_Receive+0xd4>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d104      	bne.n	8007bd0 <HAL_UART_Receive+0xca>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	227f      	movs	r2, #127	; 0x7f
 8007bca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bce:	e008      	b.n	8007be2 <HAL_UART_Receive+0xdc>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	223f      	movs	r2, #63	; 0x3f
 8007bd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bd8:	e003      	b.n	8007be2 <HAL_UART_Receive+0xdc>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007be8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bf2:	d108      	bne.n	8007c06 <HAL_UART_Receive+0x100>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d104      	bne.n	8007c06 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	61bb      	str	r3, [r7, #24]
 8007c04:	e003      	b.n	8007c0e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007c16:	e033      	b.n	8007c80 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2120      	movs	r1, #32
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 fdc5 	bl	80087b2 <UART_WaitOnFlagUntilTimeout>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e032      	b.n	8007c98 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10c      	bne.n	8007c52 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	8a7b      	ldrh	r3, [r7, #18]
 8007c42:	4013      	ands	r3, r2
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	3302      	adds	r3, #2
 8007c4e:	61bb      	str	r3, [r7, #24]
 8007c50:	e00d      	b.n	8007c6e <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	8a7b      	ldrh	r3, [r7, #18]
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	4013      	ands	r3, r2
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	3b01      	subs	r3, #1
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1c5      	bne.n	8007c18 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	e000      	b.n	8007c98 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8007c96:	2302      	movs	r3, #2
  }
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3720      	adds	r7, #32
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	4613      	mov	r3, r2
 8007cac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	d16c      	bne.n	8007d90 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <HAL_UART_Receive_DMA+0x22>
 8007cbc:	88fb      	ldrh	r3, [r7, #6]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e065      	b.n	8007d92 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d101      	bne.n	8007cd4 <HAL_UART_Receive_DMA+0x34>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e05e      	b.n	8007d92 <HAL_UART_Receive_DMA+0xf2>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	88fa      	ldrh	r2, [r7, #6]
 8007ce6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2222      	movs	r2, #34	; 0x22
 8007cf4:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d02a      	beq.n	8007d54 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d02:	4a26      	ldr	r2, [pc, #152]	; (8007d9c <HAL_UART_Receive_DMA+0xfc>)
 8007d04:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d0a:	4a25      	ldr	r2, [pc, #148]	; (8007da0 <HAL_UART_Receive_DMA+0x100>)
 8007d0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d12:	4a24      	ldr	r2, [pc, #144]	; (8007da4 <HAL_UART_Receive_DMA+0x104>)
 8007d14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3324      	adds	r3, #36	; 0x24
 8007d28:	4619      	mov	r1, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2e:	461a      	mov	r2, r3
 8007d30:	88fb      	ldrh	r3, [r7, #6]
 8007d32:	f7fc fa15 	bl	8004160 <HAL_DMA_Start_IT>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00b      	beq.n	8007d54 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2210      	movs	r2, #16
 8007d40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e01e      	b.n	8007d92 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d6a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689a      	ldr	r2, [r3, #8]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0201 	orr.w	r2, r2, #1
 8007d7a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d8a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e000      	b.n	8007d92 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8007d90:	2302      	movs	r3, #2
  }
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	08008913 	.word	0x08008913
 8007da0:	0800897b 	.word	0x0800897b
 8007da4:	08008997 	.word	0x08008997

08007da8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007dc8:	69fa      	ldr	r2, [r7, #28]
 8007dca:	f640 030f 	movw	r3, #2063	; 0x80f
 8007dce:	4013      	ands	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d113      	bne.n	8007e00 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00e      	beq.n	8007e00 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d009      	beq.n	8007e00 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 8113 	beq.w	800801c <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	4798      	blx	r3
      }
      return;
 8007dfe:	e10d      	b.n	800801c <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80d6 	beq.w	8007fb4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d105      	bne.n	8007e1e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	4b85      	ldr	r3, [pc, #532]	; (800802c <HAL_UART_IRQHandler+0x284>)
 8007e16:	4013      	ands	r3, r2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 80cb 	beq.w	8007fb4 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00e      	beq.n	8007e46 <HAL_UART_IRQHandler+0x9e>
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d009      	beq.n	8007e46 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2201      	movs	r2, #1
 8007e38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e3e:	f043 0201 	orr.w	r2, r3, #1
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00e      	beq.n	8007e6e <HAL_UART_IRQHandler+0xc6>
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d009      	beq.n	8007e6e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e66:	f043 0204 	orr.w	r2, r3, #4
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	f003 0304 	and.w	r3, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00e      	beq.n	8007e96 <HAL_UART_IRQHandler+0xee>
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d009      	beq.n	8007e96 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2204      	movs	r2, #4
 8007e88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e8e:	f043 0202 	orr.w	r2, r3, #2
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	f003 0308 	and.w	r3, r3, #8
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d013      	beq.n	8007ec8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d104      	bne.n	8007eb4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d009      	beq.n	8007ec8 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2208      	movs	r2, #8
 8007eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ec0:	f043 0208 	orr.w	r2, r3, #8
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00f      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x14a>
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00a      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ee4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eea:	f043 0220 	orr.w	r2, r3, #32
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 8092 	beq.w	8008020 <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00c      	beq.n	8007f20 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d007      	beq.n	8007f20 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f24:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b40      	cmp	r3, #64	; 0x40
 8007f32:	d004      	beq.n	8007f3e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d031      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fcc7 	bl	80088d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4e:	2b40      	cmp	r3, #64	; 0x40
 8007f50:	d123      	bne.n	8007f9a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f60:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d013      	beq.n	8007f92 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f6e:	4a30      	ldr	r2, [pc, #192]	; (8008030 <HAL_UART_IRQHandler+0x288>)
 8007f70:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fc f990 	bl	800429c <HAL_DMA_Abort_IT>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d016      	beq.n	8007fb0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f90:	e00e      	b.n	8007fb0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f862 	bl	800805c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f98:	e00a      	b.n	8007fb0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f85e 	bl	800805c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fa0:	e006      	b.n	8007fb0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f85a 	bl	800805c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007fae:	e037      	b.n	8008020 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb0:	bf00      	nop
    return;
 8007fb2:	e035      	b.n	8008020 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00d      	beq.n	8007fda <HAL_UART_IRQHandler+0x232>
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d008      	beq.n	8007fda <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007fd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fd4a 	bl	8008a6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fd8:	e025      	b.n	8008026 <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00d      	beq.n	8008000 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d008      	beq.n	8008000 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d016      	beq.n	8008024 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	4798      	blx	r3
    }
    return;
 8007ffe:	e011      	b.n	8008024 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00d      	beq.n	8008026 <HAL_UART_IRQHandler+0x27e>
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d008      	beq.n	8008026 <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fd10 	bl	8008a3a <UART_EndTransmit_IT>
    return;
 800801a:	e004      	b.n	8008026 <HAL_UART_IRQHandler+0x27e>
      return;
 800801c:	bf00      	nop
 800801e:	e002      	b.n	8008026 <HAL_UART_IRQHandler+0x27e>
    return;
 8008020:	bf00      	nop
 8008022:	e000      	b.n	8008026 <HAL_UART_IRQHandler+0x27e>
    return;
 8008024:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008026:	3720      	adds	r7, #32
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	04000120 	.word	0x04000120
 8008030:	08008a0f 	.word	0x08008a0f

08008034 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008074:	b08a      	sub	sp, #40	; 0x28
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	431a      	orrs	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	431a      	orrs	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	4313      	orrs	r3, r2
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	4ba4      	ldr	r3, [pc, #656]	; (8008330 <UART_SetConfig+0x2c0>)
 80080a0:	4013      	ands	r3, r2
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	6812      	ldr	r2, [r2, #0]
 80080a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080a8:	430b      	orrs	r3, r1
 80080aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a99      	ldr	r2, [pc, #612]	; (8008334 <UART_SetConfig+0x2c4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d004      	beq.n	80080dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d8:	4313      	orrs	r3, r2
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ec:	430a      	orrs	r2, r1
 80080ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a90      	ldr	r2, [pc, #576]	; (8008338 <UART_SetConfig+0x2c8>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d126      	bne.n	8008148 <UART_SetConfig+0xd8>
 80080fa:	4b90      	ldr	r3, [pc, #576]	; (800833c <UART_SetConfig+0x2cc>)
 80080fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008100:	f003 0303 	and.w	r3, r3, #3
 8008104:	2b03      	cmp	r3, #3
 8008106:	d81b      	bhi.n	8008140 <UART_SetConfig+0xd0>
 8008108:	a201      	add	r2, pc, #4	; (adr r2, 8008110 <UART_SetConfig+0xa0>)
 800810a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810e:	bf00      	nop
 8008110:	08008121 	.word	0x08008121
 8008114:	08008131 	.word	0x08008131
 8008118:	08008129 	.word	0x08008129
 800811c:	08008139 	.word	0x08008139
 8008120:	2301      	movs	r3, #1
 8008122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008126:	e116      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008128:	2302      	movs	r3, #2
 800812a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800812e:	e112      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008130:	2304      	movs	r3, #4
 8008132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008136:	e10e      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008138:	2308      	movs	r3, #8
 800813a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800813e:	e10a      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008140:	2310      	movs	r3, #16
 8008142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008146:	e106      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a7c      	ldr	r2, [pc, #496]	; (8008340 <UART_SetConfig+0x2d0>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d138      	bne.n	80081c4 <UART_SetConfig+0x154>
 8008152:	4b7a      	ldr	r3, [pc, #488]	; (800833c <UART_SetConfig+0x2cc>)
 8008154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008158:	f003 030c 	and.w	r3, r3, #12
 800815c:	2b0c      	cmp	r3, #12
 800815e:	d82d      	bhi.n	80081bc <UART_SetConfig+0x14c>
 8008160:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <UART_SetConfig+0xf8>)
 8008162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008166:	bf00      	nop
 8008168:	0800819d 	.word	0x0800819d
 800816c:	080081bd 	.word	0x080081bd
 8008170:	080081bd 	.word	0x080081bd
 8008174:	080081bd 	.word	0x080081bd
 8008178:	080081ad 	.word	0x080081ad
 800817c:	080081bd 	.word	0x080081bd
 8008180:	080081bd 	.word	0x080081bd
 8008184:	080081bd 	.word	0x080081bd
 8008188:	080081a5 	.word	0x080081a5
 800818c:	080081bd 	.word	0x080081bd
 8008190:	080081bd 	.word	0x080081bd
 8008194:	080081bd 	.word	0x080081bd
 8008198:	080081b5 	.word	0x080081b5
 800819c:	2300      	movs	r3, #0
 800819e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081a2:	e0d8      	b.n	8008356 <UART_SetConfig+0x2e6>
 80081a4:	2302      	movs	r3, #2
 80081a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081aa:	e0d4      	b.n	8008356 <UART_SetConfig+0x2e6>
 80081ac:	2304      	movs	r3, #4
 80081ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081b2:	e0d0      	b.n	8008356 <UART_SetConfig+0x2e6>
 80081b4:	2308      	movs	r3, #8
 80081b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081ba:	e0cc      	b.n	8008356 <UART_SetConfig+0x2e6>
 80081bc:	2310      	movs	r3, #16
 80081be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081c2:	e0c8      	b.n	8008356 <UART_SetConfig+0x2e6>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a5e      	ldr	r2, [pc, #376]	; (8008344 <UART_SetConfig+0x2d4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d125      	bne.n	800821a <UART_SetConfig+0x1aa>
 80081ce:	4b5b      	ldr	r3, [pc, #364]	; (800833c <UART_SetConfig+0x2cc>)
 80081d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80081d8:	2b30      	cmp	r3, #48	; 0x30
 80081da:	d016      	beq.n	800820a <UART_SetConfig+0x19a>
 80081dc:	2b30      	cmp	r3, #48	; 0x30
 80081de:	d818      	bhi.n	8008212 <UART_SetConfig+0x1a2>
 80081e0:	2b20      	cmp	r3, #32
 80081e2:	d00a      	beq.n	80081fa <UART_SetConfig+0x18a>
 80081e4:	2b20      	cmp	r3, #32
 80081e6:	d814      	bhi.n	8008212 <UART_SetConfig+0x1a2>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <UART_SetConfig+0x182>
 80081ec:	2b10      	cmp	r3, #16
 80081ee:	d008      	beq.n	8008202 <UART_SetConfig+0x192>
 80081f0:	e00f      	b.n	8008212 <UART_SetConfig+0x1a2>
 80081f2:	2300      	movs	r3, #0
 80081f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081f8:	e0ad      	b.n	8008356 <UART_SetConfig+0x2e6>
 80081fa:	2302      	movs	r3, #2
 80081fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008200:	e0a9      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008202:	2304      	movs	r3, #4
 8008204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008208:	e0a5      	b.n	8008356 <UART_SetConfig+0x2e6>
 800820a:	2308      	movs	r3, #8
 800820c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008210:	e0a1      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008212:	2310      	movs	r3, #16
 8008214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008218:	e09d      	b.n	8008356 <UART_SetConfig+0x2e6>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a4a      	ldr	r2, [pc, #296]	; (8008348 <UART_SetConfig+0x2d8>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d125      	bne.n	8008270 <UART_SetConfig+0x200>
 8008224:	4b45      	ldr	r3, [pc, #276]	; (800833c <UART_SetConfig+0x2cc>)
 8008226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800822e:	2bc0      	cmp	r3, #192	; 0xc0
 8008230:	d016      	beq.n	8008260 <UART_SetConfig+0x1f0>
 8008232:	2bc0      	cmp	r3, #192	; 0xc0
 8008234:	d818      	bhi.n	8008268 <UART_SetConfig+0x1f8>
 8008236:	2b80      	cmp	r3, #128	; 0x80
 8008238:	d00a      	beq.n	8008250 <UART_SetConfig+0x1e0>
 800823a:	2b80      	cmp	r3, #128	; 0x80
 800823c:	d814      	bhi.n	8008268 <UART_SetConfig+0x1f8>
 800823e:	2b00      	cmp	r3, #0
 8008240:	d002      	beq.n	8008248 <UART_SetConfig+0x1d8>
 8008242:	2b40      	cmp	r3, #64	; 0x40
 8008244:	d008      	beq.n	8008258 <UART_SetConfig+0x1e8>
 8008246:	e00f      	b.n	8008268 <UART_SetConfig+0x1f8>
 8008248:	2300      	movs	r3, #0
 800824a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800824e:	e082      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008250:	2302      	movs	r3, #2
 8008252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008256:	e07e      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008258:	2304      	movs	r3, #4
 800825a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800825e:	e07a      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008260:	2308      	movs	r3, #8
 8008262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008266:	e076      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008268:	2310      	movs	r3, #16
 800826a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800826e:	e072      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a35      	ldr	r2, [pc, #212]	; (800834c <UART_SetConfig+0x2dc>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d12a      	bne.n	80082d0 <UART_SetConfig+0x260>
 800827a:	4b30      	ldr	r3, [pc, #192]	; (800833c <UART_SetConfig+0x2cc>)
 800827c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008288:	d01a      	beq.n	80082c0 <UART_SetConfig+0x250>
 800828a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800828e:	d81b      	bhi.n	80082c8 <UART_SetConfig+0x258>
 8008290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008294:	d00c      	beq.n	80082b0 <UART_SetConfig+0x240>
 8008296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800829a:	d815      	bhi.n	80082c8 <UART_SetConfig+0x258>
 800829c:	2b00      	cmp	r3, #0
 800829e:	d003      	beq.n	80082a8 <UART_SetConfig+0x238>
 80082a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082a4:	d008      	beq.n	80082b8 <UART_SetConfig+0x248>
 80082a6:	e00f      	b.n	80082c8 <UART_SetConfig+0x258>
 80082a8:	2300      	movs	r3, #0
 80082aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ae:	e052      	b.n	8008356 <UART_SetConfig+0x2e6>
 80082b0:	2302      	movs	r3, #2
 80082b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082b6:	e04e      	b.n	8008356 <UART_SetConfig+0x2e6>
 80082b8:	2304      	movs	r3, #4
 80082ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082be:	e04a      	b.n	8008356 <UART_SetConfig+0x2e6>
 80082c0:	2308      	movs	r3, #8
 80082c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082c6:	e046      	b.n	8008356 <UART_SetConfig+0x2e6>
 80082c8:	2310      	movs	r3, #16
 80082ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ce:	e042      	b.n	8008356 <UART_SetConfig+0x2e6>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a17      	ldr	r2, [pc, #92]	; (8008334 <UART_SetConfig+0x2c4>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d13a      	bne.n	8008350 <UART_SetConfig+0x2e0>
 80082da:	4b18      	ldr	r3, [pc, #96]	; (800833c <UART_SetConfig+0x2cc>)
 80082dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082e8:	d01a      	beq.n	8008320 <UART_SetConfig+0x2b0>
 80082ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082ee:	d81b      	bhi.n	8008328 <UART_SetConfig+0x2b8>
 80082f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082f4:	d00c      	beq.n	8008310 <UART_SetConfig+0x2a0>
 80082f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082fa:	d815      	bhi.n	8008328 <UART_SetConfig+0x2b8>
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d003      	beq.n	8008308 <UART_SetConfig+0x298>
 8008300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008304:	d008      	beq.n	8008318 <UART_SetConfig+0x2a8>
 8008306:	e00f      	b.n	8008328 <UART_SetConfig+0x2b8>
 8008308:	2300      	movs	r3, #0
 800830a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800830e:	e022      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008310:	2302      	movs	r3, #2
 8008312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008316:	e01e      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008318:	2304      	movs	r3, #4
 800831a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800831e:	e01a      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008320:	2308      	movs	r3, #8
 8008322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008326:	e016      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008328:	2310      	movs	r3, #16
 800832a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800832e:	e012      	b.n	8008356 <UART_SetConfig+0x2e6>
 8008330:	efff69f3 	.word	0xefff69f3
 8008334:	40008000 	.word	0x40008000
 8008338:	40013800 	.word	0x40013800
 800833c:	40021000 	.word	0x40021000
 8008340:	40004400 	.word	0x40004400
 8008344:	40004800 	.word	0x40004800
 8008348:	40004c00 	.word	0x40004c00
 800834c:	40005000 	.word	0x40005000
 8008350:	2310      	movs	r3, #16
 8008352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4aa0      	ldr	r2, [pc, #640]	; (80085dc <UART_SetConfig+0x56c>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d17a      	bne.n	8008456 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008360:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008364:	2b08      	cmp	r3, #8
 8008366:	d824      	bhi.n	80083b2 <UART_SetConfig+0x342>
 8008368:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <UART_SetConfig+0x300>)
 800836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836e:	bf00      	nop
 8008370:	08008395 	.word	0x08008395
 8008374:	080083b3 	.word	0x080083b3
 8008378:	0800839d 	.word	0x0800839d
 800837c:	080083b3 	.word	0x080083b3
 8008380:	080083a3 	.word	0x080083a3
 8008384:	080083b3 	.word	0x080083b3
 8008388:	080083b3 	.word	0x080083b3
 800838c:	080083b3 	.word	0x080083b3
 8008390:	080083ab 	.word	0x080083ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008394:	f7fd fe0e 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 8008398:	61f8      	str	r0, [r7, #28]
        break;
 800839a:	e010      	b.n	80083be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800839c:	4b90      	ldr	r3, [pc, #576]	; (80085e0 <UART_SetConfig+0x570>)
 800839e:	61fb      	str	r3, [r7, #28]
        break;
 80083a0:	e00d      	b.n	80083be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083a2:	f7fd fd6f 	bl	8005e84 <HAL_RCC_GetSysClockFreq>
 80083a6:	61f8      	str	r0, [r7, #28]
        break;
 80083a8:	e009      	b.n	80083be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ae:	61fb      	str	r3, [r7, #28]
        break;
 80083b0:	e005      	b.n	80083be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80083bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 80fd 	beq.w	80085c0 <UART_SetConfig+0x550>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	4613      	mov	r3, r2
 80083cc:	005b      	lsls	r3, r3, #1
 80083ce:	4413      	add	r3, r2
 80083d0:	69fa      	ldr	r2, [r7, #28]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d305      	bcc.n	80083e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80083dc:	69fa      	ldr	r2, [r7, #28]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d903      	bls.n	80083ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80083e8:	e0ea      	b.n	80085c0 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	2200      	movs	r2, #0
 80083ee:	461c      	mov	r4, r3
 80083f0:	4615      	mov	r5, r2
 80083f2:	f04f 0200 	mov.w	r2, #0
 80083f6:	f04f 0300 	mov.w	r3, #0
 80083fa:	022b      	lsls	r3, r5, #8
 80083fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008400:	0222      	lsls	r2, r4, #8
 8008402:	68f9      	ldr	r1, [r7, #12]
 8008404:	6849      	ldr	r1, [r1, #4]
 8008406:	0849      	lsrs	r1, r1, #1
 8008408:	2000      	movs	r0, #0
 800840a:	4688      	mov	r8, r1
 800840c:	4681      	mov	r9, r0
 800840e:	eb12 0a08 	adds.w	sl, r2, r8
 8008412:	eb43 0b09 	adc.w	fp, r3, r9
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	603b      	str	r3, [r7, #0]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008424:	4650      	mov	r0, sl
 8008426:	4659      	mov	r1, fp
 8008428:	f7f8 fc88 	bl	8000d3c <__aeabi_uldivmod>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	4613      	mov	r3, r2
 8008432:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800843a:	d308      	bcc.n	800844e <UART_SetConfig+0x3de>
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008442:	d204      	bcs.n	800844e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	60da      	str	r2, [r3, #12]
 800844c:	e0b8      	b.n	80085c0 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008454:	e0b4      	b.n	80085c0 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800845e:	d15f      	bne.n	8008520 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8008460:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008464:	2b08      	cmp	r3, #8
 8008466:	d828      	bhi.n	80084ba <UART_SetConfig+0x44a>
 8008468:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <UART_SetConfig+0x400>)
 800846a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846e:	bf00      	nop
 8008470:	08008495 	.word	0x08008495
 8008474:	0800849d 	.word	0x0800849d
 8008478:	080084a5 	.word	0x080084a5
 800847c:	080084bb 	.word	0x080084bb
 8008480:	080084ab 	.word	0x080084ab
 8008484:	080084bb 	.word	0x080084bb
 8008488:	080084bb 	.word	0x080084bb
 800848c:	080084bb 	.word	0x080084bb
 8008490:	080084b3 	.word	0x080084b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008494:	f7fd fd8e 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 8008498:	61f8      	str	r0, [r7, #28]
        break;
 800849a:	e014      	b.n	80084c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800849c:	f7fd fda0 	bl	8005fe0 <HAL_RCC_GetPCLK2Freq>
 80084a0:	61f8      	str	r0, [r7, #28]
        break;
 80084a2:	e010      	b.n	80084c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084a4:	4b4e      	ldr	r3, [pc, #312]	; (80085e0 <UART_SetConfig+0x570>)
 80084a6:	61fb      	str	r3, [r7, #28]
        break;
 80084a8:	e00d      	b.n	80084c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084aa:	f7fd fceb 	bl	8005e84 <HAL_RCC_GetSysClockFreq>
 80084ae:	61f8      	str	r0, [r7, #28]
        break;
 80084b0:	e009      	b.n	80084c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084b6:	61fb      	str	r3, [r7, #28]
        break;
 80084b8:	e005      	b.n	80084c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80084c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d079      	beq.n	80085c0 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	005a      	lsls	r2, r3, #1
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	085b      	lsrs	r3, r3, #1
 80084d6:	441a      	add	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	2b0f      	cmp	r3, #15
 80084e8:	d916      	bls.n	8008518 <UART_SetConfig+0x4a8>
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084f0:	d212      	bcs.n	8008518 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	f023 030f 	bic.w	r3, r3, #15
 80084fa:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	085b      	lsrs	r3, r3, #1
 8008500:	b29b      	uxth	r3, r3
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	b29a      	uxth	r2, r3
 8008508:	8afb      	ldrh	r3, [r7, #22]
 800850a:	4313      	orrs	r3, r2
 800850c:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	8afa      	ldrh	r2, [r7, #22]
 8008514:	60da      	str	r2, [r3, #12]
 8008516:	e053      	b.n	80085c0 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800851e:	e04f      	b.n	80085c0 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008524:	2b08      	cmp	r3, #8
 8008526:	d828      	bhi.n	800857a <UART_SetConfig+0x50a>
 8008528:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <UART_SetConfig+0x4c0>)
 800852a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852e:	bf00      	nop
 8008530:	08008555 	.word	0x08008555
 8008534:	0800855d 	.word	0x0800855d
 8008538:	08008565 	.word	0x08008565
 800853c:	0800857b 	.word	0x0800857b
 8008540:	0800856b 	.word	0x0800856b
 8008544:	0800857b 	.word	0x0800857b
 8008548:	0800857b 	.word	0x0800857b
 800854c:	0800857b 	.word	0x0800857b
 8008550:	08008573 	.word	0x08008573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008554:	f7fd fd2e 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 8008558:	61f8      	str	r0, [r7, #28]
        break;
 800855a:	e014      	b.n	8008586 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800855c:	f7fd fd40 	bl	8005fe0 <HAL_RCC_GetPCLK2Freq>
 8008560:	61f8      	str	r0, [r7, #28]
        break;
 8008562:	e010      	b.n	8008586 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008564:	4b1e      	ldr	r3, [pc, #120]	; (80085e0 <UART_SetConfig+0x570>)
 8008566:	61fb      	str	r3, [r7, #28]
        break;
 8008568:	e00d      	b.n	8008586 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800856a:	f7fd fc8b 	bl	8005e84 <HAL_RCC_GetSysClockFreq>
 800856e:	61f8      	str	r0, [r7, #28]
        break;
 8008570:	e009      	b.n	8008586 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008576:	61fb      	str	r3, [r7, #28]
        break;
 8008578:	e005      	b.n	8008586 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008584:	bf00      	nop
    }

    if (pclk != 0U)
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d019      	beq.n	80085c0 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	085a      	lsrs	r2, r3, #1
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	441a      	add	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	fbb2 f3f3 	udiv	r3, r2, r3
 800859e:	b29b      	uxth	r3, r3
 80085a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	2b0f      	cmp	r3, #15
 80085a6:	d908      	bls.n	80085ba <UART_SetConfig+0x54a>
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ae:	d204      	bcs.n	80085ba <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	60da      	str	r2, [r3, #12]
 80085b8:	e002      	b.n	80085c0 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80085cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3728      	adds	r7, #40	; 0x28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085da:	bf00      	nop
 80085dc:	40008000 	.word	0x40008000
 80085e0:	00f42400 	.word	0x00f42400

080085e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00a      	beq.n	800860e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	430a      	orrs	r2, r1
 800860c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00a      	beq.n	8008652 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	430a      	orrs	r2, r1
 8008650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008656:	f003 0308 	and.w	r3, r3, #8
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	f003 0310 	and.w	r3, r3, #16
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00a      	beq.n	8008696 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	430a      	orrs	r2, r1
 8008694:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869a:	f003 0320 	and.w	r3, r3, #32
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00a      	beq.n	80086b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	430a      	orrs	r2, r1
 80086b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d01a      	beq.n	80086fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	430a      	orrs	r2, r1
 80086d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086e2:	d10a      	bne.n	80086fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00a      	beq.n	800871c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	605a      	str	r2, [r3, #4]
  }
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af02      	add	r7, sp, #8
 800872e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008736:	f7fa f92f 	bl	8002998 <HAL_GetTick>
 800873a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0308 	and.w	r3, r3, #8
 8008746:	2b08      	cmp	r3, #8
 8008748:	d10e      	bne.n	8008768 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800874a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f82a 	bl	80087b2 <UART_WaitOnFlagUntilTimeout>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e020      	b.n	80087aa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0304 	and.w	r3, r3, #4
 8008772:	2b04      	cmp	r3, #4
 8008774:	d10e      	bne.n	8008794 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008776:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f814 	bl	80087b2 <UART_WaitOnFlagUntilTimeout>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e00a      	b.n	80087aa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2220      	movs	r2, #32
 8008798:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2220      	movs	r2, #32
 800879e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	603b      	str	r3, [r7, #0]
 80087be:	4613      	mov	r3, r2
 80087c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c2:	e05d      	b.n	8008880 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ca:	d059      	beq.n	8008880 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087cc:	f7fa f8e4 	bl	8002998 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d302      	bcc.n	80087e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d11b      	bne.n	800881a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f022 0201 	bic.w	r2, r2, #1
 8008800:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2220      	movs	r2, #32
 8008806:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2220      	movs	r2, #32
 800880c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e042      	b.n	80088a0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0304 	and.w	r3, r3, #4
 8008824:	2b00      	cmp	r3, #0
 8008826:	d02b      	beq.n	8008880 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	69db      	ldr	r3, [r3, #28]
 800882e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008836:	d123      	bne.n	8008880 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008840:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008850:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689a      	ldr	r2, [r3, #8]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f022 0201 	bic.w	r2, r2, #1
 8008860:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2220      	movs	r2, #32
 8008866:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2220      	movs	r2, #32
 800886c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2220      	movs	r2, #32
 8008872:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e00f      	b.n	80088a0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	69da      	ldr	r2, [r3, #28]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	4013      	ands	r3, r2
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	429a      	cmp	r2, r3
 800888e:	bf0c      	ite	eq
 8008890:	2301      	moveq	r3, #1
 8008892:	2300      	movne	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	461a      	mov	r2, r3
 8008898:	79fb      	ldrb	r3, [r7, #7]
 800889a:	429a      	cmp	r2, r3
 800889c:	d092      	beq.n	80087c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80088be:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2220      	movs	r2, #32
 80088c4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80088c6:	bf00      	nop
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80088e8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 0201 	bic.w	r2, r2, #1
 80088f8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2220      	movs	r2, #32
 80088fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008906:	bf00      	nop
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b084      	sub	sp, #16
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b00      	cmp	r3, #0
 800892c:	d11e      	bne.n	800896c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008944:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f022 0201 	bic.w	r2, r2, #1
 8008954:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008964:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2220      	movs	r2, #32
 800896a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f7f8 fdaf 	bl	80014d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008972:	bf00      	nop
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b084      	sub	sp, #16
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008986:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f7ff fb5d 	bl	8008048 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800898e:	bf00      	nop
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b086      	sub	sp, #24
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089a8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ba:	2b80      	cmp	r3, #128	; 0x80
 80089bc:	d109      	bne.n	80089d2 <UART_DMAError+0x3c>
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	2b21      	cmp	r3, #33	; 0x21
 80089c2:	d106      	bne.n	80089d2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80089cc:	6978      	ldr	r0, [r7, #20]
 80089ce:	f7ff ff6b 	bl	80088a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089dc:	2b40      	cmp	r3, #64	; 0x40
 80089de:	d109      	bne.n	80089f4 <UART_DMAError+0x5e>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b22      	cmp	r3, #34	; 0x22
 80089e4:	d106      	bne.n	80089f4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80089ee:	6978      	ldr	r0, [r7, #20]
 80089f0:	f7ff ff6f 	bl	80088d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089f8:	f043 0210 	orr.w	r2, r3, #16
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a00:	6978      	ldr	r0, [r7, #20]
 8008a02:	f7ff fb2b 	bl	800805c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a06:	bf00      	nop
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f7ff fb15 	bl	800805c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a32:	bf00      	nop
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a50:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2220      	movs	r2, #32
 8008a56:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7ff fae8 	bl	8008034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <ctime>:
 8008a80:	b508      	push	{r3, lr}
 8008a82:	f000 f82f 	bl	8008ae4 <localtime>
 8008a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a8a:	f002 bd8d 	b.w	800b5a8 <asctime>
	...

08008a90 <__errno>:
 8008a90:	4b01      	ldr	r3, [pc, #4]	; (8008a98 <__errno+0x8>)
 8008a92:	6818      	ldr	r0, [r3, #0]
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20000014 	.word	0x20000014

08008a9c <__libc_init_array>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	4d0d      	ldr	r5, [pc, #52]	; (8008ad4 <__libc_init_array+0x38>)
 8008aa0:	4c0d      	ldr	r4, [pc, #52]	; (8008ad8 <__libc_init_array+0x3c>)
 8008aa2:	1b64      	subs	r4, r4, r5
 8008aa4:	10a4      	asrs	r4, r4, #2
 8008aa6:	2600      	movs	r6, #0
 8008aa8:	42a6      	cmp	r6, r4
 8008aaa:	d109      	bne.n	8008ac0 <__libc_init_array+0x24>
 8008aac:	4d0b      	ldr	r5, [pc, #44]	; (8008adc <__libc_init_array+0x40>)
 8008aae:	4c0c      	ldr	r4, [pc, #48]	; (8008ae0 <__libc_init_array+0x44>)
 8008ab0:	f006 f88c 	bl	800ebcc <_init>
 8008ab4:	1b64      	subs	r4, r4, r5
 8008ab6:	10a4      	asrs	r4, r4, #2
 8008ab8:	2600      	movs	r6, #0
 8008aba:	42a6      	cmp	r6, r4
 8008abc:	d105      	bne.n	8008aca <__libc_init_array+0x2e>
 8008abe:	bd70      	pop	{r4, r5, r6, pc}
 8008ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac4:	4798      	blx	r3
 8008ac6:	3601      	adds	r6, #1
 8008ac8:	e7ee      	b.n	8008aa8 <__libc_init_array+0xc>
 8008aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ace:	4798      	blx	r3
 8008ad0:	3601      	adds	r6, #1
 8008ad2:	e7f2      	b.n	8008aba <__libc_init_array+0x1e>
 8008ad4:	0800f3a0 	.word	0x0800f3a0
 8008ad8:	0800f3a0 	.word	0x0800f3a0
 8008adc:	0800f3a0 	.word	0x0800f3a0
 8008ae0:	0800f3a4 	.word	0x0800f3a4

08008ae4 <localtime>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <localtime+0x30>)
 8008ae8:	681d      	ldr	r5, [r3, #0]
 8008aea:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008aec:	4604      	mov	r4, r0
 8008aee:	b953      	cbnz	r3, 8008b06 <localtime+0x22>
 8008af0:	2024      	movs	r0, #36	; 0x24
 8008af2:	f000 f909 	bl	8008d08 <malloc>
 8008af6:	4602      	mov	r2, r0
 8008af8:	63e8      	str	r0, [r5, #60]	; 0x3c
 8008afa:	b920      	cbnz	r0, 8008b06 <localtime+0x22>
 8008afc:	4b06      	ldr	r3, [pc, #24]	; (8008b18 <localtime+0x34>)
 8008afe:	4807      	ldr	r0, [pc, #28]	; (8008b1c <localtime+0x38>)
 8008b00:	2132      	movs	r1, #50	; 0x32
 8008b02:	f002 fd99 	bl	800b638 <__assert_func>
 8008b06:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8008b08:	4620      	mov	r0, r4
 8008b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b0e:	f000 b807 	b.w	8008b20 <localtime_r>
 8008b12:	bf00      	nop
 8008b14:	20000014 	.word	0x20000014
 8008b18:	0800ecd0 	.word	0x0800ecd0
 8008b1c:	0800ece7 	.word	0x0800ece7

08008b20 <localtime_r>:
 8008b20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b24:	4680      	mov	r8, r0
 8008b26:	9101      	str	r1, [sp, #4]
 8008b28:	f004 f9b0 	bl	800ce8c <__gettzinfo>
 8008b2c:	9901      	ldr	r1, [sp, #4]
 8008b2e:	4605      	mov	r5, r0
 8008b30:	4640      	mov	r0, r8
 8008b32:	f004 f9af 	bl	800ce94 <gmtime_r>
 8008b36:	6943      	ldr	r3, [r0, #20]
 8008b38:	0799      	lsls	r1, r3, #30
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8008b40:	d105      	bne.n	8008b4e <localtime_r+0x2e>
 8008b42:	2264      	movs	r2, #100	; 0x64
 8008b44:	fb97 f3f2 	sdiv	r3, r7, r2
 8008b48:	fb02 7313 	mls	r3, r2, r3, r7
 8008b4c:	bb73      	cbnz	r3, 8008bac <localtime_r+0x8c>
 8008b4e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008b52:	fb97 f6f3 	sdiv	r6, r7, r3
 8008b56:	fb03 7616 	mls	r6, r3, r6, r7
 8008b5a:	fab6 f386 	clz	r3, r6
 8008b5e:	095b      	lsrs	r3, r3, #5
 8008b60:	4e67      	ldr	r6, [pc, #412]	; (8008d00 <localtime_r+0x1e0>)
 8008b62:	2230      	movs	r2, #48	; 0x30
 8008b64:	fb02 6603 	mla	r6, r2, r3, r6
 8008b68:	f002 facc 	bl	800b104 <__tz_lock>
 8008b6c:	f002 fad6 	bl	800b11c <_tzset_unlocked>
 8008b70:	4b64      	ldr	r3, [pc, #400]	; (8008d04 <localtime_r+0x1e4>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	b34b      	cbz	r3, 8008bca <localtime_r+0xaa>
 8008b76:	686b      	ldr	r3, [r5, #4]
 8008b78:	42bb      	cmp	r3, r7
 8008b7a:	d119      	bne.n	8008bb0 <localtime_r+0x90>
 8008b7c:	682f      	ldr	r7, [r5, #0]
 8008b7e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008b82:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8008b86:	b9df      	cbnz	r7, 8008bc0 <localtime_r+0xa0>
 8008b88:	4282      	cmp	r2, r0
 8008b8a:	eb73 0101 	sbcs.w	r1, r3, r1
 8008b8e:	da23      	bge.n	8008bd8 <localtime_r+0xb8>
 8008b90:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8008b94:	4282      	cmp	r2, r0
 8008b96:	eb73 0701 	sbcs.w	r7, r3, r1
 8008b9a:	bfb4      	ite	lt
 8008b9c:	2701      	movlt	r7, #1
 8008b9e:	2700      	movge	r7, #0
 8008ba0:	4282      	cmp	r2, r0
 8008ba2:	418b      	sbcs	r3, r1
 8008ba4:	6227      	str	r7, [r4, #32]
 8008ba6:	db19      	blt.n	8008bdc <localtime_r+0xbc>
 8008ba8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008baa:	e018      	b.n	8008bde <localtime_r+0xbe>
 8008bac:	2301      	movs	r3, #1
 8008bae:	e7d7      	b.n	8008b60 <localtime_r+0x40>
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f002 f9fd 	bl	800afb0 <__tzcalc_limits>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d1e0      	bne.n	8008b7c <localtime_r+0x5c>
 8008bba:	f04f 33ff 	mov.w	r3, #4294967295
 8008bbe:	e004      	b.n	8008bca <localtime_r+0xaa>
 8008bc0:	4282      	cmp	r2, r0
 8008bc2:	eb73 0101 	sbcs.w	r1, r3, r1
 8008bc6:	da02      	bge.n	8008bce <localtime_r+0xae>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	6223      	str	r3, [r4, #32]
 8008bcc:	e7ec      	b.n	8008ba8 <localtime_r+0x88>
 8008bce:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8008bd2:	4282      	cmp	r2, r0
 8008bd4:	418b      	sbcs	r3, r1
 8008bd6:	daf7      	bge.n	8008bc8 <localtime_r+0xa8>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	6223      	str	r3, [r4, #32]
 8008bdc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008bde:	6861      	ldr	r1, [r4, #4]
 8008be0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8008be4:	203c      	movs	r0, #60	; 0x3c
 8008be6:	fb93 f5f2 	sdiv	r5, r3, r2
 8008bea:	fb02 3315 	mls	r3, r2, r5, r3
 8008bee:	fb93 f2f0 	sdiv	r2, r3, r0
 8008bf2:	fb00 3012 	mls	r0, r0, r2, r3
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	1a89      	subs	r1, r1, r2
 8008bfa:	68a2      	ldr	r2, [r4, #8]
 8008bfc:	6061      	str	r1, [r4, #4]
 8008bfe:	1a1b      	subs	r3, r3, r0
 8008c00:	1b52      	subs	r2, r2, r5
 8008c02:	2b3b      	cmp	r3, #59	; 0x3b
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	60a2      	str	r2, [r4, #8]
 8008c08:	dd35      	ble.n	8008c76 <localtime_r+0x156>
 8008c0a:	3101      	adds	r1, #1
 8008c0c:	6061      	str	r1, [r4, #4]
 8008c0e:	3b3c      	subs	r3, #60	; 0x3c
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	6863      	ldr	r3, [r4, #4]
 8008c14:	2b3b      	cmp	r3, #59	; 0x3b
 8008c16:	dd34      	ble.n	8008c82 <localtime_r+0x162>
 8008c18:	3201      	adds	r2, #1
 8008c1a:	60a2      	str	r2, [r4, #8]
 8008c1c:	3b3c      	subs	r3, #60	; 0x3c
 8008c1e:	6063      	str	r3, [r4, #4]
 8008c20:	68a3      	ldr	r3, [r4, #8]
 8008c22:	2b17      	cmp	r3, #23
 8008c24:	dd33      	ble.n	8008c8e <localtime_r+0x16e>
 8008c26:	69e2      	ldr	r2, [r4, #28]
 8008c28:	3201      	adds	r2, #1
 8008c2a:	61e2      	str	r2, [r4, #28]
 8008c2c:	69a2      	ldr	r2, [r4, #24]
 8008c2e:	3201      	adds	r2, #1
 8008c30:	2a06      	cmp	r2, #6
 8008c32:	bfc8      	it	gt
 8008c34:	2200      	movgt	r2, #0
 8008c36:	61a2      	str	r2, [r4, #24]
 8008c38:	68e2      	ldr	r2, [r4, #12]
 8008c3a:	3b18      	subs	r3, #24
 8008c3c:	3201      	adds	r2, #1
 8008c3e:	60a3      	str	r3, [r4, #8]
 8008c40:	6923      	ldr	r3, [r4, #16]
 8008c42:	60e2      	str	r2, [r4, #12]
 8008c44:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8008c48:	428a      	cmp	r2, r1
 8008c4a:	dd0e      	ble.n	8008c6a <localtime_r+0x14a>
 8008c4c:	2b0b      	cmp	r3, #11
 8008c4e:	eba2 0201 	sub.w	r2, r2, r1
 8008c52:	60e2      	str	r2, [r4, #12]
 8008c54:	f103 0201 	add.w	r2, r3, #1
 8008c58:	bf09      	itett	eq
 8008c5a:	6963      	ldreq	r3, [r4, #20]
 8008c5c:	6122      	strne	r2, [r4, #16]
 8008c5e:	2200      	moveq	r2, #0
 8008c60:	3301      	addeq	r3, #1
 8008c62:	bf02      	ittt	eq
 8008c64:	6122      	streq	r2, [r4, #16]
 8008c66:	6163      	streq	r3, [r4, #20]
 8008c68:	61e2      	streq	r2, [r4, #28]
 8008c6a:	f002 fa51 	bl	800b110 <__tz_unlock>
 8008c6e:	4620      	mov	r0, r4
 8008c70:	b002      	add	sp, #8
 8008c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dacb      	bge.n	8008c12 <localtime_r+0xf2>
 8008c7a:	3901      	subs	r1, #1
 8008c7c:	6061      	str	r1, [r4, #4]
 8008c7e:	333c      	adds	r3, #60	; 0x3c
 8008c80:	e7c6      	b.n	8008c10 <localtime_r+0xf0>
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dacc      	bge.n	8008c20 <localtime_r+0x100>
 8008c86:	3a01      	subs	r2, #1
 8008c88:	60a2      	str	r2, [r4, #8]
 8008c8a:	333c      	adds	r3, #60	; 0x3c
 8008c8c:	e7c7      	b.n	8008c1e <localtime_r+0xfe>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	daeb      	bge.n	8008c6a <localtime_r+0x14a>
 8008c92:	69e2      	ldr	r2, [r4, #28]
 8008c94:	3a01      	subs	r2, #1
 8008c96:	61e2      	str	r2, [r4, #28]
 8008c98:	69a2      	ldr	r2, [r4, #24]
 8008c9a:	3a01      	subs	r2, #1
 8008c9c:	bf48      	it	mi
 8008c9e:	2206      	movmi	r2, #6
 8008ca0:	61a2      	str	r2, [r4, #24]
 8008ca2:	68e2      	ldr	r2, [r4, #12]
 8008ca4:	3318      	adds	r3, #24
 8008ca6:	3a01      	subs	r2, #1
 8008ca8:	60e2      	str	r2, [r4, #12]
 8008caa:	60a3      	str	r3, [r4, #8]
 8008cac:	2a00      	cmp	r2, #0
 8008cae:	d1dc      	bne.n	8008c6a <localtime_r+0x14a>
 8008cb0:	6923      	ldr	r3, [r4, #16]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	d405      	bmi.n	8008cc2 <localtime_r+0x1a2>
 8008cb6:	6123      	str	r3, [r4, #16]
 8008cb8:	6923      	ldr	r3, [r4, #16]
 8008cba:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008cbe:	60e3      	str	r3, [r4, #12]
 8008cc0:	e7d3      	b.n	8008c6a <localtime_r+0x14a>
 8008cc2:	230b      	movs	r3, #11
 8008cc4:	6123      	str	r3, [r4, #16]
 8008cc6:	6963      	ldr	r3, [r4, #20]
 8008cc8:	1e5a      	subs	r2, r3, #1
 8008cca:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8008cce:	6162      	str	r2, [r4, #20]
 8008cd0:	079a      	lsls	r2, r3, #30
 8008cd2:	d105      	bne.n	8008ce0 <localtime_r+0x1c0>
 8008cd4:	2164      	movs	r1, #100	; 0x64
 8008cd6:	fb93 f2f1 	sdiv	r2, r3, r1
 8008cda:	fb01 3212 	mls	r2, r1, r2, r3
 8008cde:	b962      	cbnz	r2, 8008cfa <localtime_r+0x1da>
 8008ce0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008ce4:	fb93 f1f2 	sdiv	r1, r3, r2
 8008ce8:	fb02 3311 	mls	r3, r2, r1, r3
 8008cec:	fab3 f383 	clz	r3, r3
 8008cf0:	095b      	lsrs	r3, r3, #5
 8008cf2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8008cf6:	61e3      	str	r3, [r4, #28]
 8008cf8:	e7de      	b.n	8008cb8 <localtime_r+0x198>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e7f9      	b.n	8008cf2 <localtime_r+0x1d2>
 8008cfe:	bf00      	nop
 8008d00:	0800eda4 	.word	0x0800eda4
 8008d04:	200004ac 	.word	0x200004ac

08008d08 <malloc>:
 8008d08:	4b02      	ldr	r3, [pc, #8]	; (8008d14 <malloc+0xc>)
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	f000 baf1 	b.w	80092f4 <_malloc_r>
 8008d12:	bf00      	nop
 8008d14:	20000014 	.word	0x20000014

08008d18 <free>:
 8008d18:	4b02      	ldr	r3, [pc, #8]	; (8008d24 <free+0xc>)
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	6818      	ldr	r0, [r3, #0]
 8008d1e:	f000 ba7d 	b.w	800921c <_free_r>
 8008d22:	bf00      	nop
 8008d24:	20000014 	.word	0x20000014

08008d28 <memset>:
 8008d28:	4402      	add	r2, r0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d100      	bne.n	8008d32 <memset+0xa>
 8008d30:	4770      	bx	lr
 8008d32:	f803 1b01 	strb.w	r1, [r3], #1
 8008d36:	e7f9      	b.n	8008d2c <memset+0x4>

08008d38 <validate_structure>:
 8008d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d3a:	6801      	ldr	r1, [r0, #0]
 8008d3c:	293b      	cmp	r1, #59	; 0x3b
 8008d3e:	4604      	mov	r4, r0
 8008d40:	d911      	bls.n	8008d66 <validate_structure+0x2e>
 8008d42:	223c      	movs	r2, #60	; 0x3c
 8008d44:	4668      	mov	r0, sp
 8008d46:	f002 fc95 	bl	800b674 <div>
 8008d4a:	9a01      	ldr	r2, [sp, #4]
 8008d4c:	6863      	ldr	r3, [r4, #4]
 8008d4e:	9900      	ldr	r1, [sp, #0]
 8008d50:	2a00      	cmp	r2, #0
 8008d52:	440b      	add	r3, r1
 8008d54:	6063      	str	r3, [r4, #4]
 8008d56:	bfbb      	ittet	lt
 8008d58:	323c      	addlt	r2, #60	; 0x3c
 8008d5a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008d5e:	6022      	strge	r2, [r4, #0]
 8008d60:	6022      	strlt	r2, [r4, #0]
 8008d62:	bfb8      	it	lt
 8008d64:	6063      	strlt	r3, [r4, #4]
 8008d66:	6861      	ldr	r1, [r4, #4]
 8008d68:	293b      	cmp	r1, #59	; 0x3b
 8008d6a:	d911      	bls.n	8008d90 <validate_structure+0x58>
 8008d6c:	223c      	movs	r2, #60	; 0x3c
 8008d6e:	4668      	mov	r0, sp
 8008d70:	f002 fc80 	bl	800b674 <div>
 8008d74:	9a01      	ldr	r2, [sp, #4]
 8008d76:	68a3      	ldr	r3, [r4, #8]
 8008d78:	9900      	ldr	r1, [sp, #0]
 8008d7a:	2a00      	cmp	r2, #0
 8008d7c:	440b      	add	r3, r1
 8008d7e:	60a3      	str	r3, [r4, #8]
 8008d80:	bfbb      	ittet	lt
 8008d82:	323c      	addlt	r2, #60	; 0x3c
 8008d84:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008d88:	6062      	strge	r2, [r4, #4]
 8008d8a:	6062      	strlt	r2, [r4, #4]
 8008d8c:	bfb8      	it	lt
 8008d8e:	60a3      	strlt	r3, [r4, #8]
 8008d90:	68a1      	ldr	r1, [r4, #8]
 8008d92:	2917      	cmp	r1, #23
 8008d94:	d911      	bls.n	8008dba <validate_structure+0x82>
 8008d96:	2218      	movs	r2, #24
 8008d98:	4668      	mov	r0, sp
 8008d9a:	f002 fc6b 	bl	800b674 <div>
 8008d9e:	9a01      	ldr	r2, [sp, #4]
 8008da0:	68e3      	ldr	r3, [r4, #12]
 8008da2:	9900      	ldr	r1, [sp, #0]
 8008da4:	2a00      	cmp	r2, #0
 8008da6:	440b      	add	r3, r1
 8008da8:	60e3      	str	r3, [r4, #12]
 8008daa:	bfbb      	ittet	lt
 8008dac:	3218      	addlt	r2, #24
 8008dae:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008db2:	60a2      	strge	r2, [r4, #8]
 8008db4:	60a2      	strlt	r2, [r4, #8]
 8008db6:	bfb8      	it	lt
 8008db8:	60e3      	strlt	r3, [r4, #12]
 8008dba:	6921      	ldr	r1, [r4, #16]
 8008dbc:	290b      	cmp	r1, #11
 8008dbe:	d911      	bls.n	8008de4 <validate_structure+0xac>
 8008dc0:	220c      	movs	r2, #12
 8008dc2:	4668      	mov	r0, sp
 8008dc4:	f002 fc56 	bl	800b674 <div>
 8008dc8:	9a01      	ldr	r2, [sp, #4]
 8008dca:	6963      	ldr	r3, [r4, #20]
 8008dcc:	9900      	ldr	r1, [sp, #0]
 8008dce:	2a00      	cmp	r2, #0
 8008dd0:	440b      	add	r3, r1
 8008dd2:	6163      	str	r3, [r4, #20]
 8008dd4:	bfbb      	ittet	lt
 8008dd6:	320c      	addlt	r2, #12
 8008dd8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008ddc:	6122      	strge	r2, [r4, #16]
 8008dde:	6122      	strlt	r2, [r4, #16]
 8008de0:	bfb8      	it	lt
 8008de2:	6163      	strlt	r3, [r4, #20]
 8008de4:	6963      	ldr	r3, [r4, #20]
 8008de6:	0798      	lsls	r0, r3, #30
 8008de8:	d120      	bne.n	8008e2c <validate_structure+0xf4>
 8008dea:	2164      	movs	r1, #100	; 0x64
 8008dec:	fb93 f2f1 	sdiv	r2, r3, r1
 8008df0:	fb01 3212 	mls	r2, r1, r2, r3
 8008df4:	b9e2      	cbnz	r2, 8008e30 <validate_structure+0xf8>
 8008df6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8008dfa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008dfe:	fb93 f1f2 	sdiv	r1, r3, r2
 8008e02:	fb02 3311 	mls	r3, r2, r1, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	bf14      	ite	ne
 8008e0a:	231c      	movne	r3, #28
 8008e0c:	231d      	moveq	r3, #29
 8008e0e:	68e2      	ldr	r2, [r4, #12]
 8008e10:	2a00      	cmp	r2, #0
 8008e12:	dc0f      	bgt.n	8008e34 <validate_structure+0xfc>
 8008e14:	4f33      	ldr	r7, [pc, #204]	; (8008ee4 <validate_structure+0x1ac>)
 8008e16:	260b      	movs	r6, #11
 8008e18:	2064      	movs	r0, #100	; 0x64
 8008e1a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8008e1e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008e22:	f1bc 0f00 	cmp.w	ip, #0
 8008e26:	dd31      	ble.n	8008e8c <validate_structure+0x154>
 8008e28:	b003      	add	sp, #12
 8008e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e2c:	231c      	movs	r3, #28
 8008e2e:	e7ee      	b.n	8008e0e <validate_structure+0xd6>
 8008e30:	231d      	movs	r3, #29
 8008e32:	e7ec      	b.n	8008e0e <validate_structure+0xd6>
 8008e34:	4e2b      	ldr	r6, [pc, #172]	; (8008ee4 <validate_structure+0x1ac>)
 8008e36:	2700      	movs	r7, #0
 8008e38:	2064      	movs	r0, #100	; 0x64
 8008e3a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8008e3e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8008e42:	2a01      	cmp	r2, #1
 8008e44:	bf14      	ite	ne
 8008e46:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8008e4a:	469c      	moveq	ip, r3
 8008e4c:	4561      	cmp	r1, ip
 8008e4e:	ddeb      	ble.n	8008e28 <validate_structure+0xf0>
 8008e50:	3201      	adds	r2, #1
 8008e52:	eba1 010c 	sub.w	r1, r1, ip
 8008e56:	2a0c      	cmp	r2, #12
 8008e58:	60e1      	str	r1, [r4, #12]
 8008e5a:	6122      	str	r2, [r4, #16]
 8008e5c:	d1ef      	bne.n	8008e3e <validate_structure+0x106>
 8008e5e:	6963      	ldr	r3, [r4, #20]
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	0791      	lsls	r1, r2, #30
 8008e64:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8008e68:	d137      	bne.n	8008eda <validate_structure+0x1a2>
 8008e6a:	fb92 f1f0 	sdiv	r1, r2, r0
 8008e6e:	fb00 2211 	mls	r2, r0, r1, r2
 8008e72:	2a00      	cmp	r2, #0
 8008e74:	d133      	bne.n	8008ede <validate_structure+0x1a6>
 8008e76:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8008e7a:	fb93 f2f5 	sdiv	r2, r3, r5
 8008e7e:	fb05 3312 	mls	r3, r5, r2, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	bf14      	ite	ne
 8008e86:	231c      	movne	r3, #28
 8008e88:	231d      	moveq	r3, #29
 8008e8a:	e7d8      	b.n	8008e3e <validate_structure+0x106>
 8008e8c:	6921      	ldr	r1, [r4, #16]
 8008e8e:	3901      	subs	r1, #1
 8008e90:	6121      	str	r1, [r4, #16]
 8008e92:	3101      	adds	r1, #1
 8008e94:	d114      	bne.n	8008ec0 <validate_structure+0x188>
 8008e96:	6963      	ldr	r3, [r4, #20]
 8008e98:	1e5a      	subs	r2, r3, #1
 8008e9a:	0791      	lsls	r1, r2, #30
 8008e9c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8008ea0:	d117      	bne.n	8008ed2 <validate_structure+0x19a>
 8008ea2:	fb92 f1f0 	sdiv	r1, r2, r0
 8008ea6:	fb00 2211 	mls	r2, r0, r1, r2
 8008eaa:	b9a2      	cbnz	r2, 8008ed6 <validate_structure+0x19e>
 8008eac:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8008eb0:	fb93 f2f5 	sdiv	r2, r3, r5
 8008eb4:	fb05 3312 	mls	r3, r5, r2, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	bf14      	ite	ne
 8008ebc:	231c      	movne	r3, #28
 8008ebe:	231d      	moveq	r3, #29
 8008ec0:	6922      	ldr	r2, [r4, #16]
 8008ec2:	2a01      	cmp	r2, #1
 8008ec4:	bf14      	ite	ne
 8008ec6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8008eca:	461a      	moveq	r2, r3
 8008ecc:	4462      	add	r2, ip
 8008ece:	60e2      	str	r2, [r4, #12]
 8008ed0:	e7a5      	b.n	8008e1e <validate_structure+0xe6>
 8008ed2:	231c      	movs	r3, #28
 8008ed4:	e7f4      	b.n	8008ec0 <validate_structure+0x188>
 8008ed6:	231d      	movs	r3, #29
 8008ed8:	e7f2      	b.n	8008ec0 <validate_structure+0x188>
 8008eda:	231c      	movs	r3, #28
 8008edc:	e7af      	b.n	8008e3e <validate_structure+0x106>
 8008ede:	231d      	movs	r3, #29
 8008ee0:	e7ad      	b.n	8008e3e <validate_structure+0x106>
 8008ee2:	bf00      	nop
 8008ee4:	0800ed44 	.word	0x0800ed44

08008ee8 <mktime>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	b085      	sub	sp, #20
 8008eee:	4607      	mov	r7, r0
 8008ef0:	f003 ffcc 	bl	800ce8c <__gettzinfo>
 8008ef4:	4681      	mov	r9, r0
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	f7ff ff1e 	bl	8008d38 <validate_structure>
 8008efc:	e9d7 4000 	ldrd	r4, r0, [r7]
 8008f00:	233c      	movs	r3, #60	; 0x3c
 8008f02:	fb03 4400 	mla	r4, r3, r0, r4
 8008f06:	68b8      	ldr	r0, [r7, #8]
 8008f08:	4abc      	ldr	r2, [pc, #752]	; (80091fc <mktime+0x314>)
 8008f0a:	697e      	ldr	r6, [r7, #20]
 8008f0c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008f10:	fb03 4400 	mla	r4, r3, r0, r4
 8008f14:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8008f18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008f1c:	3d01      	subs	r5, #1
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	4415      	add	r5, r2
 8008f22:	dd11      	ble.n	8008f48 <mktime+0x60>
 8008f24:	07b1      	lsls	r1, r6, #30
 8008f26:	d10f      	bne.n	8008f48 <mktime+0x60>
 8008f28:	2264      	movs	r2, #100	; 0x64
 8008f2a:	fb96 f3f2 	sdiv	r3, r6, r2
 8008f2e:	fb02 6313 	mls	r3, r2, r3, r6
 8008f32:	b943      	cbnz	r3, 8008f46 <mktime+0x5e>
 8008f34:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8008f38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008f3c:	fb93 f1f2 	sdiv	r1, r3, r2
 8008f40:	fb02 3311 	mls	r3, r2, r1, r3
 8008f44:	b903      	cbnz	r3, 8008f48 <mktime+0x60>
 8008f46:	3501      	adds	r5, #1
 8008f48:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8008f4c:	3310      	adds	r3, #16
 8008f4e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008f52:	4293      	cmp	r3, r2
 8008f54:	61fd      	str	r5, [r7, #28]
 8008f56:	f200 815d 	bhi.w	8009214 <mktime+0x32c>
 8008f5a:	2e46      	cmp	r6, #70	; 0x46
 8008f5c:	dd71      	ble.n	8009042 <mktime+0x15a>
 8008f5e:	2346      	movs	r3, #70	; 0x46
 8008f60:	f240 1c6d 	movw	ip, #365	; 0x16d
 8008f64:	2164      	movs	r1, #100	; 0x64
 8008f66:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008f6a:	079a      	lsls	r2, r3, #30
 8008f6c:	d163      	bne.n	8009036 <mktime+0x14e>
 8008f6e:	fb93 f2f1 	sdiv	r2, r3, r1
 8008f72:	fb01 3212 	mls	r2, r1, r2, r3
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	d160      	bne.n	800903c <mktime+0x154>
 8008f7a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8008f7e:	fb92 fef0 	sdiv	lr, r2, r0
 8008f82:	fb00 221e 	mls	r2, r0, lr, r2
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	bf14      	ite	ne
 8008f8a:	4662      	movne	r2, ip
 8008f8c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8008f90:	3301      	adds	r3, #1
 8008f92:	429e      	cmp	r6, r3
 8008f94:	4415      	add	r5, r2
 8008f96:	d1e8      	bne.n	8008f6a <mktime+0x82>
 8008f98:	4b99      	ldr	r3, [pc, #612]	; (8009200 <mktime+0x318>)
 8008f9a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8008f9e:	fbc5 4803 	smlal	r4, r8, r5, r3
 8008fa2:	f002 f8af 	bl	800b104 <__tz_lock>
 8008fa6:	f002 f8b9 	bl	800b11c <_tzset_unlocked>
 8008faa:	4b96      	ldr	r3, [pc, #600]	; (8009204 <mktime+0x31c>)
 8008fac:	f8d3 b000 	ldr.w	fp, [r3]
 8008fb0:	f1bb 0f00 	cmp.w	fp, #0
 8008fb4:	d039      	beq.n	800902a <mktime+0x142>
 8008fb6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8008fba:	6978      	ldr	r0, [r7, #20]
 8008fbc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008fc0:	f1bb 0f01 	cmp.w	fp, #1
 8008fc4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008fc8:	46da      	mov	sl, fp
 8008fca:	bfa8      	it	ge
 8008fcc:	f04f 0a01 	movge.w	sl, #1
 8008fd0:	4283      	cmp	r3, r0
 8008fd2:	d178      	bne.n	80090c6 <mktime+0x1de>
 8008fd4:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8008fd8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8008fdc:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8008fe0:	1a5b      	subs	r3, r3, r1
 8008fe2:	9302      	str	r3, [sp, #8]
 8008fe4:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8008fe8:	9303      	str	r3, [sp, #12]
 8008fea:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8008fee:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8008ff2:	9301      	str	r3, [sp, #4]
 8008ff4:	ebb3 0c02 	subs.w	ip, r3, r2
 8008ff8:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8008ffc:	4564      	cmp	r4, ip
 8008ffe:	eb78 0300 	sbcs.w	r3, r8, r0
 8009002:	da66      	bge.n	80090d2 <mktime+0x1ea>
 8009004:	f8d9 3000 	ldr.w	r3, [r9]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d06f      	beq.n	80090ec <mktime+0x204>
 800900c:	9b02      	ldr	r3, [sp, #8]
 800900e:	429c      	cmp	r4, r3
 8009010:	9b03      	ldr	r3, [sp, #12]
 8009012:	eb78 0303 	sbcs.w	r3, r8, r3
 8009016:	db03      	blt.n	8009020 <mktime+0x138>
 8009018:	4564      	cmp	r4, ip
 800901a:	eb78 0300 	sbcs.w	r3, r8, r0
 800901e:	db6b      	blt.n	80090f8 <mktime+0x210>
 8009020:	f1bb 0f00 	cmp.w	fp, #0
 8009024:	f04f 0b00 	mov.w	fp, #0
 8009028:	da6b      	bge.n	8009102 <mktime+0x21a>
 800902a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800902e:	190c      	adds	r4, r1, r4
 8009030:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8009034:	e0a9      	b.n	800918a <mktime+0x2a2>
 8009036:	f240 126d 	movw	r2, #365	; 0x16d
 800903a:	e7a9      	b.n	8008f90 <mktime+0xa8>
 800903c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009040:	e7a6      	b.n	8008f90 <mktime+0xa8>
 8009042:	d0a9      	beq.n	8008f98 <mktime+0xb0>
 8009044:	2345      	movs	r3, #69	; 0x45
 8009046:	f240 1c6d 	movw	ip, #365	; 0x16d
 800904a:	2164      	movs	r1, #100	; 0x64
 800904c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009050:	e012      	b.n	8009078 <mktime+0x190>
 8009052:	bb62      	cbnz	r2, 80090ae <mktime+0x1c6>
 8009054:	fb93 f2f1 	sdiv	r2, r3, r1
 8009058:	fb01 3212 	mls	r2, r1, r2, r3
 800905c:	bb52      	cbnz	r2, 80090b4 <mktime+0x1cc>
 800905e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8009062:	fb92 fef0 	sdiv	lr, r2, r0
 8009066:	fb00 221e 	mls	r2, r0, lr, r2
 800906a:	2a00      	cmp	r2, #0
 800906c:	bf14      	ite	ne
 800906e:	4662      	movne	r2, ip
 8009070:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009074:	1aad      	subs	r5, r5, r2
 8009076:	3b01      	subs	r3, #1
 8009078:	429e      	cmp	r6, r3
 800907a:	f003 0203 	and.w	r2, r3, #3
 800907e:	dbe8      	blt.n	8009052 <mktime+0x16a>
 8009080:	b9da      	cbnz	r2, 80090ba <mktime+0x1d2>
 8009082:	2264      	movs	r2, #100	; 0x64
 8009084:	fb96 f3f2 	sdiv	r3, r6, r2
 8009088:	fb02 6313 	mls	r3, r2, r3, r6
 800908c:	b9c3      	cbnz	r3, 80090c0 <mktime+0x1d8>
 800908e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8009092:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009096:	fb93 f1f2 	sdiv	r1, r3, r2
 800909a:	fb02 3311 	mls	r3, r2, r1, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f240 136d 	movw	r3, #365	; 0x16d
 80090a4:	bf08      	it	eq
 80090a6:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80090aa:	1aed      	subs	r5, r5, r3
 80090ac:	e774      	b.n	8008f98 <mktime+0xb0>
 80090ae:	f240 126d 	movw	r2, #365	; 0x16d
 80090b2:	e7df      	b.n	8009074 <mktime+0x18c>
 80090b4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80090b8:	e7dc      	b.n	8009074 <mktime+0x18c>
 80090ba:	f240 136d 	movw	r3, #365	; 0x16d
 80090be:	e7f4      	b.n	80090aa <mktime+0x1c2>
 80090c0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80090c4:	e7f1      	b.n	80090aa <mktime+0x1c2>
 80090c6:	f001 ff73 	bl	800afb0 <__tzcalc_limits>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d182      	bne.n	8008fd4 <mktime+0xec>
 80090ce:	46d3      	mov	fp, sl
 80090d0:	e050      	b.n	8009174 <mktime+0x28c>
 80090d2:	9b01      	ldr	r3, [sp, #4]
 80090d4:	1a5b      	subs	r3, r3, r1
 80090d6:	9301      	str	r3, [sp, #4]
 80090d8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80090dc:	eb6e 0e03 	sbc.w	lr, lr, r3
 80090e0:	9b01      	ldr	r3, [sp, #4]
 80090e2:	429c      	cmp	r4, r3
 80090e4:	eb78 030e 	sbcs.w	r3, r8, lr
 80090e8:	dbf1      	blt.n	80090ce <mktime+0x1e6>
 80090ea:	e78b      	b.n	8009004 <mktime+0x11c>
 80090ec:	9b02      	ldr	r3, [sp, #8]
 80090ee:	429c      	cmp	r4, r3
 80090f0:	9b03      	ldr	r3, [sp, #12]
 80090f2:	eb78 0303 	sbcs.w	r3, r8, r3
 80090f6:	db8f      	blt.n	8009018 <mktime+0x130>
 80090f8:	f1bb 0f00 	cmp.w	fp, #0
 80090fc:	db3e      	blt.n	800917c <mktime+0x294>
 80090fe:	f04f 0b01 	mov.w	fp, #1
 8009102:	ea8a 0a0b 	eor.w	sl, sl, fp
 8009106:	f1ba 0f01 	cmp.w	sl, #1
 800910a:	d133      	bne.n	8009174 <mktime+0x28c>
 800910c:	f1bb 0f00 	cmp.w	fp, #0
 8009110:	d04e      	beq.n	80091b0 <mktime+0x2c8>
 8009112:	1a52      	subs	r2, r2, r1
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800911a:	4413      	add	r3, r2
 800911c:	1914      	adds	r4, r2, r4
 800911e:	603b      	str	r3, [r7, #0]
 8009120:	4638      	mov	r0, r7
 8009122:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8009126:	f7ff fe07 	bl	8008d38 <validate_structure>
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	ebb2 020a 	subs.w	r2, r2, sl
 8009130:	d020      	beq.n	8009174 <mktime+0x28c>
 8009132:	2a01      	cmp	r2, #1
 8009134:	dc3e      	bgt.n	80091b4 <mktime+0x2cc>
 8009136:	1c90      	adds	r0, r2, #2
 8009138:	bfd8      	it	le
 800913a:	2201      	movle	r2, #1
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	18d3      	adds	r3, r2, r3
 8009140:	4415      	add	r5, r2
 8009142:	d540      	bpl.n	80091c6 <mktime+0x2de>
 8009144:	1e73      	subs	r3, r6, #1
 8009146:	0799      	lsls	r1, r3, #30
 8009148:	d137      	bne.n	80091ba <mktime+0x2d2>
 800914a:	2264      	movs	r2, #100	; 0x64
 800914c:	fb93 f1f2 	sdiv	r1, r3, r2
 8009150:	fb02 3311 	mls	r3, r2, r1, r3
 8009154:	bba3      	cbnz	r3, 80091c0 <mktime+0x2d8>
 8009156:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800915a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800915e:	fb96 f2f3 	sdiv	r2, r6, r3
 8009162:	fb03 6612 	mls	r6, r3, r2, r6
 8009166:	2e00      	cmp	r6, #0
 8009168:	f240 136d 	movw	r3, #365	; 0x16d
 800916c:	bf18      	it	ne
 800916e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8009172:	61fb      	str	r3, [r7, #28]
 8009174:	f1bb 0f01 	cmp.w	fp, #1
 8009178:	f47f af57 	bne.w	800902a <mktime+0x142>
 800917c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8009180:	190c      	adds	r4, r1, r4
 8009182:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8009186:	f04f 0b01 	mov.w	fp, #1
 800918a:	f001 ffc1 	bl	800b110 <__tz_unlock>
 800918e:	3504      	adds	r5, #4
 8009190:	2307      	movs	r3, #7
 8009192:	fb95 f3f3 	sdiv	r3, r5, r3
 8009196:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800919a:	1aed      	subs	r5, r5, r3
 800919c:	bf48      	it	mi
 800919e:	3507      	addmi	r5, #7
 80091a0:	f8c7 b020 	str.w	fp, [r7, #32]
 80091a4:	61bd      	str	r5, [r7, #24]
 80091a6:	4620      	mov	r0, r4
 80091a8:	4641      	mov	r1, r8
 80091aa:	b005      	add	sp, #20
 80091ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b0:	1a8a      	subs	r2, r1, r2
 80091b2:	e7af      	b.n	8009114 <mktime+0x22c>
 80091b4:	f04f 32ff 	mov.w	r2, #4294967295
 80091b8:	e7c0      	b.n	800913c <mktime+0x254>
 80091ba:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80091be:	e7d8      	b.n	8009172 <mktime+0x28a>
 80091c0:	f240 136d 	movw	r3, #365	; 0x16d
 80091c4:	e7d5      	b.n	8009172 <mktime+0x28a>
 80091c6:	07b2      	lsls	r2, r6, #30
 80091c8:	d11e      	bne.n	8009208 <mktime+0x320>
 80091ca:	2164      	movs	r1, #100	; 0x64
 80091cc:	fb96 f2f1 	sdiv	r2, r6, r1
 80091d0:	fb01 6212 	mls	r2, r1, r2, r6
 80091d4:	b9da      	cbnz	r2, 800920e <mktime+0x326>
 80091d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80091da:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80091de:	fb96 f1f2 	sdiv	r1, r6, r2
 80091e2:	fb02 6611 	mls	r6, r2, r1, r6
 80091e6:	2e00      	cmp	r6, #0
 80091e8:	f240 126d 	movw	r2, #365	; 0x16d
 80091ec:	bf08      	it	eq
 80091ee:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80091f2:	4293      	cmp	r3, r2
 80091f4:	bfa8      	it	ge
 80091f6:	1a9b      	subge	r3, r3, r2
 80091f8:	e7bb      	b.n	8009172 <mktime+0x28a>
 80091fa:	bf00      	nop
 80091fc:	0800ed74 	.word	0x0800ed74
 8009200:	00015180 	.word	0x00015180
 8009204:	200004ac 	.word	0x200004ac
 8009208:	f240 126d 	movw	r2, #365	; 0x16d
 800920c:	e7f1      	b.n	80091f2 <mktime+0x30a>
 800920e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009212:	e7ee      	b.n	80091f2 <mktime+0x30a>
 8009214:	f04f 34ff 	mov.w	r4, #4294967295
 8009218:	46a0      	mov	r8, r4
 800921a:	e7c4      	b.n	80091a6 <mktime+0x2be>

0800921c <_free_r>:
 800921c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800921e:	2900      	cmp	r1, #0
 8009220:	d044      	beq.n	80092ac <_free_r+0x90>
 8009222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009226:	9001      	str	r0, [sp, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	f1a1 0404 	sub.w	r4, r1, #4
 800922e:	bfb8      	it	lt
 8009230:	18e4      	addlt	r4, r4, r3
 8009232:	f003 ff69 	bl	800d108 <__malloc_lock>
 8009236:	4a1e      	ldr	r2, [pc, #120]	; (80092b0 <_free_r+0x94>)
 8009238:	9801      	ldr	r0, [sp, #4]
 800923a:	6813      	ldr	r3, [r2, #0]
 800923c:	b933      	cbnz	r3, 800924c <_free_r+0x30>
 800923e:	6063      	str	r3, [r4, #4]
 8009240:	6014      	str	r4, [r2, #0]
 8009242:	b003      	add	sp, #12
 8009244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009248:	f003 bf64 	b.w	800d114 <__malloc_unlock>
 800924c:	42a3      	cmp	r3, r4
 800924e:	d908      	bls.n	8009262 <_free_r+0x46>
 8009250:	6825      	ldr	r5, [r4, #0]
 8009252:	1961      	adds	r1, r4, r5
 8009254:	428b      	cmp	r3, r1
 8009256:	bf01      	itttt	eq
 8009258:	6819      	ldreq	r1, [r3, #0]
 800925a:	685b      	ldreq	r3, [r3, #4]
 800925c:	1949      	addeq	r1, r1, r5
 800925e:	6021      	streq	r1, [r4, #0]
 8009260:	e7ed      	b.n	800923e <_free_r+0x22>
 8009262:	461a      	mov	r2, r3
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	b10b      	cbz	r3, 800926c <_free_r+0x50>
 8009268:	42a3      	cmp	r3, r4
 800926a:	d9fa      	bls.n	8009262 <_free_r+0x46>
 800926c:	6811      	ldr	r1, [r2, #0]
 800926e:	1855      	adds	r5, r2, r1
 8009270:	42a5      	cmp	r5, r4
 8009272:	d10b      	bne.n	800928c <_free_r+0x70>
 8009274:	6824      	ldr	r4, [r4, #0]
 8009276:	4421      	add	r1, r4
 8009278:	1854      	adds	r4, r2, r1
 800927a:	42a3      	cmp	r3, r4
 800927c:	6011      	str	r1, [r2, #0]
 800927e:	d1e0      	bne.n	8009242 <_free_r+0x26>
 8009280:	681c      	ldr	r4, [r3, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	6053      	str	r3, [r2, #4]
 8009286:	4421      	add	r1, r4
 8009288:	6011      	str	r1, [r2, #0]
 800928a:	e7da      	b.n	8009242 <_free_r+0x26>
 800928c:	d902      	bls.n	8009294 <_free_r+0x78>
 800928e:	230c      	movs	r3, #12
 8009290:	6003      	str	r3, [r0, #0]
 8009292:	e7d6      	b.n	8009242 <_free_r+0x26>
 8009294:	6825      	ldr	r5, [r4, #0]
 8009296:	1961      	adds	r1, r4, r5
 8009298:	428b      	cmp	r3, r1
 800929a:	bf04      	itt	eq
 800929c:	6819      	ldreq	r1, [r3, #0]
 800929e:	685b      	ldreq	r3, [r3, #4]
 80092a0:	6063      	str	r3, [r4, #4]
 80092a2:	bf04      	itt	eq
 80092a4:	1949      	addeq	r1, r1, r5
 80092a6:	6021      	streq	r1, [r4, #0]
 80092a8:	6054      	str	r4, [r2, #4]
 80092aa:	e7ca      	b.n	8009242 <_free_r+0x26>
 80092ac:	b003      	add	sp, #12
 80092ae:	bd30      	pop	{r4, r5, pc}
 80092b0:	20000488 	.word	0x20000488

080092b4 <sbrk_aligned>:
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	4e0e      	ldr	r6, [pc, #56]	; (80092f0 <sbrk_aligned+0x3c>)
 80092b8:	460c      	mov	r4, r1
 80092ba:	6831      	ldr	r1, [r6, #0]
 80092bc:	4605      	mov	r5, r0
 80092be:	b911      	cbnz	r1, 80092c6 <sbrk_aligned+0x12>
 80092c0:	f000 ff94 	bl	800a1ec <_sbrk_r>
 80092c4:	6030      	str	r0, [r6, #0]
 80092c6:	4621      	mov	r1, r4
 80092c8:	4628      	mov	r0, r5
 80092ca:	f000 ff8f 	bl	800a1ec <_sbrk_r>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	d00a      	beq.n	80092e8 <sbrk_aligned+0x34>
 80092d2:	1cc4      	adds	r4, r0, #3
 80092d4:	f024 0403 	bic.w	r4, r4, #3
 80092d8:	42a0      	cmp	r0, r4
 80092da:	d007      	beq.n	80092ec <sbrk_aligned+0x38>
 80092dc:	1a21      	subs	r1, r4, r0
 80092de:	4628      	mov	r0, r5
 80092e0:	f000 ff84 	bl	800a1ec <_sbrk_r>
 80092e4:	3001      	adds	r0, #1
 80092e6:	d101      	bne.n	80092ec <sbrk_aligned+0x38>
 80092e8:	f04f 34ff 	mov.w	r4, #4294967295
 80092ec:	4620      	mov	r0, r4
 80092ee:	bd70      	pop	{r4, r5, r6, pc}
 80092f0:	2000048c 	.word	0x2000048c

080092f4 <_malloc_r>:
 80092f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f8:	1ccd      	adds	r5, r1, #3
 80092fa:	f025 0503 	bic.w	r5, r5, #3
 80092fe:	3508      	adds	r5, #8
 8009300:	2d0c      	cmp	r5, #12
 8009302:	bf38      	it	cc
 8009304:	250c      	movcc	r5, #12
 8009306:	2d00      	cmp	r5, #0
 8009308:	4607      	mov	r7, r0
 800930a:	db01      	blt.n	8009310 <_malloc_r+0x1c>
 800930c:	42a9      	cmp	r1, r5
 800930e:	d905      	bls.n	800931c <_malloc_r+0x28>
 8009310:	230c      	movs	r3, #12
 8009312:	603b      	str	r3, [r7, #0]
 8009314:	2600      	movs	r6, #0
 8009316:	4630      	mov	r0, r6
 8009318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800931c:	4e2e      	ldr	r6, [pc, #184]	; (80093d8 <_malloc_r+0xe4>)
 800931e:	f003 fef3 	bl	800d108 <__malloc_lock>
 8009322:	6833      	ldr	r3, [r6, #0]
 8009324:	461c      	mov	r4, r3
 8009326:	bb34      	cbnz	r4, 8009376 <_malloc_r+0x82>
 8009328:	4629      	mov	r1, r5
 800932a:	4638      	mov	r0, r7
 800932c:	f7ff ffc2 	bl	80092b4 <sbrk_aligned>
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	4604      	mov	r4, r0
 8009334:	d14d      	bne.n	80093d2 <_malloc_r+0xde>
 8009336:	6834      	ldr	r4, [r6, #0]
 8009338:	4626      	mov	r6, r4
 800933a:	2e00      	cmp	r6, #0
 800933c:	d140      	bne.n	80093c0 <_malloc_r+0xcc>
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	4631      	mov	r1, r6
 8009342:	4638      	mov	r0, r7
 8009344:	eb04 0803 	add.w	r8, r4, r3
 8009348:	f000 ff50 	bl	800a1ec <_sbrk_r>
 800934c:	4580      	cmp	r8, r0
 800934e:	d13a      	bne.n	80093c6 <_malloc_r+0xd2>
 8009350:	6821      	ldr	r1, [r4, #0]
 8009352:	3503      	adds	r5, #3
 8009354:	1a6d      	subs	r5, r5, r1
 8009356:	f025 0503 	bic.w	r5, r5, #3
 800935a:	3508      	adds	r5, #8
 800935c:	2d0c      	cmp	r5, #12
 800935e:	bf38      	it	cc
 8009360:	250c      	movcc	r5, #12
 8009362:	4629      	mov	r1, r5
 8009364:	4638      	mov	r0, r7
 8009366:	f7ff ffa5 	bl	80092b4 <sbrk_aligned>
 800936a:	3001      	adds	r0, #1
 800936c:	d02b      	beq.n	80093c6 <_malloc_r+0xd2>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	442b      	add	r3, r5
 8009372:	6023      	str	r3, [r4, #0]
 8009374:	e00e      	b.n	8009394 <_malloc_r+0xa0>
 8009376:	6822      	ldr	r2, [r4, #0]
 8009378:	1b52      	subs	r2, r2, r5
 800937a:	d41e      	bmi.n	80093ba <_malloc_r+0xc6>
 800937c:	2a0b      	cmp	r2, #11
 800937e:	d916      	bls.n	80093ae <_malloc_r+0xba>
 8009380:	1961      	adds	r1, r4, r5
 8009382:	42a3      	cmp	r3, r4
 8009384:	6025      	str	r5, [r4, #0]
 8009386:	bf18      	it	ne
 8009388:	6059      	strne	r1, [r3, #4]
 800938a:	6863      	ldr	r3, [r4, #4]
 800938c:	bf08      	it	eq
 800938e:	6031      	streq	r1, [r6, #0]
 8009390:	5162      	str	r2, [r4, r5]
 8009392:	604b      	str	r3, [r1, #4]
 8009394:	4638      	mov	r0, r7
 8009396:	f104 060b 	add.w	r6, r4, #11
 800939a:	f003 febb 	bl	800d114 <__malloc_unlock>
 800939e:	f026 0607 	bic.w	r6, r6, #7
 80093a2:	1d23      	adds	r3, r4, #4
 80093a4:	1af2      	subs	r2, r6, r3
 80093a6:	d0b6      	beq.n	8009316 <_malloc_r+0x22>
 80093a8:	1b9b      	subs	r3, r3, r6
 80093aa:	50a3      	str	r3, [r4, r2]
 80093ac:	e7b3      	b.n	8009316 <_malloc_r+0x22>
 80093ae:	6862      	ldr	r2, [r4, #4]
 80093b0:	42a3      	cmp	r3, r4
 80093b2:	bf0c      	ite	eq
 80093b4:	6032      	streq	r2, [r6, #0]
 80093b6:	605a      	strne	r2, [r3, #4]
 80093b8:	e7ec      	b.n	8009394 <_malloc_r+0xa0>
 80093ba:	4623      	mov	r3, r4
 80093bc:	6864      	ldr	r4, [r4, #4]
 80093be:	e7b2      	b.n	8009326 <_malloc_r+0x32>
 80093c0:	4634      	mov	r4, r6
 80093c2:	6876      	ldr	r6, [r6, #4]
 80093c4:	e7b9      	b.n	800933a <_malloc_r+0x46>
 80093c6:	230c      	movs	r3, #12
 80093c8:	603b      	str	r3, [r7, #0]
 80093ca:	4638      	mov	r0, r7
 80093cc:	f003 fea2 	bl	800d114 <__malloc_unlock>
 80093d0:	e7a1      	b.n	8009316 <_malloc_r+0x22>
 80093d2:	6025      	str	r5, [r4, #0]
 80093d4:	e7de      	b.n	8009394 <_malloc_r+0xa0>
 80093d6:	bf00      	nop
 80093d8:	20000488 	.word	0x20000488

080093dc <__cvt>:
 80093dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093e0:	ec55 4b10 	vmov	r4, r5, d0
 80093e4:	2d00      	cmp	r5, #0
 80093e6:	460e      	mov	r6, r1
 80093e8:	4619      	mov	r1, r3
 80093ea:	462b      	mov	r3, r5
 80093ec:	bfbb      	ittet	lt
 80093ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80093f2:	461d      	movlt	r5, r3
 80093f4:	2300      	movge	r3, #0
 80093f6:	232d      	movlt	r3, #45	; 0x2d
 80093f8:	700b      	strb	r3, [r1, #0]
 80093fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009400:	4691      	mov	r9, r2
 8009402:	f023 0820 	bic.w	r8, r3, #32
 8009406:	bfbc      	itt	lt
 8009408:	4622      	movlt	r2, r4
 800940a:	4614      	movlt	r4, r2
 800940c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009410:	d005      	beq.n	800941e <__cvt+0x42>
 8009412:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009416:	d100      	bne.n	800941a <__cvt+0x3e>
 8009418:	3601      	adds	r6, #1
 800941a:	2102      	movs	r1, #2
 800941c:	e000      	b.n	8009420 <__cvt+0x44>
 800941e:	2103      	movs	r1, #3
 8009420:	ab03      	add	r3, sp, #12
 8009422:	9301      	str	r3, [sp, #4]
 8009424:	ab02      	add	r3, sp, #8
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	ec45 4b10 	vmov	d0, r4, r5
 800942c:	4653      	mov	r3, sl
 800942e:	4632      	mov	r2, r6
 8009430:	f002 f9c2 	bl	800b7b8 <_dtoa_r>
 8009434:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009438:	4607      	mov	r7, r0
 800943a:	d102      	bne.n	8009442 <__cvt+0x66>
 800943c:	f019 0f01 	tst.w	r9, #1
 8009440:	d022      	beq.n	8009488 <__cvt+0xac>
 8009442:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009446:	eb07 0906 	add.w	r9, r7, r6
 800944a:	d110      	bne.n	800946e <__cvt+0x92>
 800944c:	783b      	ldrb	r3, [r7, #0]
 800944e:	2b30      	cmp	r3, #48	; 0x30
 8009450:	d10a      	bne.n	8009468 <__cvt+0x8c>
 8009452:	2200      	movs	r2, #0
 8009454:	2300      	movs	r3, #0
 8009456:	4620      	mov	r0, r4
 8009458:	4629      	mov	r1, r5
 800945a:	f7f7 fb3f 	bl	8000adc <__aeabi_dcmpeq>
 800945e:	b918      	cbnz	r0, 8009468 <__cvt+0x8c>
 8009460:	f1c6 0601 	rsb	r6, r6, #1
 8009464:	f8ca 6000 	str.w	r6, [sl]
 8009468:	f8da 3000 	ldr.w	r3, [sl]
 800946c:	4499      	add	r9, r3
 800946e:	2200      	movs	r2, #0
 8009470:	2300      	movs	r3, #0
 8009472:	4620      	mov	r0, r4
 8009474:	4629      	mov	r1, r5
 8009476:	f7f7 fb31 	bl	8000adc <__aeabi_dcmpeq>
 800947a:	b108      	cbz	r0, 8009480 <__cvt+0xa4>
 800947c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009480:	2230      	movs	r2, #48	; 0x30
 8009482:	9b03      	ldr	r3, [sp, #12]
 8009484:	454b      	cmp	r3, r9
 8009486:	d307      	bcc.n	8009498 <__cvt+0xbc>
 8009488:	9b03      	ldr	r3, [sp, #12]
 800948a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800948c:	1bdb      	subs	r3, r3, r7
 800948e:	4638      	mov	r0, r7
 8009490:	6013      	str	r3, [r2, #0]
 8009492:	b004      	add	sp, #16
 8009494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009498:	1c59      	adds	r1, r3, #1
 800949a:	9103      	str	r1, [sp, #12]
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	e7f0      	b.n	8009482 <__cvt+0xa6>

080094a0 <__exponent>:
 80094a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094a2:	4603      	mov	r3, r0
 80094a4:	2900      	cmp	r1, #0
 80094a6:	bfb8      	it	lt
 80094a8:	4249      	neglt	r1, r1
 80094aa:	f803 2b02 	strb.w	r2, [r3], #2
 80094ae:	bfb4      	ite	lt
 80094b0:	222d      	movlt	r2, #45	; 0x2d
 80094b2:	222b      	movge	r2, #43	; 0x2b
 80094b4:	2909      	cmp	r1, #9
 80094b6:	7042      	strb	r2, [r0, #1]
 80094b8:	dd2a      	ble.n	8009510 <__exponent+0x70>
 80094ba:	f10d 0407 	add.w	r4, sp, #7
 80094be:	46a4      	mov	ip, r4
 80094c0:	270a      	movs	r7, #10
 80094c2:	46a6      	mov	lr, r4
 80094c4:	460a      	mov	r2, r1
 80094c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80094ca:	fb07 1516 	mls	r5, r7, r6, r1
 80094ce:	3530      	adds	r5, #48	; 0x30
 80094d0:	2a63      	cmp	r2, #99	; 0x63
 80094d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80094d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80094da:	4631      	mov	r1, r6
 80094dc:	dcf1      	bgt.n	80094c2 <__exponent+0x22>
 80094de:	3130      	adds	r1, #48	; 0x30
 80094e0:	f1ae 0502 	sub.w	r5, lr, #2
 80094e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80094e8:	1c44      	adds	r4, r0, #1
 80094ea:	4629      	mov	r1, r5
 80094ec:	4561      	cmp	r1, ip
 80094ee:	d30a      	bcc.n	8009506 <__exponent+0x66>
 80094f0:	f10d 0209 	add.w	r2, sp, #9
 80094f4:	eba2 020e 	sub.w	r2, r2, lr
 80094f8:	4565      	cmp	r5, ip
 80094fa:	bf88      	it	hi
 80094fc:	2200      	movhi	r2, #0
 80094fe:	4413      	add	r3, r2
 8009500:	1a18      	subs	r0, r3, r0
 8009502:	b003      	add	sp, #12
 8009504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800950a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800950e:	e7ed      	b.n	80094ec <__exponent+0x4c>
 8009510:	2330      	movs	r3, #48	; 0x30
 8009512:	3130      	adds	r1, #48	; 0x30
 8009514:	7083      	strb	r3, [r0, #2]
 8009516:	70c1      	strb	r1, [r0, #3]
 8009518:	1d03      	adds	r3, r0, #4
 800951a:	e7f1      	b.n	8009500 <__exponent+0x60>

0800951c <_printf_float>:
 800951c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009520:	ed2d 8b02 	vpush	{d8}
 8009524:	b08d      	sub	sp, #52	; 0x34
 8009526:	460c      	mov	r4, r1
 8009528:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800952c:	4616      	mov	r6, r2
 800952e:	461f      	mov	r7, r3
 8009530:	4605      	mov	r5, r0
 8009532:	f003 fd5b 	bl	800cfec <_localeconv_r>
 8009536:	f8d0 a000 	ldr.w	sl, [r0]
 800953a:	4650      	mov	r0, sl
 800953c:	f7f6 fe48 	bl	80001d0 <strlen>
 8009540:	2300      	movs	r3, #0
 8009542:	930a      	str	r3, [sp, #40]	; 0x28
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	9305      	str	r3, [sp, #20]
 8009548:	f8d8 3000 	ldr.w	r3, [r8]
 800954c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009550:	3307      	adds	r3, #7
 8009552:	f023 0307 	bic.w	r3, r3, #7
 8009556:	f103 0208 	add.w	r2, r3, #8
 800955a:	f8c8 2000 	str.w	r2, [r8]
 800955e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009562:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009566:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800956a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800956e:	9307      	str	r3, [sp, #28]
 8009570:	f8cd 8018 	str.w	r8, [sp, #24]
 8009574:	ee08 0a10 	vmov	s16, r0
 8009578:	4b9f      	ldr	r3, [pc, #636]	; (80097f8 <_printf_float+0x2dc>)
 800957a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800957e:	f04f 32ff 	mov.w	r2, #4294967295
 8009582:	f7f7 fadd 	bl	8000b40 <__aeabi_dcmpun>
 8009586:	bb88      	cbnz	r0, 80095ec <_printf_float+0xd0>
 8009588:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800958c:	4b9a      	ldr	r3, [pc, #616]	; (80097f8 <_printf_float+0x2dc>)
 800958e:	f04f 32ff 	mov.w	r2, #4294967295
 8009592:	f7f7 fab7 	bl	8000b04 <__aeabi_dcmple>
 8009596:	bb48      	cbnz	r0, 80095ec <_printf_float+0xd0>
 8009598:	2200      	movs	r2, #0
 800959a:	2300      	movs	r3, #0
 800959c:	4640      	mov	r0, r8
 800959e:	4649      	mov	r1, r9
 80095a0:	f7f7 faa6 	bl	8000af0 <__aeabi_dcmplt>
 80095a4:	b110      	cbz	r0, 80095ac <_printf_float+0x90>
 80095a6:	232d      	movs	r3, #45	; 0x2d
 80095a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095ac:	4b93      	ldr	r3, [pc, #588]	; (80097fc <_printf_float+0x2e0>)
 80095ae:	4894      	ldr	r0, [pc, #592]	; (8009800 <_printf_float+0x2e4>)
 80095b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80095b4:	bf94      	ite	ls
 80095b6:	4698      	movls	r8, r3
 80095b8:	4680      	movhi	r8, r0
 80095ba:	2303      	movs	r3, #3
 80095bc:	6123      	str	r3, [r4, #16]
 80095be:	9b05      	ldr	r3, [sp, #20]
 80095c0:	f023 0204 	bic.w	r2, r3, #4
 80095c4:	6022      	str	r2, [r4, #0]
 80095c6:	f04f 0900 	mov.w	r9, #0
 80095ca:	9700      	str	r7, [sp, #0]
 80095cc:	4633      	mov	r3, r6
 80095ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80095d0:	4621      	mov	r1, r4
 80095d2:	4628      	mov	r0, r5
 80095d4:	f000 f9d8 	bl	8009988 <_printf_common>
 80095d8:	3001      	adds	r0, #1
 80095da:	f040 8090 	bne.w	80096fe <_printf_float+0x1e2>
 80095de:	f04f 30ff 	mov.w	r0, #4294967295
 80095e2:	b00d      	add	sp, #52	; 0x34
 80095e4:	ecbd 8b02 	vpop	{d8}
 80095e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ec:	4642      	mov	r2, r8
 80095ee:	464b      	mov	r3, r9
 80095f0:	4640      	mov	r0, r8
 80095f2:	4649      	mov	r1, r9
 80095f4:	f7f7 faa4 	bl	8000b40 <__aeabi_dcmpun>
 80095f8:	b140      	cbz	r0, 800960c <_printf_float+0xf0>
 80095fa:	464b      	mov	r3, r9
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	bfbc      	itt	lt
 8009600:	232d      	movlt	r3, #45	; 0x2d
 8009602:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009606:	487f      	ldr	r0, [pc, #508]	; (8009804 <_printf_float+0x2e8>)
 8009608:	4b7f      	ldr	r3, [pc, #508]	; (8009808 <_printf_float+0x2ec>)
 800960a:	e7d1      	b.n	80095b0 <_printf_float+0x94>
 800960c:	6863      	ldr	r3, [r4, #4]
 800960e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009612:	9206      	str	r2, [sp, #24]
 8009614:	1c5a      	adds	r2, r3, #1
 8009616:	d13f      	bne.n	8009698 <_printf_float+0x17c>
 8009618:	2306      	movs	r3, #6
 800961a:	6063      	str	r3, [r4, #4]
 800961c:	9b05      	ldr	r3, [sp, #20]
 800961e:	6861      	ldr	r1, [r4, #4]
 8009620:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009624:	2300      	movs	r3, #0
 8009626:	9303      	str	r3, [sp, #12]
 8009628:	ab0a      	add	r3, sp, #40	; 0x28
 800962a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800962e:	ab09      	add	r3, sp, #36	; 0x24
 8009630:	ec49 8b10 	vmov	d0, r8, r9
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	6022      	str	r2, [r4, #0]
 8009638:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800963c:	4628      	mov	r0, r5
 800963e:	f7ff fecd 	bl	80093dc <__cvt>
 8009642:	9b06      	ldr	r3, [sp, #24]
 8009644:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009646:	2b47      	cmp	r3, #71	; 0x47
 8009648:	4680      	mov	r8, r0
 800964a:	d108      	bne.n	800965e <_printf_float+0x142>
 800964c:	1cc8      	adds	r0, r1, #3
 800964e:	db02      	blt.n	8009656 <_printf_float+0x13a>
 8009650:	6863      	ldr	r3, [r4, #4]
 8009652:	4299      	cmp	r1, r3
 8009654:	dd41      	ble.n	80096da <_printf_float+0x1be>
 8009656:	f1ab 0b02 	sub.w	fp, fp, #2
 800965a:	fa5f fb8b 	uxtb.w	fp, fp
 800965e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009662:	d820      	bhi.n	80096a6 <_printf_float+0x18a>
 8009664:	3901      	subs	r1, #1
 8009666:	465a      	mov	r2, fp
 8009668:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800966c:	9109      	str	r1, [sp, #36]	; 0x24
 800966e:	f7ff ff17 	bl	80094a0 <__exponent>
 8009672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009674:	1813      	adds	r3, r2, r0
 8009676:	2a01      	cmp	r2, #1
 8009678:	4681      	mov	r9, r0
 800967a:	6123      	str	r3, [r4, #16]
 800967c:	dc02      	bgt.n	8009684 <_printf_float+0x168>
 800967e:	6822      	ldr	r2, [r4, #0]
 8009680:	07d2      	lsls	r2, r2, #31
 8009682:	d501      	bpl.n	8009688 <_printf_float+0x16c>
 8009684:	3301      	adds	r3, #1
 8009686:	6123      	str	r3, [r4, #16]
 8009688:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800968c:	2b00      	cmp	r3, #0
 800968e:	d09c      	beq.n	80095ca <_printf_float+0xae>
 8009690:	232d      	movs	r3, #45	; 0x2d
 8009692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009696:	e798      	b.n	80095ca <_printf_float+0xae>
 8009698:	9a06      	ldr	r2, [sp, #24]
 800969a:	2a47      	cmp	r2, #71	; 0x47
 800969c:	d1be      	bne.n	800961c <_printf_float+0x100>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1bc      	bne.n	800961c <_printf_float+0x100>
 80096a2:	2301      	movs	r3, #1
 80096a4:	e7b9      	b.n	800961a <_printf_float+0xfe>
 80096a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80096aa:	d118      	bne.n	80096de <_printf_float+0x1c2>
 80096ac:	2900      	cmp	r1, #0
 80096ae:	6863      	ldr	r3, [r4, #4]
 80096b0:	dd0b      	ble.n	80096ca <_printf_float+0x1ae>
 80096b2:	6121      	str	r1, [r4, #16]
 80096b4:	b913      	cbnz	r3, 80096bc <_printf_float+0x1a0>
 80096b6:	6822      	ldr	r2, [r4, #0]
 80096b8:	07d0      	lsls	r0, r2, #31
 80096ba:	d502      	bpl.n	80096c2 <_printf_float+0x1a6>
 80096bc:	3301      	adds	r3, #1
 80096be:	440b      	add	r3, r1
 80096c0:	6123      	str	r3, [r4, #16]
 80096c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80096c4:	f04f 0900 	mov.w	r9, #0
 80096c8:	e7de      	b.n	8009688 <_printf_float+0x16c>
 80096ca:	b913      	cbnz	r3, 80096d2 <_printf_float+0x1b6>
 80096cc:	6822      	ldr	r2, [r4, #0]
 80096ce:	07d2      	lsls	r2, r2, #31
 80096d0:	d501      	bpl.n	80096d6 <_printf_float+0x1ba>
 80096d2:	3302      	adds	r3, #2
 80096d4:	e7f4      	b.n	80096c0 <_printf_float+0x1a4>
 80096d6:	2301      	movs	r3, #1
 80096d8:	e7f2      	b.n	80096c0 <_printf_float+0x1a4>
 80096da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80096de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096e0:	4299      	cmp	r1, r3
 80096e2:	db05      	blt.n	80096f0 <_printf_float+0x1d4>
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	6121      	str	r1, [r4, #16]
 80096e8:	07d8      	lsls	r0, r3, #31
 80096ea:	d5ea      	bpl.n	80096c2 <_printf_float+0x1a6>
 80096ec:	1c4b      	adds	r3, r1, #1
 80096ee:	e7e7      	b.n	80096c0 <_printf_float+0x1a4>
 80096f0:	2900      	cmp	r1, #0
 80096f2:	bfd4      	ite	le
 80096f4:	f1c1 0202 	rsble	r2, r1, #2
 80096f8:	2201      	movgt	r2, #1
 80096fa:	4413      	add	r3, r2
 80096fc:	e7e0      	b.n	80096c0 <_printf_float+0x1a4>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	055a      	lsls	r2, r3, #21
 8009702:	d407      	bmi.n	8009714 <_printf_float+0x1f8>
 8009704:	6923      	ldr	r3, [r4, #16]
 8009706:	4642      	mov	r2, r8
 8009708:	4631      	mov	r1, r6
 800970a:	4628      	mov	r0, r5
 800970c:	47b8      	blx	r7
 800970e:	3001      	adds	r0, #1
 8009710:	d12c      	bne.n	800976c <_printf_float+0x250>
 8009712:	e764      	b.n	80095de <_printf_float+0xc2>
 8009714:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009718:	f240 80e0 	bls.w	80098dc <_printf_float+0x3c0>
 800971c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009720:	2200      	movs	r2, #0
 8009722:	2300      	movs	r3, #0
 8009724:	f7f7 f9da 	bl	8000adc <__aeabi_dcmpeq>
 8009728:	2800      	cmp	r0, #0
 800972a:	d034      	beq.n	8009796 <_printf_float+0x27a>
 800972c:	4a37      	ldr	r2, [pc, #220]	; (800980c <_printf_float+0x2f0>)
 800972e:	2301      	movs	r3, #1
 8009730:	4631      	mov	r1, r6
 8009732:	4628      	mov	r0, r5
 8009734:	47b8      	blx	r7
 8009736:	3001      	adds	r0, #1
 8009738:	f43f af51 	beq.w	80095de <_printf_float+0xc2>
 800973c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009740:	429a      	cmp	r2, r3
 8009742:	db02      	blt.n	800974a <_printf_float+0x22e>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	07d8      	lsls	r0, r3, #31
 8009748:	d510      	bpl.n	800976c <_printf_float+0x250>
 800974a:	ee18 3a10 	vmov	r3, s16
 800974e:	4652      	mov	r2, sl
 8009750:	4631      	mov	r1, r6
 8009752:	4628      	mov	r0, r5
 8009754:	47b8      	blx	r7
 8009756:	3001      	adds	r0, #1
 8009758:	f43f af41 	beq.w	80095de <_printf_float+0xc2>
 800975c:	f04f 0800 	mov.w	r8, #0
 8009760:	f104 091a 	add.w	r9, r4, #26
 8009764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009766:	3b01      	subs	r3, #1
 8009768:	4543      	cmp	r3, r8
 800976a:	dc09      	bgt.n	8009780 <_printf_float+0x264>
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	079b      	lsls	r3, r3, #30
 8009770:	f100 8105 	bmi.w	800997e <_printf_float+0x462>
 8009774:	68e0      	ldr	r0, [r4, #12]
 8009776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009778:	4298      	cmp	r0, r3
 800977a:	bfb8      	it	lt
 800977c:	4618      	movlt	r0, r3
 800977e:	e730      	b.n	80095e2 <_printf_float+0xc6>
 8009780:	2301      	movs	r3, #1
 8009782:	464a      	mov	r2, r9
 8009784:	4631      	mov	r1, r6
 8009786:	4628      	mov	r0, r5
 8009788:	47b8      	blx	r7
 800978a:	3001      	adds	r0, #1
 800978c:	f43f af27 	beq.w	80095de <_printf_float+0xc2>
 8009790:	f108 0801 	add.w	r8, r8, #1
 8009794:	e7e6      	b.n	8009764 <_printf_float+0x248>
 8009796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009798:	2b00      	cmp	r3, #0
 800979a:	dc39      	bgt.n	8009810 <_printf_float+0x2f4>
 800979c:	4a1b      	ldr	r2, [pc, #108]	; (800980c <_printf_float+0x2f0>)
 800979e:	2301      	movs	r3, #1
 80097a0:	4631      	mov	r1, r6
 80097a2:	4628      	mov	r0, r5
 80097a4:	47b8      	blx	r7
 80097a6:	3001      	adds	r0, #1
 80097a8:	f43f af19 	beq.w	80095de <_printf_float+0xc2>
 80097ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097b0:	4313      	orrs	r3, r2
 80097b2:	d102      	bne.n	80097ba <_printf_float+0x29e>
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	07d9      	lsls	r1, r3, #31
 80097b8:	d5d8      	bpl.n	800976c <_printf_float+0x250>
 80097ba:	ee18 3a10 	vmov	r3, s16
 80097be:	4652      	mov	r2, sl
 80097c0:	4631      	mov	r1, r6
 80097c2:	4628      	mov	r0, r5
 80097c4:	47b8      	blx	r7
 80097c6:	3001      	adds	r0, #1
 80097c8:	f43f af09 	beq.w	80095de <_printf_float+0xc2>
 80097cc:	f04f 0900 	mov.w	r9, #0
 80097d0:	f104 0a1a 	add.w	sl, r4, #26
 80097d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d6:	425b      	negs	r3, r3
 80097d8:	454b      	cmp	r3, r9
 80097da:	dc01      	bgt.n	80097e0 <_printf_float+0x2c4>
 80097dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097de:	e792      	b.n	8009706 <_printf_float+0x1ea>
 80097e0:	2301      	movs	r3, #1
 80097e2:	4652      	mov	r2, sl
 80097e4:	4631      	mov	r1, r6
 80097e6:	4628      	mov	r0, r5
 80097e8:	47b8      	blx	r7
 80097ea:	3001      	adds	r0, #1
 80097ec:	f43f aef7 	beq.w	80095de <_printf_float+0xc2>
 80097f0:	f109 0901 	add.w	r9, r9, #1
 80097f4:	e7ee      	b.n	80097d4 <_printf_float+0x2b8>
 80097f6:	bf00      	nop
 80097f8:	7fefffff 	.word	0x7fefffff
 80097fc:	0800ee04 	.word	0x0800ee04
 8009800:	0800ee08 	.word	0x0800ee08
 8009804:	0800ee10 	.word	0x0800ee10
 8009808:	0800ee0c 	.word	0x0800ee0c
 800980c:	0800f381 	.word	0x0800f381
 8009810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009812:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009814:	429a      	cmp	r2, r3
 8009816:	bfa8      	it	ge
 8009818:	461a      	movge	r2, r3
 800981a:	2a00      	cmp	r2, #0
 800981c:	4691      	mov	r9, r2
 800981e:	dc37      	bgt.n	8009890 <_printf_float+0x374>
 8009820:	f04f 0b00 	mov.w	fp, #0
 8009824:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009828:	f104 021a 	add.w	r2, r4, #26
 800982c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800982e:	9305      	str	r3, [sp, #20]
 8009830:	eba3 0309 	sub.w	r3, r3, r9
 8009834:	455b      	cmp	r3, fp
 8009836:	dc33      	bgt.n	80098a0 <_printf_float+0x384>
 8009838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800983c:	429a      	cmp	r2, r3
 800983e:	db3b      	blt.n	80098b8 <_printf_float+0x39c>
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	07da      	lsls	r2, r3, #31
 8009844:	d438      	bmi.n	80098b8 <_printf_float+0x39c>
 8009846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009848:	9a05      	ldr	r2, [sp, #20]
 800984a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800984c:	1a9a      	subs	r2, r3, r2
 800984e:	eba3 0901 	sub.w	r9, r3, r1
 8009852:	4591      	cmp	r9, r2
 8009854:	bfa8      	it	ge
 8009856:	4691      	movge	r9, r2
 8009858:	f1b9 0f00 	cmp.w	r9, #0
 800985c:	dc35      	bgt.n	80098ca <_printf_float+0x3ae>
 800985e:	f04f 0800 	mov.w	r8, #0
 8009862:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009866:	f104 0a1a 	add.w	sl, r4, #26
 800986a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800986e:	1a9b      	subs	r3, r3, r2
 8009870:	eba3 0309 	sub.w	r3, r3, r9
 8009874:	4543      	cmp	r3, r8
 8009876:	f77f af79 	ble.w	800976c <_printf_float+0x250>
 800987a:	2301      	movs	r3, #1
 800987c:	4652      	mov	r2, sl
 800987e:	4631      	mov	r1, r6
 8009880:	4628      	mov	r0, r5
 8009882:	47b8      	blx	r7
 8009884:	3001      	adds	r0, #1
 8009886:	f43f aeaa 	beq.w	80095de <_printf_float+0xc2>
 800988a:	f108 0801 	add.w	r8, r8, #1
 800988e:	e7ec      	b.n	800986a <_printf_float+0x34e>
 8009890:	4613      	mov	r3, r2
 8009892:	4631      	mov	r1, r6
 8009894:	4642      	mov	r2, r8
 8009896:	4628      	mov	r0, r5
 8009898:	47b8      	blx	r7
 800989a:	3001      	adds	r0, #1
 800989c:	d1c0      	bne.n	8009820 <_printf_float+0x304>
 800989e:	e69e      	b.n	80095de <_printf_float+0xc2>
 80098a0:	2301      	movs	r3, #1
 80098a2:	4631      	mov	r1, r6
 80098a4:	4628      	mov	r0, r5
 80098a6:	9205      	str	r2, [sp, #20]
 80098a8:	47b8      	blx	r7
 80098aa:	3001      	adds	r0, #1
 80098ac:	f43f ae97 	beq.w	80095de <_printf_float+0xc2>
 80098b0:	9a05      	ldr	r2, [sp, #20]
 80098b2:	f10b 0b01 	add.w	fp, fp, #1
 80098b6:	e7b9      	b.n	800982c <_printf_float+0x310>
 80098b8:	ee18 3a10 	vmov	r3, s16
 80098bc:	4652      	mov	r2, sl
 80098be:	4631      	mov	r1, r6
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b8      	blx	r7
 80098c4:	3001      	adds	r0, #1
 80098c6:	d1be      	bne.n	8009846 <_printf_float+0x32a>
 80098c8:	e689      	b.n	80095de <_printf_float+0xc2>
 80098ca:	9a05      	ldr	r2, [sp, #20]
 80098cc:	464b      	mov	r3, r9
 80098ce:	4442      	add	r2, r8
 80098d0:	4631      	mov	r1, r6
 80098d2:	4628      	mov	r0, r5
 80098d4:	47b8      	blx	r7
 80098d6:	3001      	adds	r0, #1
 80098d8:	d1c1      	bne.n	800985e <_printf_float+0x342>
 80098da:	e680      	b.n	80095de <_printf_float+0xc2>
 80098dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098de:	2a01      	cmp	r2, #1
 80098e0:	dc01      	bgt.n	80098e6 <_printf_float+0x3ca>
 80098e2:	07db      	lsls	r3, r3, #31
 80098e4:	d538      	bpl.n	8009958 <_printf_float+0x43c>
 80098e6:	2301      	movs	r3, #1
 80098e8:	4642      	mov	r2, r8
 80098ea:	4631      	mov	r1, r6
 80098ec:	4628      	mov	r0, r5
 80098ee:	47b8      	blx	r7
 80098f0:	3001      	adds	r0, #1
 80098f2:	f43f ae74 	beq.w	80095de <_printf_float+0xc2>
 80098f6:	ee18 3a10 	vmov	r3, s16
 80098fa:	4652      	mov	r2, sl
 80098fc:	4631      	mov	r1, r6
 80098fe:	4628      	mov	r0, r5
 8009900:	47b8      	blx	r7
 8009902:	3001      	adds	r0, #1
 8009904:	f43f ae6b 	beq.w	80095de <_printf_float+0xc2>
 8009908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800990c:	2200      	movs	r2, #0
 800990e:	2300      	movs	r3, #0
 8009910:	f7f7 f8e4 	bl	8000adc <__aeabi_dcmpeq>
 8009914:	b9d8      	cbnz	r0, 800994e <_printf_float+0x432>
 8009916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009918:	f108 0201 	add.w	r2, r8, #1
 800991c:	3b01      	subs	r3, #1
 800991e:	4631      	mov	r1, r6
 8009920:	4628      	mov	r0, r5
 8009922:	47b8      	blx	r7
 8009924:	3001      	adds	r0, #1
 8009926:	d10e      	bne.n	8009946 <_printf_float+0x42a>
 8009928:	e659      	b.n	80095de <_printf_float+0xc2>
 800992a:	2301      	movs	r3, #1
 800992c:	4652      	mov	r2, sl
 800992e:	4631      	mov	r1, r6
 8009930:	4628      	mov	r0, r5
 8009932:	47b8      	blx	r7
 8009934:	3001      	adds	r0, #1
 8009936:	f43f ae52 	beq.w	80095de <_printf_float+0xc2>
 800993a:	f108 0801 	add.w	r8, r8, #1
 800993e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009940:	3b01      	subs	r3, #1
 8009942:	4543      	cmp	r3, r8
 8009944:	dcf1      	bgt.n	800992a <_printf_float+0x40e>
 8009946:	464b      	mov	r3, r9
 8009948:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800994c:	e6dc      	b.n	8009708 <_printf_float+0x1ec>
 800994e:	f04f 0800 	mov.w	r8, #0
 8009952:	f104 0a1a 	add.w	sl, r4, #26
 8009956:	e7f2      	b.n	800993e <_printf_float+0x422>
 8009958:	2301      	movs	r3, #1
 800995a:	4642      	mov	r2, r8
 800995c:	e7df      	b.n	800991e <_printf_float+0x402>
 800995e:	2301      	movs	r3, #1
 8009960:	464a      	mov	r2, r9
 8009962:	4631      	mov	r1, r6
 8009964:	4628      	mov	r0, r5
 8009966:	47b8      	blx	r7
 8009968:	3001      	adds	r0, #1
 800996a:	f43f ae38 	beq.w	80095de <_printf_float+0xc2>
 800996e:	f108 0801 	add.w	r8, r8, #1
 8009972:	68e3      	ldr	r3, [r4, #12]
 8009974:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009976:	1a5b      	subs	r3, r3, r1
 8009978:	4543      	cmp	r3, r8
 800997a:	dcf0      	bgt.n	800995e <_printf_float+0x442>
 800997c:	e6fa      	b.n	8009774 <_printf_float+0x258>
 800997e:	f04f 0800 	mov.w	r8, #0
 8009982:	f104 0919 	add.w	r9, r4, #25
 8009986:	e7f4      	b.n	8009972 <_printf_float+0x456>

08009988 <_printf_common>:
 8009988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800998c:	4616      	mov	r6, r2
 800998e:	4699      	mov	r9, r3
 8009990:	688a      	ldr	r2, [r1, #8]
 8009992:	690b      	ldr	r3, [r1, #16]
 8009994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009998:	4293      	cmp	r3, r2
 800999a:	bfb8      	it	lt
 800999c:	4613      	movlt	r3, r2
 800999e:	6033      	str	r3, [r6, #0]
 80099a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099a4:	4607      	mov	r7, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	b10a      	cbz	r2, 80099ae <_printf_common+0x26>
 80099aa:	3301      	adds	r3, #1
 80099ac:	6033      	str	r3, [r6, #0]
 80099ae:	6823      	ldr	r3, [r4, #0]
 80099b0:	0699      	lsls	r1, r3, #26
 80099b2:	bf42      	ittt	mi
 80099b4:	6833      	ldrmi	r3, [r6, #0]
 80099b6:	3302      	addmi	r3, #2
 80099b8:	6033      	strmi	r3, [r6, #0]
 80099ba:	6825      	ldr	r5, [r4, #0]
 80099bc:	f015 0506 	ands.w	r5, r5, #6
 80099c0:	d106      	bne.n	80099d0 <_printf_common+0x48>
 80099c2:	f104 0a19 	add.w	sl, r4, #25
 80099c6:	68e3      	ldr	r3, [r4, #12]
 80099c8:	6832      	ldr	r2, [r6, #0]
 80099ca:	1a9b      	subs	r3, r3, r2
 80099cc:	42ab      	cmp	r3, r5
 80099ce:	dc26      	bgt.n	8009a1e <_printf_common+0x96>
 80099d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099d4:	1e13      	subs	r3, r2, #0
 80099d6:	6822      	ldr	r2, [r4, #0]
 80099d8:	bf18      	it	ne
 80099da:	2301      	movne	r3, #1
 80099dc:	0692      	lsls	r2, r2, #26
 80099de:	d42b      	bmi.n	8009a38 <_printf_common+0xb0>
 80099e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099e4:	4649      	mov	r1, r9
 80099e6:	4638      	mov	r0, r7
 80099e8:	47c0      	blx	r8
 80099ea:	3001      	adds	r0, #1
 80099ec:	d01e      	beq.n	8009a2c <_printf_common+0xa4>
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	68e5      	ldr	r5, [r4, #12]
 80099f2:	6832      	ldr	r2, [r6, #0]
 80099f4:	f003 0306 	and.w	r3, r3, #6
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	bf08      	it	eq
 80099fc:	1aad      	subeq	r5, r5, r2
 80099fe:	68a3      	ldr	r3, [r4, #8]
 8009a00:	6922      	ldr	r2, [r4, #16]
 8009a02:	bf0c      	ite	eq
 8009a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a08:	2500      	movne	r5, #0
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	bfc4      	itt	gt
 8009a0e:	1a9b      	subgt	r3, r3, r2
 8009a10:	18ed      	addgt	r5, r5, r3
 8009a12:	2600      	movs	r6, #0
 8009a14:	341a      	adds	r4, #26
 8009a16:	42b5      	cmp	r5, r6
 8009a18:	d11a      	bne.n	8009a50 <_printf_common+0xc8>
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	e008      	b.n	8009a30 <_printf_common+0xa8>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	4652      	mov	r2, sl
 8009a22:	4649      	mov	r1, r9
 8009a24:	4638      	mov	r0, r7
 8009a26:	47c0      	blx	r8
 8009a28:	3001      	adds	r0, #1
 8009a2a:	d103      	bne.n	8009a34 <_printf_common+0xac>
 8009a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a34:	3501      	adds	r5, #1
 8009a36:	e7c6      	b.n	80099c6 <_printf_common+0x3e>
 8009a38:	18e1      	adds	r1, r4, r3
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	2030      	movs	r0, #48	; 0x30
 8009a3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a42:	4422      	add	r2, r4
 8009a44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a4c:	3302      	adds	r3, #2
 8009a4e:	e7c7      	b.n	80099e0 <_printf_common+0x58>
 8009a50:	2301      	movs	r3, #1
 8009a52:	4622      	mov	r2, r4
 8009a54:	4649      	mov	r1, r9
 8009a56:	4638      	mov	r0, r7
 8009a58:	47c0      	blx	r8
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	d0e6      	beq.n	8009a2c <_printf_common+0xa4>
 8009a5e:	3601      	adds	r6, #1
 8009a60:	e7d9      	b.n	8009a16 <_printf_common+0x8e>
	...

08009a64 <_printf_i>:
 8009a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a68:	7e0f      	ldrb	r7, [r1, #24]
 8009a6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a6c:	2f78      	cmp	r7, #120	; 0x78
 8009a6e:	4691      	mov	r9, r2
 8009a70:	4680      	mov	r8, r0
 8009a72:	460c      	mov	r4, r1
 8009a74:	469a      	mov	sl, r3
 8009a76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a7a:	d807      	bhi.n	8009a8c <_printf_i+0x28>
 8009a7c:	2f62      	cmp	r7, #98	; 0x62
 8009a7e:	d80a      	bhi.n	8009a96 <_printf_i+0x32>
 8009a80:	2f00      	cmp	r7, #0
 8009a82:	f000 80d8 	beq.w	8009c36 <_printf_i+0x1d2>
 8009a86:	2f58      	cmp	r7, #88	; 0x58
 8009a88:	f000 80a3 	beq.w	8009bd2 <_printf_i+0x16e>
 8009a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a94:	e03a      	b.n	8009b0c <_printf_i+0xa8>
 8009a96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a9a:	2b15      	cmp	r3, #21
 8009a9c:	d8f6      	bhi.n	8009a8c <_printf_i+0x28>
 8009a9e:	a101      	add	r1, pc, #4	; (adr r1, 8009aa4 <_printf_i+0x40>)
 8009aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009aa4:	08009afd 	.word	0x08009afd
 8009aa8:	08009b11 	.word	0x08009b11
 8009aac:	08009a8d 	.word	0x08009a8d
 8009ab0:	08009a8d 	.word	0x08009a8d
 8009ab4:	08009a8d 	.word	0x08009a8d
 8009ab8:	08009a8d 	.word	0x08009a8d
 8009abc:	08009b11 	.word	0x08009b11
 8009ac0:	08009a8d 	.word	0x08009a8d
 8009ac4:	08009a8d 	.word	0x08009a8d
 8009ac8:	08009a8d 	.word	0x08009a8d
 8009acc:	08009a8d 	.word	0x08009a8d
 8009ad0:	08009c1d 	.word	0x08009c1d
 8009ad4:	08009b41 	.word	0x08009b41
 8009ad8:	08009bff 	.word	0x08009bff
 8009adc:	08009a8d 	.word	0x08009a8d
 8009ae0:	08009a8d 	.word	0x08009a8d
 8009ae4:	08009c3f 	.word	0x08009c3f
 8009ae8:	08009a8d 	.word	0x08009a8d
 8009aec:	08009b41 	.word	0x08009b41
 8009af0:	08009a8d 	.word	0x08009a8d
 8009af4:	08009a8d 	.word	0x08009a8d
 8009af8:	08009c07 	.word	0x08009c07
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	1d1a      	adds	r2, r3, #4
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	602a      	str	r2, [r5, #0]
 8009b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e0a3      	b.n	8009c58 <_printf_i+0x1f4>
 8009b10:	6820      	ldr	r0, [r4, #0]
 8009b12:	6829      	ldr	r1, [r5, #0]
 8009b14:	0606      	lsls	r6, r0, #24
 8009b16:	f101 0304 	add.w	r3, r1, #4
 8009b1a:	d50a      	bpl.n	8009b32 <_printf_i+0xce>
 8009b1c:	680e      	ldr	r6, [r1, #0]
 8009b1e:	602b      	str	r3, [r5, #0]
 8009b20:	2e00      	cmp	r6, #0
 8009b22:	da03      	bge.n	8009b2c <_printf_i+0xc8>
 8009b24:	232d      	movs	r3, #45	; 0x2d
 8009b26:	4276      	negs	r6, r6
 8009b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b2c:	485e      	ldr	r0, [pc, #376]	; (8009ca8 <_printf_i+0x244>)
 8009b2e:	230a      	movs	r3, #10
 8009b30:	e019      	b.n	8009b66 <_printf_i+0x102>
 8009b32:	680e      	ldr	r6, [r1, #0]
 8009b34:	602b      	str	r3, [r5, #0]
 8009b36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b3a:	bf18      	it	ne
 8009b3c:	b236      	sxthne	r6, r6
 8009b3e:	e7ef      	b.n	8009b20 <_printf_i+0xbc>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	6820      	ldr	r0, [r4, #0]
 8009b44:	1d19      	adds	r1, r3, #4
 8009b46:	6029      	str	r1, [r5, #0]
 8009b48:	0601      	lsls	r1, r0, #24
 8009b4a:	d501      	bpl.n	8009b50 <_printf_i+0xec>
 8009b4c:	681e      	ldr	r6, [r3, #0]
 8009b4e:	e002      	b.n	8009b56 <_printf_i+0xf2>
 8009b50:	0646      	lsls	r6, r0, #25
 8009b52:	d5fb      	bpl.n	8009b4c <_printf_i+0xe8>
 8009b54:	881e      	ldrh	r6, [r3, #0]
 8009b56:	4854      	ldr	r0, [pc, #336]	; (8009ca8 <_printf_i+0x244>)
 8009b58:	2f6f      	cmp	r7, #111	; 0x6f
 8009b5a:	bf0c      	ite	eq
 8009b5c:	2308      	moveq	r3, #8
 8009b5e:	230a      	movne	r3, #10
 8009b60:	2100      	movs	r1, #0
 8009b62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b66:	6865      	ldr	r5, [r4, #4]
 8009b68:	60a5      	str	r5, [r4, #8]
 8009b6a:	2d00      	cmp	r5, #0
 8009b6c:	bfa2      	ittt	ge
 8009b6e:	6821      	ldrge	r1, [r4, #0]
 8009b70:	f021 0104 	bicge.w	r1, r1, #4
 8009b74:	6021      	strge	r1, [r4, #0]
 8009b76:	b90e      	cbnz	r6, 8009b7c <_printf_i+0x118>
 8009b78:	2d00      	cmp	r5, #0
 8009b7a:	d04d      	beq.n	8009c18 <_printf_i+0x1b4>
 8009b7c:	4615      	mov	r5, r2
 8009b7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b82:	fb03 6711 	mls	r7, r3, r1, r6
 8009b86:	5dc7      	ldrb	r7, [r0, r7]
 8009b88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b8c:	4637      	mov	r7, r6
 8009b8e:	42bb      	cmp	r3, r7
 8009b90:	460e      	mov	r6, r1
 8009b92:	d9f4      	bls.n	8009b7e <_printf_i+0x11a>
 8009b94:	2b08      	cmp	r3, #8
 8009b96:	d10b      	bne.n	8009bb0 <_printf_i+0x14c>
 8009b98:	6823      	ldr	r3, [r4, #0]
 8009b9a:	07de      	lsls	r6, r3, #31
 8009b9c:	d508      	bpl.n	8009bb0 <_printf_i+0x14c>
 8009b9e:	6923      	ldr	r3, [r4, #16]
 8009ba0:	6861      	ldr	r1, [r4, #4]
 8009ba2:	4299      	cmp	r1, r3
 8009ba4:	bfde      	ittt	le
 8009ba6:	2330      	movle	r3, #48	; 0x30
 8009ba8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bb0:	1b52      	subs	r2, r2, r5
 8009bb2:	6122      	str	r2, [r4, #16]
 8009bb4:	f8cd a000 	str.w	sl, [sp]
 8009bb8:	464b      	mov	r3, r9
 8009bba:	aa03      	add	r2, sp, #12
 8009bbc:	4621      	mov	r1, r4
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	f7ff fee2 	bl	8009988 <_printf_common>
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	d14c      	bne.n	8009c62 <_printf_i+0x1fe>
 8009bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bcc:	b004      	add	sp, #16
 8009bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd2:	4835      	ldr	r0, [pc, #212]	; (8009ca8 <_printf_i+0x244>)
 8009bd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009bd8:	6829      	ldr	r1, [r5, #0]
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009be0:	6029      	str	r1, [r5, #0]
 8009be2:	061d      	lsls	r5, r3, #24
 8009be4:	d514      	bpl.n	8009c10 <_printf_i+0x1ac>
 8009be6:	07df      	lsls	r7, r3, #31
 8009be8:	bf44      	itt	mi
 8009bea:	f043 0320 	orrmi.w	r3, r3, #32
 8009bee:	6023      	strmi	r3, [r4, #0]
 8009bf0:	b91e      	cbnz	r6, 8009bfa <_printf_i+0x196>
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	f023 0320 	bic.w	r3, r3, #32
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	2310      	movs	r3, #16
 8009bfc:	e7b0      	b.n	8009b60 <_printf_i+0xfc>
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	f043 0320 	orr.w	r3, r3, #32
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	2378      	movs	r3, #120	; 0x78
 8009c08:	4828      	ldr	r0, [pc, #160]	; (8009cac <_printf_i+0x248>)
 8009c0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c0e:	e7e3      	b.n	8009bd8 <_printf_i+0x174>
 8009c10:	0659      	lsls	r1, r3, #25
 8009c12:	bf48      	it	mi
 8009c14:	b2b6      	uxthmi	r6, r6
 8009c16:	e7e6      	b.n	8009be6 <_printf_i+0x182>
 8009c18:	4615      	mov	r5, r2
 8009c1a:	e7bb      	b.n	8009b94 <_printf_i+0x130>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	6826      	ldr	r6, [r4, #0]
 8009c20:	6961      	ldr	r1, [r4, #20]
 8009c22:	1d18      	adds	r0, r3, #4
 8009c24:	6028      	str	r0, [r5, #0]
 8009c26:	0635      	lsls	r5, r6, #24
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	d501      	bpl.n	8009c30 <_printf_i+0x1cc>
 8009c2c:	6019      	str	r1, [r3, #0]
 8009c2e:	e002      	b.n	8009c36 <_printf_i+0x1d2>
 8009c30:	0670      	lsls	r0, r6, #25
 8009c32:	d5fb      	bpl.n	8009c2c <_printf_i+0x1c8>
 8009c34:	8019      	strh	r1, [r3, #0]
 8009c36:	2300      	movs	r3, #0
 8009c38:	6123      	str	r3, [r4, #16]
 8009c3a:	4615      	mov	r5, r2
 8009c3c:	e7ba      	b.n	8009bb4 <_printf_i+0x150>
 8009c3e:	682b      	ldr	r3, [r5, #0]
 8009c40:	1d1a      	adds	r2, r3, #4
 8009c42:	602a      	str	r2, [r5, #0]
 8009c44:	681d      	ldr	r5, [r3, #0]
 8009c46:	6862      	ldr	r2, [r4, #4]
 8009c48:	2100      	movs	r1, #0
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	f7f6 fac8 	bl	80001e0 <memchr>
 8009c50:	b108      	cbz	r0, 8009c56 <_printf_i+0x1f2>
 8009c52:	1b40      	subs	r0, r0, r5
 8009c54:	6060      	str	r0, [r4, #4]
 8009c56:	6863      	ldr	r3, [r4, #4]
 8009c58:	6123      	str	r3, [r4, #16]
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c60:	e7a8      	b.n	8009bb4 <_printf_i+0x150>
 8009c62:	6923      	ldr	r3, [r4, #16]
 8009c64:	462a      	mov	r2, r5
 8009c66:	4649      	mov	r1, r9
 8009c68:	4640      	mov	r0, r8
 8009c6a:	47d0      	blx	sl
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	d0ab      	beq.n	8009bc8 <_printf_i+0x164>
 8009c70:	6823      	ldr	r3, [r4, #0]
 8009c72:	079b      	lsls	r3, r3, #30
 8009c74:	d413      	bmi.n	8009c9e <_printf_i+0x23a>
 8009c76:	68e0      	ldr	r0, [r4, #12]
 8009c78:	9b03      	ldr	r3, [sp, #12]
 8009c7a:	4298      	cmp	r0, r3
 8009c7c:	bfb8      	it	lt
 8009c7e:	4618      	movlt	r0, r3
 8009c80:	e7a4      	b.n	8009bcc <_printf_i+0x168>
 8009c82:	2301      	movs	r3, #1
 8009c84:	4632      	mov	r2, r6
 8009c86:	4649      	mov	r1, r9
 8009c88:	4640      	mov	r0, r8
 8009c8a:	47d0      	blx	sl
 8009c8c:	3001      	adds	r0, #1
 8009c8e:	d09b      	beq.n	8009bc8 <_printf_i+0x164>
 8009c90:	3501      	adds	r5, #1
 8009c92:	68e3      	ldr	r3, [r4, #12]
 8009c94:	9903      	ldr	r1, [sp, #12]
 8009c96:	1a5b      	subs	r3, r3, r1
 8009c98:	42ab      	cmp	r3, r5
 8009c9a:	dcf2      	bgt.n	8009c82 <_printf_i+0x21e>
 8009c9c:	e7eb      	b.n	8009c76 <_printf_i+0x212>
 8009c9e:	2500      	movs	r5, #0
 8009ca0:	f104 0619 	add.w	r6, r4, #25
 8009ca4:	e7f5      	b.n	8009c92 <_printf_i+0x22e>
 8009ca6:	bf00      	nop
 8009ca8:	0800ee14 	.word	0x0800ee14
 8009cac:	0800ee25 	.word	0x0800ee25

08009cb0 <_scanf_float>:
 8009cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	b087      	sub	sp, #28
 8009cb6:	4617      	mov	r7, r2
 8009cb8:	9303      	str	r3, [sp, #12]
 8009cba:	688b      	ldr	r3, [r1, #8]
 8009cbc:	1e5a      	subs	r2, r3, #1
 8009cbe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009cc2:	bf83      	ittte	hi
 8009cc4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009cc8:	195b      	addhi	r3, r3, r5
 8009cca:	9302      	strhi	r3, [sp, #8]
 8009ccc:	2300      	movls	r3, #0
 8009cce:	bf86      	itte	hi
 8009cd0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009cd4:	608b      	strhi	r3, [r1, #8]
 8009cd6:	9302      	strls	r3, [sp, #8]
 8009cd8:	680b      	ldr	r3, [r1, #0]
 8009cda:	468b      	mov	fp, r1
 8009cdc:	2500      	movs	r5, #0
 8009cde:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009ce2:	f84b 3b1c 	str.w	r3, [fp], #28
 8009ce6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009cea:	4680      	mov	r8, r0
 8009cec:	460c      	mov	r4, r1
 8009cee:	465e      	mov	r6, fp
 8009cf0:	46aa      	mov	sl, r5
 8009cf2:	46a9      	mov	r9, r5
 8009cf4:	9501      	str	r5, [sp, #4]
 8009cf6:	68a2      	ldr	r2, [r4, #8]
 8009cf8:	b152      	cbz	r2, 8009d10 <_scanf_float+0x60>
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b4e      	cmp	r3, #78	; 0x4e
 8009d00:	d864      	bhi.n	8009dcc <_scanf_float+0x11c>
 8009d02:	2b40      	cmp	r3, #64	; 0x40
 8009d04:	d83c      	bhi.n	8009d80 <_scanf_float+0xd0>
 8009d06:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009d0a:	b2c8      	uxtb	r0, r1
 8009d0c:	280e      	cmp	r0, #14
 8009d0e:	d93a      	bls.n	8009d86 <_scanf_float+0xd6>
 8009d10:	f1b9 0f00 	cmp.w	r9, #0
 8009d14:	d003      	beq.n	8009d1e <_scanf_float+0x6e>
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d22:	f1ba 0f01 	cmp.w	sl, #1
 8009d26:	f200 8113 	bhi.w	8009f50 <_scanf_float+0x2a0>
 8009d2a:	455e      	cmp	r6, fp
 8009d2c:	f200 8105 	bhi.w	8009f3a <_scanf_float+0x28a>
 8009d30:	2501      	movs	r5, #1
 8009d32:	4628      	mov	r0, r5
 8009d34:	b007      	add	sp, #28
 8009d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009d3e:	2a0d      	cmp	r2, #13
 8009d40:	d8e6      	bhi.n	8009d10 <_scanf_float+0x60>
 8009d42:	a101      	add	r1, pc, #4	; (adr r1, 8009d48 <_scanf_float+0x98>)
 8009d44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d48:	08009e87 	.word	0x08009e87
 8009d4c:	08009d11 	.word	0x08009d11
 8009d50:	08009d11 	.word	0x08009d11
 8009d54:	08009d11 	.word	0x08009d11
 8009d58:	08009ee7 	.word	0x08009ee7
 8009d5c:	08009ebf 	.word	0x08009ebf
 8009d60:	08009d11 	.word	0x08009d11
 8009d64:	08009d11 	.word	0x08009d11
 8009d68:	08009e95 	.word	0x08009e95
 8009d6c:	08009d11 	.word	0x08009d11
 8009d70:	08009d11 	.word	0x08009d11
 8009d74:	08009d11 	.word	0x08009d11
 8009d78:	08009d11 	.word	0x08009d11
 8009d7c:	08009e4d 	.word	0x08009e4d
 8009d80:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009d84:	e7db      	b.n	8009d3e <_scanf_float+0x8e>
 8009d86:	290e      	cmp	r1, #14
 8009d88:	d8c2      	bhi.n	8009d10 <_scanf_float+0x60>
 8009d8a:	a001      	add	r0, pc, #4	; (adr r0, 8009d90 <_scanf_float+0xe0>)
 8009d8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009d90:	08009e3f 	.word	0x08009e3f
 8009d94:	08009d11 	.word	0x08009d11
 8009d98:	08009e3f 	.word	0x08009e3f
 8009d9c:	08009ed3 	.word	0x08009ed3
 8009da0:	08009d11 	.word	0x08009d11
 8009da4:	08009ded 	.word	0x08009ded
 8009da8:	08009e29 	.word	0x08009e29
 8009dac:	08009e29 	.word	0x08009e29
 8009db0:	08009e29 	.word	0x08009e29
 8009db4:	08009e29 	.word	0x08009e29
 8009db8:	08009e29 	.word	0x08009e29
 8009dbc:	08009e29 	.word	0x08009e29
 8009dc0:	08009e29 	.word	0x08009e29
 8009dc4:	08009e29 	.word	0x08009e29
 8009dc8:	08009e29 	.word	0x08009e29
 8009dcc:	2b6e      	cmp	r3, #110	; 0x6e
 8009dce:	d809      	bhi.n	8009de4 <_scanf_float+0x134>
 8009dd0:	2b60      	cmp	r3, #96	; 0x60
 8009dd2:	d8b2      	bhi.n	8009d3a <_scanf_float+0x8a>
 8009dd4:	2b54      	cmp	r3, #84	; 0x54
 8009dd6:	d077      	beq.n	8009ec8 <_scanf_float+0x218>
 8009dd8:	2b59      	cmp	r3, #89	; 0x59
 8009dda:	d199      	bne.n	8009d10 <_scanf_float+0x60>
 8009ddc:	2d07      	cmp	r5, #7
 8009dde:	d197      	bne.n	8009d10 <_scanf_float+0x60>
 8009de0:	2508      	movs	r5, #8
 8009de2:	e029      	b.n	8009e38 <_scanf_float+0x188>
 8009de4:	2b74      	cmp	r3, #116	; 0x74
 8009de6:	d06f      	beq.n	8009ec8 <_scanf_float+0x218>
 8009de8:	2b79      	cmp	r3, #121	; 0x79
 8009dea:	e7f6      	b.n	8009dda <_scanf_float+0x12a>
 8009dec:	6821      	ldr	r1, [r4, #0]
 8009dee:	05c8      	lsls	r0, r1, #23
 8009df0:	d51a      	bpl.n	8009e28 <_scanf_float+0x178>
 8009df2:	9b02      	ldr	r3, [sp, #8]
 8009df4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009df8:	6021      	str	r1, [r4, #0]
 8009dfa:	f109 0901 	add.w	r9, r9, #1
 8009dfe:	b11b      	cbz	r3, 8009e08 <_scanf_float+0x158>
 8009e00:	3b01      	subs	r3, #1
 8009e02:	3201      	adds	r2, #1
 8009e04:	9302      	str	r3, [sp, #8]
 8009e06:	60a2      	str	r2, [r4, #8]
 8009e08:	68a3      	ldr	r3, [r4, #8]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	60a3      	str	r3, [r4, #8]
 8009e0e:	6923      	ldr	r3, [r4, #16]
 8009e10:	3301      	adds	r3, #1
 8009e12:	6123      	str	r3, [r4, #16]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3b01      	subs	r3, #1
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	607b      	str	r3, [r7, #4]
 8009e1c:	f340 8084 	ble.w	8009f28 <_scanf_float+0x278>
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	3301      	adds	r3, #1
 8009e24:	603b      	str	r3, [r7, #0]
 8009e26:	e766      	b.n	8009cf6 <_scanf_float+0x46>
 8009e28:	eb1a 0f05 	cmn.w	sl, r5
 8009e2c:	f47f af70 	bne.w	8009d10 <_scanf_float+0x60>
 8009e30:	6822      	ldr	r2, [r4, #0]
 8009e32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009e36:	6022      	str	r2, [r4, #0]
 8009e38:	f806 3b01 	strb.w	r3, [r6], #1
 8009e3c:	e7e4      	b.n	8009e08 <_scanf_float+0x158>
 8009e3e:	6822      	ldr	r2, [r4, #0]
 8009e40:	0610      	lsls	r0, r2, #24
 8009e42:	f57f af65 	bpl.w	8009d10 <_scanf_float+0x60>
 8009e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e4a:	e7f4      	b.n	8009e36 <_scanf_float+0x186>
 8009e4c:	f1ba 0f00 	cmp.w	sl, #0
 8009e50:	d10e      	bne.n	8009e70 <_scanf_float+0x1c0>
 8009e52:	f1b9 0f00 	cmp.w	r9, #0
 8009e56:	d10e      	bne.n	8009e76 <_scanf_float+0x1c6>
 8009e58:	6822      	ldr	r2, [r4, #0]
 8009e5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009e5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009e62:	d108      	bne.n	8009e76 <_scanf_float+0x1c6>
 8009e64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e68:	6022      	str	r2, [r4, #0]
 8009e6a:	f04f 0a01 	mov.w	sl, #1
 8009e6e:	e7e3      	b.n	8009e38 <_scanf_float+0x188>
 8009e70:	f1ba 0f02 	cmp.w	sl, #2
 8009e74:	d055      	beq.n	8009f22 <_scanf_float+0x272>
 8009e76:	2d01      	cmp	r5, #1
 8009e78:	d002      	beq.n	8009e80 <_scanf_float+0x1d0>
 8009e7a:	2d04      	cmp	r5, #4
 8009e7c:	f47f af48 	bne.w	8009d10 <_scanf_float+0x60>
 8009e80:	3501      	adds	r5, #1
 8009e82:	b2ed      	uxtb	r5, r5
 8009e84:	e7d8      	b.n	8009e38 <_scanf_float+0x188>
 8009e86:	f1ba 0f01 	cmp.w	sl, #1
 8009e8a:	f47f af41 	bne.w	8009d10 <_scanf_float+0x60>
 8009e8e:	f04f 0a02 	mov.w	sl, #2
 8009e92:	e7d1      	b.n	8009e38 <_scanf_float+0x188>
 8009e94:	b97d      	cbnz	r5, 8009eb6 <_scanf_float+0x206>
 8009e96:	f1b9 0f00 	cmp.w	r9, #0
 8009e9a:	f47f af3c 	bne.w	8009d16 <_scanf_float+0x66>
 8009e9e:	6822      	ldr	r2, [r4, #0]
 8009ea0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009ea4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009ea8:	f47f af39 	bne.w	8009d1e <_scanf_float+0x6e>
 8009eac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009eb0:	6022      	str	r2, [r4, #0]
 8009eb2:	2501      	movs	r5, #1
 8009eb4:	e7c0      	b.n	8009e38 <_scanf_float+0x188>
 8009eb6:	2d03      	cmp	r5, #3
 8009eb8:	d0e2      	beq.n	8009e80 <_scanf_float+0x1d0>
 8009eba:	2d05      	cmp	r5, #5
 8009ebc:	e7de      	b.n	8009e7c <_scanf_float+0x1cc>
 8009ebe:	2d02      	cmp	r5, #2
 8009ec0:	f47f af26 	bne.w	8009d10 <_scanf_float+0x60>
 8009ec4:	2503      	movs	r5, #3
 8009ec6:	e7b7      	b.n	8009e38 <_scanf_float+0x188>
 8009ec8:	2d06      	cmp	r5, #6
 8009eca:	f47f af21 	bne.w	8009d10 <_scanf_float+0x60>
 8009ece:	2507      	movs	r5, #7
 8009ed0:	e7b2      	b.n	8009e38 <_scanf_float+0x188>
 8009ed2:	6822      	ldr	r2, [r4, #0]
 8009ed4:	0591      	lsls	r1, r2, #22
 8009ed6:	f57f af1b 	bpl.w	8009d10 <_scanf_float+0x60>
 8009eda:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009ede:	6022      	str	r2, [r4, #0]
 8009ee0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ee4:	e7a8      	b.n	8009e38 <_scanf_float+0x188>
 8009ee6:	6822      	ldr	r2, [r4, #0]
 8009ee8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009eec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009ef0:	d006      	beq.n	8009f00 <_scanf_float+0x250>
 8009ef2:	0550      	lsls	r0, r2, #21
 8009ef4:	f57f af0c 	bpl.w	8009d10 <_scanf_float+0x60>
 8009ef8:	f1b9 0f00 	cmp.w	r9, #0
 8009efc:	f43f af0f 	beq.w	8009d1e <_scanf_float+0x6e>
 8009f00:	0591      	lsls	r1, r2, #22
 8009f02:	bf58      	it	pl
 8009f04:	9901      	ldrpl	r1, [sp, #4]
 8009f06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f0a:	bf58      	it	pl
 8009f0c:	eba9 0101 	subpl.w	r1, r9, r1
 8009f10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009f14:	bf58      	it	pl
 8009f16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009f1a:	6022      	str	r2, [r4, #0]
 8009f1c:	f04f 0900 	mov.w	r9, #0
 8009f20:	e78a      	b.n	8009e38 <_scanf_float+0x188>
 8009f22:	f04f 0a03 	mov.w	sl, #3
 8009f26:	e787      	b.n	8009e38 <_scanf_float+0x188>
 8009f28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009f2c:	4639      	mov	r1, r7
 8009f2e:	4640      	mov	r0, r8
 8009f30:	4798      	blx	r3
 8009f32:	2800      	cmp	r0, #0
 8009f34:	f43f aedf 	beq.w	8009cf6 <_scanf_float+0x46>
 8009f38:	e6ea      	b.n	8009d10 <_scanf_float+0x60>
 8009f3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f42:	463a      	mov	r2, r7
 8009f44:	4640      	mov	r0, r8
 8009f46:	4798      	blx	r3
 8009f48:	6923      	ldr	r3, [r4, #16]
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	6123      	str	r3, [r4, #16]
 8009f4e:	e6ec      	b.n	8009d2a <_scanf_float+0x7a>
 8009f50:	1e6b      	subs	r3, r5, #1
 8009f52:	2b06      	cmp	r3, #6
 8009f54:	d825      	bhi.n	8009fa2 <_scanf_float+0x2f2>
 8009f56:	2d02      	cmp	r5, #2
 8009f58:	d836      	bhi.n	8009fc8 <_scanf_float+0x318>
 8009f5a:	455e      	cmp	r6, fp
 8009f5c:	f67f aee8 	bls.w	8009d30 <_scanf_float+0x80>
 8009f60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f68:	463a      	mov	r2, r7
 8009f6a:	4640      	mov	r0, r8
 8009f6c:	4798      	blx	r3
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	3b01      	subs	r3, #1
 8009f72:	6123      	str	r3, [r4, #16]
 8009f74:	e7f1      	b.n	8009f5a <_scanf_float+0x2aa>
 8009f76:	9802      	ldr	r0, [sp, #8]
 8009f78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009f80:	9002      	str	r0, [sp, #8]
 8009f82:	463a      	mov	r2, r7
 8009f84:	4640      	mov	r0, r8
 8009f86:	4798      	blx	r3
 8009f88:	6923      	ldr	r3, [r4, #16]
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	6123      	str	r3, [r4, #16]
 8009f8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f92:	fa5f fa8a 	uxtb.w	sl, sl
 8009f96:	f1ba 0f02 	cmp.w	sl, #2
 8009f9a:	d1ec      	bne.n	8009f76 <_scanf_float+0x2c6>
 8009f9c:	3d03      	subs	r5, #3
 8009f9e:	b2ed      	uxtb	r5, r5
 8009fa0:	1b76      	subs	r6, r6, r5
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	05da      	lsls	r2, r3, #23
 8009fa6:	d52f      	bpl.n	800a008 <_scanf_float+0x358>
 8009fa8:	055b      	lsls	r3, r3, #21
 8009faa:	d510      	bpl.n	8009fce <_scanf_float+0x31e>
 8009fac:	455e      	cmp	r6, fp
 8009fae:	f67f aebf 	bls.w	8009d30 <_scanf_float+0x80>
 8009fb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009fba:	463a      	mov	r2, r7
 8009fbc:	4640      	mov	r0, r8
 8009fbe:	4798      	blx	r3
 8009fc0:	6923      	ldr	r3, [r4, #16]
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	6123      	str	r3, [r4, #16]
 8009fc6:	e7f1      	b.n	8009fac <_scanf_float+0x2fc>
 8009fc8:	46aa      	mov	sl, r5
 8009fca:	9602      	str	r6, [sp, #8]
 8009fcc:	e7df      	b.n	8009f8e <_scanf_float+0x2de>
 8009fce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009fd2:	6923      	ldr	r3, [r4, #16]
 8009fd4:	2965      	cmp	r1, #101	; 0x65
 8009fd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8009fda:	f106 35ff 	add.w	r5, r6, #4294967295
 8009fde:	6123      	str	r3, [r4, #16]
 8009fe0:	d00c      	beq.n	8009ffc <_scanf_float+0x34c>
 8009fe2:	2945      	cmp	r1, #69	; 0x45
 8009fe4:	d00a      	beq.n	8009ffc <_scanf_float+0x34c>
 8009fe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fea:	463a      	mov	r2, r7
 8009fec:	4640      	mov	r0, r8
 8009fee:	4798      	blx	r3
 8009ff0:	6923      	ldr	r3, [r4, #16]
 8009ff2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	1eb5      	subs	r5, r6, #2
 8009ffa:	6123      	str	r3, [r4, #16]
 8009ffc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a000:	463a      	mov	r2, r7
 800a002:	4640      	mov	r0, r8
 800a004:	4798      	blx	r3
 800a006:	462e      	mov	r6, r5
 800a008:	6825      	ldr	r5, [r4, #0]
 800a00a:	f015 0510 	ands.w	r5, r5, #16
 800a00e:	d159      	bne.n	800a0c4 <_scanf_float+0x414>
 800a010:	7035      	strb	r5, [r6, #0]
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a01c:	d11b      	bne.n	800a056 <_scanf_float+0x3a6>
 800a01e:	9b01      	ldr	r3, [sp, #4]
 800a020:	454b      	cmp	r3, r9
 800a022:	eba3 0209 	sub.w	r2, r3, r9
 800a026:	d123      	bne.n	800a070 <_scanf_float+0x3c0>
 800a028:	2200      	movs	r2, #0
 800a02a:	4659      	mov	r1, fp
 800a02c:	4640      	mov	r0, r8
 800a02e:	f000 ff35 	bl	800ae9c <_strtod_r>
 800a032:	6822      	ldr	r2, [r4, #0]
 800a034:	9b03      	ldr	r3, [sp, #12]
 800a036:	f012 0f02 	tst.w	r2, #2
 800a03a:	ec57 6b10 	vmov	r6, r7, d0
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	d021      	beq.n	800a086 <_scanf_float+0x3d6>
 800a042:	9903      	ldr	r1, [sp, #12]
 800a044:	1d1a      	adds	r2, r3, #4
 800a046:	600a      	str	r2, [r1, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	e9c3 6700 	strd	r6, r7, [r3]
 800a04e:	68e3      	ldr	r3, [r4, #12]
 800a050:	3301      	adds	r3, #1
 800a052:	60e3      	str	r3, [r4, #12]
 800a054:	e66d      	b.n	8009d32 <_scanf_float+0x82>
 800a056:	9b04      	ldr	r3, [sp, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d0e5      	beq.n	800a028 <_scanf_float+0x378>
 800a05c:	9905      	ldr	r1, [sp, #20]
 800a05e:	230a      	movs	r3, #10
 800a060:	462a      	mov	r2, r5
 800a062:	3101      	adds	r1, #1
 800a064:	4640      	mov	r0, r8
 800a066:	f000 ffa1 	bl	800afac <_strtol_r>
 800a06a:	9b04      	ldr	r3, [sp, #16]
 800a06c:	9e05      	ldr	r6, [sp, #20]
 800a06e:	1ac2      	subs	r2, r0, r3
 800a070:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a074:	429e      	cmp	r6, r3
 800a076:	bf28      	it	cs
 800a078:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a07c:	4912      	ldr	r1, [pc, #72]	; (800a0c8 <_scanf_float+0x418>)
 800a07e:	4630      	mov	r0, r6
 800a080:	f000 f8ca 	bl	800a218 <siprintf>
 800a084:	e7d0      	b.n	800a028 <_scanf_float+0x378>
 800a086:	9903      	ldr	r1, [sp, #12]
 800a088:	f012 0f04 	tst.w	r2, #4
 800a08c:	f103 0204 	add.w	r2, r3, #4
 800a090:	600a      	str	r2, [r1, #0]
 800a092:	d1d9      	bne.n	800a048 <_scanf_float+0x398>
 800a094:	f8d3 8000 	ldr.w	r8, [r3]
 800a098:	ee10 2a10 	vmov	r2, s0
 800a09c:	ee10 0a10 	vmov	r0, s0
 800a0a0:	463b      	mov	r3, r7
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	f7f6 fd4c 	bl	8000b40 <__aeabi_dcmpun>
 800a0a8:	b128      	cbz	r0, 800a0b6 <_scanf_float+0x406>
 800a0aa:	4808      	ldr	r0, [pc, #32]	; (800a0cc <_scanf_float+0x41c>)
 800a0ac:	f000 f8ae 	bl	800a20c <nanf>
 800a0b0:	ed88 0a00 	vstr	s0, [r8]
 800a0b4:	e7cb      	b.n	800a04e <_scanf_float+0x39e>
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	f7f6 fd9f 	bl	8000bfc <__aeabi_d2f>
 800a0be:	f8c8 0000 	str.w	r0, [r8]
 800a0c2:	e7c4      	b.n	800a04e <_scanf_float+0x39e>
 800a0c4:	2500      	movs	r5, #0
 800a0c6:	e634      	b.n	8009d32 <_scanf_float+0x82>
 800a0c8:	0800ee36 	.word	0x0800ee36
 800a0cc:	0800ef47 	.word	0x0800ef47

0800a0d0 <iprintf>:
 800a0d0:	b40f      	push	{r0, r1, r2, r3}
 800a0d2:	4b0a      	ldr	r3, [pc, #40]	; (800a0fc <iprintf+0x2c>)
 800a0d4:	b513      	push	{r0, r1, r4, lr}
 800a0d6:	681c      	ldr	r4, [r3, #0]
 800a0d8:	b124      	cbz	r4, 800a0e4 <iprintf+0x14>
 800a0da:	69a3      	ldr	r3, [r4, #24]
 800a0dc:	b913      	cbnz	r3, 800a0e4 <iprintf+0x14>
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f002 fa72 	bl	800c5c8 <__sinit>
 800a0e4:	ab05      	add	r3, sp, #20
 800a0e6:	9a04      	ldr	r2, [sp, #16]
 800a0e8:	68a1      	ldr	r1, [r4, #8]
 800a0ea:	9301      	str	r3, [sp, #4]
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f003 fe73 	bl	800ddd8 <_vfiprintf_r>
 800a0f2:	b002      	add	sp, #8
 800a0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f8:	b004      	add	sp, #16
 800a0fa:	4770      	bx	lr
 800a0fc:	20000014 	.word	0x20000014

0800a100 <_puts_r>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	460e      	mov	r6, r1
 800a104:	4605      	mov	r5, r0
 800a106:	b118      	cbz	r0, 800a110 <_puts_r+0x10>
 800a108:	6983      	ldr	r3, [r0, #24]
 800a10a:	b90b      	cbnz	r3, 800a110 <_puts_r+0x10>
 800a10c:	f002 fa5c 	bl	800c5c8 <__sinit>
 800a110:	69ab      	ldr	r3, [r5, #24]
 800a112:	68ac      	ldr	r4, [r5, #8]
 800a114:	b913      	cbnz	r3, 800a11c <_puts_r+0x1c>
 800a116:	4628      	mov	r0, r5
 800a118:	f002 fa56 	bl	800c5c8 <__sinit>
 800a11c:	4b2c      	ldr	r3, [pc, #176]	; (800a1d0 <_puts_r+0xd0>)
 800a11e:	429c      	cmp	r4, r3
 800a120:	d120      	bne.n	800a164 <_puts_r+0x64>
 800a122:	686c      	ldr	r4, [r5, #4]
 800a124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a126:	07db      	lsls	r3, r3, #31
 800a128:	d405      	bmi.n	800a136 <_puts_r+0x36>
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	0598      	lsls	r0, r3, #22
 800a12e:	d402      	bmi.n	800a136 <_puts_r+0x36>
 800a130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a132:	f002 ff61 	bl	800cff8 <__retarget_lock_acquire_recursive>
 800a136:	89a3      	ldrh	r3, [r4, #12]
 800a138:	0719      	lsls	r1, r3, #28
 800a13a:	d51d      	bpl.n	800a178 <_puts_r+0x78>
 800a13c:	6923      	ldr	r3, [r4, #16]
 800a13e:	b1db      	cbz	r3, 800a178 <_puts_r+0x78>
 800a140:	3e01      	subs	r6, #1
 800a142:	68a3      	ldr	r3, [r4, #8]
 800a144:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a148:	3b01      	subs	r3, #1
 800a14a:	60a3      	str	r3, [r4, #8]
 800a14c:	bb39      	cbnz	r1, 800a19e <_puts_r+0x9e>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	da38      	bge.n	800a1c4 <_puts_r+0xc4>
 800a152:	4622      	mov	r2, r4
 800a154:	210a      	movs	r1, #10
 800a156:	4628      	mov	r0, r5
 800a158:	f001 f966 	bl	800b428 <__swbuf_r>
 800a15c:	3001      	adds	r0, #1
 800a15e:	d011      	beq.n	800a184 <_puts_r+0x84>
 800a160:	250a      	movs	r5, #10
 800a162:	e011      	b.n	800a188 <_puts_r+0x88>
 800a164:	4b1b      	ldr	r3, [pc, #108]	; (800a1d4 <_puts_r+0xd4>)
 800a166:	429c      	cmp	r4, r3
 800a168:	d101      	bne.n	800a16e <_puts_r+0x6e>
 800a16a:	68ac      	ldr	r4, [r5, #8]
 800a16c:	e7da      	b.n	800a124 <_puts_r+0x24>
 800a16e:	4b1a      	ldr	r3, [pc, #104]	; (800a1d8 <_puts_r+0xd8>)
 800a170:	429c      	cmp	r4, r3
 800a172:	bf08      	it	eq
 800a174:	68ec      	ldreq	r4, [r5, #12]
 800a176:	e7d5      	b.n	800a124 <_puts_r+0x24>
 800a178:	4621      	mov	r1, r4
 800a17a:	4628      	mov	r0, r5
 800a17c:	f001 f9a6 	bl	800b4cc <__swsetup_r>
 800a180:	2800      	cmp	r0, #0
 800a182:	d0dd      	beq.n	800a140 <_puts_r+0x40>
 800a184:	f04f 35ff 	mov.w	r5, #4294967295
 800a188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a18a:	07da      	lsls	r2, r3, #31
 800a18c:	d405      	bmi.n	800a19a <_puts_r+0x9a>
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	059b      	lsls	r3, r3, #22
 800a192:	d402      	bmi.n	800a19a <_puts_r+0x9a>
 800a194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a196:	f002 ff31 	bl	800cffc <__retarget_lock_release_recursive>
 800a19a:	4628      	mov	r0, r5
 800a19c:	bd70      	pop	{r4, r5, r6, pc}
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	da04      	bge.n	800a1ac <_puts_r+0xac>
 800a1a2:	69a2      	ldr	r2, [r4, #24]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	dc06      	bgt.n	800a1b6 <_puts_r+0xb6>
 800a1a8:	290a      	cmp	r1, #10
 800a1aa:	d004      	beq.n	800a1b6 <_puts_r+0xb6>
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	6022      	str	r2, [r4, #0]
 800a1b2:	7019      	strb	r1, [r3, #0]
 800a1b4:	e7c5      	b.n	800a142 <_puts_r+0x42>
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	f001 f935 	bl	800b428 <__swbuf_r>
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d1bf      	bne.n	800a142 <_puts_r+0x42>
 800a1c2:	e7df      	b.n	800a184 <_puts_r+0x84>
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	250a      	movs	r5, #10
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	6022      	str	r2, [r4, #0]
 800a1cc:	701d      	strb	r5, [r3, #0]
 800a1ce:	e7db      	b.n	800a188 <_puts_r+0x88>
 800a1d0:	0800f158 	.word	0x0800f158
 800a1d4:	0800f178 	.word	0x0800f178
 800a1d8:	0800f138 	.word	0x0800f138

0800a1dc <puts>:
 800a1dc:	4b02      	ldr	r3, [pc, #8]	; (800a1e8 <puts+0xc>)
 800a1de:	4601      	mov	r1, r0
 800a1e0:	6818      	ldr	r0, [r3, #0]
 800a1e2:	f7ff bf8d 	b.w	800a100 <_puts_r>
 800a1e6:	bf00      	nop
 800a1e8:	20000014 	.word	0x20000014

0800a1ec <_sbrk_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4d06      	ldr	r5, [pc, #24]	; (800a208 <_sbrk_r+0x1c>)
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	602b      	str	r3, [r5, #0]
 800a1f8:	f7f8 f97c 	bl	80024f4 <_sbrk>
 800a1fc:	1c43      	adds	r3, r0, #1
 800a1fe:	d102      	bne.n	800a206 <_sbrk_r+0x1a>
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	b103      	cbz	r3, 800a206 <_sbrk_r+0x1a>
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	bd38      	pop	{r3, r4, r5, pc}
 800a208:	200004bc 	.word	0x200004bc

0800a20c <nanf>:
 800a20c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a214 <nanf+0x8>
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	7fc00000 	.word	0x7fc00000

0800a218 <siprintf>:
 800a218:	b40e      	push	{r1, r2, r3}
 800a21a:	b500      	push	{lr}
 800a21c:	b09c      	sub	sp, #112	; 0x70
 800a21e:	ab1d      	add	r3, sp, #116	; 0x74
 800a220:	9002      	str	r0, [sp, #8]
 800a222:	9006      	str	r0, [sp, #24]
 800a224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a228:	4809      	ldr	r0, [pc, #36]	; (800a250 <siprintf+0x38>)
 800a22a:	9107      	str	r1, [sp, #28]
 800a22c:	9104      	str	r1, [sp, #16]
 800a22e:	4909      	ldr	r1, [pc, #36]	; (800a254 <siprintf+0x3c>)
 800a230:	f853 2b04 	ldr.w	r2, [r3], #4
 800a234:	9105      	str	r1, [sp, #20]
 800a236:	6800      	ldr	r0, [r0, #0]
 800a238:	9301      	str	r3, [sp, #4]
 800a23a:	a902      	add	r1, sp, #8
 800a23c:	f003 fca2 	bl	800db84 <_svfiprintf_r>
 800a240:	9b02      	ldr	r3, [sp, #8]
 800a242:	2200      	movs	r2, #0
 800a244:	701a      	strb	r2, [r3, #0]
 800a246:	b01c      	add	sp, #112	; 0x70
 800a248:	f85d eb04 	ldr.w	lr, [sp], #4
 800a24c:	b003      	add	sp, #12
 800a24e:	4770      	bx	lr
 800a250:	20000014 	.word	0x20000014
 800a254:	ffff0208 	.word	0xffff0208

0800a258 <sulp>:
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	4604      	mov	r4, r0
 800a25c:	460d      	mov	r5, r1
 800a25e:	ec45 4b10 	vmov	d0, r4, r5
 800a262:	4616      	mov	r6, r2
 800a264:	f003 face 	bl	800d804 <__ulp>
 800a268:	ec51 0b10 	vmov	r0, r1, d0
 800a26c:	b17e      	cbz	r6, 800a28e <sulp+0x36>
 800a26e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a272:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a276:	2b00      	cmp	r3, #0
 800a278:	dd09      	ble.n	800a28e <sulp+0x36>
 800a27a:	051b      	lsls	r3, r3, #20
 800a27c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a280:	2400      	movs	r4, #0
 800a282:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a286:	4622      	mov	r2, r4
 800a288:	462b      	mov	r3, r5
 800a28a:	f7f6 f9bf 	bl	800060c <__aeabi_dmul>
 800a28e:	bd70      	pop	{r4, r5, r6, pc}

0800a290 <_strtod_l>:
 800a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a294:	ed2d 8b02 	vpush	{d8}
 800a298:	b09d      	sub	sp, #116	; 0x74
 800a29a:	461f      	mov	r7, r3
 800a29c:	2300      	movs	r3, #0
 800a29e:	9318      	str	r3, [sp, #96]	; 0x60
 800a2a0:	4ba2      	ldr	r3, [pc, #648]	; (800a52c <_strtod_l+0x29c>)
 800a2a2:	9213      	str	r2, [sp, #76]	; 0x4c
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	9305      	str	r3, [sp, #20]
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	4688      	mov	r8, r1
 800a2ae:	f7f5 ff8f 	bl	80001d0 <strlen>
 800a2b2:	f04f 0a00 	mov.w	sl, #0
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	f04f 0b00 	mov.w	fp, #0
 800a2bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a2c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2c2:	781a      	ldrb	r2, [r3, #0]
 800a2c4:	2a2b      	cmp	r2, #43	; 0x2b
 800a2c6:	d04e      	beq.n	800a366 <_strtod_l+0xd6>
 800a2c8:	d83b      	bhi.n	800a342 <_strtod_l+0xb2>
 800a2ca:	2a0d      	cmp	r2, #13
 800a2cc:	d834      	bhi.n	800a338 <_strtod_l+0xa8>
 800a2ce:	2a08      	cmp	r2, #8
 800a2d0:	d834      	bhi.n	800a33c <_strtod_l+0xac>
 800a2d2:	2a00      	cmp	r2, #0
 800a2d4:	d03e      	beq.n	800a354 <_strtod_l+0xc4>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	930a      	str	r3, [sp, #40]	; 0x28
 800a2da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a2dc:	7833      	ldrb	r3, [r6, #0]
 800a2de:	2b30      	cmp	r3, #48	; 0x30
 800a2e0:	f040 80b0 	bne.w	800a444 <_strtod_l+0x1b4>
 800a2e4:	7873      	ldrb	r3, [r6, #1]
 800a2e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a2ea:	2b58      	cmp	r3, #88	; 0x58
 800a2ec:	d168      	bne.n	800a3c0 <_strtod_l+0x130>
 800a2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	ab18      	add	r3, sp, #96	; 0x60
 800a2f4:	9702      	str	r7, [sp, #8]
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	4a8d      	ldr	r2, [pc, #564]	; (800a530 <_strtod_l+0x2a0>)
 800a2fa:	ab19      	add	r3, sp, #100	; 0x64
 800a2fc:	a917      	add	r1, sp, #92	; 0x5c
 800a2fe:	4620      	mov	r0, r4
 800a300:	f002 fa78 	bl	800c7f4 <__gethex>
 800a304:	f010 0707 	ands.w	r7, r0, #7
 800a308:	4605      	mov	r5, r0
 800a30a:	d005      	beq.n	800a318 <_strtod_l+0x88>
 800a30c:	2f06      	cmp	r7, #6
 800a30e:	d12c      	bne.n	800a36a <_strtod_l+0xda>
 800a310:	3601      	adds	r6, #1
 800a312:	2300      	movs	r3, #0
 800a314:	9617      	str	r6, [sp, #92]	; 0x5c
 800a316:	930a      	str	r3, [sp, #40]	; 0x28
 800a318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f040 8590 	bne.w	800ae40 <_strtod_l+0xbb0>
 800a320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a322:	b1eb      	cbz	r3, 800a360 <_strtod_l+0xd0>
 800a324:	4652      	mov	r2, sl
 800a326:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a32a:	ec43 2b10 	vmov	d0, r2, r3
 800a32e:	b01d      	add	sp, #116	; 0x74
 800a330:	ecbd 8b02 	vpop	{d8}
 800a334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a338:	2a20      	cmp	r2, #32
 800a33a:	d1cc      	bne.n	800a2d6 <_strtod_l+0x46>
 800a33c:	3301      	adds	r3, #1
 800a33e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a340:	e7be      	b.n	800a2c0 <_strtod_l+0x30>
 800a342:	2a2d      	cmp	r2, #45	; 0x2d
 800a344:	d1c7      	bne.n	800a2d6 <_strtod_l+0x46>
 800a346:	2201      	movs	r2, #1
 800a348:	920a      	str	r2, [sp, #40]	; 0x28
 800a34a:	1c5a      	adds	r2, r3, #1
 800a34c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a34e:	785b      	ldrb	r3, [r3, #1]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1c2      	bne.n	800a2da <_strtod_l+0x4a>
 800a354:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a356:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f040 856e 	bne.w	800ae3c <_strtod_l+0xbac>
 800a360:	4652      	mov	r2, sl
 800a362:	465b      	mov	r3, fp
 800a364:	e7e1      	b.n	800a32a <_strtod_l+0x9a>
 800a366:	2200      	movs	r2, #0
 800a368:	e7ee      	b.n	800a348 <_strtod_l+0xb8>
 800a36a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a36c:	b13a      	cbz	r2, 800a37e <_strtod_l+0xee>
 800a36e:	2135      	movs	r1, #53	; 0x35
 800a370:	a81a      	add	r0, sp, #104	; 0x68
 800a372:	f003 fb52 	bl	800da1a <__copybits>
 800a376:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a378:	4620      	mov	r0, r4
 800a37a:	f002 ff11 	bl	800d1a0 <_Bfree>
 800a37e:	3f01      	subs	r7, #1
 800a380:	2f04      	cmp	r7, #4
 800a382:	d806      	bhi.n	800a392 <_strtod_l+0x102>
 800a384:	e8df f007 	tbb	[pc, r7]
 800a388:	1714030a 	.word	0x1714030a
 800a38c:	0a          	.byte	0x0a
 800a38d:	00          	.byte	0x00
 800a38e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a392:	0728      	lsls	r0, r5, #28
 800a394:	d5c0      	bpl.n	800a318 <_strtod_l+0x88>
 800a396:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a39a:	e7bd      	b.n	800a318 <_strtod_l+0x88>
 800a39c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a3a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a3a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a3a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a3aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a3ae:	e7f0      	b.n	800a392 <_strtod_l+0x102>
 800a3b0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a534 <_strtod_l+0x2a4>
 800a3b4:	e7ed      	b.n	800a392 <_strtod_l+0x102>
 800a3b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a3ba:	f04f 3aff 	mov.w	sl, #4294967295
 800a3be:	e7e8      	b.n	800a392 <_strtod_l+0x102>
 800a3c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3c2:	1c5a      	adds	r2, r3, #1
 800a3c4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a3c6:	785b      	ldrb	r3, [r3, #1]
 800a3c8:	2b30      	cmp	r3, #48	; 0x30
 800a3ca:	d0f9      	beq.n	800a3c0 <_strtod_l+0x130>
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d0a3      	beq.n	800a318 <_strtod_l+0x88>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	f04f 0900 	mov.w	r9, #0
 800a3d6:	9304      	str	r3, [sp, #16]
 800a3d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3da:	9308      	str	r3, [sp, #32]
 800a3dc:	f8cd 901c 	str.w	r9, [sp, #28]
 800a3e0:	464f      	mov	r7, r9
 800a3e2:	220a      	movs	r2, #10
 800a3e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a3e6:	7806      	ldrb	r6, [r0, #0]
 800a3e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a3ec:	b2d9      	uxtb	r1, r3
 800a3ee:	2909      	cmp	r1, #9
 800a3f0:	d92a      	bls.n	800a448 <_strtod_l+0x1b8>
 800a3f2:	9905      	ldr	r1, [sp, #20]
 800a3f4:	462a      	mov	r2, r5
 800a3f6:	f003 fea0 	bl	800e13a <strncmp>
 800a3fa:	b398      	cbz	r0, 800a464 <_strtod_l+0x1d4>
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	4632      	mov	r2, r6
 800a400:	463d      	mov	r5, r7
 800a402:	9005      	str	r0, [sp, #20]
 800a404:	4603      	mov	r3, r0
 800a406:	2a65      	cmp	r2, #101	; 0x65
 800a408:	d001      	beq.n	800a40e <_strtod_l+0x17e>
 800a40a:	2a45      	cmp	r2, #69	; 0x45
 800a40c:	d118      	bne.n	800a440 <_strtod_l+0x1b0>
 800a40e:	b91d      	cbnz	r5, 800a418 <_strtod_l+0x188>
 800a410:	9a04      	ldr	r2, [sp, #16]
 800a412:	4302      	orrs	r2, r0
 800a414:	d09e      	beq.n	800a354 <_strtod_l+0xc4>
 800a416:	2500      	movs	r5, #0
 800a418:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a41c:	f108 0201 	add.w	r2, r8, #1
 800a420:	9217      	str	r2, [sp, #92]	; 0x5c
 800a422:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a426:	2a2b      	cmp	r2, #43	; 0x2b
 800a428:	d075      	beq.n	800a516 <_strtod_l+0x286>
 800a42a:	2a2d      	cmp	r2, #45	; 0x2d
 800a42c:	d07b      	beq.n	800a526 <_strtod_l+0x296>
 800a42e:	f04f 0c00 	mov.w	ip, #0
 800a432:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a436:	2909      	cmp	r1, #9
 800a438:	f240 8082 	bls.w	800a540 <_strtod_l+0x2b0>
 800a43c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a440:	2600      	movs	r6, #0
 800a442:	e09d      	b.n	800a580 <_strtod_l+0x2f0>
 800a444:	2300      	movs	r3, #0
 800a446:	e7c4      	b.n	800a3d2 <_strtod_l+0x142>
 800a448:	2f08      	cmp	r7, #8
 800a44a:	bfd8      	it	le
 800a44c:	9907      	ldrle	r1, [sp, #28]
 800a44e:	f100 0001 	add.w	r0, r0, #1
 800a452:	bfda      	itte	le
 800a454:	fb02 3301 	mlale	r3, r2, r1, r3
 800a458:	9307      	strle	r3, [sp, #28]
 800a45a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a45e:	3701      	adds	r7, #1
 800a460:	9017      	str	r0, [sp, #92]	; 0x5c
 800a462:	e7bf      	b.n	800a3e4 <_strtod_l+0x154>
 800a464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a466:	195a      	adds	r2, r3, r5
 800a468:	9217      	str	r2, [sp, #92]	; 0x5c
 800a46a:	5d5a      	ldrb	r2, [r3, r5]
 800a46c:	2f00      	cmp	r7, #0
 800a46e:	d037      	beq.n	800a4e0 <_strtod_l+0x250>
 800a470:	9005      	str	r0, [sp, #20]
 800a472:	463d      	mov	r5, r7
 800a474:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a478:	2b09      	cmp	r3, #9
 800a47a:	d912      	bls.n	800a4a2 <_strtod_l+0x212>
 800a47c:	2301      	movs	r3, #1
 800a47e:	e7c2      	b.n	800a406 <_strtod_l+0x176>
 800a480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	9217      	str	r2, [sp, #92]	; 0x5c
 800a486:	785a      	ldrb	r2, [r3, #1]
 800a488:	3001      	adds	r0, #1
 800a48a:	2a30      	cmp	r2, #48	; 0x30
 800a48c:	d0f8      	beq.n	800a480 <_strtod_l+0x1f0>
 800a48e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a492:	2b08      	cmp	r3, #8
 800a494:	f200 84d9 	bhi.w	800ae4a <_strtod_l+0xbba>
 800a498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a49a:	9005      	str	r0, [sp, #20]
 800a49c:	2000      	movs	r0, #0
 800a49e:	9308      	str	r3, [sp, #32]
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	3a30      	subs	r2, #48	; 0x30
 800a4a4:	f100 0301 	add.w	r3, r0, #1
 800a4a8:	d014      	beq.n	800a4d4 <_strtod_l+0x244>
 800a4aa:	9905      	ldr	r1, [sp, #20]
 800a4ac:	4419      	add	r1, r3
 800a4ae:	9105      	str	r1, [sp, #20]
 800a4b0:	462b      	mov	r3, r5
 800a4b2:	eb00 0e05 	add.w	lr, r0, r5
 800a4b6:	210a      	movs	r1, #10
 800a4b8:	4573      	cmp	r3, lr
 800a4ba:	d113      	bne.n	800a4e4 <_strtod_l+0x254>
 800a4bc:	182b      	adds	r3, r5, r0
 800a4be:	2b08      	cmp	r3, #8
 800a4c0:	f105 0501 	add.w	r5, r5, #1
 800a4c4:	4405      	add	r5, r0
 800a4c6:	dc1c      	bgt.n	800a502 <_strtod_l+0x272>
 800a4c8:	9907      	ldr	r1, [sp, #28]
 800a4ca:	230a      	movs	r3, #10
 800a4cc:	fb03 2301 	mla	r3, r3, r1, r2
 800a4d0:	9307      	str	r3, [sp, #28]
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a4d6:	1c51      	adds	r1, r2, #1
 800a4d8:	9117      	str	r1, [sp, #92]	; 0x5c
 800a4da:	7852      	ldrb	r2, [r2, #1]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	e7c9      	b.n	800a474 <_strtod_l+0x1e4>
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	e7d2      	b.n	800a48a <_strtod_l+0x1fa>
 800a4e4:	2b08      	cmp	r3, #8
 800a4e6:	dc04      	bgt.n	800a4f2 <_strtod_l+0x262>
 800a4e8:	9e07      	ldr	r6, [sp, #28]
 800a4ea:	434e      	muls	r6, r1
 800a4ec:	9607      	str	r6, [sp, #28]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	e7e2      	b.n	800a4b8 <_strtod_l+0x228>
 800a4f2:	f103 0c01 	add.w	ip, r3, #1
 800a4f6:	f1bc 0f10 	cmp.w	ip, #16
 800a4fa:	bfd8      	it	le
 800a4fc:	fb01 f909 	mulle.w	r9, r1, r9
 800a500:	e7f5      	b.n	800a4ee <_strtod_l+0x25e>
 800a502:	2d10      	cmp	r5, #16
 800a504:	bfdc      	itt	le
 800a506:	230a      	movle	r3, #10
 800a508:	fb03 2909 	mlale	r9, r3, r9, r2
 800a50c:	e7e1      	b.n	800a4d2 <_strtod_l+0x242>
 800a50e:	2300      	movs	r3, #0
 800a510:	9305      	str	r3, [sp, #20]
 800a512:	2301      	movs	r3, #1
 800a514:	e77c      	b.n	800a410 <_strtod_l+0x180>
 800a516:	f04f 0c00 	mov.w	ip, #0
 800a51a:	f108 0202 	add.w	r2, r8, #2
 800a51e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a520:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a524:	e785      	b.n	800a432 <_strtod_l+0x1a2>
 800a526:	f04f 0c01 	mov.w	ip, #1
 800a52a:	e7f6      	b.n	800a51a <_strtod_l+0x28a>
 800a52c:	0800f200 	.word	0x0800f200
 800a530:	0800ee3c 	.word	0x0800ee3c
 800a534:	7ff00000 	.word	0x7ff00000
 800a538:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a53a:	1c51      	adds	r1, r2, #1
 800a53c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a53e:	7852      	ldrb	r2, [r2, #1]
 800a540:	2a30      	cmp	r2, #48	; 0x30
 800a542:	d0f9      	beq.n	800a538 <_strtod_l+0x2a8>
 800a544:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a548:	2908      	cmp	r1, #8
 800a54a:	f63f af79 	bhi.w	800a440 <_strtod_l+0x1b0>
 800a54e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a552:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a554:	9206      	str	r2, [sp, #24]
 800a556:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a558:	1c51      	adds	r1, r2, #1
 800a55a:	9117      	str	r1, [sp, #92]	; 0x5c
 800a55c:	7852      	ldrb	r2, [r2, #1]
 800a55e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a562:	2e09      	cmp	r6, #9
 800a564:	d937      	bls.n	800a5d6 <_strtod_l+0x346>
 800a566:	9e06      	ldr	r6, [sp, #24]
 800a568:	1b89      	subs	r1, r1, r6
 800a56a:	2908      	cmp	r1, #8
 800a56c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a570:	dc02      	bgt.n	800a578 <_strtod_l+0x2e8>
 800a572:	4576      	cmp	r6, lr
 800a574:	bfa8      	it	ge
 800a576:	4676      	movge	r6, lr
 800a578:	f1bc 0f00 	cmp.w	ip, #0
 800a57c:	d000      	beq.n	800a580 <_strtod_l+0x2f0>
 800a57e:	4276      	negs	r6, r6
 800a580:	2d00      	cmp	r5, #0
 800a582:	d14d      	bne.n	800a620 <_strtod_l+0x390>
 800a584:	9904      	ldr	r1, [sp, #16]
 800a586:	4301      	orrs	r1, r0
 800a588:	f47f aec6 	bne.w	800a318 <_strtod_l+0x88>
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f47f aee1 	bne.w	800a354 <_strtod_l+0xc4>
 800a592:	2a69      	cmp	r2, #105	; 0x69
 800a594:	d027      	beq.n	800a5e6 <_strtod_l+0x356>
 800a596:	dc24      	bgt.n	800a5e2 <_strtod_l+0x352>
 800a598:	2a49      	cmp	r2, #73	; 0x49
 800a59a:	d024      	beq.n	800a5e6 <_strtod_l+0x356>
 800a59c:	2a4e      	cmp	r2, #78	; 0x4e
 800a59e:	f47f aed9 	bne.w	800a354 <_strtod_l+0xc4>
 800a5a2:	499f      	ldr	r1, [pc, #636]	; (800a820 <_strtod_l+0x590>)
 800a5a4:	a817      	add	r0, sp, #92	; 0x5c
 800a5a6:	f002 fb7d 	bl	800cca4 <__match>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	f43f aed2 	beq.w	800a354 <_strtod_l+0xc4>
 800a5b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	2b28      	cmp	r3, #40	; 0x28
 800a5b6:	d12d      	bne.n	800a614 <_strtod_l+0x384>
 800a5b8:	499a      	ldr	r1, [pc, #616]	; (800a824 <_strtod_l+0x594>)
 800a5ba:	aa1a      	add	r2, sp, #104	; 0x68
 800a5bc:	a817      	add	r0, sp, #92	; 0x5c
 800a5be:	f002 fb85 	bl	800cccc <__hexnan>
 800a5c2:	2805      	cmp	r0, #5
 800a5c4:	d126      	bne.n	800a614 <_strtod_l+0x384>
 800a5c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a5cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a5d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a5d4:	e6a0      	b.n	800a318 <_strtod_l+0x88>
 800a5d6:	210a      	movs	r1, #10
 800a5d8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a5dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a5e0:	e7b9      	b.n	800a556 <_strtod_l+0x2c6>
 800a5e2:	2a6e      	cmp	r2, #110	; 0x6e
 800a5e4:	e7db      	b.n	800a59e <_strtod_l+0x30e>
 800a5e6:	4990      	ldr	r1, [pc, #576]	; (800a828 <_strtod_l+0x598>)
 800a5e8:	a817      	add	r0, sp, #92	; 0x5c
 800a5ea:	f002 fb5b 	bl	800cca4 <__match>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	f43f aeb0 	beq.w	800a354 <_strtod_l+0xc4>
 800a5f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5f6:	498d      	ldr	r1, [pc, #564]	; (800a82c <_strtod_l+0x59c>)
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	a817      	add	r0, sp, #92	; 0x5c
 800a5fc:	9317      	str	r3, [sp, #92]	; 0x5c
 800a5fe:	f002 fb51 	bl	800cca4 <__match>
 800a602:	b910      	cbnz	r0, 800a60a <_strtod_l+0x37a>
 800a604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a606:	3301      	adds	r3, #1
 800a608:	9317      	str	r3, [sp, #92]	; 0x5c
 800a60a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a83c <_strtod_l+0x5ac>
 800a60e:	f04f 0a00 	mov.w	sl, #0
 800a612:	e681      	b.n	800a318 <_strtod_l+0x88>
 800a614:	4886      	ldr	r0, [pc, #536]	; (800a830 <_strtod_l+0x5a0>)
 800a616:	f003 fd0f 	bl	800e038 <nan>
 800a61a:	ec5b ab10 	vmov	sl, fp, d0
 800a61e:	e67b      	b.n	800a318 <_strtod_l+0x88>
 800a620:	9b05      	ldr	r3, [sp, #20]
 800a622:	9807      	ldr	r0, [sp, #28]
 800a624:	1af3      	subs	r3, r6, r3
 800a626:	2f00      	cmp	r7, #0
 800a628:	bf08      	it	eq
 800a62a:	462f      	moveq	r7, r5
 800a62c:	2d10      	cmp	r5, #16
 800a62e:	9306      	str	r3, [sp, #24]
 800a630:	46a8      	mov	r8, r5
 800a632:	bfa8      	it	ge
 800a634:	f04f 0810 	movge.w	r8, #16
 800a638:	f7f5 ff6e 	bl	8000518 <__aeabi_ui2d>
 800a63c:	2d09      	cmp	r5, #9
 800a63e:	4682      	mov	sl, r0
 800a640:	468b      	mov	fp, r1
 800a642:	dd13      	ble.n	800a66c <_strtod_l+0x3dc>
 800a644:	4b7b      	ldr	r3, [pc, #492]	; (800a834 <_strtod_l+0x5a4>)
 800a646:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a64a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a64e:	f7f5 ffdd 	bl	800060c <__aeabi_dmul>
 800a652:	4682      	mov	sl, r0
 800a654:	4648      	mov	r0, r9
 800a656:	468b      	mov	fp, r1
 800a658:	f7f5 ff5e 	bl	8000518 <__aeabi_ui2d>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	4650      	mov	r0, sl
 800a662:	4659      	mov	r1, fp
 800a664:	f7f5 fe1c 	bl	80002a0 <__adddf3>
 800a668:	4682      	mov	sl, r0
 800a66a:	468b      	mov	fp, r1
 800a66c:	2d0f      	cmp	r5, #15
 800a66e:	dc38      	bgt.n	800a6e2 <_strtod_l+0x452>
 800a670:	9b06      	ldr	r3, [sp, #24]
 800a672:	2b00      	cmp	r3, #0
 800a674:	f43f ae50 	beq.w	800a318 <_strtod_l+0x88>
 800a678:	dd24      	ble.n	800a6c4 <_strtod_l+0x434>
 800a67a:	2b16      	cmp	r3, #22
 800a67c:	dc0b      	bgt.n	800a696 <_strtod_l+0x406>
 800a67e:	496d      	ldr	r1, [pc, #436]	; (800a834 <_strtod_l+0x5a4>)
 800a680:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a684:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a688:	4652      	mov	r2, sl
 800a68a:	465b      	mov	r3, fp
 800a68c:	f7f5 ffbe 	bl	800060c <__aeabi_dmul>
 800a690:	4682      	mov	sl, r0
 800a692:	468b      	mov	fp, r1
 800a694:	e640      	b.n	800a318 <_strtod_l+0x88>
 800a696:	9a06      	ldr	r2, [sp, #24]
 800a698:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a69c:	4293      	cmp	r3, r2
 800a69e:	db20      	blt.n	800a6e2 <_strtod_l+0x452>
 800a6a0:	4c64      	ldr	r4, [pc, #400]	; (800a834 <_strtod_l+0x5a4>)
 800a6a2:	f1c5 050f 	rsb	r5, r5, #15
 800a6a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a6aa:	4652      	mov	r2, sl
 800a6ac:	465b      	mov	r3, fp
 800a6ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6b2:	f7f5 ffab 	bl	800060c <__aeabi_dmul>
 800a6b6:	9b06      	ldr	r3, [sp, #24]
 800a6b8:	1b5d      	subs	r5, r3, r5
 800a6ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a6be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a6c2:	e7e3      	b.n	800a68c <_strtod_l+0x3fc>
 800a6c4:	9b06      	ldr	r3, [sp, #24]
 800a6c6:	3316      	adds	r3, #22
 800a6c8:	db0b      	blt.n	800a6e2 <_strtod_l+0x452>
 800a6ca:	9b05      	ldr	r3, [sp, #20]
 800a6cc:	1b9e      	subs	r6, r3, r6
 800a6ce:	4b59      	ldr	r3, [pc, #356]	; (800a834 <_strtod_l+0x5a4>)
 800a6d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a6d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6d8:	4650      	mov	r0, sl
 800a6da:	4659      	mov	r1, fp
 800a6dc:	f7f6 f8c0 	bl	8000860 <__aeabi_ddiv>
 800a6e0:	e7d6      	b.n	800a690 <_strtod_l+0x400>
 800a6e2:	9b06      	ldr	r3, [sp, #24]
 800a6e4:	eba5 0808 	sub.w	r8, r5, r8
 800a6e8:	4498      	add	r8, r3
 800a6ea:	f1b8 0f00 	cmp.w	r8, #0
 800a6ee:	dd74      	ble.n	800a7da <_strtod_l+0x54a>
 800a6f0:	f018 030f 	ands.w	r3, r8, #15
 800a6f4:	d00a      	beq.n	800a70c <_strtod_l+0x47c>
 800a6f6:	494f      	ldr	r1, [pc, #316]	; (800a834 <_strtod_l+0x5a4>)
 800a6f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6fc:	4652      	mov	r2, sl
 800a6fe:	465b      	mov	r3, fp
 800a700:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a704:	f7f5 ff82 	bl	800060c <__aeabi_dmul>
 800a708:	4682      	mov	sl, r0
 800a70a:	468b      	mov	fp, r1
 800a70c:	f038 080f 	bics.w	r8, r8, #15
 800a710:	d04f      	beq.n	800a7b2 <_strtod_l+0x522>
 800a712:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a716:	dd22      	ble.n	800a75e <_strtod_l+0x4ce>
 800a718:	2500      	movs	r5, #0
 800a71a:	462e      	mov	r6, r5
 800a71c:	9507      	str	r5, [sp, #28]
 800a71e:	9505      	str	r5, [sp, #20]
 800a720:	2322      	movs	r3, #34	; 0x22
 800a722:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a83c <_strtod_l+0x5ac>
 800a726:	6023      	str	r3, [r4, #0]
 800a728:	f04f 0a00 	mov.w	sl, #0
 800a72c:	9b07      	ldr	r3, [sp, #28]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f43f adf2 	beq.w	800a318 <_strtod_l+0x88>
 800a734:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a736:	4620      	mov	r0, r4
 800a738:	f002 fd32 	bl	800d1a0 <_Bfree>
 800a73c:	9905      	ldr	r1, [sp, #20]
 800a73e:	4620      	mov	r0, r4
 800a740:	f002 fd2e 	bl	800d1a0 <_Bfree>
 800a744:	4631      	mov	r1, r6
 800a746:	4620      	mov	r0, r4
 800a748:	f002 fd2a 	bl	800d1a0 <_Bfree>
 800a74c:	9907      	ldr	r1, [sp, #28]
 800a74e:	4620      	mov	r0, r4
 800a750:	f002 fd26 	bl	800d1a0 <_Bfree>
 800a754:	4629      	mov	r1, r5
 800a756:	4620      	mov	r0, r4
 800a758:	f002 fd22 	bl	800d1a0 <_Bfree>
 800a75c:	e5dc      	b.n	800a318 <_strtod_l+0x88>
 800a75e:	4b36      	ldr	r3, [pc, #216]	; (800a838 <_strtod_l+0x5a8>)
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	2300      	movs	r3, #0
 800a764:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a768:	4650      	mov	r0, sl
 800a76a:	4659      	mov	r1, fp
 800a76c:	4699      	mov	r9, r3
 800a76e:	f1b8 0f01 	cmp.w	r8, #1
 800a772:	dc21      	bgt.n	800a7b8 <_strtod_l+0x528>
 800a774:	b10b      	cbz	r3, 800a77a <_strtod_l+0x4ea>
 800a776:	4682      	mov	sl, r0
 800a778:	468b      	mov	fp, r1
 800a77a:	4b2f      	ldr	r3, [pc, #188]	; (800a838 <_strtod_l+0x5a8>)
 800a77c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a780:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a784:	4652      	mov	r2, sl
 800a786:	465b      	mov	r3, fp
 800a788:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a78c:	f7f5 ff3e 	bl	800060c <__aeabi_dmul>
 800a790:	4b2a      	ldr	r3, [pc, #168]	; (800a83c <_strtod_l+0x5ac>)
 800a792:	460a      	mov	r2, r1
 800a794:	400b      	ands	r3, r1
 800a796:	492a      	ldr	r1, [pc, #168]	; (800a840 <_strtod_l+0x5b0>)
 800a798:	428b      	cmp	r3, r1
 800a79a:	4682      	mov	sl, r0
 800a79c:	d8bc      	bhi.n	800a718 <_strtod_l+0x488>
 800a79e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a7a2:	428b      	cmp	r3, r1
 800a7a4:	bf86      	itte	hi
 800a7a6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a844 <_strtod_l+0x5b4>
 800a7aa:	f04f 3aff 	movhi.w	sl, #4294967295
 800a7ae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	e084      	b.n	800a8c2 <_strtod_l+0x632>
 800a7b8:	f018 0f01 	tst.w	r8, #1
 800a7bc:	d005      	beq.n	800a7ca <_strtod_l+0x53a>
 800a7be:	9b04      	ldr	r3, [sp, #16]
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	f7f5 ff22 	bl	800060c <__aeabi_dmul>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	9a04      	ldr	r2, [sp, #16]
 800a7cc:	3208      	adds	r2, #8
 800a7ce:	f109 0901 	add.w	r9, r9, #1
 800a7d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a7d6:	9204      	str	r2, [sp, #16]
 800a7d8:	e7c9      	b.n	800a76e <_strtod_l+0x4de>
 800a7da:	d0ea      	beq.n	800a7b2 <_strtod_l+0x522>
 800a7dc:	f1c8 0800 	rsb	r8, r8, #0
 800a7e0:	f018 020f 	ands.w	r2, r8, #15
 800a7e4:	d00a      	beq.n	800a7fc <_strtod_l+0x56c>
 800a7e6:	4b13      	ldr	r3, [pc, #76]	; (800a834 <_strtod_l+0x5a4>)
 800a7e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7ec:	4650      	mov	r0, sl
 800a7ee:	4659      	mov	r1, fp
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	f7f6 f834 	bl	8000860 <__aeabi_ddiv>
 800a7f8:	4682      	mov	sl, r0
 800a7fa:	468b      	mov	fp, r1
 800a7fc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a800:	d0d7      	beq.n	800a7b2 <_strtod_l+0x522>
 800a802:	f1b8 0f1f 	cmp.w	r8, #31
 800a806:	dd1f      	ble.n	800a848 <_strtod_l+0x5b8>
 800a808:	2500      	movs	r5, #0
 800a80a:	462e      	mov	r6, r5
 800a80c:	9507      	str	r5, [sp, #28]
 800a80e:	9505      	str	r5, [sp, #20]
 800a810:	2322      	movs	r3, #34	; 0x22
 800a812:	f04f 0a00 	mov.w	sl, #0
 800a816:	f04f 0b00 	mov.w	fp, #0
 800a81a:	6023      	str	r3, [r4, #0]
 800a81c:	e786      	b.n	800a72c <_strtod_l+0x49c>
 800a81e:	bf00      	nop
 800a820:	0800ee11 	.word	0x0800ee11
 800a824:	0800ee50 	.word	0x0800ee50
 800a828:	0800ee09 	.word	0x0800ee09
 800a82c:	0800f0c1 	.word	0x0800f0c1
 800a830:	0800ef47 	.word	0x0800ef47
 800a834:	0800f298 	.word	0x0800f298
 800a838:	0800f270 	.word	0x0800f270
 800a83c:	7ff00000 	.word	0x7ff00000
 800a840:	7ca00000 	.word	0x7ca00000
 800a844:	7fefffff 	.word	0x7fefffff
 800a848:	f018 0310 	ands.w	r3, r8, #16
 800a84c:	bf18      	it	ne
 800a84e:	236a      	movne	r3, #106	; 0x6a
 800a850:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ac00 <_strtod_l+0x970>
 800a854:	9304      	str	r3, [sp, #16]
 800a856:	4650      	mov	r0, sl
 800a858:	4659      	mov	r1, fp
 800a85a:	2300      	movs	r3, #0
 800a85c:	f018 0f01 	tst.w	r8, #1
 800a860:	d004      	beq.n	800a86c <_strtod_l+0x5dc>
 800a862:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a866:	f7f5 fed1 	bl	800060c <__aeabi_dmul>
 800a86a:	2301      	movs	r3, #1
 800a86c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a870:	f109 0908 	add.w	r9, r9, #8
 800a874:	d1f2      	bne.n	800a85c <_strtod_l+0x5cc>
 800a876:	b10b      	cbz	r3, 800a87c <_strtod_l+0x5ec>
 800a878:	4682      	mov	sl, r0
 800a87a:	468b      	mov	fp, r1
 800a87c:	9b04      	ldr	r3, [sp, #16]
 800a87e:	b1c3      	cbz	r3, 800a8b2 <_strtod_l+0x622>
 800a880:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a884:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a888:	2b00      	cmp	r3, #0
 800a88a:	4659      	mov	r1, fp
 800a88c:	dd11      	ble.n	800a8b2 <_strtod_l+0x622>
 800a88e:	2b1f      	cmp	r3, #31
 800a890:	f340 8124 	ble.w	800aadc <_strtod_l+0x84c>
 800a894:	2b34      	cmp	r3, #52	; 0x34
 800a896:	bfde      	ittt	le
 800a898:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a89c:	f04f 33ff 	movle.w	r3, #4294967295
 800a8a0:	fa03 f202 	lslle.w	r2, r3, r2
 800a8a4:	f04f 0a00 	mov.w	sl, #0
 800a8a8:	bfcc      	ite	gt
 800a8aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a8ae:	ea02 0b01 	andle.w	fp, r2, r1
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	4650      	mov	r0, sl
 800a8b8:	4659      	mov	r1, fp
 800a8ba:	f7f6 f90f 	bl	8000adc <__aeabi_dcmpeq>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d1a2      	bne.n	800a808 <_strtod_l+0x578>
 800a8c2:	9b07      	ldr	r3, [sp, #28]
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	9908      	ldr	r1, [sp, #32]
 800a8c8:	462b      	mov	r3, r5
 800a8ca:	463a      	mov	r2, r7
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f002 fccf 	bl	800d270 <__s2b>
 800a8d2:	9007      	str	r0, [sp, #28]
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	f43f af1f 	beq.w	800a718 <_strtod_l+0x488>
 800a8da:	9b05      	ldr	r3, [sp, #20]
 800a8dc:	1b9e      	subs	r6, r3, r6
 800a8de:	9b06      	ldr	r3, [sp, #24]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	bfb4      	ite	lt
 800a8e4:	4633      	movlt	r3, r6
 800a8e6:	2300      	movge	r3, #0
 800a8e8:	930c      	str	r3, [sp, #48]	; 0x30
 800a8ea:	9b06      	ldr	r3, [sp, #24]
 800a8ec:	2500      	movs	r5, #0
 800a8ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a8f2:	9312      	str	r3, [sp, #72]	; 0x48
 800a8f4:	462e      	mov	r6, r5
 800a8f6:	9b07      	ldr	r3, [sp, #28]
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	6859      	ldr	r1, [r3, #4]
 800a8fc:	f002 fc10 	bl	800d120 <_Balloc>
 800a900:	9005      	str	r0, [sp, #20]
 800a902:	2800      	cmp	r0, #0
 800a904:	f43f af0c 	beq.w	800a720 <_strtod_l+0x490>
 800a908:	9b07      	ldr	r3, [sp, #28]
 800a90a:	691a      	ldr	r2, [r3, #16]
 800a90c:	3202      	adds	r2, #2
 800a90e:	f103 010c 	add.w	r1, r3, #12
 800a912:	0092      	lsls	r2, r2, #2
 800a914:	300c      	adds	r0, #12
 800a916:	f002 fbe9 	bl	800d0ec <memcpy>
 800a91a:	ec4b ab10 	vmov	d0, sl, fp
 800a91e:	aa1a      	add	r2, sp, #104	; 0x68
 800a920:	a919      	add	r1, sp, #100	; 0x64
 800a922:	4620      	mov	r0, r4
 800a924:	f002 ffea 	bl	800d8fc <__d2b>
 800a928:	ec4b ab18 	vmov	d8, sl, fp
 800a92c:	9018      	str	r0, [sp, #96]	; 0x60
 800a92e:	2800      	cmp	r0, #0
 800a930:	f43f aef6 	beq.w	800a720 <_strtod_l+0x490>
 800a934:	2101      	movs	r1, #1
 800a936:	4620      	mov	r0, r4
 800a938:	f002 fd34 	bl	800d3a4 <__i2b>
 800a93c:	4606      	mov	r6, r0
 800a93e:	2800      	cmp	r0, #0
 800a940:	f43f aeee 	beq.w	800a720 <_strtod_l+0x490>
 800a944:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a946:	9904      	ldr	r1, [sp, #16]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	bfab      	itete	ge
 800a94c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a94e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a950:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a952:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a956:	bfac      	ite	ge
 800a958:	eb03 0902 	addge.w	r9, r3, r2
 800a95c:	1ad7      	sublt	r7, r2, r3
 800a95e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a960:	eba3 0801 	sub.w	r8, r3, r1
 800a964:	4490      	add	r8, r2
 800a966:	4ba1      	ldr	r3, [pc, #644]	; (800abec <_strtod_l+0x95c>)
 800a968:	f108 38ff 	add.w	r8, r8, #4294967295
 800a96c:	4598      	cmp	r8, r3
 800a96e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a972:	f280 80c7 	bge.w	800ab04 <_strtod_l+0x874>
 800a976:	eba3 0308 	sub.w	r3, r3, r8
 800a97a:	2b1f      	cmp	r3, #31
 800a97c:	eba2 0203 	sub.w	r2, r2, r3
 800a980:	f04f 0101 	mov.w	r1, #1
 800a984:	f300 80b1 	bgt.w	800aaea <_strtod_l+0x85a>
 800a988:	fa01 f303 	lsl.w	r3, r1, r3
 800a98c:	930d      	str	r3, [sp, #52]	; 0x34
 800a98e:	2300      	movs	r3, #0
 800a990:	9308      	str	r3, [sp, #32]
 800a992:	eb09 0802 	add.w	r8, r9, r2
 800a996:	9b04      	ldr	r3, [sp, #16]
 800a998:	45c1      	cmp	r9, r8
 800a99a:	4417      	add	r7, r2
 800a99c:	441f      	add	r7, r3
 800a99e:	464b      	mov	r3, r9
 800a9a0:	bfa8      	it	ge
 800a9a2:	4643      	movge	r3, r8
 800a9a4:	42bb      	cmp	r3, r7
 800a9a6:	bfa8      	it	ge
 800a9a8:	463b      	movge	r3, r7
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	bfc2      	ittt	gt
 800a9ae:	eba8 0803 	subgt.w	r8, r8, r3
 800a9b2:	1aff      	subgt	r7, r7, r3
 800a9b4:	eba9 0903 	subgt.w	r9, r9, r3
 800a9b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	dd17      	ble.n	800a9ee <_strtod_l+0x75e>
 800a9be:	4631      	mov	r1, r6
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f002 fdae 	bl	800d524 <__pow5mult>
 800a9c8:	4606      	mov	r6, r0
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	f43f aea8 	beq.w	800a720 <_strtod_l+0x490>
 800a9d0:	4601      	mov	r1, r0
 800a9d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f002 fcfb 	bl	800d3d0 <__multiply>
 800a9da:	900b      	str	r0, [sp, #44]	; 0x2c
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	f43f ae9f 	beq.w	800a720 <_strtod_l+0x490>
 800a9e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f002 fbdb 	bl	800d1a0 <_Bfree>
 800a9ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9ec:	9318      	str	r3, [sp, #96]	; 0x60
 800a9ee:	f1b8 0f00 	cmp.w	r8, #0
 800a9f2:	f300 808c 	bgt.w	800ab0e <_strtod_l+0x87e>
 800a9f6:	9b06      	ldr	r3, [sp, #24]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	dd08      	ble.n	800aa0e <_strtod_l+0x77e>
 800a9fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9fe:	9905      	ldr	r1, [sp, #20]
 800aa00:	4620      	mov	r0, r4
 800aa02:	f002 fd8f 	bl	800d524 <__pow5mult>
 800aa06:	9005      	str	r0, [sp, #20]
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	f43f ae89 	beq.w	800a720 <_strtod_l+0x490>
 800aa0e:	2f00      	cmp	r7, #0
 800aa10:	dd08      	ble.n	800aa24 <_strtod_l+0x794>
 800aa12:	9905      	ldr	r1, [sp, #20]
 800aa14:	463a      	mov	r2, r7
 800aa16:	4620      	mov	r0, r4
 800aa18:	f002 fdde 	bl	800d5d8 <__lshift>
 800aa1c:	9005      	str	r0, [sp, #20]
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	f43f ae7e 	beq.w	800a720 <_strtod_l+0x490>
 800aa24:	f1b9 0f00 	cmp.w	r9, #0
 800aa28:	dd08      	ble.n	800aa3c <_strtod_l+0x7ac>
 800aa2a:	4631      	mov	r1, r6
 800aa2c:	464a      	mov	r2, r9
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f002 fdd2 	bl	800d5d8 <__lshift>
 800aa34:	4606      	mov	r6, r0
 800aa36:	2800      	cmp	r0, #0
 800aa38:	f43f ae72 	beq.w	800a720 <_strtod_l+0x490>
 800aa3c:	9a05      	ldr	r2, [sp, #20]
 800aa3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa40:	4620      	mov	r0, r4
 800aa42:	f002 fe55 	bl	800d6f0 <__mdiff>
 800aa46:	4605      	mov	r5, r0
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	f43f ae69 	beq.w	800a720 <_strtod_l+0x490>
 800aa4e:	68c3      	ldr	r3, [r0, #12]
 800aa50:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa52:	2300      	movs	r3, #0
 800aa54:	60c3      	str	r3, [r0, #12]
 800aa56:	4631      	mov	r1, r6
 800aa58:	f002 fe2e 	bl	800d6b8 <__mcmp>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	da60      	bge.n	800ab22 <_strtod_l+0x892>
 800aa60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa62:	ea53 030a 	orrs.w	r3, r3, sl
 800aa66:	f040 8082 	bne.w	800ab6e <_strtod_l+0x8de>
 800aa6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d17d      	bne.n	800ab6e <_strtod_l+0x8de>
 800aa72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa76:	0d1b      	lsrs	r3, r3, #20
 800aa78:	051b      	lsls	r3, r3, #20
 800aa7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aa7e:	d976      	bls.n	800ab6e <_strtod_l+0x8de>
 800aa80:	696b      	ldr	r3, [r5, #20]
 800aa82:	b913      	cbnz	r3, 800aa8a <_strtod_l+0x7fa>
 800aa84:	692b      	ldr	r3, [r5, #16]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	dd71      	ble.n	800ab6e <_strtod_l+0x8de>
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f002 fda2 	bl	800d5d8 <__lshift>
 800aa94:	4631      	mov	r1, r6
 800aa96:	4605      	mov	r5, r0
 800aa98:	f002 fe0e 	bl	800d6b8 <__mcmp>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	dd66      	ble.n	800ab6e <_strtod_l+0x8de>
 800aaa0:	9904      	ldr	r1, [sp, #16]
 800aaa2:	4a53      	ldr	r2, [pc, #332]	; (800abf0 <_strtod_l+0x960>)
 800aaa4:	465b      	mov	r3, fp
 800aaa6:	2900      	cmp	r1, #0
 800aaa8:	f000 8081 	beq.w	800abae <_strtod_l+0x91e>
 800aaac:	ea02 010b 	and.w	r1, r2, fp
 800aab0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aab4:	dc7b      	bgt.n	800abae <_strtod_l+0x91e>
 800aab6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aaba:	f77f aea9 	ble.w	800a810 <_strtod_l+0x580>
 800aabe:	4b4d      	ldr	r3, [pc, #308]	; (800abf4 <_strtod_l+0x964>)
 800aac0:	4650      	mov	r0, sl
 800aac2:	4659      	mov	r1, fp
 800aac4:	2200      	movs	r2, #0
 800aac6:	f7f5 fda1 	bl	800060c <__aeabi_dmul>
 800aaca:	460b      	mov	r3, r1
 800aacc:	4303      	orrs	r3, r0
 800aace:	bf08      	it	eq
 800aad0:	2322      	moveq	r3, #34	; 0x22
 800aad2:	4682      	mov	sl, r0
 800aad4:	468b      	mov	fp, r1
 800aad6:	bf08      	it	eq
 800aad8:	6023      	streq	r3, [r4, #0]
 800aada:	e62b      	b.n	800a734 <_strtod_l+0x4a4>
 800aadc:	f04f 32ff 	mov.w	r2, #4294967295
 800aae0:	fa02 f303 	lsl.w	r3, r2, r3
 800aae4:	ea03 0a0a 	and.w	sl, r3, sl
 800aae8:	e6e3      	b.n	800a8b2 <_strtod_l+0x622>
 800aaea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800aaee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800aaf2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800aaf6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800aafa:	fa01 f308 	lsl.w	r3, r1, r8
 800aafe:	9308      	str	r3, [sp, #32]
 800ab00:	910d      	str	r1, [sp, #52]	; 0x34
 800ab02:	e746      	b.n	800a992 <_strtod_l+0x702>
 800ab04:	2300      	movs	r3, #0
 800ab06:	9308      	str	r3, [sp, #32]
 800ab08:	2301      	movs	r3, #1
 800ab0a:	930d      	str	r3, [sp, #52]	; 0x34
 800ab0c:	e741      	b.n	800a992 <_strtod_l+0x702>
 800ab0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ab10:	4642      	mov	r2, r8
 800ab12:	4620      	mov	r0, r4
 800ab14:	f002 fd60 	bl	800d5d8 <__lshift>
 800ab18:	9018      	str	r0, [sp, #96]	; 0x60
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	f47f af6b 	bne.w	800a9f6 <_strtod_l+0x766>
 800ab20:	e5fe      	b.n	800a720 <_strtod_l+0x490>
 800ab22:	465f      	mov	r7, fp
 800ab24:	d16e      	bne.n	800ac04 <_strtod_l+0x974>
 800ab26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab2c:	b342      	cbz	r2, 800ab80 <_strtod_l+0x8f0>
 800ab2e:	4a32      	ldr	r2, [pc, #200]	; (800abf8 <_strtod_l+0x968>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d128      	bne.n	800ab86 <_strtod_l+0x8f6>
 800ab34:	9b04      	ldr	r3, [sp, #16]
 800ab36:	4651      	mov	r1, sl
 800ab38:	b1eb      	cbz	r3, 800ab76 <_strtod_l+0x8e6>
 800ab3a:	4b2d      	ldr	r3, [pc, #180]	; (800abf0 <_strtod_l+0x960>)
 800ab3c:	403b      	ands	r3, r7
 800ab3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ab42:	f04f 32ff 	mov.w	r2, #4294967295
 800ab46:	d819      	bhi.n	800ab7c <_strtod_l+0x8ec>
 800ab48:	0d1b      	lsrs	r3, r3, #20
 800ab4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab52:	4299      	cmp	r1, r3
 800ab54:	d117      	bne.n	800ab86 <_strtod_l+0x8f6>
 800ab56:	4b29      	ldr	r3, [pc, #164]	; (800abfc <_strtod_l+0x96c>)
 800ab58:	429f      	cmp	r7, r3
 800ab5a:	d102      	bne.n	800ab62 <_strtod_l+0x8d2>
 800ab5c:	3101      	adds	r1, #1
 800ab5e:	f43f addf 	beq.w	800a720 <_strtod_l+0x490>
 800ab62:	4b23      	ldr	r3, [pc, #140]	; (800abf0 <_strtod_l+0x960>)
 800ab64:	403b      	ands	r3, r7
 800ab66:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ab6a:	f04f 0a00 	mov.w	sl, #0
 800ab6e:	9b04      	ldr	r3, [sp, #16]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1a4      	bne.n	800aabe <_strtod_l+0x82e>
 800ab74:	e5de      	b.n	800a734 <_strtod_l+0x4a4>
 800ab76:	f04f 33ff 	mov.w	r3, #4294967295
 800ab7a:	e7ea      	b.n	800ab52 <_strtod_l+0x8c2>
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	e7e8      	b.n	800ab52 <_strtod_l+0x8c2>
 800ab80:	ea53 030a 	orrs.w	r3, r3, sl
 800ab84:	d08c      	beq.n	800aaa0 <_strtod_l+0x810>
 800ab86:	9b08      	ldr	r3, [sp, #32]
 800ab88:	b1db      	cbz	r3, 800abc2 <_strtod_l+0x932>
 800ab8a:	423b      	tst	r3, r7
 800ab8c:	d0ef      	beq.n	800ab6e <_strtod_l+0x8de>
 800ab8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab90:	9a04      	ldr	r2, [sp, #16]
 800ab92:	4650      	mov	r0, sl
 800ab94:	4659      	mov	r1, fp
 800ab96:	b1c3      	cbz	r3, 800abca <_strtod_l+0x93a>
 800ab98:	f7ff fb5e 	bl	800a258 <sulp>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	ec51 0b18 	vmov	r0, r1, d8
 800aba4:	f7f5 fb7c 	bl	80002a0 <__adddf3>
 800aba8:	4682      	mov	sl, r0
 800abaa:	468b      	mov	fp, r1
 800abac:	e7df      	b.n	800ab6e <_strtod_l+0x8de>
 800abae:	4013      	ands	r3, r2
 800abb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800abb4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800abb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800abbc:	f04f 3aff 	mov.w	sl, #4294967295
 800abc0:	e7d5      	b.n	800ab6e <_strtod_l+0x8de>
 800abc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abc4:	ea13 0f0a 	tst.w	r3, sl
 800abc8:	e7e0      	b.n	800ab8c <_strtod_l+0x8fc>
 800abca:	f7ff fb45 	bl	800a258 <sulp>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	ec51 0b18 	vmov	r0, r1, d8
 800abd6:	f7f5 fb61 	bl	800029c <__aeabi_dsub>
 800abda:	2200      	movs	r2, #0
 800abdc:	2300      	movs	r3, #0
 800abde:	4682      	mov	sl, r0
 800abe0:	468b      	mov	fp, r1
 800abe2:	f7f5 ff7b 	bl	8000adc <__aeabi_dcmpeq>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d0c1      	beq.n	800ab6e <_strtod_l+0x8de>
 800abea:	e611      	b.n	800a810 <_strtod_l+0x580>
 800abec:	fffffc02 	.word	0xfffffc02
 800abf0:	7ff00000 	.word	0x7ff00000
 800abf4:	39500000 	.word	0x39500000
 800abf8:	000fffff 	.word	0x000fffff
 800abfc:	7fefffff 	.word	0x7fefffff
 800ac00:	0800ee68 	.word	0x0800ee68
 800ac04:	4631      	mov	r1, r6
 800ac06:	4628      	mov	r0, r5
 800ac08:	f002 fed4 	bl	800d9b4 <__ratio>
 800ac0c:	ec59 8b10 	vmov	r8, r9, d0
 800ac10:	ee10 0a10 	vmov	r0, s0
 800ac14:	2200      	movs	r2, #0
 800ac16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	f7f5 ff72 	bl	8000b04 <__aeabi_dcmple>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d07a      	beq.n	800ad1a <_strtod_l+0xa8a>
 800ac24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d04a      	beq.n	800acc0 <_strtod_l+0xa30>
 800ac2a:	4b95      	ldr	r3, [pc, #596]	; (800ae80 <_strtod_l+0xbf0>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac32:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ae80 <_strtod_l+0xbf0>
 800ac36:	f04f 0800 	mov.w	r8, #0
 800ac3a:	4b92      	ldr	r3, [pc, #584]	; (800ae84 <_strtod_l+0xbf4>)
 800ac3c:	403b      	ands	r3, r7
 800ac3e:	930d      	str	r3, [sp, #52]	; 0x34
 800ac40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac42:	4b91      	ldr	r3, [pc, #580]	; (800ae88 <_strtod_l+0xbf8>)
 800ac44:	429a      	cmp	r2, r3
 800ac46:	f040 80b0 	bne.w	800adaa <_strtod_l+0xb1a>
 800ac4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac4e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ac52:	ec4b ab10 	vmov	d0, sl, fp
 800ac56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac5a:	f002 fdd3 	bl	800d804 <__ulp>
 800ac5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac62:	ec53 2b10 	vmov	r2, r3, d0
 800ac66:	f7f5 fcd1 	bl	800060c <__aeabi_dmul>
 800ac6a:	4652      	mov	r2, sl
 800ac6c:	465b      	mov	r3, fp
 800ac6e:	f7f5 fb17 	bl	80002a0 <__adddf3>
 800ac72:	460b      	mov	r3, r1
 800ac74:	4983      	ldr	r1, [pc, #524]	; (800ae84 <_strtod_l+0xbf4>)
 800ac76:	4a85      	ldr	r2, [pc, #532]	; (800ae8c <_strtod_l+0xbfc>)
 800ac78:	4019      	ands	r1, r3
 800ac7a:	4291      	cmp	r1, r2
 800ac7c:	4682      	mov	sl, r0
 800ac7e:	d960      	bls.n	800ad42 <_strtod_l+0xab2>
 800ac80:	ee18 3a90 	vmov	r3, s17
 800ac84:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d104      	bne.n	800ac96 <_strtod_l+0xa06>
 800ac8c:	ee18 3a10 	vmov	r3, s16
 800ac90:	3301      	adds	r3, #1
 800ac92:	f43f ad45 	beq.w	800a720 <_strtod_l+0x490>
 800ac96:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ae98 <_strtod_l+0xc08>
 800ac9a:	f04f 3aff 	mov.w	sl, #4294967295
 800ac9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aca0:	4620      	mov	r0, r4
 800aca2:	f002 fa7d 	bl	800d1a0 <_Bfree>
 800aca6:	9905      	ldr	r1, [sp, #20]
 800aca8:	4620      	mov	r0, r4
 800acaa:	f002 fa79 	bl	800d1a0 <_Bfree>
 800acae:	4631      	mov	r1, r6
 800acb0:	4620      	mov	r0, r4
 800acb2:	f002 fa75 	bl	800d1a0 <_Bfree>
 800acb6:	4629      	mov	r1, r5
 800acb8:	4620      	mov	r0, r4
 800acba:	f002 fa71 	bl	800d1a0 <_Bfree>
 800acbe:	e61a      	b.n	800a8f6 <_strtod_l+0x666>
 800acc0:	f1ba 0f00 	cmp.w	sl, #0
 800acc4:	d11b      	bne.n	800acfe <_strtod_l+0xa6e>
 800acc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acca:	b9f3      	cbnz	r3, 800ad0a <_strtod_l+0xa7a>
 800accc:	4b6c      	ldr	r3, [pc, #432]	; (800ae80 <_strtod_l+0xbf0>)
 800acce:	2200      	movs	r2, #0
 800acd0:	4640      	mov	r0, r8
 800acd2:	4649      	mov	r1, r9
 800acd4:	f7f5 ff0c 	bl	8000af0 <__aeabi_dcmplt>
 800acd8:	b9d0      	cbnz	r0, 800ad10 <_strtod_l+0xa80>
 800acda:	4640      	mov	r0, r8
 800acdc:	4649      	mov	r1, r9
 800acde:	4b6c      	ldr	r3, [pc, #432]	; (800ae90 <_strtod_l+0xc00>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	f7f5 fc93 	bl	800060c <__aeabi_dmul>
 800ace6:	4680      	mov	r8, r0
 800ace8:	4689      	mov	r9, r1
 800acea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800acee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800acf2:	9315      	str	r3, [sp, #84]	; 0x54
 800acf4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800acf8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800acfc:	e79d      	b.n	800ac3a <_strtod_l+0x9aa>
 800acfe:	f1ba 0f01 	cmp.w	sl, #1
 800ad02:	d102      	bne.n	800ad0a <_strtod_l+0xa7a>
 800ad04:	2f00      	cmp	r7, #0
 800ad06:	f43f ad83 	beq.w	800a810 <_strtod_l+0x580>
 800ad0a:	4b62      	ldr	r3, [pc, #392]	; (800ae94 <_strtod_l+0xc04>)
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	e78e      	b.n	800ac2e <_strtod_l+0x99e>
 800ad10:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ae90 <_strtod_l+0xc00>
 800ad14:	f04f 0800 	mov.w	r8, #0
 800ad18:	e7e7      	b.n	800acea <_strtod_l+0xa5a>
 800ad1a:	4b5d      	ldr	r3, [pc, #372]	; (800ae90 <_strtod_l+0xc00>)
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	4649      	mov	r1, r9
 800ad20:	2200      	movs	r2, #0
 800ad22:	f7f5 fc73 	bl	800060c <__aeabi_dmul>
 800ad26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad28:	4680      	mov	r8, r0
 800ad2a:	4689      	mov	r9, r1
 800ad2c:	b933      	cbnz	r3, 800ad3c <_strtod_l+0xaac>
 800ad2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad32:	900e      	str	r0, [sp, #56]	; 0x38
 800ad34:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ad3a:	e7dd      	b.n	800acf8 <_strtod_l+0xa68>
 800ad3c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ad40:	e7f9      	b.n	800ad36 <_strtod_l+0xaa6>
 800ad42:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ad46:	9b04      	ldr	r3, [sp, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1a8      	bne.n	800ac9e <_strtod_l+0xa0e>
 800ad4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad52:	0d1b      	lsrs	r3, r3, #20
 800ad54:	051b      	lsls	r3, r3, #20
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d1a1      	bne.n	800ac9e <_strtod_l+0xa0e>
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	4649      	mov	r1, r9
 800ad5e:	f7f6 f805 	bl	8000d6c <__aeabi_d2lz>
 800ad62:	f7f5 fc25 	bl	80005b0 <__aeabi_l2d>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4640      	mov	r0, r8
 800ad6c:	4649      	mov	r1, r9
 800ad6e:	f7f5 fa95 	bl	800029c <__aeabi_dsub>
 800ad72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad78:	ea43 030a 	orr.w	r3, r3, sl
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	4680      	mov	r8, r0
 800ad80:	4689      	mov	r9, r1
 800ad82:	d055      	beq.n	800ae30 <_strtod_l+0xba0>
 800ad84:	a336      	add	r3, pc, #216	; (adr r3, 800ae60 <_strtod_l+0xbd0>)
 800ad86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8a:	f7f5 feb1 	bl	8000af0 <__aeabi_dcmplt>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	f47f acd0 	bne.w	800a734 <_strtod_l+0x4a4>
 800ad94:	a334      	add	r3, pc, #208	; (adr r3, 800ae68 <_strtod_l+0xbd8>)
 800ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9a:	4640      	mov	r0, r8
 800ad9c:	4649      	mov	r1, r9
 800ad9e:	f7f5 fec5 	bl	8000b2c <__aeabi_dcmpgt>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	f43f af7b 	beq.w	800ac9e <_strtod_l+0xa0e>
 800ada8:	e4c4      	b.n	800a734 <_strtod_l+0x4a4>
 800adaa:	9b04      	ldr	r3, [sp, #16]
 800adac:	b333      	cbz	r3, 800adfc <_strtod_l+0xb6c>
 800adae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adb0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800adb4:	d822      	bhi.n	800adfc <_strtod_l+0xb6c>
 800adb6:	a32e      	add	r3, pc, #184	; (adr r3, 800ae70 <_strtod_l+0xbe0>)
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	4640      	mov	r0, r8
 800adbe:	4649      	mov	r1, r9
 800adc0:	f7f5 fea0 	bl	8000b04 <__aeabi_dcmple>
 800adc4:	b1a0      	cbz	r0, 800adf0 <_strtod_l+0xb60>
 800adc6:	4649      	mov	r1, r9
 800adc8:	4640      	mov	r0, r8
 800adca:	f7f5 fef7 	bl	8000bbc <__aeabi_d2uiz>
 800adce:	2801      	cmp	r0, #1
 800add0:	bf38      	it	cc
 800add2:	2001      	movcc	r0, #1
 800add4:	f7f5 fba0 	bl	8000518 <__aeabi_ui2d>
 800add8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adda:	4680      	mov	r8, r0
 800addc:	4689      	mov	r9, r1
 800adde:	bb23      	cbnz	r3, 800ae2a <_strtod_l+0xb9a>
 800ade0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ade4:	9010      	str	r0, [sp, #64]	; 0x40
 800ade6:	9311      	str	r3, [sp, #68]	; 0x44
 800ade8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800adec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800adf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adf4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800adf8:	1a9b      	subs	r3, r3, r2
 800adfa:	9309      	str	r3, [sp, #36]	; 0x24
 800adfc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae00:	eeb0 0a48 	vmov.f32	s0, s16
 800ae04:	eef0 0a68 	vmov.f32	s1, s17
 800ae08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ae0c:	f002 fcfa 	bl	800d804 <__ulp>
 800ae10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae14:	ec53 2b10 	vmov	r2, r3, d0
 800ae18:	f7f5 fbf8 	bl	800060c <__aeabi_dmul>
 800ae1c:	ec53 2b18 	vmov	r2, r3, d8
 800ae20:	f7f5 fa3e 	bl	80002a0 <__adddf3>
 800ae24:	4682      	mov	sl, r0
 800ae26:	468b      	mov	fp, r1
 800ae28:	e78d      	b.n	800ad46 <_strtod_l+0xab6>
 800ae2a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ae2e:	e7db      	b.n	800ade8 <_strtod_l+0xb58>
 800ae30:	a311      	add	r3, pc, #68	; (adr r3, 800ae78 <_strtod_l+0xbe8>)
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	f7f5 fe5b 	bl	8000af0 <__aeabi_dcmplt>
 800ae3a:	e7b2      	b.n	800ada2 <_strtod_l+0xb12>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae44:	6013      	str	r3, [r2, #0]
 800ae46:	f7ff ba6b 	b.w	800a320 <_strtod_l+0x90>
 800ae4a:	2a65      	cmp	r2, #101	; 0x65
 800ae4c:	f43f ab5f 	beq.w	800a50e <_strtod_l+0x27e>
 800ae50:	2a45      	cmp	r2, #69	; 0x45
 800ae52:	f43f ab5c 	beq.w	800a50e <_strtod_l+0x27e>
 800ae56:	2301      	movs	r3, #1
 800ae58:	f7ff bb94 	b.w	800a584 <_strtod_l+0x2f4>
 800ae5c:	f3af 8000 	nop.w
 800ae60:	94a03595 	.word	0x94a03595
 800ae64:	3fdfffff 	.word	0x3fdfffff
 800ae68:	35afe535 	.word	0x35afe535
 800ae6c:	3fe00000 	.word	0x3fe00000
 800ae70:	ffc00000 	.word	0xffc00000
 800ae74:	41dfffff 	.word	0x41dfffff
 800ae78:	94a03595 	.word	0x94a03595
 800ae7c:	3fcfffff 	.word	0x3fcfffff
 800ae80:	3ff00000 	.word	0x3ff00000
 800ae84:	7ff00000 	.word	0x7ff00000
 800ae88:	7fe00000 	.word	0x7fe00000
 800ae8c:	7c9fffff 	.word	0x7c9fffff
 800ae90:	3fe00000 	.word	0x3fe00000
 800ae94:	bff00000 	.word	0xbff00000
 800ae98:	7fefffff 	.word	0x7fefffff

0800ae9c <_strtod_r>:
 800ae9c:	4b01      	ldr	r3, [pc, #4]	; (800aea4 <_strtod_r+0x8>)
 800ae9e:	f7ff b9f7 	b.w	800a290 <_strtod_l>
 800aea2:	bf00      	nop
 800aea4:	200000dc 	.word	0x200000dc

0800aea8 <_strtol_l.constprop.0>:
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeae:	d001      	beq.n	800aeb4 <_strtol_l.constprop.0+0xc>
 800aeb0:	2b24      	cmp	r3, #36	; 0x24
 800aeb2:	d906      	bls.n	800aec2 <_strtol_l.constprop.0+0x1a>
 800aeb4:	f7fd fdec 	bl	8008a90 <__errno>
 800aeb8:	2316      	movs	r3, #22
 800aeba:	6003      	str	r3, [r0, #0]
 800aebc:	2000      	movs	r0, #0
 800aebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aec2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800afa8 <_strtol_l.constprop.0+0x100>
 800aec6:	460d      	mov	r5, r1
 800aec8:	462e      	mov	r6, r5
 800aeca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aece:	f814 700c 	ldrb.w	r7, [r4, ip]
 800aed2:	f017 0708 	ands.w	r7, r7, #8
 800aed6:	d1f7      	bne.n	800aec8 <_strtol_l.constprop.0+0x20>
 800aed8:	2c2d      	cmp	r4, #45	; 0x2d
 800aeda:	d132      	bne.n	800af42 <_strtol_l.constprop.0+0x9a>
 800aedc:	782c      	ldrb	r4, [r5, #0]
 800aede:	2701      	movs	r7, #1
 800aee0:	1cb5      	adds	r5, r6, #2
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d05b      	beq.n	800af9e <_strtol_l.constprop.0+0xf6>
 800aee6:	2b10      	cmp	r3, #16
 800aee8:	d109      	bne.n	800aefe <_strtol_l.constprop.0+0x56>
 800aeea:	2c30      	cmp	r4, #48	; 0x30
 800aeec:	d107      	bne.n	800aefe <_strtol_l.constprop.0+0x56>
 800aeee:	782c      	ldrb	r4, [r5, #0]
 800aef0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800aef4:	2c58      	cmp	r4, #88	; 0x58
 800aef6:	d14d      	bne.n	800af94 <_strtol_l.constprop.0+0xec>
 800aef8:	786c      	ldrb	r4, [r5, #1]
 800aefa:	2310      	movs	r3, #16
 800aefc:	3502      	adds	r5, #2
 800aefe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800af02:	f108 38ff 	add.w	r8, r8, #4294967295
 800af06:	f04f 0c00 	mov.w	ip, #0
 800af0a:	fbb8 f9f3 	udiv	r9, r8, r3
 800af0e:	4666      	mov	r6, ip
 800af10:	fb03 8a19 	mls	sl, r3, r9, r8
 800af14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800af18:	f1be 0f09 	cmp.w	lr, #9
 800af1c:	d816      	bhi.n	800af4c <_strtol_l.constprop.0+0xa4>
 800af1e:	4674      	mov	r4, lr
 800af20:	42a3      	cmp	r3, r4
 800af22:	dd24      	ble.n	800af6e <_strtol_l.constprop.0+0xc6>
 800af24:	f1bc 0f00 	cmp.w	ip, #0
 800af28:	db1e      	blt.n	800af68 <_strtol_l.constprop.0+0xc0>
 800af2a:	45b1      	cmp	r9, r6
 800af2c:	d31c      	bcc.n	800af68 <_strtol_l.constprop.0+0xc0>
 800af2e:	d101      	bne.n	800af34 <_strtol_l.constprop.0+0x8c>
 800af30:	45a2      	cmp	sl, r4
 800af32:	db19      	blt.n	800af68 <_strtol_l.constprop.0+0xc0>
 800af34:	fb06 4603 	mla	r6, r6, r3, r4
 800af38:	f04f 0c01 	mov.w	ip, #1
 800af3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af40:	e7e8      	b.n	800af14 <_strtol_l.constprop.0+0x6c>
 800af42:	2c2b      	cmp	r4, #43	; 0x2b
 800af44:	bf04      	itt	eq
 800af46:	782c      	ldrbeq	r4, [r5, #0]
 800af48:	1cb5      	addeq	r5, r6, #2
 800af4a:	e7ca      	b.n	800aee2 <_strtol_l.constprop.0+0x3a>
 800af4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800af50:	f1be 0f19 	cmp.w	lr, #25
 800af54:	d801      	bhi.n	800af5a <_strtol_l.constprop.0+0xb2>
 800af56:	3c37      	subs	r4, #55	; 0x37
 800af58:	e7e2      	b.n	800af20 <_strtol_l.constprop.0+0x78>
 800af5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800af5e:	f1be 0f19 	cmp.w	lr, #25
 800af62:	d804      	bhi.n	800af6e <_strtol_l.constprop.0+0xc6>
 800af64:	3c57      	subs	r4, #87	; 0x57
 800af66:	e7db      	b.n	800af20 <_strtol_l.constprop.0+0x78>
 800af68:	f04f 3cff 	mov.w	ip, #4294967295
 800af6c:	e7e6      	b.n	800af3c <_strtol_l.constprop.0+0x94>
 800af6e:	f1bc 0f00 	cmp.w	ip, #0
 800af72:	da05      	bge.n	800af80 <_strtol_l.constprop.0+0xd8>
 800af74:	2322      	movs	r3, #34	; 0x22
 800af76:	6003      	str	r3, [r0, #0]
 800af78:	4646      	mov	r6, r8
 800af7a:	b942      	cbnz	r2, 800af8e <_strtol_l.constprop.0+0xe6>
 800af7c:	4630      	mov	r0, r6
 800af7e:	e79e      	b.n	800aebe <_strtol_l.constprop.0+0x16>
 800af80:	b107      	cbz	r7, 800af84 <_strtol_l.constprop.0+0xdc>
 800af82:	4276      	negs	r6, r6
 800af84:	2a00      	cmp	r2, #0
 800af86:	d0f9      	beq.n	800af7c <_strtol_l.constprop.0+0xd4>
 800af88:	f1bc 0f00 	cmp.w	ip, #0
 800af8c:	d000      	beq.n	800af90 <_strtol_l.constprop.0+0xe8>
 800af8e:	1e69      	subs	r1, r5, #1
 800af90:	6011      	str	r1, [r2, #0]
 800af92:	e7f3      	b.n	800af7c <_strtol_l.constprop.0+0xd4>
 800af94:	2430      	movs	r4, #48	; 0x30
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1b1      	bne.n	800aefe <_strtol_l.constprop.0+0x56>
 800af9a:	2308      	movs	r3, #8
 800af9c:	e7af      	b.n	800aefe <_strtol_l.constprop.0+0x56>
 800af9e:	2c30      	cmp	r4, #48	; 0x30
 800afa0:	d0a5      	beq.n	800aeee <_strtol_l.constprop.0+0x46>
 800afa2:	230a      	movs	r3, #10
 800afa4:	e7ab      	b.n	800aefe <_strtol_l.constprop.0+0x56>
 800afa6:	bf00      	nop
 800afa8:	0800efbe 	.word	0x0800efbe

0800afac <_strtol_r>:
 800afac:	f7ff bf7c 	b.w	800aea8 <_strtol_l.constprop.0>

0800afb0 <__tzcalc_limits>:
 800afb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	4605      	mov	r5, r0
 800afb6:	f001 ff69 	bl	800ce8c <__gettzinfo>
 800afba:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800afbe:	429d      	cmp	r5, r3
 800afc0:	f340 8099 	ble.w	800b0f6 <__tzcalc_limits+0x146>
 800afc4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800afc8:	18ac      	adds	r4, r5, r2
 800afca:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800afce:	f240 126d 	movw	r2, #365	; 0x16d
 800afd2:	10a4      	asrs	r4, r4, #2
 800afd4:	fb02 4403 	mla	r4, r2, r3, r4
 800afd8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800afdc:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800afe0:	fb93 f3f2 	sdiv	r3, r3, r2
 800afe4:	441c      	add	r4, r3
 800afe6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800afea:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800afee:	fb95 fcf3 	sdiv	ip, r5, r3
 800aff2:	fb03 5c1c 	mls	ip, r3, ip, r5
 800aff6:	186a      	adds	r2, r5, r1
 800aff8:	fabc f68c 	clz	r6, ip
 800affc:	fbb2 f2f3 	udiv	r2, r2, r3
 800b000:	f005 0303 	and.w	r3, r5, #3
 800b004:	4414      	add	r4, r2
 800b006:	2264      	movs	r2, #100	; 0x64
 800b008:	6045      	str	r5, [r0, #4]
 800b00a:	fb95 f7f2 	sdiv	r7, r5, r2
 800b00e:	0976      	lsrs	r6, r6, #5
 800b010:	fb02 5717 	mls	r7, r2, r7, r5
 800b014:	4601      	mov	r1, r0
 800b016:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	f04f 0a07 	mov.w	sl, #7
 800b020:	7a0d      	ldrb	r5, [r1, #8]
 800b022:	694b      	ldr	r3, [r1, #20]
 800b024:	2d4a      	cmp	r5, #74	; 0x4a
 800b026:	d12d      	bne.n	800b084 <__tzcalc_limits+0xd4>
 800b028:	9a00      	ldr	r2, [sp, #0]
 800b02a:	eb04 0e03 	add.w	lr, r4, r3
 800b02e:	b902      	cbnz	r2, 800b032 <__tzcalc_limits+0x82>
 800b030:	b917      	cbnz	r7, 800b038 <__tzcalc_limits+0x88>
 800b032:	f1bc 0f00 	cmp.w	ip, #0
 800b036:	d123      	bne.n	800b080 <__tzcalc_limits+0xd0>
 800b038:	2b3b      	cmp	r3, #59	; 0x3b
 800b03a:	bfd4      	ite	le
 800b03c:	2300      	movle	r3, #0
 800b03e:	2301      	movgt	r3, #1
 800b040:	4473      	add	r3, lr
 800b042:	3b01      	subs	r3, #1
 800b044:	698d      	ldr	r5, [r1, #24]
 800b046:	4a2d      	ldr	r2, [pc, #180]	; (800b0fc <__tzcalc_limits+0x14c>)
 800b048:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800b04c:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800b050:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800b052:	18ed      	adds	r5, r5, r3
 800b054:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800b058:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800b05c:	3128      	adds	r1, #40	; 0x28
 800b05e:	458b      	cmp	fp, r1
 800b060:	d1de      	bne.n	800b020 <__tzcalc_limits+0x70>
 800b062:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800b066:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800b06a:	428c      	cmp	r4, r1
 800b06c:	eb72 0303 	sbcs.w	r3, r2, r3
 800b070:	bfb4      	ite	lt
 800b072:	2301      	movlt	r3, #1
 800b074:	2300      	movge	r3, #0
 800b076:	6003      	str	r3, [r0, #0]
 800b078:	2001      	movs	r0, #1
 800b07a:	b003      	add	sp, #12
 800b07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b080:	2300      	movs	r3, #0
 800b082:	e7dd      	b.n	800b040 <__tzcalc_limits+0x90>
 800b084:	2d44      	cmp	r5, #68	; 0x44
 800b086:	d101      	bne.n	800b08c <__tzcalc_limits+0xdc>
 800b088:	4423      	add	r3, r4
 800b08a:	e7db      	b.n	800b044 <__tzcalc_limits+0x94>
 800b08c:	9a00      	ldr	r2, [sp, #0]
 800b08e:	bb62      	cbnz	r2, 800b0ea <__tzcalc_limits+0x13a>
 800b090:	2f00      	cmp	r7, #0
 800b092:	bf0c      	ite	eq
 800b094:	4635      	moveq	r5, r6
 800b096:	2501      	movne	r5, #1
 800b098:	68ca      	ldr	r2, [r1, #12]
 800b09a:	9201      	str	r2, [sp, #4]
 800b09c:	4a18      	ldr	r2, [pc, #96]	; (800b100 <__tzcalc_limits+0x150>)
 800b09e:	f04f 0930 	mov.w	r9, #48	; 0x30
 800b0a2:	fb09 2505 	mla	r5, r9, r5, r2
 800b0a6:	46a6      	mov	lr, r4
 800b0a8:	f04f 0800 	mov.w	r8, #0
 800b0ac:	3d04      	subs	r5, #4
 800b0ae:	9a01      	ldr	r2, [sp, #4]
 800b0b0:	f108 0801 	add.w	r8, r8, #1
 800b0b4:	4542      	cmp	r2, r8
 800b0b6:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800b0ba:	dc18      	bgt.n	800b0ee <__tzcalc_limits+0x13e>
 800b0bc:	f10e 0504 	add.w	r5, lr, #4
 800b0c0:	fb95 f8fa 	sdiv	r8, r5, sl
 800b0c4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800b0c8:	eba5 0808 	sub.w	r8, r5, r8
 800b0cc:	ebb3 0808 	subs.w	r8, r3, r8
 800b0d0:	690b      	ldr	r3, [r1, #16]
 800b0d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b0d6:	bf48      	it	mi
 800b0d8:	f108 0807 	addmi.w	r8, r8, #7
 800b0dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b0e0:	4443      	add	r3, r8
 800b0e2:	454b      	cmp	r3, r9
 800b0e4:	da05      	bge.n	800b0f2 <__tzcalc_limits+0x142>
 800b0e6:	4473      	add	r3, lr
 800b0e8:	e7ac      	b.n	800b044 <__tzcalc_limits+0x94>
 800b0ea:	4635      	mov	r5, r6
 800b0ec:	e7d4      	b.n	800b098 <__tzcalc_limits+0xe8>
 800b0ee:	44ce      	add	lr, r9
 800b0f0:	e7dd      	b.n	800b0ae <__tzcalc_limits+0xfe>
 800b0f2:	3b07      	subs	r3, #7
 800b0f4:	e7f5      	b.n	800b0e2 <__tzcalc_limits+0x132>
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	e7bf      	b.n	800b07a <__tzcalc_limits+0xca>
 800b0fa:	bf00      	nop
 800b0fc:	00015180 	.word	0x00015180
 800b100:	0800eda4 	.word	0x0800eda4

0800b104 <__tz_lock>:
 800b104:	4801      	ldr	r0, [pc, #4]	; (800b10c <__tz_lock+0x8>)
 800b106:	f001 bf76 	b.w	800cff6 <__retarget_lock_acquire>
 800b10a:	bf00      	nop
 800b10c:	200004b8 	.word	0x200004b8

0800b110 <__tz_unlock>:
 800b110:	4801      	ldr	r0, [pc, #4]	; (800b118 <__tz_unlock+0x8>)
 800b112:	f001 bf72 	b.w	800cffa <__retarget_lock_release>
 800b116:	bf00      	nop
 800b118:	200004b8 	.word	0x200004b8

0800b11c <_tzset_unlocked>:
 800b11c:	4b01      	ldr	r3, [pc, #4]	; (800b124 <_tzset_unlocked+0x8>)
 800b11e:	6818      	ldr	r0, [r3, #0]
 800b120:	f000 b802 	b.w	800b128 <_tzset_unlocked_r>
 800b124:	20000014 	.word	0x20000014

0800b128 <_tzset_unlocked_r>:
 800b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12c:	b08d      	sub	sp, #52	; 0x34
 800b12e:	4607      	mov	r7, r0
 800b130:	f001 feac 	bl	800ce8c <__gettzinfo>
 800b134:	49b0      	ldr	r1, [pc, #704]	; (800b3f8 <_tzset_unlocked_r+0x2d0>)
 800b136:	4eb1      	ldr	r6, [pc, #708]	; (800b3fc <_tzset_unlocked_r+0x2d4>)
 800b138:	4605      	mov	r5, r0
 800b13a:	4638      	mov	r0, r7
 800b13c:	f001 fe9e 	bl	800ce7c <_getenv_r>
 800b140:	4604      	mov	r4, r0
 800b142:	b970      	cbnz	r0, 800b162 <_tzset_unlocked_r+0x3a>
 800b144:	4bae      	ldr	r3, [pc, #696]	; (800b400 <_tzset_unlocked_r+0x2d8>)
 800b146:	4aaf      	ldr	r2, [pc, #700]	; (800b404 <_tzset_unlocked_r+0x2dc>)
 800b148:	6018      	str	r0, [r3, #0]
 800b14a:	4baf      	ldr	r3, [pc, #700]	; (800b408 <_tzset_unlocked_r+0x2e0>)
 800b14c:	6018      	str	r0, [r3, #0]
 800b14e:	4baf      	ldr	r3, [pc, #700]	; (800b40c <_tzset_unlocked_r+0x2e4>)
 800b150:	6830      	ldr	r0, [r6, #0]
 800b152:	e9c3 2200 	strd	r2, r2, [r3]
 800b156:	f7fd fddf 	bl	8008d18 <free>
 800b15a:	6034      	str	r4, [r6, #0]
 800b15c:	b00d      	add	sp, #52	; 0x34
 800b15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b162:	6831      	ldr	r1, [r6, #0]
 800b164:	2900      	cmp	r1, #0
 800b166:	d162      	bne.n	800b22e <_tzset_unlocked_r+0x106>
 800b168:	6830      	ldr	r0, [r6, #0]
 800b16a:	f7fd fdd5 	bl	8008d18 <free>
 800b16e:	4620      	mov	r0, r4
 800b170:	f7f5 f82e 	bl	80001d0 <strlen>
 800b174:	1c41      	adds	r1, r0, #1
 800b176:	4638      	mov	r0, r7
 800b178:	f7fe f8bc 	bl	80092f4 <_malloc_r>
 800b17c:	6030      	str	r0, [r6, #0]
 800b17e:	2800      	cmp	r0, #0
 800b180:	d15a      	bne.n	800b238 <_tzset_unlocked_r+0x110>
 800b182:	7823      	ldrb	r3, [r4, #0]
 800b184:	4aa2      	ldr	r2, [pc, #648]	; (800b410 <_tzset_unlocked_r+0x2e8>)
 800b186:	49a3      	ldr	r1, [pc, #652]	; (800b414 <_tzset_unlocked_r+0x2ec>)
 800b188:	2b3a      	cmp	r3, #58	; 0x3a
 800b18a:	bf08      	it	eq
 800b18c:	3401      	addeq	r4, #1
 800b18e:	ae0a      	add	r6, sp, #40	; 0x28
 800b190:	4633      	mov	r3, r6
 800b192:	4620      	mov	r0, r4
 800b194:	f002 ff58 	bl	800e048 <siscanf>
 800b198:	2800      	cmp	r0, #0
 800b19a:	dddf      	ble.n	800b15c <_tzset_unlocked_r+0x34>
 800b19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b19e:	18e7      	adds	r7, r4, r3
 800b1a0:	5ce3      	ldrb	r3, [r4, r3]
 800b1a2:	2b2d      	cmp	r3, #45	; 0x2d
 800b1a4:	d14c      	bne.n	800b240 <_tzset_unlocked_r+0x118>
 800b1a6:	3701      	adds	r7, #1
 800b1a8:	f04f 38ff 	mov.w	r8, #4294967295
 800b1ac:	f10d 0a20 	add.w	sl, sp, #32
 800b1b0:	f10d 0b1e 	add.w	fp, sp, #30
 800b1b4:	2400      	movs	r4, #0
 800b1b6:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800b1ba:	4997      	ldr	r1, [pc, #604]	; (800b418 <_tzset_unlocked_r+0x2f0>)
 800b1bc:	9603      	str	r6, [sp, #12]
 800b1be:	f8cd b000 	str.w	fp, [sp]
 800b1c2:	4633      	mov	r3, r6
 800b1c4:	aa07      	add	r2, sp, #28
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	f8ad 401e 	strh.w	r4, [sp, #30]
 800b1cc:	f8ad 4020 	strh.w	r4, [sp, #32]
 800b1d0:	f002 ff3a 	bl	800e048 <siscanf>
 800b1d4:	42a0      	cmp	r0, r4
 800b1d6:	ddc1      	ble.n	800b15c <_tzset_unlocked_r+0x34>
 800b1d8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b1dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b1e0:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800b424 <_tzset_unlocked_r+0x2fc>
 800b1e4:	213c      	movs	r1, #60	; 0x3c
 800b1e6:	fb01 3302 	mla	r3, r1, r2, r3
 800b1ea:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b1ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b1f2:	fb01 3302 	mla	r3, r1, r2, r3
 800b1f6:	fb08 f303 	mul.w	r3, r8, r3
 800b1fa:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800b40c <_tzset_unlocked_r+0x2e4>
 800b1fe:	62ab      	str	r3, [r5, #40]	; 0x28
 800b200:	4b83      	ldr	r3, [pc, #524]	; (800b410 <_tzset_unlocked_r+0x2e8>)
 800b202:	f8c8 3000 	str.w	r3, [r8]
 800b206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b208:	4982      	ldr	r1, [pc, #520]	; (800b414 <_tzset_unlocked_r+0x2ec>)
 800b20a:	441f      	add	r7, r3
 800b20c:	464a      	mov	r2, r9
 800b20e:	4633      	mov	r3, r6
 800b210:	4638      	mov	r0, r7
 800b212:	f002 ff19 	bl	800e048 <siscanf>
 800b216:	42a0      	cmp	r0, r4
 800b218:	dc18      	bgt.n	800b24c <_tzset_unlocked_r+0x124>
 800b21a:	f8d8 3000 	ldr.w	r3, [r8]
 800b21e:	f8c8 3004 	str.w	r3, [r8, #4]
 800b222:	4b77      	ldr	r3, [pc, #476]	; (800b400 <_tzset_unlocked_r+0x2d8>)
 800b224:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b226:	601a      	str	r2, [r3, #0]
 800b228:	4b77      	ldr	r3, [pc, #476]	; (800b408 <_tzset_unlocked_r+0x2e0>)
 800b22a:	601c      	str	r4, [r3, #0]
 800b22c:	e796      	b.n	800b15c <_tzset_unlocked_r+0x34>
 800b22e:	f7f5 f827 	bl	8000280 <strcmp>
 800b232:	2800      	cmp	r0, #0
 800b234:	d198      	bne.n	800b168 <_tzset_unlocked_r+0x40>
 800b236:	e791      	b.n	800b15c <_tzset_unlocked_r+0x34>
 800b238:	4621      	mov	r1, r4
 800b23a:	f002 ff76 	bl	800e12a <strcpy>
 800b23e:	e7a0      	b.n	800b182 <_tzset_unlocked_r+0x5a>
 800b240:	2b2b      	cmp	r3, #43	; 0x2b
 800b242:	bf08      	it	eq
 800b244:	3701      	addeq	r7, #1
 800b246:	f04f 0801 	mov.w	r8, #1
 800b24a:	e7af      	b.n	800b1ac <_tzset_unlocked_r+0x84>
 800b24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b24e:	f8c8 9004 	str.w	r9, [r8, #4]
 800b252:	18fc      	adds	r4, r7, r3
 800b254:	5cfb      	ldrb	r3, [r7, r3]
 800b256:	2b2d      	cmp	r3, #45	; 0x2d
 800b258:	f040 808b 	bne.w	800b372 <_tzset_unlocked_r+0x24a>
 800b25c:	3401      	adds	r4, #1
 800b25e:	f04f 37ff 	mov.w	r7, #4294967295
 800b262:	2300      	movs	r3, #0
 800b264:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b268:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b26c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b270:	930a      	str	r3, [sp, #40]	; 0x28
 800b272:	e9cd a602 	strd	sl, r6, [sp, #8]
 800b276:	e9cd b600 	strd	fp, r6, [sp]
 800b27a:	4967      	ldr	r1, [pc, #412]	; (800b418 <_tzset_unlocked_r+0x2f0>)
 800b27c:	4633      	mov	r3, r6
 800b27e:	aa07      	add	r2, sp, #28
 800b280:	4620      	mov	r0, r4
 800b282:	f002 fee1 	bl	800e048 <siscanf>
 800b286:	2800      	cmp	r0, #0
 800b288:	dc78      	bgt.n	800b37c <_tzset_unlocked_r+0x254>
 800b28a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b28c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800b290:	652b      	str	r3, [r5, #80]	; 0x50
 800b292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b294:	462f      	mov	r7, r5
 800b296:	441c      	add	r4, r3
 800b298:	f04f 0900 	mov.w	r9, #0
 800b29c:	7823      	ldrb	r3, [r4, #0]
 800b29e:	2b2c      	cmp	r3, #44	; 0x2c
 800b2a0:	bf08      	it	eq
 800b2a2:	3401      	addeq	r4, #1
 800b2a4:	f894 8000 	ldrb.w	r8, [r4]
 800b2a8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800b2ac:	d178      	bne.n	800b3a0 <_tzset_unlocked_r+0x278>
 800b2ae:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800b2b2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800b2b6:	ab09      	add	r3, sp, #36	; 0x24
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	4958      	ldr	r1, [pc, #352]	; (800b41c <_tzset_unlocked_r+0x2f4>)
 800b2bc:	9603      	str	r6, [sp, #12]
 800b2be:	4633      	mov	r3, r6
 800b2c0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f002 febf 	bl	800e048 <siscanf>
 800b2ca:	2803      	cmp	r0, #3
 800b2cc:	f47f af46 	bne.w	800b15c <_tzset_unlocked_r+0x34>
 800b2d0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800b2d4:	1e4b      	subs	r3, r1, #1
 800b2d6:	2b0b      	cmp	r3, #11
 800b2d8:	f63f af40 	bhi.w	800b15c <_tzset_unlocked_r+0x34>
 800b2dc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800b2e0:	1e53      	subs	r3, r2, #1
 800b2e2:	2b04      	cmp	r3, #4
 800b2e4:	f63f af3a 	bhi.w	800b15c <_tzset_unlocked_r+0x34>
 800b2e8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800b2ec:	2b06      	cmp	r3, #6
 800b2ee:	f63f af35 	bhi.w	800b15c <_tzset_unlocked_r+0x34>
 800b2f2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800b2f6:	f887 8008 	strb.w	r8, [r7, #8]
 800b2fa:	617b      	str	r3, [r7, #20]
 800b2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2fe:	eb04 0803 	add.w	r8, r4, r3
 800b302:	2302      	movs	r3, #2
 800b304:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b308:	2300      	movs	r3, #0
 800b30a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b30e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b312:	930a      	str	r3, [sp, #40]	; 0x28
 800b314:	f898 3000 	ldrb.w	r3, [r8]
 800b318:	2b2f      	cmp	r3, #47	; 0x2f
 800b31a:	d109      	bne.n	800b330 <_tzset_unlocked_r+0x208>
 800b31c:	e9cd a602 	strd	sl, r6, [sp, #8]
 800b320:	e9cd b600 	strd	fp, r6, [sp]
 800b324:	493e      	ldr	r1, [pc, #248]	; (800b420 <_tzset_unlocked_r+0x2f8>)
 800b326:	4633      	mov	r3, r6
 800b328:	aa07      	add	r2, sp, #28
 800b32a:	4640      	mov	r0, r8
 800b32c:	f002 fe8c 	bl	800e048 <siscanf>
 800b330:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b334:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b338:	213c      	movs	r1, #60	; 0x3c
 800b33a:	fb01 3302 	mla	r3, r1, r2, r3
 800b33e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b342:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b346:	fb01 3302 	mla	r3, r1, r2, r3
 800b34a:	61bb      	str	r3, [r7, #24]
 800b34c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b34e:	3728      	adds	r7, #40	; 0x28
 800b350:	4444      	add	r4, r8
 800b352:	f1b9 0f00 	cmp.w	r9, #0
 800b356:	d020      	beq.n	800b39a <_tzset_unlocked_r+0x272>
 800b358:	6868      	ldr	r0, [r5, #4]
 800b35a:	f7ff fe29 	bl	800afb0 <__tzcalc_limits>
 800b35e:	4b28      	ldr	r3, [pc, #160]	; (800b400 <_tzset_unlocked_r+0x2d8>)
 800b360:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b362:	601a      	str	r2, [r3, #0]
 800b364:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800b366:	1a9b      	subs	r3, r3, r2
 800b368:	4a27      	ldr	r2, [pc, #156]	; (800b408 <_tzset_unlocked_r+0x2e0>)
 800b36a:	bf18      	it	ne
 800b36c:	2301      	movne	r3, #1
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	e6f4      	b.n	800b15c <_tzset_unlocked_r+0x34>
 800b372:	2b2b      	cmp	r3, #43	; 0x2b
 800b374:	bf08      	it	eq
 800b376:	3401      	addeq	r4, #1
 800b378:	2701      	movs	r7, #1
 800b37a:	e772      	b.n	800b262 <_tzset_unlocked_r+0x13a>
 800b37c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b380:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b384:	213c      	movs	r1, #60	; 0x3c
 800b386:	fb01 3302 	mla	r3, r1, r2, r3
 800b38a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b38e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b392:	fb01 3302 	mla	r3, r1, r2, r3
 800b396:	437b      	muls	r3, r7
 800b398:	e77a      	b.n	800b290 <_tzset_unlocked_r+0x168>
 800b39a:	f04f 0901 	mov.w	r9, #1
 800b39e:	e77d      	b.n	800b29c <_tzset_unlocked_r+0x174>
 800b3a0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800b3a4:	bf06      	itte	eq
 800b3a6:	3401      	addeq	r4, #1
 800b3a8:	4643      	moveq	r3, r8
 800b3aa:	2344      	movne	r3, #68	; 0x44
 800b3ac:	220a      	movs	r2, #10
 800b3ae:	a90b      	add	r1, sp, #44	; 0x2c
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	9305      	str	r3, [sp, #20]
 800b3b4:	f002 ff4a 	bl	800e24c <strtoul>
 800b3b8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b3bc:	9b05      	ldr	r3, [sp, #20]
 800b3be:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800b3c2:	45a0      	cmp	r8, r4
 800b3c4:	d114      	bne.n	800b3f0 <_tzset_unlocked_r+0x2c8>
 800b3c6:	234d      	movs	r3, #77	; 0x4d
 800b3c8:	f1b9 0f00 	cmp.w	r9, #0
 800b3cc:	d107      	bne.n	800b3de <_tzset_unlocked_r+0x2b6>
 800b3ce:	722b      	strb	r3, [r5, #8]
 800b3d0:	2103      	movs	r1, #3
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800b3d8:	f8c5 9014 	str.w	r9, [r5, #20]
 800b3dc:	e791      	b.n	800b302 <_tzset_unlocked_r+0x1da>
 800b3de:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800b3e2:	220b      	movs	r2, #11
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	63eb      	str	r3, [r5, #60]	; 0x3c
 800b3ee:	e788      	b.n	800b302 <_tzset_unlocked_r+0x1da>
 800b3f0:	b280      	uxth	r0, r0
 800b3f2:	723b      	strb	r3, [r7, #8]
 800b3f4:	6178      	str	r0, [r7, #20]
 800b3f6:	e784      	b.n	800b302 <_tzset_unlocked_r+0x1da>
 800b3f8:	0800ee90 	.word	0x0800ee90
 800b3fc:	200004a8 	.word	0x200004a8
 800b400:	200004b0 	.word	0x200004b0
 800b404:	0800ee93 	.word	0x0800ee93
 800b408:	200004ac 	.word	0x200004ac
 800b40c:	20000078 	.word	0x20000078
 800b410:	2000049b 	.word	0x2000049b
 800b414:	0800ee97 	.word	0x0800ee97
 800b418:	0800eeba 	.word	0x0800eeba
 800b41c:	0800eea6 	.word	0x0800eea6
 800b420:	0800eeb9 	.word	0x0800eeb9
 800b424:	20000490 	.word	0x20000490

0800b428 <__swbuf_r>:
 800b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42a:	460e      	mov	r6, r1
 800b42c:	4614      	mov	r4, r2
 800b42e:	4605      	mov	r5, r0
 800b430:	b118      	cbz	r0, 800b43a <__swbuf_r+0x12>
 800b432:	6983      	ldr	r3, [r0, #24]
 800b434:	b90b      	cbnz	r3, 800b43a <__swbuf_r+0x12>
 800b436:	f001 f8c7 	bl	800c5c8 <__sinit>
 800b43a:	4b21      	ldr	r3, [pc, #132]	; (800b4c0 <__swbuf_r+0x98>)
 800b43c:	429c      	cmp	r4, r3
 800b43e:	d12b      	bne.n	800b498 <__swbuf_r+0x70>
 800b440:	686c      	ldr	r4, [r5, #4]
 800b442:	69a3      	ldr	r3, [r4, #24]
 800b444:	60a3      	str	r3, [r4, #8]
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	071a      	lsls	r2, r3, #28
 800b44a:	d52f      	bpl.n	800b4ac <__swbuf_r+0x84>
 800b44c:	6923      	ldr	r3, [r4, #16]
 800b44e:	b36b      	cbz	r3, 800b4ac <__swbuf_r+0x84>
 800b450:	6923      	ldr	r3, [r4, #16]
 800b452:	6820      	ldr	r0, [r4, #0]
 800b454:	1ac0      	subs	r0, r0, r3
 800b456:	6963      	ldr	r3, [r4, #20]
 800b458:	b2f6      	uxtb	r6, r6
 800b45a:	4283      	cmp	r3, r0
 800b45c:	4637      	mov	r7, r6
 800b45e:	dc04      	bgt.n	800b46a <__swbuf_r+0x42>
 800b460:	4621      	mov	r1, r4
 800b462:	4628      	mov	r0, r5
 800b464:	f001 f81c 	bl	800c4a0 <_fflush_r>
 800b468:	bb30      	cbnz	r0, 800b4b8 <__swbuf_r+0x90>
 800b46a:	68a3      	ldr	r3, [r4, #8]
 800b46c:	3b01      	subs	r3, #1
 800b46e:	60a3      	str	r3, [r4, #8]
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	6022      	str	r2, [r4, #0]
 800b476:	701e      	strb	r6, [r3, #0]
 800b478:	6963      	ldr	r3, [r4, #20]
 800b47a:	3001      	adds	r0, #1
 800b47c:	4283      	cmp	r3, r0
 800b47e:	d004      	beq.n	800b48a <__swbuf_r+0x62>
 800b480:	89a3      	ldrh	r3, [r4, #12]
 800b482:	07db      	lsls	r3, r3, #31
 800b484:	d506      	bpl.n	800b494 <__swbuf_r+0x6c>
 800b486:	2e0a      	cmp	r6, #10
 800b488:	d104      	bne.n	800b494 <__swbuf_r+0x6c>
 800b48a:	4621      	mov	r1, r4
 800b48c:	4628      	mov	r0, r5
 800b48e:	f001 f807 	bl	800c4a0 <_fflush_r>
 800b492:	b988      	cbnz	r0, 800b4b8 <__swbuf_r+0x90>
 800b494:	4638      	mov	r0, r7
 800b496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b498:	4b0a      	ldr	r3, [pc, #40]	; (800b4c4 <__swbuf_r+0x9c>)
 800b49a:	429c      	cmp	r4, r3
 800b49c:	d101      	bne.n	800b4a2 <__swbuf_r+0x7a>
 800b49e:	68ac      	ldr	r4, [r5, #8]
 800b4a0:	e7cf      	b.n	800b442 <__swbuf_r+0x1a>
 800b4a2:	4b09      	ldr	r3, [pc, #36]	; (800b4c8 <__swbuf_r+0xa0>)
 800b4a4:	429c      	cmp	r4, r3
 800b4a6:	bf08      	it	eq
 800b4a8:	68ec      	ldreq	r4, [r5, #12]
 800b4aa:	e7ca      	b.n	800b442 <__swbuf_r+0x1a>
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	f000 f80c 	bl	800b4cc <__swsetup_r>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d0cb      	beq.n	800b450 <__swbuf_r+0x28>
 800b4b8:	f04f 37ff 	mov.w	r7, #4294967295
 800b4bc:	e7ea      	b.n	800b494 <__swbuf_r+0x6c>
 800b4be:	bf00      	nop
 800b4c0:	0800f158 	.word	0x0800f158
 800b4c4:	0800f178 	.word	0x0800f178
 800b4c8:	0800f138 	.word	0x0800f138

0800b4cc <__swsetup_r>:
 800b4cc:	4b32      	ldr	r3, [pc, #200]	; (800b598 <__swsetup_r+0xcc>)
 800b4ce:	b570      	push	{r4, r5, r6, lr}
 800b4d0:	681d      	ldr	r5, [r3, #0]
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	460c      	mov	r4, r1
 800b4d6:	b125      	cbz	r5, 800b4e2 <__swsetup_r+0x16>
 800b4d8:	69ab      	ldr	r3, [r5, #24]
 800b4da:	b913      	cbnz	r3, 800b4e2 <__swsetup_r+0x16>
 800b4dc:	4628      	mov	r0, r5
 800b4de:	f001 f873 	bl	800c5c8 <__sinit>
 800b4e2:	4b2e      	ldr	r3, [pc, #184]	; (800b59c <__swsetup_r+0xd0>)
 800b4e4:	429c      	cmp	r4, r3
 800b4e6:	d10f      	bne.n	800b508 <__swsetup_r+0x3c>
 800b4e8:	686c      	ldr	r4, [r5, #4]
 800b4ea:	89a3      	ldrh	r3, [r4, #12]
 800b4ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4f0:	0719      	lsls	r1, r3, #28
 800b4f2:	d42c      	bmi.n	800b54e <__swsetup_r+0x82>
 800b4f4:	06dd      	lsls	r5, r3, #27
 800b4f6:	d411      	bmi.n	800b51c <__swsetup_r+0x50>
 800b4f8:	2309      	movs	r3, #9
 800b4fa:	6033      	str	r3, [r6, #0]
 800b4fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b500:	81a3      	strh	r3, [r4, #12]
 800b502:	f04f 30ff 	mov.w	r0, #4294967295
 800b506:	e03e      	b.n	800b586 <__swsetup_r+0xba>
 800b508:	4b25      	ldr	r3, [pc, #148]	; (800b5a0 <__swsetup_r+0xd4>)
 800b50a:	429c      	cmp	r4, r3
 800b50c:	d101      	bne.n	800b512 <__swsetup_r+0x46>
 800b50e:	68ac      	ldr	r4, [r5, #8]
 800b510:	e7eb      	b.n	800b4ea <__swsetup_r+0x1e>
 800b512:	4b24      	ldr	r3, [pc, #144]	; (800b5a4 <__swsetup_r+0xd8>)
 800b514:	429c      	cmp	r4, r3
 800b516:	bf08      	it	eq
 800b518:	68ec      	ldreq	r4, [r5, #12]
 800b51a:	e7e6      	b.n	800b4ea <__swsetup_r+0x1e>
 800b51c:	0758      	lsls	r0, r3, #29
 800b51e:	d512      	bpl.n	800b546 <__swsetup_r+0x7a>
 800b520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b522:	b141      	cbz	r1, 800b536 <__swsetup_r+0x6a>
 800b524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b528:	4299      	cmp	r1, r3
 800b52a:	d002      	beq.n	800b532 <__swsetup_r+0x66>
 800b52c:	4630      	mov	r0, r6
 800b52e:	f7fd fe75 	bl	800921c <_free_r>
 800b532:	2300      	movs	r3, #0
 800b534:	6363      	str	r3, [r4, #52]	; 0x34
 800b536:	89a3      	ldrh	r3, [r4, #12]
 800b538:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b53c:	81a3      	strh	r3, [r4, #12]
 800b53e:	2300      	movs	r3, #0
 800b540:	6063      	str	r3, [r4, #4]
 800b542:	6923      	ldr	r3, [r4, #16]
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	89a3      	ldrh	r3, [r4, #12]
 800b548:	f043 0308 	orr.w	r3, r3, #8
 800b54c:	81a3      	strh	r3, [r4, #12]
 800b54e:	6923      	ldr	r3, [r4, #16]
 800b550:	b94b      	cbnz	r3, 800b566 <__swsetup_r+0x9a>
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b55c:	d003      	beq.n	800b566 <__swsetup_r+0x9a>
 800b55e:	4621      	mov	r1, r4
 800b560:	4630      	mov	r0, r6
 800b562:	f001 fd71 	bl	800d048 <__smakebuf_r>
 800b566:	89a0      	ldrh	r0, [r4, #12]
 800b568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b56c:	f010 0301 	ands.w	r3, r0, #1
 800b570:	d00a      	beq.n	800b588 <__swsetup_r+0xbc>
 800b572:	2300      	movs	r3, #0
 800b574:	60a3      	str	r3, [r4, #8]
 800b576:	6963      	ldr	r3, [r4, #20]
 800b578:	425b      	negs	r3, r3
 800b57a:	61a3      	str	r3, [r4, #24]
 800b57c:	6923      	ldr	r3, [r4, #16]
 800b57e:	b943      	cbnz	r3, 800b592 <__swsetup_r+0xc6>
 800b580:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b584:	d1ba      	bne.n	800b4fc <__swsetup_r+0x30>
 800b586:	bd70      	pop	{r4, r5, r6, pc}
 800b588:	0781      	lsls	r1, r0, #30
 800b58a:	bf58      	it	pl
 800b58c:	6963      	ldrpl	r3, [r4, #20]
 800b58e:	60a3      	str	r3, [r4, #8]
 800b590:	e7f4      	b.n	800b57c <__swsetup_r+0xb0>
 800b592:	2000      	movs	r0, #0
 800b594:	e7f7      	b.n	800b586 <__swsetup_r+0xba>
 800b596:	bf00      	nop
 800b598:	20000014 	.word	0x20000014
 800b59c:	0800f158 	.word	0x0800f158
 800b5a0:	0800f178 	.word	0x0800f178
 800b5a4:	0800f138 	.word	0x0800f138

0800b5a8 <asctime>:
 800b5a8:	4b0d      	ldr	r3, [pc, #52]	; (800b5e0 <asctime+0x38>)
 800b5aa:	b570      	push	{r4, r5, r6, lr}
 800b5ac:	681d      	ldr	r5, [r3, #0]
 800b5ae:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	b976      	cbnz	r6, 800b5d2 <asctime+0x2a>
 800b5b4:	201a      	movs	r0, #26
 800b5b6:	f7fd fba7 	bl	8008d08 <malloc>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	6428      	str	r0, [r5, #64]	; 0x40
 800b5be:	b920      	cbnz	r0, 800b5ca <asctime+0x22>
 800b5c0:	4b08      	ldr	r3, [pc, #32]	; (800b5e4 <asctime+0x3c>)
 800b5c2:	4809      	ldr	r0, [pc, #36]	; (800b5e8 <asctime+0x40>)
 800b5c4:	2137      	movs	r1, #55	; 0x37
 800b5c6:	f000 f837 	bl	800b638 <__assert_func>
 800b5ca:	221a      	movs	r2, #26
 800b5cc:	4631      	mov	r1, r6
 800b5ce:	f7fd fbab 	bl	8008d28 <memset>
 800b5d2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5da:	f000 b807 	b.w	800b5ec <asctime_r>
 800b5de:	bf00      	nop
 800b5e0:	20000014 	.word	0x20000014
 800b5e4:	0800ecd0 	.word	0x0800ecd0
 800b5e8:	0800eecc 	.word	0x0800eecc

0800b5ec <asctime_r>:
 800b5ec:	b510      	push	{r4, lr}
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	6941      	ldr	r1, [r0, #20]
 800b5f2:	6903      	ldr	r3, [r0, #16]
 800b5f4:	6982      	ldr	r2, [r0, #24]
 800b5f6:	b086      	sub	sp, #24
 800b5f8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800b5fc:	9104      	str	r1, [sp, #16]
 800b5fe:	6801      	ldr	r1, [r0, #0]
 800b600:	9103      	str	r1, [sp, #12]
 800b602:	6841      	ldr	r1, [r0, #4]
 800b604:	9102      	str	r1, [sp, #8]
 800b606:	6881      	ldr	r1, [r0, #8]
 800b608:	9101      	str	r1, [sp, #4]
 800b60a:	68c1      	ldr	r1, [r0, #12]
 800b60c:	9100      	str	r1, [sp, #0]
 800b60e:	4907      	ldr	r1, [pc, #28]	; (800b62c <asctime_r+0x40>)
 800b610:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b614:	440b      	add	r3, r1
 800b616:	4906      	ldr	r1, [pc, #24]	; (800b630 <asctime_r+0x44>)
 800b618:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b61c:	440a      	add	r2, r1
 800b61e:	4620      	mov	r0, r4
 800b620:	4904      	ldr	r1, [pc, #16]	; (800b634 <asctime_r+0x48>)
 800b622:	f7fe fdf9 	bl	800a218 <siprintf>
 800b626:	4620      	mov	r0, r4
 800b628:	b006      	add	sp, #24
 800b62a:	bd10      	pop	{r4, pc}
 800b62c:	0800ef5d 	.word	0x0800ef5d
 800b630:	0800ef48 	.word	0x0800ef48
 800b634:	0800ef28 	.word	0x0800ef28

0800b638 <__assert_func>:
 800b638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b63a:	4614      	mov	r4, r2
 800b63c:	461a      	mov	r2, r3
 800b63e:	4b09      	ldr	r3, [pc, #36]	; (800b664 <__assert_func+0x2c>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4605      	mov	r5, r0
 800b644:	68d8      	ldr	r0, [r3, #12]
 800b646:	b14c      	cbz	r4, 800b65c <__assert_func+0x24>
 800b648:	4b07      	ldr	r3, [pc, #28]	; (800b668 <__assert_func+0x30>)
 800b64a:	9100      	str	r1, [sp, #0]
 800b64c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b650:	4906      	ldr	r1, [pc, #24]	; (800b66c <__assert_func+0x34>)
 800b652:	462b      	mov	r3, r5
 800b654:	f001 f836 	bl	800c6c4 <fiprintf>
 800b658:	f002 fe22 	bl	800e2a0 <abort>
 800b65c:	4b04      	ldr	r3, [pc, #16]	; (800b670 <__assert_func+0x38>)
 800b65e:	461c      	mov	r4, r3
 800b660:	e7f3      	b.n	800b64a <__assert_func+0x12>
 800b662:	bf00      	nop
 800b664:	20000014 	.word	0x20000014
 800b668:	0800ef81 	.word	0x0800ef81
 800b66c:	0800ef8e 	.word	0x0800ef8e
 800b670:	0800ef47 	.word	0x0800ef47

0800b674 <div>:
 800b674:	2900      	cmp	r1, #0
 800b676:	b510      	push	{r4, lr}
 800b678:	fb91 f4f2 	sdiv	r4, r1, r2
 800b67c:	fb02 1314 	mls	r3, r2, r4, r1
 800b680:	db06      	blt.n	800b690 <div+0x1c>
 800b682:	2b00      	cmp	r3, #0
 800b684:	da01      	bge.n	800b68a <div+0x16>
 800b686:	3401      	adds	r4, #1
 800b688:	1a9b      	subs	r3, r3, r2
 800b68a:	e9c0 4300 	strd	r4, r3, [r0]
 800b68e:	bd10      	pop	{r4, pc}
 800b690:	2b00      	cmp	r3, #0
 800b692:	bfc4      	itt	gt
 800b694:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800b698:	189b      	addgt	r3, r3, r2
 800b69a:	e7f6      	b.n	800b68a <div+0x16>

0800b69c <quorem>:
 800b69c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a0:	6903      	ldr	r3, [r0, #16]
 800b6a2:	690c      	ldr	r4, [r1, #16]
 800b6a4:	42a3      	cmp	r3, r4
 800b6a6:	4607      	mov	r7, r0
 800b6a8:	f2c0 8081 	blt.w	800b7ae <quorem+0x112>
 800b6ac:	3c01      	subs	r4, #1
 800b6ae:	f101 0814 	add.w	r8, r1, #20
 800b6b2:	f100 0514 	add.w	r5, r0, #20
 800b6b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6ba:	9301      	str	r3, [sp, #4]
 800b6bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b6cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b6d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b6d4:	d331      	bcc.n	800b73a <quorem+0x9e>
 800b6d6:	f04f 0e00 	mov.w	lr, #0
 800b6da:	4640      	mov	r0, r8
 800b6dc:	46ac      	mov	ip, r5
 800b6de:	46f2      	mov	sl, lr
 800b6e0:	f850 2b04 	ldr.w	r2, [r0], #4
 800b6e4:	b293      	uxth	r3, r2
 800b6e6:	fb06 e303 	mla	r3, r6, r3, lr
 800b6ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	ebaa 0303 	sub.w	r3, sl, r3
 800b6f4:	f8dc a000 	ldr.w	sl, [ip]
 800b6f8:	0c12      	lsrs	r2, r2, #16
 800b6fa:	fa13 f38a 	uxtah	r3, r3, sl
 800b6fe:	fb06 e202 	mla	r2, r6, r2, lr
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	9b00      	ldr	r3, [sp, #0]
 800b706:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b70a:	b292      	uxth	r2, r2
 800b70c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b710:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b714:	f8bd 3000 	ldrh.w	r3, [sp]
 800b718:	4581      	cmp	r9, r0
 800b71a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b71e:	f84c 3b04 	str.w	r3, [ip], #4
 800b722:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b726:	d2db      	bcs.n	800b6e0 <quorem+0x44>
 800b728:	f855 300b 	ldr.w	r3, [r5, fp]
 800b72c:	b92b      	cbnz	r3, 800b73a <quorem+0x9e>
 800b72e:	9b01      	ldr	r3, [sp, #4]
 800b730:	3b04      	subs	r3, #4
 800b732:	429d      	cmp	r5, r3
 800b734:	461a      	mov	r2, r3
 800b736:	d32e      	bcc.n	800b796 <quorem+0xfa>
 800b738:	613c      	str	r4, [r7, #16]
 800b73a:	4638      	mov	r0, r7
 800b73c:	f001 ffbc 	bl	800d6b8 <__mcmp>
 800b740:	2800      	cmp	r0, #0
 800b742:	db24      	blt.n	800b78e <quorem+0xf2>
 800b744:	3601      	adds	r6, #1
 800b746:	4628      	mov	r0, r5
 800b748:	f04f 0c00 	mov.w	ip, #0
 800b74c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b750:	f8d0 e000 	ldr.w	lr, [r0]
 800b754:	b293      	uxth	r3, r2
 800b756:	ebac 0303 	sub.w	r3, ip, r3
 800b75a:	0c12      	lsrs	r2, r2, #16
 800b75c:	fa13 f38e 	uxtah	r3, r3, lr
 800b760:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b764:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b768:	b29b      	uxth	r3, r3
 800b76a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b76e:	45c1      	cmp	r9, r8
 800b770:	f840 3b04 	str.w	r3, [r0], #4
 800b774:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b778:	d2e8      	bcs.n	800b74c <quorem+0xb0>
 800b77a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b77e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b782:	b922      	cbnz	r2, 800b78e <quorem+0xf2>
 800b784:	3b04      	subs	r3, #4
 800b786:	429d      	cmp	r5, r3
 800b788:	461a      	mov	r2, r3
 800b78a:	d30a      	bcc.n	800b7a2 <quorem+0x106>
 800b78c:	613c      	str	r4, [r7, #16]
 800b78e:	4630      	mov	r0, r6
 800b790:	b003      	add	sp, #12
 800b792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b796:	6812      	ldr	r2, [r2, #0]
 800b798:	3b04      	subs	r3, #4
 800b79a:	2a00      	cmp	r2, #0
 800b79c:	d1cc      	bne.n	800b738 <quorem+0x9c>
 800b79e:	3c01      	subs	r4, #1
 800b7a0:	e7c7      	b.n	800b732 <quorem+0x96>
 800b7a2:	6812      	ldr	r2, [r2, #0]
 800b7a4:	3b04      	subs	r3, #4
 800b7a6:	2a00      	cmp	r2, #0
 800b7a8:	d1f0      	bne.n	800b78c <quorem+0xf0>
 800b7aa:	3c01      	subs	r4, #1
 800b7ac:	e7eb      	b.n	800b786 <quorem+0xea>
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	e7ee      	b.n	800b790 <quorem+0xf4>
 800b7b2:	0000      	movs	r0, r0
 800b7b4:	0000      	movs	r0, r0
	...

0800b7b8 <_dtoa_r>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	ed2d 8b04 	vpush	{d8-d9}
 800b7c0:	ec57 6b10 	vmov	r6, r7, d0
 800b7c4:	b093      	sub	sp, #76	; 0x4c
 800b7c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b7c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b7cc:	9106      	str	r1, [sp, #24]
 800b7ce:	ee10 aa10 	vmov	sl, s0
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b7d6:	930c      	str	r3, [sp, #48]	; 0x30
 800b7d8:	46bb      	mov	fp, r7
 800b7da:	b975      	cbnz	r5, 800b7fa <_dtoa_r+0x42>
 800b7dc:	2010      	movs	r0, #16
 800b7de:	f7fd fa93 	bl	8008d08 <malloc>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	6260      	str	r0, [r4, #36]	; 0x24
 800b7e6:	b920      	cbnz	r0, 800b7f2 <_dtoa_r+0x3a>
 800b7e8:	4ba7      	ldr	r3, [pc, #668]	; (800ba88 <_dtoa_r+0x2d0>)
 800b7ea:	21ea      	movs	r1, #234	; 0xea
 800b7ec:	48a7      	ldr	r0, [pc, #668]	; (800ba8c <_dtoa_r+0x2d4>)
 800b7ee:	f7ff ff23 	bl	800b638 <__assert_func>
 800b7f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b7f6:	6005      	str	r5, [r0, #0]
 800b7f8:	60c5      	str	r5, [r0, #12]
 800b7fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7fc:	6819      	ldr	r1, [r3, #0]
 800b7fe:	b151      	cbz	r1, 800b816 <_dtoa_r+0x5e>
 800b800:	685a      	ldr	r2, [r3, #4]
 800b802:	604a      	str	r2, [r1, #4]
 800b804:	2301      	movs	r3, #1
 800b806:	4093      	lsls	r3, r2
 800b808:	608b      	str	r3, [r1, #8]
 800b80a:	4620      	mov	r0, r4
 800b80c:	f001 fcc8 	bl	800d1a0 <_Bfree>
 800b810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b812:	2200      	movs	r2, #0
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	1e3b      	subs	r3, r7, #0
 800b818:	bfaa      	itet	ge
 800b81a:	2300      	movge	r3, #0
 800b81c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b820:	f8c8 3000 	strge.w	r3, [r8]
 800b824:	4b9a      	ldr	r3, [pc, #616]	; (800ba90 <_dtoa_r+0x2d8>)
 800b826:	bfbc      	itt	lt
 800b828:	2201      	movlt	r2, #1
 800b82a:	f8c8 2000 	strlt.w	r2, [r8]
 800b82e:	ea33 030b 	bics.w	r3, r3, fp
 800b832:	d11b      	bne.n	800b86c <_dtoa_r+0xb4>
 800b834:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b836:	f242 730f 	movw	r3, #9999	; 0x270f
 800b83a:	6013      	str	r3, [r2, #0]
 800b83c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b840:	4333      	orrs	r3, r6
 800b842:	f000 8592 	beq.w	800c36a <_dtoa_r+0xbb2>
 800b846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b848:	b963      	cbnz	r3, 800b864 <_dtoa_r+0xac>
 800b84a:	4b92      	ldr	r3, [pc, #584]	; (800ba94 <_dtoa_r+0x2dc>)
 800b84c:	e022      	b.n	800b894 <_dtoa_r+0xdc>
 800b84e:	4b92      	ldr	r3, [pc, #584]	; (800ba98 <_dtoa_r+0x2e0>)
 800b850:	9301      	str	r3, [sp, #4]
 800b852:	3308      	adds	r3, #8
 800b854:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b856:	6013      	str	r3, [r2, #0]
 800b858:	9801      	ldr	r0, [sp, #4]
 800b85a:	b013      	add	sp, #76	; 0x4c
 800b85c:	ecbd 8b04 	vpop	{d8-d9}
 800b860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b864:	4b8b      	ldr	r3, [pc, #556]	; (800ba94 <_dtoa_r+0x2dc>)
 800b866:	9301      	str	r3, [sp, #4]
 800b868:	3303      	adds	r3, #3
 800b86a:	e7f3      	b.n	800b854 <_dtoa_r+0x9c>
 800b86c:	2200      	movs	r2, #0
 800b86e:	2300      	movs	r3, #0
 800b870:	4650      	mov	r0, sl
 800b872:	4659      	mov	r1, fp
 800b874:	f7f5 f932 	bl	8000adc <__aeabi_dcmpeq>
 800b878:	ec4b ab19 	vmov	d9, sl, fp
 800b87c:	4680      	mov	r8, r0
 800b87e:	b158      	cbz	r0, 800b898 <_dtoa_r+0xe0>
 800b880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b882:	2301      	movs	r3, #1
 800b884:	6013      	str	r3, [r2, #0]
 800b886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f000 856b 	beq.w	800c364 <_dtoa_r+0xbac>
 800b88e:	4883      	ldr	r0, [pc, #524]	; (800ba9c <_dtoa_r+0x2e4>)
 800b890:	6018      	str	r0, [r3, #0]
 800b892:	1e43      	subs	r3, r0, #1
 800b894:	9301      	str	r3, [sp, #4]
 800b896:	e7df      	b.n	800b858 <_dtoa_r+0xa0>
 800b898:	ec4b ab10 	vmov	d0, sl, fp
 800b89c:	aa10      	add	r2, sp, #64	; 0x40
 800b89e:	a911      	add	r1, sp, #68	; 0x44
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f002 f82b 	bl	800d8fc <__d2b>
 800b8a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b8aa:	ee08 0a10 	vmov	s16, r0
 800b8ae:	2d00      	cmp	r5, #0
 800b8b0:	f000 8084 	beq.w	800b9bc <_dtoa_r+0x204>
 800b8b4:	ee19 3a90 	vmov	r3, s19
 800b8b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b8c0:	4656      	mov	r6, sl
 800b8c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b8c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b8ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b8ce:	4b74      	ldr	r3, [pc, #464]	; (800baa0 <_dtoa_r+0x2e8>)
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	4639      	mov	r1, r7
 800b8d6:	f7f4 fce1 	bl	800029c <__aeabi_dsub>
 800b8da:	a365      	add	r3, pc, #404	; (adr r3, 800ba70 <_dtoa_r+0x2b8>)
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	f7f4 fe94 	bl	800060c <__aeabi_dmul>
 800b8e4:	a364      	add	r3, pc, #400	; (adr r3, 800ba78 <_dtoa_r+0x2c0>)
 800b8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ea:	f7f4 fcd9 	bl	80002a0 <__adddf3>
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	460f      	mov	r7, r1
 800b8f4:	f7f4 fe20 	bl	8000538 <__aeabi_i2d>
 800b8f8:	a361      	add	r3, pc, #388	; (adr r3, 800ba80 <_dtoa_r+0x2c8>)
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	f7f4 fe85 	bl	800060c <__aeabi_dmul>
 800b902:	4602      	mov	r2, r0
 800b904:	460b      	mov	r3, r1
 800b906:	4630      	mov	r0, r6
 800b908:	4639      	mov	r1, r7
 800b90a:	f7f4 fcc9 	bl	80002a0 <__adddf3>
 800b90e:	4606      	mov	r6, r0
 800b910:	460f      	mov	r7, r1
 800b912:	f7f5 f92b 	bl	8000b6c <__aeabi_d2iz>
 800b916:	2200      	movs	r2, #0
 800b918:	9000      	str	r0, [sp, #0]
 800b91a:	2300      	movs	r3, #0
 800b91c:	4630      	mov	r0, r6
 800b91e:	4639      	mov	r1, r7
 800b920:	f7f5 f8e6 	bl	8000af0 <__aeabi_dcmplt>
 800b924:	b150      	cbz	r0, 800b93c <_dtoa_r+0x184>
 800b926:	9800      	ldr	r0, [sp, #0]
 800b928:	f7f4 fe06 	bl	8000538 <__aeabi_i2d>
 800b92c:	4632      	mov	r2, r6
 800b92e:	463b      	mov	r3, r7
 800b930:	f7f5 f8d4 	bl	8000adc <__aeabi_dcmpeq>
 800b934:	b910      	cbnz	r0, 800b93c <_dtoa_r+0x184>
 800b936:	9b00      	ldr	r3, [sp, #0]
 800b938:	3b01      	subs	r3, #1
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	9b00      	ldr	r3, [sp, #0]
 800b93e:	2b16      	cmp	r3, #22
 800b940:	d85a      	bhi.n	800b9f8 <_dtoa_r+0x240>
 800b942:	9a00      	ldr	r2, [sp, #0]
 800b944:	4b57      	ldr	r3, [pc, #348]	; (800baa4 <_dtoa_r+0x2ec>)
 800b946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	ec51 0b19 	vmov	r0, r1, d9
 800b952:	f7f5 f8cd 	bl	8000af0 <__aeabi_dcmplt>
 800b956:	2800      	cmp	r0, #0
 800b958:	d050      	beq.n	800b9fc <_dtoa_r+0x244>
 800b95a:	9b00      	ldr	r3, [sp, #0]
 800b95c:	3b01      	subs	r3, #1
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	2300      	movs	r3, #0
 800b962:	930b      	str	r3, [sp, #44]	; 0x2c
 800b964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b966:	1b5d      	subs	r5, r3, r5
 800b968:	1e6b      	subs	r3, r5, #1
 800b96a:	9305      	str	r3, [sp, #20]
 800b96c:	bf45      	ittet	mi
 800b96e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b972:	9304      	strmi	r3, [sp, #16]
 800b974:	2300      	movpl	r3, #0
 800b976:	2300      	movmi	r3, #0
 800b978:	bf4c      	ite	mi
 800b97a:	9305      	strmi	r3, [sp, #20]
 800b97c:	9304      	strpl	r3, [sp, #16]
 800b97e:	9b00      	ldr	r3, [sp, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	db3d      	blt.n	800ba00 <_dtoa_r+0x248>
 800b984:	9b05      	ldr	r3, [sp, #20]
 800b986:	9a00      	ldr	r2, [sp, #0]
 800b988:	920a      	str	r2, [sp, #40]	; 0x28
 800b98a:	4413      	add	r3, r2
 800b98c:	9305      	str	r3, [sp, #20]
 800b98e:	2300      	movs	r3, #0
 800b990:	9307      	str	r3, [sp, #28]
 800b992:	9b06      	ldr	r3, [sp, #24]
 800b994:	2b09      	cmp	r3, #9
 800b996:	f200 8089 	bhi.w	800baac <_dtoa_r+0x2f4>
 800b99a:	2b05      	cmp	r3, #5
 800b99c:	bfc4      	itt	gt
 800b99e:	3b04      	subgt	r3, #4
 800b9a0:	9306      	strgt	r3, [sp, #24]
 800b9a2:	9b06      	ldr	r3, [sp, #24]
 800b9a4:	f1a3 0302 	sub.w	r3, r3, #2
 800b9a8:	bfcc      	ite	gt
 800b9aa:	2500      	movgt	r5, #0
 800b9ac:	2501      	movle	r5, #1
 800b9ae:	2b03      	cmp	r3, #3
 800b9b0:	f200 8087 	bhi.w	800bac2 <_dtoa_r+0x30a>
 800b9b4:	e8df f003 	tbb	[pc, r3]
 800b9b8:	59383a2d 	.word	0x59383a2d
 800b9bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b9c0:	441d      	add	r5, r3
 800b9c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b9c6:	2b20      	cmp	r3, #32
 800b9c8:	bfc1      	itttt	gt
 800b9ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b9ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b9d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b9d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b9da:	bfda      	itte	le
 800b9dc:	f1c3 0320 	rsble	r3, r3, #32
 800b9e0:	fa06 f003 	lslle.w	r0, r6, r3
 800b9e4:	4318      	orrgt	r0, r3
 800b9e6:	f7f4 fd97 	bl	8000518 <__aeabi_ui2d>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b9f2:	3d01      	subs	r5, #1
 800b9f4:	930e      	str	r3, [sp, #56]	; 0x38
 800b9f6:	e76a      	b.n	800b8ce <_dtoa_r+0x116>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e7b2      	b.n	800b962 <_dtoa_r+0x1aa>
 800b9fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800b9fe:	e7b1      	b.n	800b964 <_dtoa_r+0x1ac>
 800ba00:	9b04      	ldr	r3, [sp, #16]
 800ba02:	9a00      	ldr	r2, [sp, #0]
 800ba04:	1a9b      	subs	r3, r3, r2
 800ba06:	9304      	str	r3, [sp, #16]
 800ba08:	4253      	negs	r3, r2
 800ba0a:	9307      	str	r3, [sp, #28]
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba10:	e7bf      	b.n	800b992 <_dtoa_r+0x1da>
 800ba12:	2300      	movs	r3, #0
 800ba14:	9308      	str	r3, [sp, #32]
 800ba16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	dc55      	bgt.n	800bac8 <_dtoa_r+0x310>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba22:	461a      	mov	r2, r3
 800ba24:	9209      	str	r2, [sp, #36]	; 0x24
 800ba26:	e00c      	b.n	800ba42 <_dtoa_r+0x28a>
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e7f3      	b.n	800ba14 <_dtoa_r+0x25c>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba30:	9308      	str	r3, [sp, #32]
 800ba32:	9b00      	ldr	r3, [sp, #0]
 800ba34:	4413      	add	r3, r2
 800ba36:	9302      	str	r3, [sp, #8]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	9303      	str	r3, [sp, #12]
 800ba3e:	bfb8      	it	lt
 800ba40:	2301      	movlt	r3, #1
 800ba42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba44:	2200      	movs	r2, #0
 800ba46:	6042      	str	r2, [r0, #4]
 800ba48:	2204      	movs	r2, #4
 800ba4a:	f102 0614 	add.w	r6, r2, #20
 800ba4e:	429e      	cmp	r6, r3
 800ba50:	6841      	ldr	r1, [r0, #4]
 800ba52:	d93d      	bls.n	800bad0 <_dtoa_r+0x318>
 800ba54:	4620      	mov	r0, r4
 800ba56:	f001 fb63 	bl	800d120 <_Balloc>
 800ba5a:	9001      	str	r0, [sp, #4]
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	d13b      	bne.n	800bad8 <_dtoa_r+0x320>
 800ba60:	4b11      	ldr	r3, [pc, #68]	; (800baa8 <_dtoa_r+0x2f0>)
 800ba62:	4602      	mov	r2, r0
 800ba64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba68:	e6c0      	b.n	800b7ec <_dtoa_r+0x34>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e7df      	b.n	800ba2e <_dtoa_r+0x276>
 800ba6e:	bf00      	nop
 800ba70:	636f4361 	.word	0x636f4361
 800ba74:	3fd287a7 	.word	0x3fd287a7
 800ba78:	8b60c8b3 	.word	0x8b60c8b3
 800ba7c:	3fc68a28 	.word	0x3fc68a28
 800ba80:	509f79fb 	.word	0x509f79fb
 800ba84:	3fd34413 	.word	0x3fd34413
 800ba88:	0800ecd0 	.word	0x0800ecd0
 800ba8c:	0800f0cb 	.word	0x0800f0cb
 800ba90:	7ff00000 	.word	0x7ff00000
 800ba94:	0800f0c7 	.word	0x0800f0c7
 800ba98:	0800f0be 	.word	0x0800f0be
 800ba9c:	0800f382 	.word	0x0800f382
 800baa0:	3ff80000 	.word	0x3ff80000
 800baa4:	0800f298 	.word	0x0800f298
 800baa8:	0800f126 	.word	0x0800f126
 800baac:	2501      	movs	r5, #1
 800baae:	2300      	movs	r3, #0
 800bab0:	9306      	str	r3, [sp, #24]
 800bab2:	9508      	str	r5, [sp, #32]
 800bab4:	f04f 33ff 	mov.w	r3, #4294967295
 800bab8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800babc:	2200      	movs	r2, #0
 800babe:	2312      	movs	r3, #18
 800bac0:	e7b0      	b.n	800ba24 <_dtoa_r+0x26c>
 800bac2:	2301      	movs	r3, #1
 800bac4:	9308      	str	r3, [sp, #32]
 800bac6:	e7f5      	b.n	800bab4 <_dtoa_r+0x2fc>
 800bac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bace:	e7b8      	b.n	800ba42 <_dtoa_r+0x28a>
 800bad0:	3101      	adds	r1, #1
 800bad2:	6041      	str	r1, [r0, #4]
 800bad4:	0052      	lsls	r2, r2, #1
 800bad6:	e7b8      	b.n	800ba4a <_dtoa_r+0x292>
 800bad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bada:	9a01      	ldr	r2, [sp, #4]
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	9b03      	ldr	r3, [sp, #12]
 800bae0:	2b0e      	cmp	r3, #14
 800bae2:	f200 809d 	bhi.w	800bc20 <_dtoa_r+0x468>
 800bae6:	2d00      	cmp	r5, #0
 800bae8:	f000 809a 	beq.w	800bc20 <_dtoa_r+0x468>
 800baec:	9b00      	ldr	r3, [sp, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	dd32      	ble.n	800bb58 <_dtoa_r+0x3a0>
 800baf2:	4ab7      	ldr	r2, [pc, #732]	; (800bdd0 <_dtoa_r+0x618>)
 800baf4:	f003 030f 	and.w	r3, r3, #15
 800baf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bafc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb00:	9b00      	ldr	r3, [sp, #0]
 800bb02:	05d8      	lsls	r0, r3, #23
 800bb04:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bb08:	d516      	bpl.n	800bb38 <_dtoa_r+0x380>
 800bb0a:	4bb2      	ldr	r3, [pc, #712]	; (800bdd4 <_dtoa_r+0x61c>)
 800bb0c:	ec51 0b19 	vmov	r0, r1, d9
 800bb10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb14:	f7f4 fea4 	bl	8000860 <__aeabi_ddiv>
 800bb18:	f007 070f 	and.w	r7, r7, #15
 800bb1c:	4682      	mov	sl, r0
 800bb1e:	468b      	mov	fp, r1
 800bb20:	2503      	movs	r5, #3
 800bb22:	4eac      	ldr	r6, [pc, #688]	; (800bdd4 <_dtoa_r+0x61c>)
 800bb24:	b957      	cbnz	r7, 800bb3c <_dtoa_r+0x384>
 800bb26:	4642      	mov	r2, r8
 800bb28:	464b      	mov	r3, r9
 800bb2a:	4650      	mov	r0, sl
 800bb2c:	4659      	mov	r1, fp
 800bb2e:	f7f4 fe97 	bl	8000860 <__aeabi_ddiv>
 800bb32:	4682      	mov	sl, r0
 800bb34:	468b      	mov	fp, r1
 800bb36:	e028      	b.n	800bb8a <_dtoa_r+0x3d2>
 800bb38:	2502      	movs	r5, #2
 800bb3a:	e7f2      	b.n	800bb22 <_dtoa_r+0x36a>
 800bb3c:	07f9      	lsls	r1, r7, #31
 800bb3e:	d508      	bpl.n	800bb52 <_dtoa_r+0x39a>
 800bb40:	4640      	mov	r0, r8
 800bb42:	4649      	mov	r1, r9
 800bb44:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb48:	f7f4 fd60 	bl	800060c <__aeabi_dmul>
 800bb4c:	3501      	adds	r5, #1
 800bb4e:	4680      	mov	r8, r0
 800bb50:	4689      	mov	r9, r1
 800bb52:	107f      	asrs	r7, r7, #1
 800bb54:	3608      	adds	r6, #8
 800bb56:	e7e5      	b.n	800bb24 <_dtoa_r+0x36c>
 800bb58:	f000 809b 	beq.w	800bc92 <_dtoa_r+0x4da>
 800bb5c:	9b00      	ldr	r3, [sp, #0]
 800bb5e:	4f9d      	ldr	r7, [pc, #628]	; (800bdd4 <_dtoa_r+0x61c>)
 800bb60:	425e      	negs	r6, r3
 800bb62:	4b9b      	ldr	r3, [pc, #620]	; (800bdd0 <_dtoa_r+0x618>)
 800bb64:	f006 020f 	and.w	r2, r6, #15
 800bb68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb70:	ec51 0b19 	vmov	r0, r1, d9
 800bb74:	f7f4 fd4a 	bl	800060c <__aeabi_dmul>
 800bb78:	1136      	asrs	r6, r6, #4
 800bb7a:	4682      	mov	sl, r0
 800bb7c:	468b      	mov	fp, r1
 800bb7e:	2300      	movs	r3, #0
 800bb80:	2502      	movs	r5, #2
 800bb82:	2e00      	cmp	r6, #0
 800bb84:	d17a      	bne.n	800bc7c <_dtoa_r+0x4c4>
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1d3      	bne.n	800bb32 <_dtoa_r+0x37a>
 800bb8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 8082 	beq.w	800bc96 <_dtoa_r+0x4de>
 800bb92:	4b91      	ldr	r3, [pc, #580]	; (800bdd8 <_dtoa_r+0x620>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	4650      	mov	r0, sl
 800bb98:	4659      	mov	r1, fp
 800bb9a:	f7f4 ffa9 	bl	8000af0 <__aeabi_dcmplt>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d079      	beq.n	800bc96 <_dtoa_r+0x4de>
 800bba2:	9b03      	ldr	r3, [sp, #12]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d076      	beq.n	800bc96 <_dtoa_r+0x4de>
 800bba8:	9b02      	ldr	r3, [sp, #8]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	dd36      	ble.n	800bc1c <_dtoa_r+0x464>
 800bbae:	9b00      	ldr	r3, [sp, #0]
 800bbb0:	4650      	mov	r0, sl
 800bbb2:	4659      	mov	r1, fp
 800bbb4:	1e5f      	subs	r7, r3, #1
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	4b88      	ldr	r3, [pc, #544]	; (800bddc <_dtoa_r+0x624>)
 800bbba:	f7f4 fd27 	bl	800060c <__aeabi_dmul>
 800bbbe:	9e02      	ldr	r6, [sp, #8]
 800bbc0:	4682      	mov	sl, r0
 800bbc2:	468b      	mov	fp, r1
 800bbc4:	3501      	adds	r5, #1
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f7f4 fcb6 	bl	8000538 <__aeabi_i2d>
 800bbcc:	4652      	mov	r2, sl
 800bbce:	465b      	mov	r3, fp
 800bbd0:	f7f4 fd1c 	bl	800060c <__aeabi_dmul>
 800bbd4:	4b82      	ldr	r3, [pc, #520]	; (800bde0 <_dtoa_r+0x628>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f7f4 fb62 	bl	80002a0 <__adddf3>
 800bbdc:	46d0      	mov	r8, sl
 800bbde:	46d9      	mov	r9, fp
 800bbe0:	4682      	mov	sl, r0
 800bbe2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bbe6:	2e00      	cmp	r6, #0
 800bbe8:	d158      	bne.n	800bc9c <_dtoa_r+0x4e4>
 800bbea:	4b7e      	ldr	r3, [pc, #504]	; (800bde4 <_dtoa_r+0x62c>)
 800bbec:	2200      	movs	r2, #0
 800bbee:	4640      	mov	r0, r8
 800bbf0:	4649      	mov	r1, r9
 800bbf2:	f7f4 fb53 	bl	800029c <__aeabi_dsub>
 800bbf6:	4652      	mov	r2, sl
 800bbf8:	465b      	mov	r3, fp
 800bbfa:	4680      	mov	r8, r0
 800bbfc:	4689      	mov	r9, r1
 800bbfe:	f7f4 ff95 	bl	8000b2c <__aeabi_dcmpgt>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	f040 8295 	bne.w	800c132 <_dtoa_r+0x97a>
 800bc08:	4652      	mov	r2, sl
 800bc0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc0e:	4640      	mov	r0, r8
 800bc10:	4649      	mov	r1, r9
 800bc12:	f7f4 ff6d 	bl	8000af0 <__aeabi_dcmplt>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	f040 8289 	bne.w	800c12e <_dtoa_r+0x976>
 800bc1c:	ec5b ab19 	vmov	sl, fp, d9
 800bc20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f2c0 8148 	blt.w	800beb8 <_dtoa_r+0x700>
 800bc28:	9a00      	ldr	r2, [sp, #0]
 800bc2a:	2a0e      	cmp	r2, #14
 800bc2c:	f300 8144 	bgt.w	800beb8 <_dtoa_r+0x700>
 800bc30:	4b67      	ldr	r3, [pc, #412]	; (800bdd0 <_dtoa_r+0x618>)
 800bc32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc36:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f280 80d5 	bge.w	800bdec <_dtoa_r+0x634>
 800bc42:	9b03      	ldr	r3, [sp, #12]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f300 80d1 	bgt.w	800bdec <_dtoa_r+0x634>
 800bc4a:	f040 826f 	bne.w	800c12c <_dtoa_r+0x974>
 800bc4e:	4b65      	ldr	r3, [pc, #404]	; (800bde4 <_dtoa_r+0x62c>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	4640      	mov	r0, r8
 800bc54:	4649      	mov	r1, r9
 800bc56:	f7f4 fcd9 	bl	800060c <__aeabi_dmul>
 800bc5a:	4652      	mov	r2, sl
 800bc5c:	465b      	mov	r3, fp
 800bc5e:	f7f4 ff5b 	bl	8000b18 <__aeabi_dcmpge>
 800bc62:	9e03      	ldr	r6, [sp, #12]
 800bc64:	4637      	mov	r7, r6
 800bc66:	2800      	cmp	r0, #0
 800bc68:	f040 8245 	bne.w	800c0f6 <_dtoa_r+0x93e>
 800bc6c:	9d01      	ldr	r5, [sp, #4]
 800bc6e:	2331      	movs	r3, #49	; 0x31
 800bc70:	f805 3b01 	strb.w	r3, [r5], #1
 800bc74:	9b00      	ldr	r3, [sp, #0]
 800bc76:	3301      	adds	r3, #1
 800bc78:	9300      	str	r3, [sp, #0]
 800bc7a:	e240      	b.n	800c0fe <_dtoa_r+0x946>
 800bc7c:	07f2      	lsls	r2, r6, #31
 800bc7e:	d505      	bpl.n	800bc8c <_dtoa_r+0x4d4>
 800bc80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc84:	f7f4 fcc2 	bl	800060c <__aeabi_dmul>
 800bc88:	3501      	adds	r5, #1
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	1076      	asrs	r6, r6, #1
 800bc8e:	3708      	adds	r7, #8
 800bc90:	e777      	b.n	800bb82 <_dtoa_r+0x3ca>
 800bc92:	2502      	movs	r5, #2
 800bc94:	e779      	b.n	800bb8a <_dtoa_r+0x3d2>
 800bc96:	9f00      	ldr	r7, [sp, #0]
 800bc98:	9e03      	ldr	r6, [sp, #12]
 800bc9a:	e794      	b.n	800bbc6 <_dtoa_r+0x40e>
 800bc9c:	9901      	ldr	r1, [sp, #4]
 800bc9e:	4b4c      	ldr	r3, [pc, #304]	; (800bdd0 <_dtoa_r+0x618>)
 800bca0:	4431      	add	r1, r6
 800bca2:	910d      	str	r1, [sp, #52]	; 0x34
 800bca4:	9908      	ldr	r1, [sp, #32]
 800bca6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bcaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcae:	2900      	cmp	r1, #0
 800bcb0:	d043      	beq.n	800bd3a <_dtoa_r+0x582>
 800bcb2:	494d      	ldr	r1, [pc, #308]	; (800bde8 <_dtoa_r+0x630>)
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	f7f4 fdd3 	bl	8000860 <__aeabi_ddiv>
 800bcba:	4652      	mov	r2, sl
 800bcbc:	465b      	mov	r3, fp
 800bcbe:	f7f4 faed 	bl	800029c <__aeabi_dsub>
 800bcc2:	9d01      	ldr	r5, [sp, #4]
 800bcc4:	4682      	mov	sl, r0
 800bcc6:	468b      	mov	fp, r1
 800bcc8:	4649      	mov	r1, r9
 800bcca:	4640      	mov	r0, r8
 800bccc:	f7f4 ff4e 	bl	8000b6c <__aeabi_d2iz>
 800bcd0:	4606      	mov	r6, r0
 800bcd2:	f7f4 fc31 	bl	8000538 <__aeabi_i2d>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4649      	mov	r1, r9
 800bcde:	f7f4 fadd 	bl	800029c <__aeabi_dsub>
 800bce2:	3630      	adds	r6, #48	; 0x30
 800bce4:	f805 6b01 	strb.w	r6, [r5], #1
 800bce8:	4652      	mov	r2, sl
 800bcea:	465b      	mov	r3, fp
 800bcec:	4680      	mov	r8, r0
 800bcee:	4689      	mov	r9, r1
 800bcf0:	f7f4 fefe 	bl	8000af0 <__aeabi_dcmplt>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	d163      	bne.n	800bdc0 <_dtoa_r+0x608>
 800bcf8:	4642      	mov	r2, r8
 800bcfa:	464b      	mov	r3, r9
 800bcfc:	4936      	ldr	r1, [pc, #216]	; (800bdd8 <_dtoa_r+0x620>)
 800bcfe:	2000      	movs	r0, #0
 800bd00:	f7f4 facc 	bl	800029c <__aeabi_dsub>
 800bd04:	4652      	mov	r2, sl
 800bd06:	465b      	mov	r3, fp
 800bd08:	f7f4 fef2 	bl	8000af0 <__aeabi_dcmplt>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	f040 80b5 	bne.w	800be7c <_dtoa_r+0x6c4>
 800bd12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd14:	429d      	cmp	r5, r3
 800bd16:	d081      	beq.n	800bc1c <_dtoa_r+0x464>
 800bd18:	4b30      	ldr	r3, [pc, #192]	; (800bddc <_dtoa_r+0x624>)
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	4650      	mov	r0, sl
 800bd1e:	4659      	mov	r1, fp
 800bd20:	f7f4 fc74 	bl	800060c <__aeabi_dmul>
 800bd24:	4b2d      	ldr	r3, [pc, #180]	; (800bddc <_dtoa_r+0x624>)
 800bd26:	4682      	mov	sl, r0
 800bd28:	468b      	mov	fp, r1
 800bd2a:	4640      	mov	r0, r8
 800bd2c:	4649      	mov	r1, r9
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f7f4 fc6c 	bl	800060c <__aeabi_dmul>
 800bd34:	4680      	mov	r8, r0
 800bd36:	4689      	mov	r9, r1
 800bd38:	e7c6      	b.n	800bcc8 <_dtoa_r+0x510>
 800bd3a:	4650      	mov	r0, sl
 800bd3c:	4659      	mov	r1, fp
 800bd3e:	f7f4 fc65 	bl	800060c <__aeabi_dmul>
 800bd42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd44:	9d01      	ldr	r5, [sp, #4]
 800bd46:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd48:	4682      	mov	sl, r0
 800bd4a:	468b      	mov	fp, r1
 800bd4c:	4649      	mov	r1, r9
 800bd4e:	4640      	mov	r0, r8
 800bd50:	f7f4 ff0c 	bl	8000b6c <__aeabi_d2iz>
 800bd54:	4606      	mov	r6, r0
 800bd56:	f7f4 fbef 	bl	8000538 <__aeabi_i2d>
 800bd5a:	3630      	adds	r6, #48	; 0x30
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	4640      	mov	r0, r8
 800bd62:	4649      	mov	r1, r9
 800bd64:	f7f4 fa9a 	bl	800029c <__aeabi_dsub>
 800bd68:	f805 6b01 	strb.w	r6, [r5], #1
 800bd6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd6e:	429d      	cmp	r5, r3
 800bd70:	4680      	mov	r8, r0
 800bd72:	4689      	mov	r9, r1
 800bd74:	f04f 0200 	mov.w	r2, #0
 800bd78:	d124      	bne.n	800bdc4 <_dtoa_r+0x60c>
 800bd7a:	4b1b      	ldr	r3, [pc, #108]	; (800bde8 <_dtoa_r+0x630>)
 800bd7c:	4650      	mov	r0, sl
 800bd7e:	4659      	mov	r1, fp
 800bd80:	f7f4 fa8e 	bl	80002a0 <__adddf3>
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	4640      	mov	r0, r8
 800bd8a:	4649      	mov	r1, r9
 800bd8c:	f7f4 fece 	bl	8000b2c <__aeabi_dcmpgt>
 800bd90:	2800      	cmp	r0, #0
 800bd92:	d173      	bne.n	800be7c <_dtoa_r+0x6c4>
 800bd94:	4652      	mov	r2, sl
 800bd96:	465b      	mov	r3, fp
 800bd98:	4913      	ldr	r1, [pc, #76]	; (800bde8 <_dtoa_r+0x630>)
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	f7f4 fa7e 	bl	800029c <__aeabi_dsub>
 800bda0:	4602      	mov	r2, r0
 800bda2:	460b      	mov	r3, r1
 800bda4:	4640      	mov	r0, r8
 800bda6:	4649      	mov	r1, r9
 800bda8:	f7f4 fea2 	bl	8000af0 <__aeabi_dcmplt>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	f43f af35 	beq.w	800bc1c <_dtoa_r+0x464>
 800bdb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bdb4:	1e6b      	subs	r3, r5, #1
 800bdb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bdbc:	2b30      	cmp	r3, #48	; 0x30
 800bdbe:	d0f8      	beq.n	800bdb2 <_dtoa_r+0x5fa>
 800bdc0:	9700      	str	r7, [sp, #0]
 800bdc2:	e049      	b.n	800be58 <_dtoa_r+0x6a0>
 800bdc4:	4b05      	ldr	r3, [pc, #20]	; (800bddc <_dtoa_r+0x624>)
 800bdc6:	f7f4 fc21 	bl	800060c <__aeabi_dmul>
 800bdca:	4680      	mov	r8, r0
 800bdcc:	4689      	mov	r9, r1
 800bdce:	e7bd      	b.n	800bd4c <_dtoa_r+0x594>
 800bdd0:	0800f298 	.word	0x0800f298
 800bdd4:	0800f270 	.word	0x0800f270
 800bdd8:	3ff00000 	.word	0x3ff00000
 800bddc:	40240000 	.word	0x40240000
 800bde0:	401c0000 	.word	0x401c0000
 800bde4:	40140000 	.word	0x40140000
 800bde8:	3fe00000 	.word	0x3fe00000
 800bdec:	9d01      	ldr	r5, [sp, #4]
 800bdee:	4656      	mov	r6, sl
 800bdf0:	465f      	mov	r7, fp
 800bdf2:	4642      	mov	r2, r8
 800bdf4:	464b      	mov	r3, r9
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	4639      	mov	r1, r7
 800bdfa:	f7f4 fd31 	bl	8000860 <__aeabi_ddiv>
 800bdfe:	f7f4 feb5 	bl	8000b6c <__aeabi_d2iz>
 800be02:	4682      	mov	sl, r0
 800be04:	f7f4 fb98 	bl	8000538 <__aeabi_i2d>
 800be08:	4642      	mov	r2, r8
 800be0a:	464b      	mov	r3, r9
 800be0c:	f7f4 fbfe 	bl	800060c <__aeabi_dmul>
 800be10:	4602      	mov	r2, r0
 800be12:	460b      	mov	r3, r1
 800be14:	4630      	mov	r0, r6
 800be16:	4639      	mov	r1, r7
 800be18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800be1c:	f7f4 fa3e 	bl	800029c <__aeabi_dsub>
 800be20:	f805 6b01 	strb.w	r6, [r5], #1
 800be24:	9e01      	ldr	r6, [sp, #4]
 800be26:	9f03      	ldr	r7, [sp, #12]
 800be28:	1bae      	subs	r6, r5, r6
 800be2a:	42b7      	cmp	r7, r6
 800be2c:	4602      	mov	r2, r0
 800be2e:	460b      	mov	r3, r1
 800be30:	d135      	bne.n	800be9e <_dtoa_r+0x6e6>
 800be32:	f7f4 fa35 	bl	80002a0 <__adddf3>
 800be36:	4642      	mov	r2, r8
 800be38:	464b      	mov	r3, r9
 800be3a:	4606      	mov	r6, r0
 800be3c:	460f      	mov	r7, r1
 800be3e:	f7f4 fe75 	bl	8000b2c <__aeabi_dcmpgt>
 800be42:	b9d0      	cbnz	r0, 800be7a <_dtoa_r+0x6c2>
 800be44:	4642      	mov	r2, r8
 800be46:	464b      	mov	r3, r9
 800be48:	4630      	mov	r0, r6
 800be4a:	4639      	mov	r1, r7
 800be4c:	f7f4 fe46 	bl	8000adc <__aeabi_dcmpeq>
 800be50:	b110      	cbz	r0, 800be58 <_dtoa_r+0x6a0>
 800be52:	f01a 0f01 	tst.w	sl, #1
 800be56:	d110      	bne.n	800be7a <_dtoa_r+0x6c2>
 800be58:	4620      	mov	r0, r4
 800be5a:	ee18 1a10 	vmov	r1, s16
 800be5e:	f001 f99f 	bl	800d1a0 <_Bfree>
 800be62:	2300      	movs	r3, #0
 800be64:	9800      	ldr	r0, [sp, #0]
 800be66:	702b      	strb	r3, [r5, #0]
 800be68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be6a:	3001      	adds	r0, #1
 800be6c:	6018      	str	r0, [r3, #0]
 800be6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be70:	2b00      	cmp	r3, #0
 800be72:	f43f acf1 	beq.w	800b858 <_dtoa_r+0xa0>
 800be76:	601d      	str	r5, [r3, #0]
 800be78:	e4ee      	b.n	800b858 <_dtoa_r+0xa0>
 800be7a:	9f00      	ldr	r7, [sp, #0]
 800be7c:	462b      	mov	r3, r5
 800be7e:	461d      	mov	r5, r3
 800be80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be84:	2a39      	cmp	r2, #57	; 0x39
 800be86:	d106      	bne.n	800be96 <_dtoa_r+0x6de>
 800be88:	9a01      	ldr	r2, [sp, #4]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d1f7      	bne.n	800be7e <_dtoa_r+0x6c6>
 800be8e:	9901      	ldr	r1, [sp, #4]
 800be90:	2230      	movs	r2, #48	; 0x30
 800be92:	3701      	adds	r7, #1
 800be94:	700a      	strb	r2, [r1, #0]
 800be96:	781a      	ldrb	r2, [r3, #0]
 800be98:	3201      	adds	r2, #1
 800be9a:	701a      	strb	r2, [r3, #0]
 800be9c:	e790      	b.n	800bdc0 <_dtoa_r+0x608>
 800be9e:	4ba6      	ldr	r3, [pc, #664]	; (800c138 <_dtoa_r+0x980>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	f7f4 fbb3 	bl	800060c <__aeabi_dmul>
 800bea6:	2200      	movs	r2, #0
 800bea8:	2300      	movs	r3, #0
 800beaa:	4606      	mov	r6, r0
 800beac:	460f      	mov	r7, r1
 800beae:	f7f4 fe15 	bl	8000adc <__aeabi_dcmpeq>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	d09d      	beq.n	800bdf2 <_dtoa_r+0x63a>
 800beb6:	e7cf      	b.n	800be58 <_dtoa_r+0x6a0>
 800beb8:	9a08      	ldr	r2, [sp, #32]
 800beba:	2a00      	cmp	r2, #0
 800bebc:	f000 80d7 	beq.w	800c06e <_dtoa_r+0x8b6>
 800bec0:	9a06      	ldr	r2, [sp, #24]
 800bec2:	2a01      	cmp	r2, #1
 800bec4:	f300 80ba 	bgt.w	800c03c <_dtoa_r+0x884>
 800bec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800beca:	2a00      	cmp	r2, #0
 800becc:	f000 80b2 	beq.w	800c034 <_dtoa_r+0x87c>
 800bed0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bed4:	9e07      	ldr	r6, [sp, #28]
 800bed6:	9d04      	ldr	r5, [sp, #16]
 800bed8:	9a04      	ldr	r2, [sp, #16]
 800beda:	441a      	add	r2, r3
 800bedc:	9204      	str	r2, [sp, #16]
 800bede:	9a05      	ldr	r2, [sp, #20]
 800bee0:	2101      	movs	r1, #1
 800bee2:	441a      	add	r2, r3
 800bee4:	4620      	mov	r0, r4
 800bee6:	9205      	str	r2, [sp, #20]
 800bee8:	f001 fa5c 	bl	800d3a4 <__i2b>
 800beec:	4607      	mov	r7, r0
 800beee:	2d00      	cmp	r5, #0
 800bef0:	dd0c      	ble.n	800bf0c <_dtoa_r+0x754>
 800bef2:	9b05      	ldr	r3, [sp, #20]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	dd09      	ble.n	800bf0c <_dtoa_r+0x754>
 800bef8:	42ab      	cmp	r3, r5
 800befa:	9a04      	ldr	r2, [sp, #16]
 800befc:	bfa8      	it	ge
 800befe:	462b      	movge	r3, r5
 800bf00:	1ad2      	subs	r2, r2, r3
 800bf02:	9204      	str	r2, [sp, #16]
 800bf04:	9a05      	ldr	r2, [sp, #20]
 800bf06:	1aed      	subs	r5, r5, r3
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	9305      	str	r3, [sp, #20]
 800bf0c:	9b07      	ldr	r3, [sp, #28]
 800bf0e:	b31b      	cbz	r3, 800bf58 <_dtoa_r+0x7a0>
 800bf10:	9b08      	ldr	r3, [sp, #32]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	f000 80af 	beq.w	800c076 <_dtoa_r+0x8be>
 800bf18:	2e00      	cmp	r6, #0
 800bf1a:	dd13      	ble.n	800bf44 <_dtoa_r+0x78c>
 800bf1c:	4639      	mov	r1, r7
 800bf1e:	4632      	mov	r2, r6
 800bf20:	4620      	mov	r0, r4
 800bf22:	f001 faff 	bl	800d524 <__pow5mult>
 800bf26:	ee18 2a10 	vmov	r2, s16
 800bf2a:	4601      	mov	r1, r0
 800bf2c:	4607      	mov	r7, r0
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f001 fa4e 	bl	800d3d0 <__multiply>
 800bf34:	ee18 1a10 	vmov	r1, s16
 800bf38:	4680      	mov	r8, r0
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f001 f930 	bl	800d1a0 <_Bfree>
 800bf40:	ee08 8a10 	vmov	s16, r8
 800bf44:	9b07      	ldr	r3, [sp, #28]
 800bf46:	1b9a      	subs	r2, r3, r6
 800bf48:	d006      	beq.n	800bf58 <_dtoa_r+0x7a0>
 800bf4a:	ee18 1a10 	vmov	r1, s16
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f001 fae8 	bl	800d524 <__pow5mult>
 800bf54:	ee08 0a10 	vmov	s16, r0
 800bf58:	2101      	movs	r1, #1
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f001 fa22 	bl	800d3a4 <__i2b>
 800bf60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	4606      	mov	r6, r0
 800bf66:	f340 8088 	ble.w	800c07a <_dtoa_r+0x8c2>
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	4601      	mov	r1, r0
 800bf6e:	4620      	mov	r0, r4
 800bf70:	f001 fad8 	bl	800d524 <__pow5mult>
 800bf74:	9b06      	ldr	r3, [sp, #24]
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	4606      	mov	r6, r0
 800bf7a:	f340 8081 	ble.w	800c080 <_dtoa_r+0x8c8>
 800bf7e:	f04f 0800 	mov.w	r8, #0
 800bf82:	6933      	ldr	r3, [r6, #16]
 800bf84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bf88:	6918      	ldr	r0, [r3, #16]
 800bf8a:	f001 f9bb 	bl	800d304 <__hi0bits>
 800bf8e:	f1c0 0020 	rsb	r0, r0, #32
 800bf92:	9b05      	ldr	r3, [sp, #20]
 800bf94:	4418      	add	r0, r3
 800bf96:	f010 001f 	ands.w	r0, r0, #31
 800bf9a:	f000 8092 	beq.w	800c0c2 <_dtoa_r+0x90a>
 800bf9e:	f1c0 0320 	rsb	r3, r0, #32
 800bfa2:	2b04      	cmp	r3, #4
 800bfa4:	f340 808a 	ble.w	800c0bc <_dtoa_r+0x904>
 800bfa8:	f1c0 001c 	rsb	r0, r0, #28
 800bfac:	9b04      	ldr	r3, [sp, #16]
 800bfae:	4403      	add	r3, r0
 800bfb0:	9304      	str	r3, [sp, #16]
 800bfb2:	9b05      	ldr	r3, [sp, #20]
 800bfb4:	4403      	add	r3, r0
 800bfb6:	4405      	add	r5, r0
 800bfb8:	9305      	str	r3, [sp, #20]
 800bfba:	9b04      	ldr	r3, [sp, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	dd07      	ble.n	800bfd0 <_dtoa_r+0x818>
 800bfc0:	ee18 1a10 	vmov	r1, s16
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f001 fb06 	bl	800d5d8 <__lshift>
 800bfcc:	ee08 0a10 	vmov	s16, r0
 800bfd0:	9b05      	ldr	r3, [sp, #20]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	dd05      	ble.n	800bfe2 <_dtoa_r+0x82a>
 800bfd6:	4631      	mov	r1, r6
 800bfd8:	461a      	mov	r2, r3
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f001 fafc 	bl	800d5d8 <__lshift>
 800bfe0:	4606      	mov	r6, r0
 800bfe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d06e      	beq.n	800c0c6 <_dtoa_r+0x90e>
 800bfe8:	ee18 0a10 	vmov	r0, s16
 800bfec:	4631      	mov	r1, r6
 800bfee:	f001 fb63 	bl	800d6b8 <__mcmp>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	da67      	bge.n	800c0c6 <_dtoa_r+0x90e>
 800bff6:	9b00      	ldr	r3, [sp, #0]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	ee18 1a10 	vmov	r1, s16
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	220a      	movs	r2, #10
 800c002:	2300      	movs	r3, #0
 800c004:	4620      	mov	r0, r4
 800c006:	f001 f8ed 	bl	800d1e4 <__multadd>
 800c00a:	9b08      	ldr	r3, [sp, #32]
 800c00c:	ee08 0a10 	vmov	s16, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 81b1 	beq.w	800c378 <_dtoa_r+0xbc0>
 800c016:	2300      	movs	r3, #0
 800c018:	4639      	mov	r1, r7
 800c01a:	220a      	movs	r2, #10
 800c01c:	4620      	mov	r0, r4
 800c01e:	f001 f8e1 	bl	800d1e4 <__multadd>
 800c022:	9b02      	ldr	r3, [sp, #8]
 800c024:	2b00      	cmp	r3, #0
 800c026:	4607      	mov	r7, r0
 800c028:	f300 808e 	bgt.w	800c148 <_dtoa_r+0x990>
 800c02c:	9b06      	ldr	r3, [sp, #24]
 800c02e:	2b02      	cmp	r3, #2
 800c030:	dc51      	bgt.n	800c0d6 <_dtoa_r+0x91e>
 800c032:	e089      	b.n	800c148 <_dtoa_r+0x990>
 800c034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c036:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c03a:	e74b      	b.n	800bed4 <_dtoa_r+0x71c>
 800c03c:	9b03      	ldr	r3, [sp, #12]
 800c03e:	1e5e      	subs	r6, r3, #1
 800c040:	9b07      	ldr	r3, [sp, #28]
 800c042:	42b3      	cmp	r3, r6
 800c044:	bfbf      	itttt	lt
 800c046:	9b07      	ldrlt	r3, [sp, #28]
 800c048:	9607      	strlt	r6, [sp, #28]
 800c04a:	1af2      	sublt	r2, r6, r3
 800c04c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c04e:	bfb6      	itet	lt
 800c050:	189b      	addlt	r3, r3, r2
 800c052:	1b9e      	subge	r6, r3, r6
 800c054:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c056:	9b03      	ldr	r3, [sp, #12]
 800c058:	bfb8      	it	lt
 800c05a:	2600      	movlt	r6, #0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	bfb7      	itett	lt
 800c060:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c064:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c068:	1a9d      	sublt	r5, r3, r2
 800c06a:	2300      	movlt	r3, #0
 800c06c:	e734      	b.n	800bed8 <_dtoa_r+0x720>
 800c06e:	9e07      	ldr	r6, [sp, #28]
 800c070:	9d04      	ldr	r5, [sp, #16]
 800c072:	9f08      	ldr	r7, [sp, #32]
 800c074:	e73b      	b.n	800beee <_dtoa_r+0x736>
 800c076:	9a07      	ldr	r2, [sp, #28]
 800c078:	e767      	b.n	800bf4a <_dtoa_r+0x792>
 800c07a:	9b06      	ldr	r3, [sp, #24]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	dc18      	bgt.n	800c0b2 <_dtoa_r+0x8fa>
 800c080:	f1ba 0f00 	cmp.w	sl, #0
 800c084:	d115      	bne.n	800c0b2 <_dtoa_r+0x8fa>
 800c086:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c08a:	b993      	cbnz	r3, 800c0b2 <_dtoa_r+0x8fa>
 800c08c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c090:	0d1b      	lsrs	r3, r3, #20
 800c092:	051b      	lsls	r3, r3, #20
 800c094:	b183      	cbz	r3, 800c0b8 <_dtoa_r+0x900>
 800c096:	9b04      	ldr	r3, [sp, #16]
 800c098:	3301      	adds	r3, #1
 800c09a:	9304      	str	r3, [sp, #16]
 800c09c:	9b05      	ldr	r3, [sp, #20]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	9305      	str	r3, [sp, #20]
 800c0a2:	f04f 0801 	mov.w	r8, #1
 800c0a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f47f af6a 	bne.w	800bf82 <_dtoa_r+0x7ca>
 800c0ae:	2001      	movs	r0, #1
 800c0b0:	e76f      	b.n	800bf92 <_dtoa_r+0x7da>
 800c0b2:	f04f 0800 	mov.w	r8, #0
 800c0b6:	e7f6      	b.n	800c0a6 <_dtoa_r+0x8ee>
 800c0b8:	4698      	mov	r8, r3
 800c0ba:	e7f4      	b.n	800c0a6 <_dtoa_r+0x8ee>
 800c0bc:	f43f af7d 	beq.w	800bfba <_dtoa_r+0x802>
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	301c      	adds	r0, #28
 800c0c4:	e772      	b.n	800bfac <_dtoa_r+0x7f4>
 800c0c6:	9b03      	ldr	r3, [sp, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	dc37      	bgt.n	800c13c <_dtoa_r+0x984>
 800c0cc:	9b06      	ldr	r3, [sp, #24]
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	dd34      	ble.n	800c13c <_dtoa_r+0x984>
 800c0d2:	9b03      	ldr	r3, [sp, #12]
 800c0d4:	9302      	str	r3, [sp, #8]
 800c0d6:	9b02      	ldr	r3, [sp, #8]
 800c0d8:	b96b      	cbnz	r3, 800c0f6 <_dtoa_r+0x93e>
 800c0da:	4631      	mov	r1, r6
 800c0dc:	2205      	movs	r2, #5
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f001 f880 	bl	800d1e4 <__multadd>
 800c0e4:	4601      	mov	r1, r0
 800c0e6:	4606      	mov	r6, r0
 800c0e8:	ee18 0a10 	vmov	r0, s16
 800c0ec:	f001 fae4 	bl	800d6b8 <__mcmp>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	f73f adbb 	bgt.w	800bc6c <_dtoa_r+0x4b4>
 800c0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f8:	9d01      	ldr	r5, [sp, #4]
 800c0fa:	43db      	mvns	r3, r3
 800c0fc:	9300      	str	r3, [sp, #0]
 800c0fe:	f04f 0800 	mov.w	r8, #0
 800c102:	4631      	mov	r1, r6
 800c104:	4620      	mov	r0, r4
 800c106:	f001 f84b 	bl	800d1a0 <_Bfree>
 800c10a:	2f00      	cmp	r7, #0
 800c10c:	f43f aea4 	beq.w	800be58 <_dtoa_r+0x6a0>
 800c110:	f1b8 0f00 	cmp.w	r8, #0
 800c114:	d005      	beq.n	800c122 <_dtoa_r+0x96a>
 800c116:	45b8      	cmp	r8, r7
 800c118:	d003      	beq.n	800c122 <_dtoa_r+0x96a>
 800c11a:	4641      	mov	r1, r8
 800c11c:	4620      	mov	r0, r4
 800c11e:	f001 f83f 	bl	800d1a0 <_Bfree>
 800c122:	4639      	mov	r1, r7
 800c124:	4620      	mov	r0, r4
 800c126:	f001 f83b 	bl	800d1a0 <_Bfree>
 800c12a:	e695      	b.n	800be58 <_dtoa_r+0x6a0>
 800c12c:	2600      	movs	r6, #0
 800c12e:	4637      	mov	r7, r6
 800c130:	e7e1      	b.n	800c0f6 <_dtoa_r+0x93e>
 800c132:	9700      	str	r7, [sp, #0]
 800c134:	4637      	mov	r7, r6
 800c136:	e599      	b.n	800bc6c <_dtoa_r+0x4b4>
 800c138:	40240000 	.word	0x40240000
 800c13c:	9b08      	ldr	r3, [sp, #32]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f000 80ca 	beq.w	800c2d8 <_dtoa_r+0xb20>
 800c144:	9b03      	ldr	r3, [sp, #12]
 800c146:	9302      	str	r3, [sp, #8]
 800c148:	2d00      	cmp	r5, #0
 800c14a:	dd05      	ble.n	800c158 <_dtoa_r+0x9a0>
 800c14c:	4639      	mov	r1, r7
 800c14e:	462a      	mov	r2, r5
 800c150:	4620      	mov	r0, r4
 800c152:	f001 fa41 	bl	800d5d8 <__lshift>
 800c156:	4607      	mov	r7, r0
 800c158:	f1b8 0f00 	cmp.w	r8, #0
 800c15c:	d05b      	beq.n	800c216 <_dtoa_r+0xa5e>
 800c15e:	6879      	ldr	r1, [r7, #4]
 800c160:	4620      	mov	r0, r4
 800c162:	f000 ffdd 	bl	800d120 <_Balloc>
 800c166:	4605      	mov	r5, r0
 800c168:	b928      	cbnz	r0, 800c176 <_dtoa_r+0x9be>
 800c16a:	4b87      	ldr	r3, [pc, #540]	; (800c388 <_dtoa_r+0xbd0>)
 800c16c:	4602      	mov	r2, r0
 800c16e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c172:	f7ff bb3b 	b.w	800b7ec <_dtoa_r+0x34>
 800c176:	693a      	ldr	r2, [r7, #16]
 800c178:	3202      	adds	r2, #2
 800c17a:	0092      	lsls	r2, r2, #2
 800c17c:	f107 010c 	add.w	r1, r7, #12
 800c180:	300c      	adds	r0, #12
 800c182:	f000 ffb3 	bl	800d0ec <memcpy>
 800c186:	2201      	movs	r2, #1
 800c188:	4629      	mov	r1, r5
 800c18a:	4620      	mov	r0, r4
 800c18c:	f001 fa24 	bl	800d5d8 <__lshift>
 800c190:	9b01      	ldr	r3, [sp, #4]
 800c192:	f103 0901 	add.w	r9, r3, #1
 800c196:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c19a:	4413      	add	r3, r2
 800c19c:	9305      	str	r3, [sp, #20]
 800c19e:	f00a 0301 	and.w	r3, sl, #1
 800c1a2:	46b8      	mov	r8, r7
 800c1a4:	9304      	str	r3, [sp, #16]
 800c1a6:	4607      	mov	r7, r0
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	ee18 0a10 	vmov	r0, s16
 800c1ae:	f7ff fa75 	bl	800b69c <quorem>
 800c1b2:	4641      	mov	r1, r8
 800c1b4:	9002      	str	r0, [sp, #8]
 800c1b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c1ba:	ee18 0a10 	vmov	r0, s16
 800c1be:	f001 fa7b 	bl	800d6b8 <__mcmp>
 800c1c2:	463a      	mov	r2, r7
 800c1c4:	9003      	str	r0, [sp, #12]
 800c1c6:	4631      	mov	r1, r6
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f001 fa91 	bl	800d6f0 <__mdiff>
 800c1ce:	68c2      	ldr	r2, [r0, #12]
 800c1d0:	f109 3bff 	add.w	fp, r9, #4294967295
 800c1d4:	4605      	mov	r5, r0
 800c1d6:	bb02      	cbnz	r2, 800c21a <_dtoa_r+0xa62>
 800c1d8:	4601      	mov	r1, r0
 800c1da:	ee18 0a10 	vmov	r0, s16
 800c1de:	f001 fa6b 	bl	800d6b8 <__mcmp>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	9207      	str	r2, [sp, #28]
 800c1ea:	f000 ffd9 	bl	800d1a0 <_Bfree>
 800c1ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c1f2:	ea43 0102 	orr.w	r1, r3, r2
 800c1f6:	9b04      	ldr	r3, [sp, #16]
 800c1f8:	430b      	orrs	r3, r1
 800c1fa:	464d      	mov	r5, r9
 800c1fc:	d10f      	bne.n	800c21e <_dtoa_r+0xa66>
 800c1fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c202:	d02a      	beq.n	800c25a <_dtoa_r+0xaa2>
 800c204:	9b03      	ldr	r3, [sp, #12]
 800c206:	2b00      	cmp	r3, #0
 800c208:	dd02      	ble.n	800c210 <_dtoa_r+0xa58>
 800c20a:	9b02      	ldr	r3, [sp, #8]
 800c20c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c210:	f88b a000 	strb.w	sl, [fp]
 800c214:	e775      	b.n	800c102 <_dtoa_r+0x94a>
 800c216:	4638      	mov	r0, r7
 800c218:	e7ba      	b.n	800c190 <_dtoa_r+0x9d8>
 800c21a:	2201      	movs	r2, #1
 800c21c:	e7e2      	b.n	800c1e4 <_dtoa_r+0xa2c>
 800c21e:	9b03      	ldr	r3, [sp, #12]
 800c220:	2b00      	cmp	r3, #0
 800c222:	db04      	blt.n	800c22e <_dtoa_r+0xa76>
 800c224:	9906      	ldr	r1, [sp, #24]
 800c226:	430b      	orrs	r3, r1
 800c228:	9904      	ldr	r1, [sp, #16]
 800c22a:	430b      	orrs	r3, r1
 800c22c:	d122      	bne.n	800c274 <_dtoa_r+0xabc>
 800c22e:	2a00      	cmp	r2, #0
 800c230:	ddee      	ble.n	800c210 <_dtoa_r+0xa58>
 800c232:	ee18 1a10 	vmov	r1, s16
 800c236:	2201      	movs	r2, #1
 800c238:	4620      	mov	r0, r4
 800c23a:	f001 f9cd 	bl	800d5d8 <__lshift>
 800c23e:	4631      	mov	r1, r6
 800c240:	ee08 0a10 	vmov	s16, r0
 800c244:	f001 fa38 	bl	800d6b8 <__mcmp>
 800c248:	2800      	cmp	r0, #0
 800c24a:	dc03      	bgt.n	800c254 <_dtoa_r+0xa9c>
 800c24c:	d1e0      	bne.n	800c210 <_dtoa_r+0xa58>
 800c24e:	f01a 0f01 	tst.w	sl, #1
 800c252:	d0dd      	beq.n	800c210 <_dtoa_r+0xa58>
 800c254:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c258:	d1d7      	bne.n	800c20a <_dtoa_r+0xa52>
 800c25a:	2339      	movs	r3, #57	; 0x39
 800c25c:	f88b 3000 	strb.w	r3, [fp]
 800c260:	462b      	mov	r3, r5
 800c262:	461d      	mov	r5, r3
 800c264:	3b01      	subs	r3, #1
 800c266:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c26a:	2a39      	cmp	r2, #57	; 0x39
 800c26c:	d071      	beq.n	800c352 <_dtoa_r+0xb9a>
 800c26e:	3201      	adds	r2, #1
 800c270:	701a      	strb	r2, [r3, #0]
 800c272:	e746      	b.n	800c102 <_dtoa_r+0x94a>
 800c274:	2a00      	cmp	r2, #0
 800c276:	dd07      	ble.n	800c288 <_dtoa_r+0xad0>
 800c278:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c27c:	d0ed      	beq.n	800c25a <_dtoa_r+0xaa2>
 800c27e:	f10a 0301 	add.w	r3, sl, #1
 800c282:	f88b 3000 	strb.w	r3, [fp]
 800c286:	e73c      	b.n	800c102 <_dtoa_r+0x94a>
 800c288:	9b05      	ldr	r3, [sp, #20]
 800c28a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c28e:	4599      	cmp	r9, r3
 800c290:	d047      	beq.n	800c322 <_dtoa_r+0xb6a>
 800c292:	ee18 1a10 	vmov	r1, s16
 800c296:	2300      	movs	r3, #0
 800c298:	220a      	movs	r2, #10
 800c29a:	4620      	mov	r0, r4
 800c29c:	f000 ffa2 	bl	800d1e4 <__multadd>
 800c2a0:	45b8      	cmp	r8, r7
 800c2a2:	ee08 0a10 	vmov	s16, r0
 800c2a6:	f04f 0300 	mov.w	r3, #0
 800c2aa:	f04f 020a 	mov.w	r2, #10
 800c2ae:	4641      	mov	r1, r8
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	d106      	bne.n	800c2c2 <_dtoa_r+0xb0a>
 800c2b4:	f000 ff96 	bl	800d1e4 <__multadd>
 800c2b8:	4680      	mov	r8, r0
 800c2ba:	4607      	mov	r7, r0
 800c2bc:	f109 0901 	add.w	r9, r9, #1
 800c2c0:	e772      	b.n	800c1a8 <_dtoa_r+0x9f0>
 800c2c2:	f000 ff8f 	bl	800d1e4 <__multadd>
 800c2c6:	4639      	mov	r1, r7
 800c2c8:	4680      	mov	r8, r0
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	220a      	movs	r2, #10
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	f000 ff88 	bl	800d1e4 <__multadd>
 800c2d4:	4607      	mov	r7, r0
 800c2d6:	e7f1      	b.n	800c2bc <_dtoa_r+0xb04>
 800c2d8:	9b03      	ldr	r3, [sp, #12]
 800c2da:	9302      	str	r3, [sp, #8]
 800c2dc:	9d01      	ldr	r5, [sp, #4]
 800c2de:	ee18 0a10 	vmov	r0, s16
 800c2e2:	4631      	mov	r1, r6
 800c2e4:	f7ff f9da 	bl	800b69c <quorem>
 800c2e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c2ec:	9b01      	ldr	r3, [sp, #4]
 800c2ee:	f805 ab01 	strb.w	sl, [r5], #1
 800c2f2:	1aea      	subs	r2, r5, r3
 800c2f4:	9b02      	ldr	r3, [sp, #8]
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	dd09      	ble.n	800c30e <_dtoa_r+0xb56>
 800c2fa:	ee18 1a10 	vmov	r1, s16
 800c2fe:	2300      	movs	r3, #0
 800c300:	220a      	movs	r2, #10
 800c302:	4620      	mov	r0, r4
 800c304:	f000 ff6e 	bl	800d1e4 <__multadd>
 800c308:	ee08 0a10 	vmov	s16, r0
 800c30c:	e7e7      	b.n	800c2de <_dtoa_r+0xb26>
 800c30e:	9b02      	ldr	r3, [sp, #8]
 800c310:	2b00      	cmp	r3, #0
 800c312:	bfc8      	it	gt
 800c314:	461d      	movgt	r5, r3
 800c316:	9b01      	ldr	r3, [sp, #4]
 800c318:	bfd8      	it	le
 800c31a:	2501      	movle	r5, #1
 800c31c:	441d      	add	r5, r3
 800c31e:	f04f 0800 	mov.w	r8, #0
 800c322:	ee18 1a10 	vmov	r1, s16
 800c326:	2201      	movs	r2, #1
 800c328:	4620      	mov	r0, r4
 800c32a:	f001 f955 	bl	800d5d8 <__lshift>
 800c32e:	4631      	mov	r1, r6
 800c330:	ee08 0a10 	vmov	s16, r0
 800c334:	f001 f9c0 	bl	800d6b8 <__mcmp>
 800c338:	2800      	cmp	r0, #0
 800c33a:	dc91      	bgt.n	800c260 <_dtoa_r+0xaa8>
 800c33c:	d102      	bne.n	800c344 <_dtoa_r+0xb8c>
 800c33e:	f01a 0f01 	tst.w	sl, #1
 800c342:	d18d      	bne.n	800c260 <_dtoa_r+0xaa8>
 800c344:	462b      	mov	r3, r5
 800c346:	461d      	mov	r5, r3
 800c348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c34c:	2a30      	cmp	r2, #48	; 0x30
 800c34e:	d0fa      	beq.n	800c346 <_dtoa_r+0xb8e>
 800c350:	e6d7      	b.n	800c102 <_dtoa_r+0x94a>
 800c352:	9a01      	ldr	r2, [sp, #4]
 800c354:	429a      	cmp	r2, r3
 800c356:	d184      	bne.n	800c262 <_dtoa_r+0xaaa>
 800c358:	9b00      	ldr	r3, [sp, #0]
 800c35a:	3301      	adds	r3, #1
 800c35c:	9300      	str	r3, [sp, #0]
 800c35e:	2331      	movs	r3, #49	; 0x31
 800c360:	7013      	strb	r3, [r2, #0]
 800c362:	e6ce      	b.n	800c102 <_dtoa_r+0x94a>
 800c364:	4b09      	ldr	r3, [pc, #36]	; (800c38c <_dtoa_r+0xbd4>)
 800c366:	f7ff ba95 	b.w	800b894 <_dtoa_r+0xdc>
 800c36a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f47f aa6e 	bne.w	800b84e <_dtoa_r+0x96>
 800c372:	4b07      	ldr	r3, [pc, #28]	; (800c390 <_dtoa_r+0xbd8>)
 800c374:	f7ff ba8e 	b.w	800b894 <_dtoa_r+0xdc>
 800c378:	9b02      	ldr	r3, [sp, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	dcae      	bgt.n	800c2dc <_dtoa_r+0xb24>
 800c37e:	9b06      	ldr	r3, [sp, #24]
 800c380:	2b02      	cmp	r3, #2
 800c382:	f73f aea8 	bgt.w	800c0d6 <_dtoa_r+0x91e>
 800c386:	e7a9      	b.n	800c2dc <_dtoa_r+0xb24>
 800c388:	0800f126 	.word	0x0800f126
 800c38c:	0800f381 	.word	0x0800f381
 800c390:	0800f0be 	.word	0x0800f0be

0800c394 <__sflush_r>:
 800c394:	898a      	ldrh	r2, [r1, #12]
 800c396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c39a:	4605      	mov	r5, r0
 800c39c:	0710      	lsls	r0, r2, #28
 800c39e:	460c      	mov	r4, r1
 800c3a0:	d458      	bmi.n	800c454 <__sflush_r+0xc0>
 800c3a2:	684b      	ldr	r3, [r1, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	dc05      	bgt.n	800c3b4 <__sflush_r+0x20>
 800c3a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	dc02      	bgt.n	800c3b4 <__sflush_r+0x20>
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3b6:	2e00      	cmp	r6, #0
 800c3b8:	d0f9      	beq.n	800c3ae <__sflush_r+0x1a>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3c0:	682f      	ldr	r7, [r5, #0]
 800c3c2:	602b      	str	r3, [r5, #0]
 800c3c4:	d032      	beq.n	800c42c <__sflush_r+0x98>
 800c3c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3c8:	89a3      	ldrh	r3, [r4, #12]
 800c3ca:	075a      	lsls	r2, r3, #29
 800c3cc:	d505      	bpl.n	800c3da <__sflush_r+0x46>
 800c3ce:	6863      	ldr	r3, [r4, #4]
 800c3d0:	1ac0      	subs	r0, r0, r3
 800c3d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3d4:	b10b      	cbz	r3, 800c3da <__sflush_r+0x46>
 800c3d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3d8:	1ac0      	subs	r0, r0, r3
 800c3da:	2300      	movs	r3, #0
 800c3dc:	4602      	mov	r2, r0
 800c3de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3e0:	6a21      	ldr	r1, [r4, #32]
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	47b0      	blx	r6
 800c3e6:	1c43      	adds	r3, r0, #1
 800c3e8:	89a3      	ldrh	r3, [r4, #12]
 800c3ea:	d106      	bne.n	800c3fa <__sflush_r+0x66>
 800c3ec:	6829      	ldr	r1, [r5, #0]
 800c3ee:	291d      	cmp	r1, #29
 800c3f0:	d82c      	bhi.n	800c44c <__sflush_r+0xb8>
 800c3f2:	4a2a      	ldr	r2, [pc, #168]	; (800c49c <__sflush_r+0x108>)
 800c3f4:	40ca      	lsrs	r2, r1
 800c3f6:	07d6      	lsls	r6, r2, #31
 800c3f8:	d528      	bpl.n	800c44c <__sflush_r+0xb8>
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	6062      	str	r2, [r4, #4]
 800c3fe:	04d9      	lsls	r1, r3, #19
 800c400:	6922      	ldr	r2, [r4, #16]
 800c402:	6022      	str	r2, [r4, #0]
 800c404:	d504      	bpl.n	800c410 <__sflush_r+0x7c>
 800c406:	1c42      	adds	r2, r0, #1
 800c408:	d101      	bne.n	800c40e <__sflush_r+0x7a>
 800c40a:	682b      	ldr	r3, [r5, #0]
 800c40c:	b903      	cbnz	r3, 800c410 <__sflush_r+0x7c>
 800c40e:	6560      	str	r0, [r4, #84]	; 0x54
 800c410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c412:	602f      	str	r7, [r5, #0]
 800c414:	2900      	cmp	r1, #0
 800c416:	d0ca      	beq.n	800c3ae <__sflush_r+0x1a>
 800c418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c41c:	4299      	cmp	r1, r3
 800c41e:	d002      	beq.n	800c426 <__sflush_r+0x92>
 800c420:	4628      	mov	r0, r5
 800c422:	f7fc fefb 	bl	800921c <_free_r>
 800c426:	2000      	movs	r0, #0
 800c428:	6360      	str	r0, [r4, #52]	; 0x34
 800c42a:	e7c1      	b.n	800c3b0 <__sflush_r+0x1c>
 800c42c:	6a21      	ldr	r1, [r4, #32]
 800c42e:	2301      	movs	r3, #1
 800c430:	4628      	mov	r0, r5
 800c432:	47b0      	blx	r6
 800c434:	1c41      	adds	r1, r0, #1
 800c436:	d1c7      	bne.n	800c3c8 <__sflush_r+0x34>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d0c4      	beq.n	800c3c8 <__sflush_r+0x34>
 800c43e:	2b1d      	cmp	r3, #29
 800c440:	d001      	beq.n	800c446 <__sflush_r+0xb2>
 800c442:	2b16      	cmp	r3, #22
 800c444:	d101      	bne.n	800c44a <__sflush_r+0xb6>
 800c446:	602f      	str	r7, [r5, #0]
 800c448:	e7b1      	b.n	800c3ae <__sflush_r+0x1a>
 800c44a:	89a3      	ldrh	r3, [r4, #12]
 800c44c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c450:	81a3      	strh	r3, [r4, #12]
 800c452:	e7ad      	b.n	800c3b0 <__sflush_r+0x1c>
 800c454:	690f      	ldr	r7, [r1, #16]
 800c456:	2f00      	cmp	r7, #0
 800c458:	d0a9      	beq.n	800c3ae <__sflush_r+0x1a>
 800c45a:	0793      	lsls	r3, r2, #30
 800c45c:	680e      	ldr	r6, [r1, #0]
 800c45e:	bf08      	it	eq
 800c460:	694b      	ldreq	r3, [r1, #20]
 800c462:	600f      	str	r7, [r1, #0]
 800c464:	bf18      	it	ne
 800c466:	2300      	movne	r3, #0
 800c468:	eba6 0807 	sub.w	r8, r6, r7
 800c46c:	608b      	str	r3, [r1, #8]
 800c46e:	f1b8 0f00 	cmp.w	r8, #0
 800c472:	dd9c      	ble.n	800c3ae <__sflush_r+0x1a>
 800c474:	6a21      	ldr	r1, [r4, #32]
 800c476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c478:	4643      	mov	r3, r8
 800c47a:	463a      	mov	r2, r7
 800c47c:	4628      	mov	r0, r5
 800c47e:	47b0      	blx	r6
 800c480:	2800      	cmp	r0, #0
 800c482:	dc06      	bgt.n	800c492 <__sflush_r+0xfe>
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c48a:	81a3      	strh	r3, [r4, #12]
 800c48c:	f04f 30ff 	mov.w	r0, #4294967295
 800c490:	e78e      	b.n	800c3b0 <__sflush_r+0x1c>
 800c492:	4407      	add	r7, r0
 800c494:	eba8 0800 	sub.w	r8, r8, r0
 800c498:	e7e9      	b.n	800c46e <__sflush_r+0xda>
 800c49a:	bf00      	nop
 800c49c:	20400001 	.word	0x20400001

0800c4a0 <_fflush_r>:
 800c4a0:	b538      	push	{r3, r4, r5, lr}
 800c4a2:	690b      	ldr	r3, [r1, #16]
 800c4a4:	4605      	mov	r5, r0
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	b913      	cbnz	r3, 800c4b0 <_fflush_r+0x10>
 800c4aa:	2500      	movs	r5, #0
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
 800c4b0:	b118      	cbz	r0, 800c4ba <_fflush_r+0x1a>
 800c4b2:	6983      	ldr	r3, [r0, #24]
 800c4b4:	b90b      	cbnz	r3, 800c4ba <_fflush_r+0x1a>
 800c4b6:	f000 f887 	bl	800c5c8 <__sinit>
 800c4ba:	4b14      	ldr	r3, [pc, #80]	; (800c50c <_fflush_r+0x6c>)
 800c4bc:	429c      	cmp	r4, r3
 800c4be:	d11b      	bne.n	800c4f8 <_fflush_r+0x58>
 800c4c0:	686c      	ldr	r4, [r5, #4]
 800c4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d0ef      	beq.n	800c4aa <_fflush_r+0xa>
 800c4ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4cc:	07d0      	lsls	r0, r2, #31
 800c4ce:	d404      	bmi.n	800c4da <_fflush_r+0x3a>
 800c4d0:	0599      	lsls	r1, r3, #22
 800c4d2:	d402      	bmi.n	800c4da <_fflush_r+0x3a>
 800c4d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4d6:	f000 fd8f 	bl	800cff8 <__retarget_lock_acquire_recursive>
 800c4da:	4628      	mov	r0, r5
 800c4dc:	4621      	mov	r1, r4
 800c4de:	f7ff ff59 	bl	800c394 <__sflush_r>
 800c4e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4e4:	07da      	lsls	r2, r3, #31
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	d4e0      	bmi.n	800c4ac <_fflush_r+0xc>
 800c4ea:	89a3      	ldrh	r3, [r4, #12]
 800c4ec:	059b      	lsls	r3, r3, #22
 800c4ee:	d4dd      	bmi.n	800c4ac <_fflush_r+0xc>
 800c4f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4f2:	f000 fd83 	bl	800cffc <__retarget_lock_release_recursive>
 800c4f6:	e7d9      	b.n	800c4ac <_fflush_r+0xc>
 800c4f8:	4b05      	ldr	r3, [pc, #20]	; (800c510 <_fflush_r+0x70>)
 800c4fa:	429c      	cmp	r4, r3
 800c4fc:	d101      	bne.n	800c502 <_fflush_r+0x62>
 800c4fe:	68ac      	ldr	r4, [r5, #8]
 800c500:	e7df      	b.n	800c4c2 <_fflush_r+0x22>
 800c502:	4b04      	ldr	r3, [pc, #16]	; (800c514 <_fflush_r+0x74>)
 800c504:	429c      	cmp	r4, r3
 800c506:	bf08      	it	eq
 800c508:	68ec      	ldreq	r4, [r5, #12]
 800c50a:	e7da      	b.n	800c4c2 <_fflush_r+0x22>
 800c50c:	0800f158 	.word	0x0800f158
 800c510:	0800f178 	.word	0x0800f178
 800c514:	0800f138 	.word	0x0800f138

0800c518 <std>:
 800c518:	2300      	movs	r3, #0
 800c51a:	b510      	push	{r4, lr}
 800c51c:	4604      	mov	r4, r0
 800c51e:	e9c0 3300 	strd	r3, r3, [r0]
 800c522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c526:	6083      	str	r3, [r0, #8]
 800c528:	8181      	strh	r1, [r0, #12]
 800c52a:	6643      	str	r3, [r0, #100]	; 0x64
 800c52c:	81c2      	strh	r2, [r0, #14]
 800c52e:	6183      	str	r3, [r0, #24]
 800c530:	4619      	mov	r1, r3
 800c532:	2208      	movs	r2, #8
 800c534:	305c      	adds	r0, #92	; 0x5c
 800c536:	f7fc fbf7 	bl	8008d28 <memset>
 800c53a:	4b05      	ldr	r3, [pc, #20]	; (800c550 <std+0x38>)
 800c53c:	6263      	str	r3, [r4, #36]	; 0x24
 800c53e:	4b05      	ldr	r3, [pc, #20]	; (800c554 <std+0x3c>)
 800c540:	62a3      	str	r3, [r4, #40]	; 0x28
 800c542:	4b05      	ldr	r3, [pc, #20]	; (800c558 <std+0x40>)
 800c544:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c546:	4b05      	ldr	r3, [pc, #20]	; (800c55c <std+0x44>)
 800c548:	6224      	str	r4, [r4, #32]
 800c54a:	6323      	str	r3, [r4, #48]	; 0x30
 800c54c:	bd10      	pop	{r4, pc}
 800c54e:	bf00      	nop
 800c550:	0800e0a1 	.word	0x0800e0a1
 800c554:	0800e0c7 	.word	0x0800e0c7
 800c558:	0800e0ff 	.word	0x0800e0ff
 800c55c:	0800e123 	.word	0x0800e123

0800c560 <_cleanup_r>:
 800c560:	4901      	ldr	r1, [pc, #4]	; (800c568 <_cleanup_r+0x8>)
 800c562:	f000 b8c1 	b.w	800c6e8 <_fwalk_reent>
 800c566:	bf00      	nop
 800c568:	0800c4a1 	.word	0x0800c4a1

0800c56c <__sfmoreglue>:
 800c56c:	b570      	push	{r4, r5, r6, lr}
 800c56e:	2268      	movs	r2, #104	; 0x68
 800c570:	1e4d      	subs	r5, r1, #1
 800c572:	4355      	muls	r5, r2
 800c574:	460e      	mov	r6, r1
 800c576:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c57a:	f7fc febb 	bl	80092f4 <_malloc_r>
 800c57e:	4604      	mov	r4, r0
 800c580:	b140      	cbz	r0, 800c594 <__sfmoreglue+0x28>
 800c582:	2100      	movs	r1, #0
 800c584:	e9c0 1600 	strd	r1, r6, [r0]
 800c588:	300c      	adds	r0, #12
 800c58a:	60a0      	str	r0, [r4, #8]
 800c58c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c590:	f7fc fbca 	bl	8008d28 <memset>
 800c594:	4620      	mov	r0, r4
 800c596:	bd70      	pop	{r4, r5, r6, pc}

0800c598 <__sfp_lock_acquire>:
 800c598:	4801      	ldr	r0, [pc, #4]	; (800c5a0 <__sfp_lock_acquire+0x8>)
 800c59a:	f000 bd2d 	b.w	800cff8 <__retarget_lock_acquire_recursive>
 800c59e:	bf00      	nop
 800c5a0:	200004b6 	.word	0x200004b6

0800c5a4 <__sfp_lock_release>:
 800c5a4:	4801      	ldr	r0, [pc, #4]	; (800c5ac <__sfp_lock_release+0x8>)
 800c5a6:	f000 bd29 	b.w	800cffc <__retarget_lock_release_recursive>
 800c5aa:	bf00      	nop
 800c5ac:	200004b6 	.word	0x200004b6

0800c5b0 <__sinit_lock_acquire>:
 800c5b0:	4801      	ldr	r0, [pc, #4]	; (800c5b8 <__sinit_lock_acquire+0x8>)
 800c5b2:	f000 bd21 	b.w	800cff8 <__retarget_lock_acquire_recursive>
 800c5b6:	bf00      	nop
 800c5b8:	200004b7 	.word	0x200004b7

0800c5bc <__sinit_lock_release>:
 800c5bc:	4801      	ldr	r0, [pc, #4]	; (800c5c4 <__sinit_lock_release+0x8>)
 800c5be:	f000 bd1d 	b.w	800cffc <__retarget_lock_release_recursive>
 800c5c2:	bf00      	nop
 800c5c4:	200004b7 	.word	0x200004b7

0800c5c8 <__sinit>:
 800c5c8:	b510      	push	{r4, lr}
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	f7ff fff0 	bl	800c5b0 <__sinit_lock_acquire>
 800c5d0:	69a3      	ldr	r3, [r4, #24]
 800c5d2:	b11b      	cbz	r3, 800c5dc <__sinit+0x14>
 800c5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5d8:	f7ff bff0 	b.w	800c5bc <__sinit_lock_release>
 800c5dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c5e0:	6523      	str	r3, [r4, #80]	; 0x50
 800c5e2:	4b13      	ldr	r3, [pc, #76]	; (800c630 <__sinit+0x68>)
 800c5e4:	4a13      	ldr	r2, [pc, #76]	; (800c634 <__sinit+0x6c>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c5ea:	42a3      	cmp	r3, r4
 800c5ec:	bf04      	itt	eq
 800c5ee:	2301      	moveq	r3, #1
 800c5f0:	61a3      	streq	r3, [r4, #24]
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f000 f820 	bl	800c638 <__sfp>
 800c5f8:	6060      	str	r0, [r4, #4]
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f000 f81c 	bl	800c638 <__sfp>
 800c600:	60a0      	str	r0, [r4, #8]
 800c602:	4620      	mov	r0, r4
 800c604:	f000 f818 	bl	800c638 <__sfp>
 800c608:	2200      	movs	r2, #0
 800c60a:	60e0      	str	r0, [r4, #12]
 800c60c:	2104      	movs	r1, #4
 800c60e:	6860      	ldr	r0, [r4, #4]
 800c610:	f7ff ff82 	bl	800c518 <std>
 800c614:	68a0      	ldr	r0, [r4, #8]
 800c616:	2201      	movs	r2, #1
 800c618:	2109      	movs	r1, #9
 800c61a:	f7ff ff7d 	bl	800c518 <std>
 800c61e:	68e0      	ldr	r0, [r4, #12]
 800c620:	2202      	movs	r2, #2
 800c622:	2112      	movs	r1, #18
 800c624:	f7ff ff78 	bl	800c518 <std>
 800c628:	2301      	movs	r3, #1
 800c62a:	61a3      	str	r3, [r4, #24]
 800c62c:	e7d2      	b.n	800c5d4 <__sinit+0xc>
 800c62e:	bf00      	nop
 800c630:	0800eccc 	.word	0x0800eccc
 800c634:	0800c561 	.word	0x0800c561

0800c638 <__sfp>:
 800c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63a:	4607      	mov	r7, r0
 800c63c:	f7ff ffac 	bl	800c598 <__sfp_lock_acquire>
 800c640:	4b1e      	ldr	r3, [pc, #120]	; (800c6bc <__sfp+0x84>)
 800c642:	681e      	ldr	r6, [r3, #0]
 800c644:	69b3      	ldr	r3, [r6, #24]
 800c646:	b913      	cbnz	r3, 800c64e <__sfp+0x16>
 800c648:	4630      	mov	r0, r6
 800c64a:	f7ff ffbd 	bl	800c5c8 <__sinit>
 800c64e:	3648      	adds	r6, #72	; 0x48
 800c650:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c654:	3b01      	subs	r3, #1
 800c656:	d503      	bpl.n	800c660 <__sfp+0x28>
 800c658:	6833      	ldr	r3, [r6, #0]
 800c65a:	b30b      	cbz	r3, 800c6a0 <__sfp+0x68>
 800c65c:	6836      	ldr	r6, [r6, #0]
 800c65e:	e7f7      	b.n	800c650 <__sfp+0x18>
 800c660:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c664:	b9d5      	cbnz	r5, 800c69c <__sfp+0x64>
 800c666:	4b16      	ldr	r3, [pc, #88]	; (800c6c0 <__sfp+0x88>)
 800c668:	60e3      	str	r3, [r4, #12]
 800c66a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c66e:	6665      	str	r5, [r4, #100]	; 0x64
 800c670:	f000 fcc0 	bl	800cff4 <__retarget_lock_init_recursive>
 800c674:	f7ff ff96 	bl	800c5a4 <__sfp_lock_release>
 800c678:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c67c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c680:	6025      	str	r5, [r4, #0]
 800c682:	61a5      	str	r5, [r4, #24]
 800c684:	2208      	movs	r2, #8
 800c686:	4629      	mov	r1, r5
 800c688:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c68c:	f7fc fb4c 	bl	8008d28 <memset>
 800c690:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c694:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c698:	4620      	mov	r0, r4
 800c69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c69c:	3468      	adds	r4, #104	; 0x68
 800c69e:	e7d9      	b.n	800c654 <__sfp+0x1c>
 800c6a0:	2104      	movs	r1, #4
 800c6a2:	4638      	mov	r0, r7
 800c6a4:	f7ff ff62 	bl	800c56c <__sfmoreglue>
 800c6a8:	4604      	mov	r4, r0
 800c6aa:	6030      	str	r0, [r6, #0]
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d1d5      	bne.n	800c65c <__sfp+0x24>
 800c6b0:	f7ff ff78 	bl	800c5a4 <__sfp_lock_release>
 800c6b4:	230c      	movs	r3, #12
 800c6b6:	603b      	str	r3, [r7, #0]
 800c6b8:	e7ee      	b.n	800c698 <__sfp+0x60>
 800c6ba:	bf00      	nop
 800c6bc:	0800eccc 	.word	0x0800eccc
 800c6c0:	ffff0001 	.word	0xffff0001

0800c6c4 <fiprintf>:
 800c6c4:	b40e      	push	{r1, r2, r3}
 800c6c6:	b503      	push	{r0, r1, lr}
 800c6c8:	4601      	mov	r1, r0
 800c6ca:	ab03      	add	r3, sp, #12
 800c6cc:	4805      	ldr	r0, [pc, #20]	; (800c6e4 <fiprintf+0x20>)
 800c6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6d2:	6800      	ldr	r0, [r0, #0]
 800c6d4:	9301      	str	r3, [sp, #4]
 800c6d6:	f001 fb7f 	bl	800ddd8 <_vfiprintf_r>
 800c6da:	b002      	add	sp, #8
 800c6dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6e0:	b003      	add	sp, #12
 800c6e2:	4770      	bx	lr
 800c6e4:	20000014 	.word	0x20000014

0800c6e8 <_fwalk_reent>:
 800c6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6ec:	4606      	mov	r6, r0
 800c6ee:	4688      	mov	r8, r1
 800c6f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c6f4:	2700      	movs	r7, #0
 800c6f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6fa:	f1b9 0901 	subs.w	r9, r9, #1
 800c6fe:	d505      	bpl.n	800c70c <_fwalk_reent+0x24>
 800c700:	6824      	ldr	r4, [r4, #0]
 800c702:	2c00      	cmp	r4, #0
 800c704:	d1f7      	bne.n	800c6f6 <_fwalk_reent+0xe>
 800c706:	4638      	mov	r0, r7
 800c708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c70c:	89ab      	ldrh	r3, [r5, #12]
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d907      	bls.n	800c722 <_fwalk_reent+0x3a>
 800c712:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c716:	3301      	adds	r3, #1
 800c718:	d003      	beq.n	800c722 <_fwalk_reent+0x3a>
 800c71a:	4629      	mov	r1, r5
 800c71c:	4630      	mov	r0, r6
 800c71e:	47c0      	blx	r8
 800c720:	4307      	orrs	r7, r0
 800c722:	3568      	adds	r5, #104	; 0x68
 800c724:	e7e9      	b.n	800c6fa <_fwalk_reent+0x12>

0800c726 <rshift>:
 800c726:	6903      	ldr	r3, [r0, #16]
 800c728:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c730:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c734:	f100 0414 	add.w	r4, r0, #20
 800c738:	dd45      	ble.n	800c7c6 <rshift+0xa0>
 800c73a:	f011 011f 	ands.w	r1, r1, #31
 800c73e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c742:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c746:	d10c      	bne.n	800c762 <rshift+0x3c>
 800c748:	f100 0710 	add.w	r7, r0, #16
 800c74c:	4629      	mov	r1, r5
 800c74e:	42b1      	cmp	r1, r6
 800c750:	d334      	bcc.n	800c7bc <rshift+0x96>
 800c752:	1a9b      	subs	r3, r3, r2
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	1eea      	subs	r2, r5, #3
 800c758:	4296      	cmp	r6, r2
 800c75a:	bf38      	it	cc
 800c75c:	2300      	movcc	r3, #0
 800c75e:	4423      	add	r3, r4
 800c760:	e015      	b.n	800c78e <rshift+0x68>
 800c762:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c766:	f1c1 0820 	rsb	r8, r1, #32
 800c76a:	40cf      	lsrs	r7, r1
 800c76c:	f105 0e04 	add.w	lr, r5, #4
 800c770:	46a1      	mov	r9, r4
 800c772:	4576      	cmp	r6, lr
 800c774:	46f4      	mov	ip, lr
 800c776:	d815      	bhi.n	800c7a4 <rshift+0x7e>
 800c778:	1a9a      	subs	r2, r3, r2
 800c77a:	0092      	lsls	r2, r2, #2
 800c77c:	3a04      	subs	r2, #4
 800c77e:	3501      	adds	r5, #1
 800c780:	42ae      	cmp	r6, r5
 800c782:	bf38      	it	cc
 800c784:	2200      	movcc	r2, #0
 800c786:	18a3      	adds	r3, r4, r2
 800c788:	50a7      	str	r7, [r4, r2]
 800c78a:	b107      	cbz	r7, 800c78e <rshift+0x68>
 800c78c:	3304      	adds	r3, #4
 800c78e:	1b1a      	subs	r2, r3, r4
 800c790:	42a3      	cmp	r3, r4
 800c792:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c796:	bf08      	it	eq
 800c798:	2300      	moveq	r3, #0
 800c79a:	6102      	str	r2, [r0, #16]
 800c79c:	bf08      	it	eq
 800c79e:	6143      	streq	r3, [r0, #20]
 800c7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7a4:	f8dc c000 	ldr.w	ip, [ip]
 800c7a8:	fa0c fc08 	lsl.w	ip, ip, r8
 800c7ac:	ea4c 0707 	orr.w	r7, ip, r7
 800c7b0:	f849 7b04 	str.w	r7, [r9], #4
 800c7b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c7b8:	40cf      	lsrs	r7, r1
 800c7ba:	e7da      	b.n	800c772 <rshift+0x4c>
 800c7bc:	f851 cb04 	ldr.w	ip, [r1], #4
 800c7c0:	f847 cf04 	str.w	ip, [r7, #4]!
 800c7c4:	e7c3      	b.n	800c74e <rshift+0x28>
 800c7c6:	4623      	mov	r3, r4
 800c7c8:	e7e1      	b.n	800c78e <rshift+0x68>

0800c7ca <__hexdig_fun>:
 800c7ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c7ce:	2b09      	cmp	r3, #9
 800c7d0:	d802      	bhi.n	800c7d8 <__hexdig_fun+0xe>
 800c7d2:	3820      	subs	r0, #32
 800c7d4:	b2c0      	uxtb	r0, r0
 800c7d6:	4770      	bx	lr
 800c7d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c7dc:	2b05      	cmp	r3, #5
 800c7de:	d801      	bhi.n	800c7e4 <__hexdig_fun+0x1a>
 800c7e0:	3847      	subs	r0, #71	; 0x47
 800c7e2:	e7f7      	b.n	800c7d4 <__hexdig_fun+0xa>
 800c7e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c7e8:	2b05      	cmp	r3, #5
 800c7ea:	d801      	bhi.n	800c7f0 <__hexdig_fun+0x26>
 800c7ec:	3827      	subs	r0, #39	; 0x27
 800c7ee:	e7f1      	b.n	800c7d4 <__hexdig_fun+0xa>
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	4770      	bx	lr

0800c7f4 <__gethex>:
 800c7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f8:	ed2d 8b02 	vpush	{d8}
 800c7fc:	b089      	sub	sp, #36	; 0x24
 800c7fe:	ee08 0a10 	vmov	s16, r0
 800c802:	9304      	str	r3, [sp, #16]
 800c804:	4bb4      	ldr	r3, [pc, #720]	; (800cad8 <__gethex+0x2e4>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	9301      	str	r3, [sp, #4]
 800c80a:	4618      	mov	r0, r3
 800c80c:	468b      	mov	fp, r1
 800c80e:	4690      	mov	r8, r2
 800c810:	f7f3 fcde 	bl	80001d0 <strlen>
 800c814:	9b01      	ldr	r3, [sp, #4]
 800c816:	f8db 2000 	ldr.w	r2, [fp]
 800c81a:	4403      	add	r3, r0
 800c81c:	4682      	mov	sl, r0
 800c81e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c822:	9305      	str	r3, [sp, #20]
 800c824:	1c93      	adds	r3, r2, #2
 800c826:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c82a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c82e:	32fe      	adds	r2, #254	; 0xfe
 800c830:	18d1      	adds	r1, r2, r3
 800c832:	461f      	mov	r7, r3
 800c834:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c838:	9100      	str	r1, [sp, #0]
 800c83a:	2830      	cmp	r0, #48	; 0x30
 800c83c:	d0f8      	beq.n	800c830 <__gethex+0x3c>
 800c83e:	f7ff ffc4 	bl	800c7ca <__hexdig_fun>
 800c842:	4604      	mov	r4, r0
 800c844:	2800      	cmp	r0, #0
 800c846:	d13a      	bne.n	800c8be <__gethex+0xca>
 800c848:	9901      	ldr	r1, [sp, #4]
 800c84a:	4652      	mov	r2, sl
 800c84c:	4638      	mov	r0, r7
 800c84e:	f001 fc74 	bl	800e13a <strncmp>
 800c852:	4605      	mov	r5, r0
 800c854:	2800      	cmp	r0, #0
 800c856:	d168      	bne.n	800c92a <__gethex+0x136>
 800c858:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c85c:	eb07 060a 	add.w	r6, r7, sl
 800c860:	f7ff ffb3 	bl	800c7ca <__hexdig_fun>
 800c864:	2800      	cmp	r0, #0
 800c866:	d062      	beq.n	800c92e <__gethex+0x13a>
 800c868:	4633      	mov	r3, r6
 800c86a:	7818      	ldrb	r0, [r3, #0]
 800c86c:	2830      	cmp	r0, #48	; 0x30
 800c86e:	461f      	mov	r7, r3
 800c870:	f103 0301 	add.w	r3, r3, #1
 800c874:	d0f9      	beq.n	800c86a <__gethex+0x76>
 800c876:	f7ff ffa8 	bl	800c7ca <__hexdig_fun>
 800c87a:	2301      	movs	r3, #1
 800c87c:	fab0 f480 	clz	r4, r0
 800c880:	0964      	lsrs	r4, r4, #5
 800c882:	4635      	mov	r5, r6
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	463a      	mov	r2, r7
 800c888:	4616      	mov	r6, r2
 800c88a:	3201      	adds	r2, #1
 800c88c:	7830      	ldrb	r0, [r6, #0]
 800c88e:	f7ff ff9c 	bl	800c7ca <__hexdig_fun>
 800c892:	2800      	cmp	r0, #0
 800c894:	d1f8      	bne.n	800c888 <__gethex+0x94>
 800c896:	9901      	ldr	r1, [sp, #4]
 800c898:	4652      	mov	r2, sl
 800c89a:	4630      	mov	r0, r6
 800c89c:	f001 fc4d 	bl	800e13a <strncmp>
 800c8a0:	b980      	cbnz	r0, 800c8c4 <__gethex+0xd0>
 800c8a2:	b94d      	cbnz	r5, 800c8b8 <__gethex+0xc4>
 800c8a4:	eb06 050a 	add.w	r5, r6, sl
 800c8a8:	462a      	mov	r2, r5
 800c8aa:	4616      	mov	r6, r2
 800c8ac:	3201      	adds	r2, #1
 800c8ae:	7830      	ldrb	r0, [r6, #0]
 800c8b0:	f7ff ff8b 	bl	800c7ca <__hexdig_fun>
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d1f8      	bne.n	800c8aa <__gethex+0xb6>
 800c8b8:	1bad      	subs	r5, r5, r6
 800c8ba:	00ad      	lsls	r5, r5, #2
 800c8bc:	e004      	b.n	800c8c8 <__gethex+0xd4>
 800c8be:	2400      	movs	r4, #0
 800c8c0:	4625      	mov	r5, r4
 800c8c2:	e7e0      	b.n	800c886 <__gethex+0x92>
 800c8c4:	2d00      	cmp	r5, #0
 800c8c6:	d1f7      	bne.n	800c8b8 <__gethex+0xc4>
 800c8c8:	7833      	ldrb	r3, [r6, #0]
 800c8ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c8ce:	2b50      	cmp	r3, #80	; 0x50
 800c8d0:	d13b      	bne.n	800c94a <__gethex+0x156>
 800c8d2:	7873      	ldrb	r3, [r6, #1]
 800c8d4:	2b2b      	cmp	r3, #43	; 0x2b
 800c8d6:	d02c      	beq.n	800c932 <__gethex+0x13e>
 800c8d8:	2b2d      	cmp	r3, #45	; 0x2d
 800c8da:	d02e      	beq.n	800c93a <__gethex+0x146>
 800c8dc:	1c71      	adds	r1, r6, #1
 800c8de:	f04f 0900 	mov.w	r9, #0
 800c8e2:	7808      	ldrb	r0, [r1, #0]
 800c8e4:	f7ff ff71 	bl	800c7ca <__hexdig_fun>
 800c8e8:	1e43      	subs	r3, r0, #1
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	2b18      	cmp	r3, #24
 800c8ee:	d82c      	bhi.n	800c94a <__gethex+0x156>
 800c8f0:	f1a0 0210 	sub.w	r2, r0, #16
 800c8f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c8f8:	f7ff ff67 	bl	800c7ca <__hexdig_fun>
 800c8fc:	1e43      	subs	r3, r0, #1
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	2b18      	cmp	r3, #24
 800c902:	d91d      	bls.n	800c940 <__gethex+0x14c>
 800c904:	f1b9 0f00 	cmp.w	r9, #0
 800c908:	d000      	beq.n	800c90c <__gethex+0x118>
 800c90a:	4252      	negs	r2, r2
 800c90c:	4415      	add	r5, r2
 800c90e:	f8cb 1000 	str.w	r1, [fp]
 800c912:	b1e4      	cbz	r4, 800c94e <__gethex+0x15a>
 800c914:	9b00      	ldr	r3, [sp, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	bf14      	ite	ne
 800c91a:	2700      	movne	r7, #0
 800c91c:	2706      	moveq	r7, #6
 800c91e:	4638      	mov	r0, r7
 800c920:	b009      	add	sp, #36	; 0x24
 800c922:	ecbd 8b02 	vpop	{d8}
 800c926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92a:	463e      	mov	r6, r7
 800c92c:	4625      	mov	r5, r4
 800c92e:	2401      	movs	r4, #1
 800c930:	e7ca      	b.n	800c8c8 <__gethex+0xd4>
 800c932:	f04f 0900 	mov.w	r9, #0
 800c936:	1cb1      	adds	r1, r6, #2
 800c938:	e7d3      	b.n	800c8e2 <__gethex+0xee>
 800c93a:	f04f 0901 	mov.w	r9, #1
 800c93e:	e7fa      	b.n	800c936 <__gethex+0x142>
 800c940:	230a      	movs	r3, #10
 800c942:	fb03 0202 	mla	r2, r3, r2, r0
 800c946:	3a10      	subs	r2, #16
 800c948:	e7d4      	b.n	800c8f4 <__gethex+0x100>
 800c94a:	4631      	mov	r1, r6
 800c94c:	e7df      	b.n	800c90e <__gethex+0x11a>
 800c94e:	1bf3      	subs	r3, r6, r7
 800c950:	3b01      	subs	r3, #1
 800c952:	4621      	mov	r1, r4
 800c954:	2b07      	cmp	r3, #7
 800c956:	dc0b      	bgt.n	800c970 <__gethex+0x17c>
 800c958:	ee18 0a10 	vmov	r0, s16
 800c95c:	f000 fbe0 	bl	800d120 <_Balloc>
 800c960:	4604      	mov	r4, r0
 800c962:	b940      	cbnz	r0, 800c976 <__gethex+0x182>
 800c964:	4b5d      	ldr	r3, [pc, #372]	; (800cadc <__gethex+0x2e8>)
 800c966:	4602      	mov	r2, r0
 800c968:	21de      	movs	r1, #222	; 0xde
 800c96a:	485d      	ldr	r0, [pc, #372]	; (800cae0 <__gethex+0x2ec>)
 800c96c:	f7fe fe64 	bl	800b638 <__assert_func>
 800c970:	3101      	adds	r1, #1
 800c972:	105b      	asrs	r3, r3, #1
 800c974:	e7ee      	b.n	800c954 <__gethex+0x160>
 800c976:	f100 0914 	add.w	r9, r0, #20
 800c97a:	f04f 0b00 	mov.w	fp, #0
 800c97e:	f1ca 0301 	rsb	r3, sl, #1
 800c982:	f8cd 9008 	str.w	r9, [sp, #8]
 800c986:	f8cd b000 	str.w	fp, [sp]
 800c98a:	9306      	str	r3, [sp, #24]
 800c98c:	42b7      	cmp	r7, r6
 800c98e:	d340      	bcc.n	800ca12 <__gethex+0x21e>
 800c990:	9802      	ldr	r0, [sp, #8]
 800c992:	9b00      	ldr	r3, [sp, #0]
 800c994:	f840 3b04 	str.w	r3, [r0], #4
 800c998:	eba0 0009 	sub.w	r0, r0, r9
 800c99c:	1080      	asrs	r0, r0, #2
 800c99e:	0146      	lsls	r6, r0, #5
 800c9a0:	6120      	str	r0, [r4, #16]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f000 fcae 	bl	800d304 <__hi0bits>
 800c9a8:	1a30      	subs	r0, r6, r0
 800c9aa:	f8d8 6000 	ldr.w	r6, [r8]
 800c9ae:	42b0      	cmp	r0, r6
 800c9b0:	dd63      	ble.n	800ca7a <__gethex+0x286>
 800c9b2:	1b87      	subs	r7, r0, r6
 800c9b4:	4639      	mov	r1, r7
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f001 f852 	bl	800da60 <__any_on>
 800c9bc:	4682      	mov	sl, r0
 800c9be:	b1a8      	cbz	r0, 800c9ec <__gethex+0x1f8>
 800c9c0:	1e7b      	subs	r3, r7, #1
 800c9c2:	1159      	asrs	r1, r3, #5
 800c9c4:	f003 021f 	and.w	r2, r3, #31
 800c9c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c9cc:	f04f 0a01 	mov.w	sl, #1
 800c9d0:	fa0a f202 	lsl.w	r2, sl, r2
 800c9d4:	420a      	tst	r2, r1
 800c9d6:	d009      	beq.n	800c9ec <__gethex+0x1f8>
 800c9d8:	4553      	cmp	r3, sl
 800c9da:	dd05      	ble.n	800c9e8 <__gethex+0x1f4>
 800c9dc:	1eb9      	subs	r1, r7, #2
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f001 f83e 	bl	800da60 <__any_on>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d145      	bne.n	800ca74 <__gethex+0x280>
 800c9e8:	f04f 0a02 	mov.w	sl, #2
 800c9ec:	4639      	mov	r1, r7
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f7ff fe99 	bl	800c726 <rshift>
 800c9f4:	443d      	add	r5, r7
 800c9f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c9fa:	42ab      	cmp	r3, r5
 800c9fc:	da4c      	bge.n	800ca98 <__gethex+0x2a4>
 800c9fe:	ee18 0a10 	vmov	r0, s16
 800ca02:	4621      	mov	r1, r4
 800ca04:	f000 fbcc 	bl	800d1a0 <_Bfree>
 800ca08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	6013      	str	r3, [r2, #0]
 800ca0e:	27a3      	movs	r7, #163	; 0xa3
 800ca10:	e785      	b.n	800c91e <__gethex+0x12a>
 800ca12:	1e73      	subs	r3, r6, #1
 800ca14:	9a05      	ldr	r2, [sp, #20]
 800ca16:	9303      	str	r3, [sp, #12]
 800ca18:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d019      	beq.n	800ca54 <__gethex+0x260>
 800ca20:	f1bb 0f20 	cmp.w	fp, #32
 800ca24:	d107      	bne.n	800ca36 <__gethex+0x242>
 800ca26:	9b02      	ldr	r3, [sp, #8]
 800ca28:	9a00      	ldr	r2, [sp, #0]
 800ca2a:	f843 2b04 	str.w	r2, [r3], #4
 800ca2e:	9302      	str	r3, [sp, #8]
 800ca30:	2300      	movs	r3, #0
 800ca32:	9300      	str	r3, [sp, #0]
 800ca34:	469b      	mov	fp, r3
 800ca36:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ca3a:	f7ff fec6 	bl	800c7ca <__hexdig_fun>
 800ca3e:	9b00      	ldr	r3, [sp, #0]
 800ca40:	f000 000f 	and.w	r0, r0, #15
 800ca44:	fa00 f00b 	lsl.w	r0, r0, fp
 800ca48:	4303      	orrs	r3, r0
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	f10b 0b04 	add.w	fp, fp, #4
 800ca50:	9b03      	ldr	r3, [sp, #12]
 800ca52:	e00d      	b.n	800ca70 <__gethex+0x27c>
 800ca54:	9b03      	ldr	r3, [sp, #12]
 800ca56:	9a06      	ldr	r2, [sp, #24]
 800ca58:	4413      	add	r3, r2
 800ca5a:	42bb      	cmp	r3, r7
 800ca5c:	d3e0      	bcc.n	800ca20 <__gethex+0x22c>
 800ca5e:	4618      	mov	r0, r3
 800ca60:	9901      	ldr	r1, [sp, #4]
 800ca62:	9307      	str	r3, [sp, #28]
 800ca64:	4652      	mov	r2, sl
 800ca66:	f001 fb68 	bl	800e13a <strncmp>
 800ca6a:	9b07      	ldr	r3, [sp, #28]
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	d1d7      	bne.n	800ca20 <__gethex+0x22c>
 800ca70:	461e      	mov	r6, r3
 800ca72:	e78b      	b.n	800c98c <__gethex+0x198>
 800ca74:	f04f 0a03 	mov.w	sl, #3
 800ca78:	e7b8      	b.n	800c9ec <__gethex+0x1f8>
 800ca7a:	da0a      	bge.n	800ca92 <__gethex+0x29e>
 800ca7c:	1a37      	subs	r7, r6, r0
 800ca7e:	4621      	mov	r1, r4
 800ca80:	ee18 0a10 	vmov	r0, s16
 800ca84:	463a      	mov	r2, r7
 800ca86:	f000 fda7 	bl	800d5d8 <__lshift>
 800ca8a:	1bed      	subs	r5, r5, r7
 800ca8c:	4604      	mov	r4, r0
 800ca8e:	f100 0914 	add.w	r9, r0, #20
 800ca92:	f04f 0a00 	mov.w	sl, #0
 800ca96:	e7ae      	b.n	800c9f6 <__gethex+0x202>
 800ca98:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ca9c:	42a8      	cmp	r0, r5
 800ca9e:	dd72      	ble.n	800cb86 <__gethex+0x392>
 800caa0:	1b45      	subs	r5, r0, r5
 800caa2:	42ae      	cmp	r6, r5
 800caa4:	dc36      	bgt.n	800cb14 <__gethex+0x320>
 800caa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d02a      	beq.n	800cb04 <__gethex+0x310>
 800caae:	2b03      	cmp	r3, #3
 800cab0:	d02c      	beq.n	800cb0c <__gethex+0x318>
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d11c      	bne.n	800caf0 <__gethex+0x2fc>
 800cab6:	42ae      	cmp	r6, r5
 800cab8:	d11a      	bne.n	800caf0 <__gethex+0x2fc>
 800caba:	2e01      	cmp	r6, #1
 800cabc:	d112      	bne.n	800cae4 <__gethex+0x2f0>
 800cabe:	9a04      	ldr	r2, [sp, #16]
 800cac0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cac4:	6013      	str	r3, [r2, #0]
 800cac6:	2301      	movs	r3, #1
 800cac8:	6123      	str	r3, [r4, #16]
 800caca:	f8c9 3000 	str.w	r3, [r9]
 800cace:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cad0:	2762      	movs	r7, #98	; 0x62
 800cad2:	601c      	str	r4, [r3, #0]
 800cad4:	e723      	b.n	800c91e <__gethex+0x12a>
 800cad6:	bf00      	nop
 800cad8:	0800f200 	.word	0x0800f200
 800cadc:	0800f126 	.word	0x0800f126
 800cae0:	0800f198 	.word	0x0800f198
 800cae4:	1e71      	subs	r1, r6, #1
 800cae6:	4620      	mov	r0, r4
 800cae8:	f000 ffba 	bl	800da60 <__any_on>
 800caec:	2800      	cmp	r0, #0
 800caee:	d1e6      	bne.n	800cabe <__gethex+0x2ca>
 800caf0:	ee18 0a10 	vmov	r0, s16
 800caf4:	4621      	mov	r1, r4
 800caf6:	f000 fb53 	bl	800d1a0 <_Bfree>
 800cafa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cafc:	2300      	movs	r3, #0
 800cafe:	6013      	str	r3, [r2, #0]
 800cb00:	2750      	movs	r7, #80	; 0x50
 800cb02:	e70c      	b.n	800c91e <__gethex+0x12a>
 800cb04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1f2      	bne.n	800caf0 <__gethex+0x2fc>
 800cb0a:	e7d8      	b.n	800cabe <__gethex+0x2ca>
 800cb0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d1d5      	bne.n	800cabe <__gethex+0x2ca>
 800cb12:	e7ed      	b.n	800caf0 <__gethex+0x2fc>
 800cb14:	1e6f      	subs	r7, r5, #1
 800cb16:	f1ba 0f00 	cmp.w	sl, #0
 800cb1a:	d131      	bne.n	800cb80 <__gethex+0x38c>
 800cb1c:	b127      	cbz	r7, 800cb28 <__gethex+0x334>
 800cb1e:	4639      	mov	r1, r7
 800cb20:	4620      	mov	r0, r4
 800cb22:	f000 ff9d 	bl	800da60 <__any_on>
 800cb26:	4682      	mov	sl, r0
 800cb28:	117b      	asrs	r3, r7, #5
 800cb2a:	2101      	movs	r1, #1
 800cb2c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cb30:	f007 071f 	and.w	r7, r7, #31
 800cb34:	fa01 f707 	lsl.w	r7, r1, r7
 800cb38:	421f      	tst	r7, r3
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	bf18      	it	ne
 800cb40:	f04a 0a02 	orrne.w	sl, sl, #2
 800cb44:	1b76      	subs	r6, r6, r5
 800cb46:	f7ff fdee 	bl	800c726 <rshift>
 800cb4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cb4e:	2702      	movs	r7, #2
 800cb50:	f1ba 0f00 	cmp.w	sl, #0
 800cb54:	d048      	beq.n	800cbe8 <__gethex+0x3f4>
 800cb56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb5a:	2b02      	cmp	r3, #2
 800cb5c:	d015      	beq.n	800cb8a <__gethex+0x396>
 800cb5e:	2b03      	cmp	r3, #3
 800cb60:	d017      	beq.n	800cb92 <__gethex+0x39e>
 800cb62:	2b01      	cmp	r3, #1
 800cb64:	d109      	bne.n	800cb7a <__gethex+0x386>
 800cb66:	f01a 0f02 	tst.w	sl, #2
 800cb6a:	d006      	beq.n	800cb7a <__gethex+0x386>
 800cb6c:	f8d9 0000 	ldr.w	r0, [r9]
 800cb70:	ea4a 0a00 	orr.w	sl, sl, r0
 800cb74:	f01a 0f01 	tst.w	sl, #1
 800cb78:	d10e      	bne.n	800cb98 <__gethex+0x3a4>
 800cb7a:	f047 0710 	orr.w	r7, r7, #16
 800cb7e:	e033      	b.n	800cbe8 <__gethex+0x3f4>
 800cb80:	f04f 0a01 	mov.w	sl, #1
 800cb84:	e7d0      	b.n	800cb28 <__gethex+0x334>
 800cb86:	2701      	movs	r7, #1
 800cb88:	e7e2      	b.n	800cb50 <__gethex+0x35c>
 800cb8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb8c:	f1c3 0301 	rsb	r3, r3, #1
 800cb90:	9315      	str	r3, [sp, #84]	; 0x54
 800cb92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d0f0      	beq.n	800cb7a <__gethex+0x386>
 800cb98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cb9c:	f104 0314 	add.w	r3, r4, #20
 800cba0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cba4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cba8:	f04f 0c00 	mov.w	ip, #0
 800cbac:	4618      	mov	r0, r3
 800cbae:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbb2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cbb6:	d01c      	beq.n	800cbf2 <__gethex+0x3fe>
 800cbb8:	3201      	adds	r2, #1
 800cbba:	6002      	str	r2, [r0, #0]
 800cbbc:	2f02      	cmp	r7, #2
 800cbbe:	f104 0314 	add.w	r3, r4, #20
 800cbc2:	d13f      	bne.n	800cc44 <__gethex+0x450>
 800cbc4:	f8d8 2000 	ldr.w	r2, [r8]
 800cbc8:	3a01      	subs	r2, #1
 800cbca:	42b2      	cmp	r2, r6
 800cbcc:	d10a      	bne.n	800cbe4 <__gethex+0x3f0>
 800cbce:	1171      	asrs	r1, r6, #5
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cbd6:	f006 061f 	and.w	r6, r6, #31
 800cbda:	fa02 f606 	lsl.w	r6, r2, r6
 800cbde:	421e      	tst	r6, r3
 800cbe0:	bf18      	it	ne
 800cbe2:	4617      	movne	r7, r2
 800cbe4:	f047 0720 	orr.w	r7, r7, #32
 800cbe8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbea:	601c      	str	r4, [r3, #0]
 800cbec:	9b04      	ldr	r3, [sp, #16]
 800cbee:	601d      	str	r5, [r3, #0]
 800cbf0:	e695      	b.n	800c91e <__gethex+0x12a>
 800cbf2:	4299      	cmp	r1, r3
 800cbf4:	f843 cc04 	str.w	ip, [r3, #-4]
 800cbf8:	d8d8      	bhi.n	800cbac <__gethex+0x3b8>
 800cbfa:	68a3      	ldr	r3, [r4, #8]
 800cbfc:	459b      	cmp	fp, r3
 800cbfe:	db19      	blt.n	800cc34 <__gethex+0x440>
 800cc00:	6861      	ldr	r1, [r4, #4]
 800cc02:	ee18 0a10 	vmov	r0, s16
 800cc06:	3101      	adds	r1, #1
 800cc08:	f000 fa8a 	bl	800d120 <_Balloc>
 800cc0c:	4681      	mov	r9, r0
 800cc0e:	b918      	cbnz	r0, 800cc18 <__gethex+0x424>
 800cc10:	4b1a      	ldr	r3, [pc, #104]	; (800cc7c <__gethex+0x488>)
 800cc12:	4602      	mov	r2, r0
 800cc14:	2184      	movs	r1, #132	; 0x84
 800cc16:	e6a8      	b.n	800c96a <__gethex+0x176>
 800cc18:	6922      	ldr	r2, [r4, #16]
 800cc1a:	3202      	adds	r2, #2
 800cc1c:	f104 010c 	add.w	r1, r4, #12
 800cc20:	0092      	lsls	r2, r2, #2
 800cc22:	300c      	adds	r0, #12
 800cc24:	f000 fa62 	bl	800d0ec <memcpy>
 800cc28:	4621      	mov	r1, r4
 800cc2a:	ee18 0a10 	vmov	r0, s16
 800cc2e:	f000 fab7 	bl	800d1a0 <_Bfree>
 800cc32:	464c      	mov	r4, r9
 800cc34:	6923      	ldr	r3, [r4, #16]
 800cc36:	1c5a      	adds	r2, r3, #1
 800cc38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cc3c:	6122      	str	r2, [r4, #16]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	615a      	str	r2, [r3, #20]
 800cc42:	e7bb      	b.n	800cbbc <__gethex+0x3c8>
 800cc44:	6922      	ldr	r2, [r4, #16]
 800cc46:	455a      	cmp	r2, fp
 800cc48:	dd0b      	ble.n	800cc62 <__gethex+0x46e>
 800cc4a:	2101      	movs	r1, #1
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f7ff fd6a 	bl	800c726 <rshift>
 800cc52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc56:	3501      	adds	r5, #1
 800cc58:	42ab      	cmp	r3, r5
 800cc5a:	f6ff aed0 	blt.w	800c9fe <__gethex+0x20a>
 800cc5e:	2701      	movs	r7, #1
 800cc60:	e7c0      	b.n	800cbe4 <__gethex+0x3f0>
 800cc62:	f016 061f 	ands.w	r6, r6, #31
 800cc66:	d0fa      	beq.n	800cc5e <__gethex+0x46a>
 800cc68:	4453      	add	r3, sl
 800cc6a:	f1c6 0620 	rsb	r6, r6, #32
 800cc6e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cc72:	f000 fb47 	bl	800d304 <__hi0bits>
 800cc76:	42b0      	cmp	r0, r6
 800cc78:	dbe7      	blt.n	800cc4a <__gethex+0x456>
 800cc7a:	e7f0      	b.n	800cc5e <__gethex+0x46a>
 800cc7c:	0800f126 	.word	0x0800f126

0800cc80 <L_shift>:
 800cc80:	f1c2 0208 	rsb	r2, r2, #8
 800cc84:	0092      	lsls	r2, r2, #2
 800cc86:	b570      	push	{r4, r5, r6, lr}
 800cc88:	f1c2 0620 	rsb	r6, r2, #32
 800cc8c:	6843      	ldr	r3, [r0, #4]
 800cc8e:	6804      	ldr	r4, [r0, #0]
 800cc90:	fa03 f506 	lsl.w	r5, r3, r6
 800cc94:	432c      	orrs	r4, r5
 800cc96:	40d3      	lsrs	r3, r2
 800cc98:	6004      	str	r4, [r0, #0]
 800cc9a:	f840 3f04 	str.w	r3, [r0, #4]!
 800cc9e:	4288      	cmp	r0, r1
 800cca0:	d3f4      	bcc.n	800cc8c <L_shift+0xc>
 800cca2:	bd70      	pop	{r4, r5, r6, pc}

0800cca4 <__match>:
 800cca4:	b530      	push	{r4, r5, lr}
 800cca6:	6803      	ldr	r3, [r0, #0]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccae:	b914      	cbnz	r4, 800ccb6 <__match+0x12>
 800ccb0:	6003      	str	r3, [r0, #0]
 800ccb2:	2001      	movs	r0, #1
 800ccb4:	bd30      	pop	{r4, r5, pc}
 800ccb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ccbe:	2d19      	cmp	r5, #25
 800ccc0:	bf98      	it	ls
 800ccc2:	3220      	addls	r2, #32
 800ccc4:	42a2      	cmp	r2, r4
 800ccc6:	d0f0      	beq.n	800ccaa <__match+0x6>
 800ccc8:	2000      	movs	r0, #0
 800ccca:	e7f3      	b.n	800ccb4 <__match+0x10>

0800cccc <__hexnan>:
 800cccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd0:	680b      	ldr	r3, [r1, #0]
 800ccd2:	115e      	asrs	r6, r3, #5
 800ccd4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ccd8:	f013 031f 	ands.w	r3, r3, #31
 800ccdc:	b087      	sub	sp, #28
 800ccde:	bf18      	it	ne
 800cce0:	3604      	addne	r6, #4
 800cce2:	2500      	movs	r5, #0
 800cce4:	1f37      	subs	r7, r6, #4
 800cce6:	4690      	mov	r8, r2
 800cce8:	6802      	ldr	r2, [r0, #0]
 800ccea:	9301      	str	r3, [sp, #4]
 800ccec:	4682      	mov	sl, r0
 800ccee:	f846 5c04 	str.w	r5, [r6, #-4]
 800ccf2:	46b9      	mov	r9, r7
 800ccf4:	463c      	mov	r4, r7
 800ccf6:	9502      	str	r5, [sp, #8]
 800ccf8:	46ab      	mov	fp, r5
 800ccfa:	7851      	ldrb	r1, [r2, #1]
 800ccfc:	1c53      	adds	r3, r2, #1
 800ccfe:	9303      	str	r3, [sp, #12]
 800cd00:	b341      	cbz	r1, 800cd54 <__hexnan+0x88>
 800cd02:	4608      	mov	r0, r1
 800cd04:	9205      	str	r2, [sp, #20]
 800cd06:	9104      	str	r1, [sp, #16]
 800cd08:	f7ff fd5f 	bl	800c7ca <__hexdig_fun>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d14f      	bne.n	800cdb0 <__hexnan+0xe4>
 800cd10:	9904      	ldr	r1, [sp, #16]
 800cd12:	9a05      	ldr	r2, [sp, #20]
 800cd14:	2920      	cmp	r1, #32
 800cd16:	d818      	bhi.n	800cd4a <__hexnan+0x7e>
 800cd18:	9b02      	ldr	r3, [sp, #8]
 800cd1a:	459b      	cmp	fp, r3
 800cd1c:	dd13      	ble.n	800cd46 <__hexnan+0x7a>
 800cd1e:	454c      	cmp	r4, r9
 800cd20:	d206      	bcs.n	800cd30 <__hexnan+0x64>
 800cd22:	2d07      	cmp	r5, #7
 800cd24:	dc04      	bgt.n	800cd30 <__hexnan+0x64>
 800cd26:	462a      	mov	r2, r5
 800cd28:	4649      	mov	r1, r9
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f7ff ffa8 	bl	800cc80 <L_shift>
 800cd30:	4544      	cmp	r4, r8
 800cd32:	d950      	bls.n	800cdd6 <__hexnan+0x10a>
 800cd34:	2300      	movs	r3, #0
 800cd36:	f1a4 0904 	sub.w	r9, r4, #4
 800cd3a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd3e:	f8cd b008 	str.w	fp, [sp, #8]
 800cd42:	464c      	mov	r4, r9
 800cd44:	461d      	mov	r5, r3
 800cd46:	9a03      	ldr	r2, [sp, #12]
 800cd48:	e7d7      	b.n	800ccfa <__hexnan+0x2e>
 800cd4a:	2929      	cmp	r1, #41	; 0x29
 800cd4c:	d156      	bne.n	800cdfc <__hexnan+0x130>
 800cd4e:	3202      	adds	r2, #2
 800cd50:	f8ca 2000 	str.w	r2, [sl]
 800cd54:	f1bb 0f00 	cmp.w	fp, #0
 800cd58:	d050      	beq.n	800cdfc <__hexnan+0x130>
 800cd5a:	454c      	cmp	r4, r9
 800cd5c:	d206      	bcs.n	800cd6c <__hexnan+0xa0>
 800cd5e:	2d07      	cmp	r5, #7
 800cd60:	dc04      	bgt.n	800cd6c <__hexnan+0xa0>
 800cd62:	462a      	mov	r2, r5
 800cd64:	4649      	mov	r1, r9
 800cd66:	4620      	mov	r0, r4
 800cd68:	f7ff ff8a 	bl	800cc80 <L_shift>
 800cd6c:	4544      	cmp	r4, r8
 800cd6e:	d934      	bls.n	800cdda <__hexnan+0x10e>
 800cd70:	f1a8 0204 	sub.w	r2, r8, #4
 800cd74:	4623      	mov	r3, r4
 800cd76:	f853 1b04 	ldr.w	r1, [r3], #4
 800cd7a:	f842 1f04 	str.w	r1, [r2, #4]!
 800cd7e:	429f      	cmp	r7, r3
 800cd80:	d2f9      	bcs.n	800cd76 <__hexnan+0xaa>
 800cd82:	1b3b      	subs	r3, r7, r4
 800cd84:	f023 0303 	bic.w	r3, r3, #3
 800cd88:	3304      	adds	r3, #4
 800cd8a:	3401      	adds	r4, #1
 800cd8c:	3e03      	subs	r6, #3
 800cd8e:	42b4      	cmp	r4, r6
 800cd90:	bf88      	it	hi
 800cd92:	2304      	movhi	r3, #4
 800cd94:	4443      	add	r3, r8
 800cd96:	2200      	movs	r2, #0
 800cd98:	f843 2b04 	str.w	r2, [r3], #4
 800cd9c:	429f      	cmp	r7, r3
 800cd9e:	d2fb      	bcs.n	800cd98 <__hexnan+0xcc>
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	b91b      	cbnz	r3, 800cdac <__hexnan+0xe0>
 800cda4:	4547      	cmp	r7, r8
 800cda6:	d127      	bne.n	800cdf8 <__hexnan+0x12c>
 800cda8:	2301      	movs	r3, #1
 800cdaa:	603b      	str	r3, [r7, #0]
 800cdac:	2005      	movs	r0, #5
 800cdae:	e026      	b.n	800cdfe <__hexnan+0x132>
 800cdb0:	3501      	adds	r5, #1
 800cdb2:	2d08      	cmp	r5, #8
 800cdb4:	f10b 0b01 	add.w	fp, fp, #1
 800cdb8:	dd06      	ble.n	800cdc8 <__hexnan+0xfc>
 800cdba:	4544      	cmp	r4, r8
 800cdbc:	d9c3      	bls.n	800cd46 <__hexnan+0x7a>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	f844 3c04 	str.w	r3, [r4, #-4]
 800cdc4:	2501      	movs	r5, #1
 800cdc6:	3c04      	subs	r4, #4
 800cdc8:	6822      	ldr	r2, [r4, #0]
 800cdca:	f000 000f 	and.w	r0, r0, #15
 800cdce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cdd2:	6022      	str	r2, [r4, #0]
 800cdd4:	e7b7      	b.n	800cd46 <__hexnan+0x7a>
 800cdd6:	2508      	movs	r5, #8
 800cdd8:	e7b5      	b.n	800cd46 <__hexnan+0x7a>
 800cdda:	9b01      	ldr	r3, [sp, #4]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d0df      	beq.n	800cda0 <__hexnan+0xd4>
 800cde0:	f04f 32ff 	mov.w	r2, #4294967295
 800cde4:	f1c3 0320 	rsb	r3, r3, #32
 800cde8:	fa22 f303 	lsr.w	r3, r2, r3
 800cdec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cdf0:	401a      	ands	r2, r3
 800cdf2:	f846 2c04 	str.w	r2, [r6, #-4]
 800cdf6:	e7d3      	b.n	800cda0 <__hexnan+0xd4>
 800cdf8:	3f04      	subs	r7, #4
 800cdfa:	e7d1      	b.n	800cda0 <__hexnan+0xd4>
 800cdfc:	2004      	movs	r0, #4
 800cdfe:	b007      	add	sp, #28
 800ce00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce04 <_findenv_r>:
 800ce04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce08:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800ce78 <_findenv_r+0x74>
 800ce0c:	4607      	mov	r7, r0
 800ce0e:	4689      	mov	r9, r1
 800ce10:	4616      	mov	r6, r2
 800ce12:	f001 fa5d 	bl	800e2d0 <__env_lock>
 800ce16:	f8da 4000 	ldr.w	r4, [sl]
 800ce1a:	b134      	cbz	r4, 800ce2a <_findenv_r+0x26>
 800ce1c:	464b      	mov	r3, r9
 800ce1e:	4698      	mov	r8, r3
 800ce20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce24:	b13a      	cbz	r2, 800ce36 <_findenv_r+0x32>
 800ce26:	2a3d      	cmp	r2, #61	; 0x3d
 800ce28:	d1f9      	bne.n	800ce1e <_findenv_r+0x1a>
 800ce2a:	4638      	mov	r0, r7
 800ce2c:	f001 fa56 	bl	800e2dc <__env_unlock>
 800ce30:	2000      	movs	r0, #0
 800ce32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce36:	eba8 0809 	sub.w	r8, r8, r9
 800ce3a:	46a3      	mov	fp, r4
 800ce3c:	f854 0b04 	ldr.w	r0, [r4], #4
 800ce40:	2800      	cmp	r0, #0
 800ce42:	d0f2      	beq.n	800ce2a <_findenv_r+0x26>
 800ce44:	4642      	mov	r2, r8
 800ce46:	4649      	mov	r1, r9
 800ce48:	f001 f977 	bl	800e13a <strncmp>
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	d1f4      	bne.n	800ce3a <_findenv_r+0x36>
 800ce50:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ce54:	eb03 0508 	add.w	r5, r3, r8
 800ce58:	f813 3008 	ldrb.w	r3, [r3, r8]
 800ce5c:	2b3d      	cmp	r3, #61	; 0x3d
 800ce5e:	d1ec      	bne.n	800ce3a <_findenv_r+0x36>
 800ce60:	f8da 3000 	ldr.w	r3, [sl]
 800ce64:	ebab 0303 	sub.w	r3, fp, r3
 800ce68:	109b      	asrs	r3, r3, #2
 800ce6a:	4638      	mov	r0, r7
 800ce6c:	6033      	str	r3, [r6, #0]
 800ce6e:	f001 fa35 	bl	800e2dc <__env_unlock>
 800ce72:	1c68      	adds	r0, r5, #1
 800ce74:	e7dd      	b.n	800ce32 <_findenv_r+0x2e>
 800ce76:	bf00      	nop
 800ce78:	20000004 	.word	0x20000004

0800ce7c <_getenv_r>:
 800ce7c:	b507      	push	{r0, r1, r2, lr}
 800ce7e:	aa01      	add	r2, sp, #4
 800ce80:	f7ff ffc0 	bl	800ce04 <_findenv_r>
 800ce84:	b003      	add	sp, #12
 800ce86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ce8c <__gettzinfo>:
 800ce8c:	4800      	ldr	r0, [pc, #0]	; (800ce90 <__gettzinfo+0x4>)
 800ce8e:	4770      	bx	lr
 800ce90:	20000080 	.word	0x20000080

0800ce94 <gmtime_r>:
 800ce94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce98:	e9d0 6700 	ldrd	r6, r7, [r0]
 800ce9c:	460c      	mov	r4, r1
 800ce9e:	4a4f      	ldr	r2, [pc, #316]	; (800cfdc <gmtime_r+0x148>)
 800cea0:	2300      	movs	r3, #0
 800cea2:	4630      	mov	r0, r6
 800cea4:	4639      	mov	r1, r7
 800cea6:	f7f3 fef9 	bl	8000c9c <__aeabi_ldivmod>
 800ceaa:	4639      	mov	r1, r7
 800ceac:	4605      	mov	r5, r0
 800ceae:	4a4b      	ldr	r2, [pc, #300]	; (800cfdc <gmtime_r+0x148>)
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	f7f3 fef2 	bl	8000c9c <__aeabi_ldivmod>
 800ceb8:	2a00      	cmp	r2, #0
 800ceba:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800cebe:	bfb7      	itett	lt
 800cec0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800cec4:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800cec8:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800cecc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800ced0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800ced4:	fbb2 f1f0 	udiv	r1, r2, r0
 800ced8:	fb00 2211 	mls	r2, r0, r1, r2
 800cedc:	203c      	movs	r0, #60	; 0x3c
 800cede:	60a1      	str	r1, [r4, #8]
 800cee0:	fbb2 f1f0 	udiv	r1, r2, r0
 800cee4:	fb00 2211 	mls	r2, r0, r1, r2
 800cee8:	6061      	str	r1, [r4, #4]
 800ceea:	6022      	str	r2, [r4, #0]
 800ceec:	2107      	movs	r1, #7
 800ceee:	1cda      	adds	r2, r3, #3
 800cef0:	fb92 f1f1 	sdiv	r1, r2, r1
 800cef4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cef8:	1a52      	subs	r2, r2, r1
 800cefa:	bf48      	it	mi
 800cefc:	3207      	addmi	r2, #7
 800cefe:	4d38      	ldr	r5, [pc, #224]	; (800cfe0 <gmtime_r+0x14c>)
 800cf00:	4838      	ldr	r0, [pc, #224]	; (800cfe4 <gmtime_r+0x150>)
 800cf02:	61a2      	str	r2, [r4, #24]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	bfb7      	itett	lt
 800cf08:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800cf0c:	fb93 f5f5 	sdivge	r5, r3, r5
 800cf10:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800cf14:	fb92 f5f5 	sdivlt	r5, r2, r5
 800cf18:	fb00 3005 	mla	r0, r0, r5, r3
 800cf1c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800cf20:	fbb0 f2f2 	udiv	r2, r0, r2
 800cf24:	4402      	add	r2, r0
 800cf26:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800cf2a:	fbb0 f1f3 	udiv	r1, r0, r3
 800cf2e:	1a52      	subs	r2, r2, r1
 800cf30:	f240 1c6d 	movw	ip, #365	; 0x16d
 800cf34:	492c      	ldr	r1, [pc, #176]	; (800cfe8 <gmtime_r+0x154>)
 800cf36:	fbb0 f1f1 	udiv	r1, r0, r1
 800cf3a:	2764      	movs	r7, #100	; 0x64
 800cf3c:	1a52      	subs	r2, r2, r1
 800cf3e:	fbb2 f1fc 	udiv	r1, r2, ip
 800cf42:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf46:	fbb1 f6f7 	udiv	r6, r1, r7
 800cf4a:	1af3      	subs	r3, r6, r3
 800cf4c:	4403      	add	r3, r0
 800cf4e:	fb0c 3311 	mls	r3, ip, r1, r3
 800cf52:	2299      	movs	r2, #153	; 0x99
 800cf54:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800cf58:	f10e 0e02 	add.w	lr, lr, #2
 800cf5c:	f103 0c01 	add.w	ip, r3, #1
 800cf60:	fbbe f0f2 	udiv	r0, lr, r2
 800cf64:	4342      	muls	r2, r0
 800cf66:	3202      	adds	r2, #2
 800cf68:	f04f 0805 	mov.w	r8, #5
 800cf6c:	fbb2 f2f8 	udiv	r2, r2, r8
 800cf70:	ebac 0c02 	sub.w	ip, ip, r2
 800cf74:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800cf78:	4596      	cmp	lr, r2
 800cf7a:	bf94      	ite	ls
 800cf7c:	2202      	movls	r2, #2
 800cf7e:	f06f 0209 	mvnhi.w	r2, #9
 800cf82:	4410      	add	r0, r2
 800cf84:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cf88:	fb02 1505 	mla	r5, r2, r5, r1
 800cf8c:	2801      	cmp	r0, #1
 800cf8e:	bf98      	it	ls
 800cf90:	3501      	addls	r5, #1
 800cf92:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800cf96:	d30d      	bcc.n	800cfb4 <gmtime_r+0x120>
 800cf98:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800cf9c:	61e3      	str	r3, [r4, #28]
 800cf9e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800cfa8:	f8c4 c00c 	str.w	ip, [r4, #12]
 800cfac:	6223      	str	r3, [r4, #32]
 800cfae:	4620      	mov	r0, r4
 800cfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfb4:	078a      	lsls	r2, r1, #30
 800cfb6:	d102      	bne.n	800cfbe <gmtime_r+0x12a>
 800cfb8:	fb07 1616 	mls	r6, r7, r6, r1
 800cfbc:	b95e      	cbnz	r6, 800cfd6 <gmtime_r+0x142>
 800cfbe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cfc2:	fbb1 f6f2 	udiv	r6, r1, r2
 800cfc6:	fb02 1216 	mls	r2, r2, r6, r1
 800cfca:	fab2 f282 	clz	r2, r2
 800cfce:	0952      	lsrs	r2, r2, #5
 800cfd0:	333b      	adds	r3, #59	; 0x3b
 800cfd2:	4413      	add	r3, r2
 800cfd4:	e7e2      	b.n	800cf9c <gmtime_r+0x108>
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	e7fa      	b.n	800cfd0 <gmtime_r+0x13c>
 800cfda:	bf00      	nop
 800cfdc:	00015180 	.word	0x00015180
 800cfe0:	00023ab1 	.word	0x00023ab1
 800cfe4:	fffdc54f 	.word	0xfffdc54f
 800cfe8:	00023ab0 	.word	0x00023ab0

0800cfec <_localeconv_r>:
 800cfec:	4800      	ldr	r0, [pc, #0]	; (800cff0 <_localeconv_r+0x4>)
 800cfee:	4770      	bx	lr
 800cff0:	200001cc 	.word	0x200001cc

0800cff4 <__retarget_lock_init_recursive>:
 800cff4:	4770      	bx	lr

0800cff6 <__retarget_lock_acquire>:
 800cff6:	4770      	bx	lr

0800cff8 <__retarget_lock_acquire_recursive>:
 800cff8:	4770      	bx	lr

0800cffa <__retarget_lock_release>:
 800cffa:	4770      	bx	lr

0800cffc <__retarget_lock_release_recursive>:
 800cffc:	4770      	bx	lr

0800cffe <__swhatbuf_r>:
 800cffe:	b570      	push	{r4, r5, r6, lr}
 800d000:	460e      	mov	r6, r1
 800d002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d006:	2900      	cmp	r1, #0
 800d008:	b096      	sub	sp, #88	; 0x58
 800d00a:	4614      	mov	r4, r2
 800d00c:	461d      	mov	r5, r3
 800d00e:	da08      	bge.n	800d022 <__swhatbuf_r+0x24>
 800d010:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d014:	2200      	movs	r2, #0
 800d016:	602a      	str	r2, [r5, #0]
 800d018:	061a      	lsls	r2, r3, #24
 800d01a:	d410      	bmi.n	800d03e <__swhatbuf_r+0x40>
 800d01c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d020:	e00e      	b.n	800d040 <__swhatbuf_r+0x42>
 800d022:	466a      	mov	r2, sp
 800d024:	f001 f960 	bl	800e2e8 <_fstat_r>
 800d028:	2800      	cmp	r0, #0
 800d02a:	dbf1      	blt.n	800d010 <__swhatbuf_r+0x12>
 800d02c:	9a01      	ldr	r2, [sp, #4]
 800d02e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d032:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d036:	425a      	negs	r2, r3
 800d038:	415a      	adcs	r2, r3
 800d03a:	602a      	str	r2, [r5, #0]
 800d03c:	e7ee      	b.n	800d01c <__swhatbuf_r+0x1e>
 800d03e:	2340      	movs	r3, #64	; 0x40
 800d040:	2000      	movs	r0, #0
 800d042:	6023      	str	r3, [r4, #0]
 800d044:	b016      	add	sp, #88	; 0x58
 800d046:	bd70      	pop	{r4, r5, r6, pc}

0800d048 <__smakebuf_r>:
 800d048:	898b      	ldrh	r3, [r1, #12]
 800d04a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d04c:	079d      	lsls	r5, r3, #30
 800d04e:	4606      	mov	r6, r0
 800d050:	460c      	mov	r4, r1
 800d052:	d507      	bpl.n	800d064 <__smakebuf_r+0x1c>
 800d054:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d058:	6023      	str	r3, [r4, #0]
 800d05a:	6123      	str	r3, [r4, #16]
 800d05c:	2301      	movs	r3, #1
 800d05e:	6163      	str	r3, [r4, #20]
 800d060:	b002      	add	sp, #8
 800d062:	bd70      	pop	{r4, r5, r6, pc}
 800d064:	ab01      	add	r3, sp, #4
 800d066:	466a      	mov	r2, sp
 800d068:	f7ff ffc9 	bl	800cffe <__swhatbuf_r>
 800d06c:	9900      	ldr	r1, [sp, #0]
 800d06e:	4605      	mov	r5, r0
 800d070:	4630      	mov	r0, r6
 800d072:	f7fc f93f 	bl	80092f4 <_malloc_r>
 800d076:	b948      	cbnz	r0, 800d08c <__smakebuf_r+0x44>
 800d078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d07c:	059a      	lsls	r2, r3, #22
 800d07e:	d4ef      	bmi.n	800d060 <__smakebuf_r+0x18>
 800d080:	f023 0303 	bic.w	r3, r3, #3
 800d084:	f043 0302 	orr.w	r3, r3, #2
 800d088:	81a3      	strh	r3, [r4, #12]
 800d08a:	e7e3      	b.n	800d054 <__smakebuf_r+0xc>
 800d08c:	4b0d      	ldr	r3, [pc, #52]	; (800d0c4 <__smakebuf_r+0x7c>)
 800d08e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d090:	89a3      	ldrh	r3, [r4, #12]
 800d092:	6020      	str	r0, [r4, #0]
 800d094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d098:	81a3      	strh	r3, [r4, #12]
 800d09a:	9b00      	ldr	r3, [sp, #0]
 800d09c:	6163      	str	r3, [r4, #20]
 800d09e:	9b01      	ldr	r3, [sp, #4]
 800d0a0:	6120      	str	r0, [r4, #16]
 800d0a2:	b15b      	cbz	r3, 800d0bc <__smakebuf_r+0x74>
 800d0a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f001 f92f 	bl	800e30c <_isatty_r>
 800d0ae:	b128      	cbz	r0, 800d0bc <__smakebuf_r+0x74>
 800d0b0:	89a3      	ldrh	r3, [r4, #12]
 800d0b2:	f023 0303 	bic.w	r3, r3, #3
 800d0b6:	f043 0301 	orr.w	r3, r3, #1
 800d0ba:	81a3      	strh	r3, [r4, #12]
 800d0bc:	89a0      	ldrh	r0, [r4, #12]
 800d0be:	4305      	orrs	r5, r0
 800d0c0:	81a5      	strh	r5, [r4, #12]
 800d0c2:	e7cd      	b.n	800d060 <__smakebuf_r+0x18>
 800d0c4:	0800c561 	.word	0x0800c561

0800d0c8 <__ascii_mbtowc>:
 800d0c8:	b082      	sub	sp, #8
 800d0ca:	b901      	cbnz	r1, 800d0ce <__ascii_mbtowc+0x6>
 800d0cc:	a901      	add	r1, sp, #4
 800d0ce:	b142      	cbz	r2, 800d0e2 <__ascii_mbtowc+0x1a>
 800d0d0:	b14b      	cbz	r3, 800d0e6 <__ascii_mbtowc+0x1e>
 800d0d2:	7813      	ldrb	r3, [r2, #0]
 800d0d4:	600b      	str	r3, [r1, #0]
 800d0d6:	7812      	ldrb	r2, [r2, #0]
 800d0d8:	1e10      	subs	r0, r2, #0
 800d0da:	bf18      	it	ne
 800d0dc:	2001      	movne	r0, #1
 800d0de:	b002      	add	sp, #8
 800d0e0:	4770      	bx	lr
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	e7fb      	b.n	800d0de <__ascii_mbtowc+0x16>
 800d0e6:	f06f 0001 	mvn.w	r0, #1
 800d0ea:	e7f8      	b.n	800d0de <__ascii_mbtowc+0x16>

0800d0ec <memcpy>:
 800d0ec:	440a      	add	r2, r1
 800d0ee:	4291      	cmp	r1, r2
 800d0f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0f4:	d100      	bne.n	800d0f8 <memcpy+0xc>
 800d0f6:	4770      	bx	lr
 800d0f8:	b510      	push	{r4, lr}
 800d0fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d102:	4291      	cmp	r1, r2
 800d104:	d1f9      	bne.n	800d0fa <memcpy+0xe>
 800d106:	bd10      	pop	{r4, pc}

0800d108 <__malloc_lock>:
 800d108:	4801      	ldr	r0, [pc, #4]	; (800d110 <__malloc_lock+0x8>)
 800d10a:	f7ff bf75 	b.w	800cff8 <__retarget_lock_acquire_recursive>
 800d10e:	bf00      	nop
 800d110:	200004b5 	.word	0x200004b5

0800d114 <__malloc_unlock>:
 800d114:	4801      	ldr	r0, [pc, #4]	; (800d11c <__malloc_unlock+0x8>)
 800d116:	f7ff bf71 	b.w	800cffc <__retarget_lock_release_recursive>
 800d11a:	bf00      	nop
 800d11c:	200004b5 	.word	0x200004b5

0800d120 <_Balloc>:
 800d120:	b570      	push	{r4, r5, r6, lr}
 800d122:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d124:	4604      	mov	r4, r0
 800d126:	460d      	mov	r5, r1
 800d128:	b976      	cbnz	r6, 800d148 <_Balloc+0x28>
 800d12a:	2010      	movs	r0, #16
 800d12c:	f7fb fdec 	bl	8008d08 <malloc>
 800d130:	4602      	mov	r2, r0
 800d132:	6260      	str	r0, [r4, #36]	; 0x24
 800d134:	b920      	cbnz	r0, 800d140 <_Balloc+0x20>
 800d136:	4b18      	ldr	r3, [pc, #96]	; (800d198 <_Balloc+0x78>)
 800d138:	4818      	ldr	r0, [pc, #96]	; (800d19c <_Balloc+0x7c>)
 800d13a:	2166      	movs	r1, #102	; 0x66
 800d13c:	f7fe fa7c 	bl	800b638 <__assert_func>
 800d140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d144:	6006      	str	r6, [r0, #0]
 800d146:	60c6      	str	r6, [r0, #12]
 800d148:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d14a:	68f3      	ldr	r3, [r6, #12]
 800d14c:	b183      	cbz	r3, 800d170 <_Balloc+0x50>
 800d14e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d156:	b9b8      	cbnz	r0, 800d188 <_Balloc+0x68>
 800d158:	2101      	movs	r1, #1
 800d15a:	fa01 f605 	lsl.w	r6, r1, r5
 800d15e:	1d72      	adds	r2, r6, #5
 800d160:	0092      	lsls	r2, r2, #2
 800d162:	4620      	mov	r0, r4
 800d164:	f000 fc9d 	bl	800daa2 <_calloc_r>
 800d168:	b160      	cbz	r0, 800d184 <_Balloc+0x64>
 800d16a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d16e:	e00e      	b.n	800d18e <_Balloc+0x6e>
 800d170:	2221      	movs	r2, #33	; 0x21
 800d172:	2104      	movs	r1, #4
 800d174:	4620      	mov	r0, r4
 800d176:	f000 fc94 	bl	800daa2 <_calloc_r>
 800d17a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d17c:	60f0      	str	r0, [r6, #12]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d1e4      	bne.n	800d14e <_Balloc+0x2e>
 800d184:	2000      	movs	r0, #0
 800d186:	bd70      	pop	{r4, r5, r6, pc}
 800d188:	6802      	ldr	r2, [r0, #0]
 800d18a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d18e:	2300      	movs	r3, #0
 800d190:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d194:	e7f7      	b.n	800d186 <_Balloc+0x66>
 800d196:	bf00      	nop
 800d198:	0800ecd0 	.word	0x0800ecd0
 800d19c:	0800f214 	.word	0x0800f214

0800d1a0 <_Bfree>:
 800d1a0:	b570      	push	{r4, r5, r6, lr}
 800d1a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d1a4:	4605      	mov	r5, r0
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	b976      	cbnz	r6, 800d1c8 <_Bfree+0x28>
 800d1aa:	2010      	movs	r0, #16
 800d1ac:	f7fb fdac 	bl	8008d08 <malloc>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	6268      	str	r0, [r5, #36]	; 0x24
 800d1b4:	b920      	cbnz	r0, 800d1c0 <_Bfree+0x20>
 800d1b6:	4b09      	ldr	r3, [pc, #36]	; (800d1dc <_Bfree+0x3c>)
 800d1b8:	4809      	ldr	r0, [pc, #36]	; (800d1e0 <_Bfree+0x40>)
 800d1ba:	218a      	movs	r1, #138	; 0x8a
 800d1bc:	f7fe fa3c 	bl	800b638 <__assert_func>
 800d1c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1c4:	6006      	str	r6, [r0, #0]
 800d1c6:	60c6      	str	r6, [r0, #12]
 800d1c8:	b13c      	cbz	r4, 800d1da <_Bfree+0x3a>
 800d1ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d1cc:	6862      	ldr	r2, [r4, #4]
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1d4:	6021      	str	r1, [r4, #0]
 800d1d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1da:	bd70      	pop	{r4, r5, r6, pc}
 800d1dc:	0800ecd0 	.word	0x0800ecd0
 800d1e0:	0800f214 	.word	0x0800f214

0800d1e4 <__multadd>:
 800d1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e8:	690d      	ldr	r5, [r1, #16]
 800d1ea:	4607      	mov	r7, r0
 800d1ec:	460c      	mov	r4, r1
 800d1ee:	461e      	mov	r6, r3
 800d1f0:	f101 0c14 	add.w	ip, r1, #20
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	f8dc 3000 	ldr.w	r3, [ip]
 800d1fa:	b299      	uxth	r1, r3
 800d1fc:	fb02 6101 	mla	r1, r2, r1, r6
 800d200:	0c1e      	lsrs	r6, r3, #16
 800d202:	0c0b      	lsrs	r3, r1, #16
 800d204:	fb02 3306 	mla	r3, r2, r6, r3
 800d208:	b289      	uxth	r1, r1
 800d20a:	3001      	adds	r0, #1
 800d20c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d210:	4285      	cmp	r5, r0
 800d212:	f84c 1b04 	str.w	r1, [ip], #4
 800d216:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d21a:	dcec      	bgt.n	800d1f6 <__multadd+0x12>
 800d21c:	b30e      	cbz	r6, 800d262 <__multadd+0x7e>
 800d21e:	68a3      	ldr	r3, [r4, #8]
 800d220:	42ab      	cmp	r3, r5
 800d222:	dc19      	bgt.n	800d258 <__multadd+0x74>
 800d224:	6861      	ldr	r1, [r4, #4]
 800d226:	4638      	mov	r0, r7
 800d228:	3101      	adds	r1, #1
 800d22a:	f7ff ff79 	bl	800d120 <_Balloc>
 800d22e:	4680      	mov	r8, r0
 800d230:	b928      	cbnz	r0, 800d23e <__multadd+0x5a>
 800d232:	4602      	mov	r2, r0
 800d234:	4b0c      	ldr	r3, [pc, #48]	; (800d268 <__multadd+0x84>)
 800d236:	480d      	ldr	r0, [pc, #52]	; (800d26c <__multadd+0x88>)
 800d238:	21b5      	movs	r1, #181	; 0xb5
 800d23a:	f7fe f9fd 	bl	800b638 <__assert_func>
 800d23e:	6922      	ldr	r2, [r4, #16]
 800d240:	3202      	adds	r2, #2
 800d242:	f104 010c 	add.w	r1, r4, #12
 800d246:	0092      	lsls	r2, r2, #2
 800d248:	300c      	adds	r0, #12
 800d24a:	f7ff ff4f 	bl	800d0ec <memcpy>
 800d24e:	4621      	mov	r1, r4
 800d250:	4638      	mov	r0, r7
 800d252:	f7ff ffa5 	bl	800d1a0 <_Bfree>
 800d256:	4644      	mov	r4, r8
 800d258:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d25c:	3501      	adds	r5, #1
 800d25e:	615e      	str	r6, [r3, #20]
 800d260:	6125      	str	r5, [r4, #16]
 800d262:	4620      	mov	r0, r4
 800d264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d268:	0800f126 	.word	0x0800f126
 800d26c:	0800f214 	.word	0x0800f214

0800d270 <__s2b>:
 800d270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d274:	460c      	mov	r4, r1
 800d276:	4615      	mov	r5, r2
 800d278:	461f      	mov	r7, r3
 800d27a:	2209      	movs	r2, #9
 800d27c:	3308      	adds	r3, #8
 800d27e:	4606      	mov	r6, r0
 800d280:	fb93 f3f2 	sdiv	r3, r3, r2
 800d284:	2100      	movs	r1, #0
 800d286:	2201      	movs	r2, #1
 800d288:	429a      	cmp	r2, r3
 800d28a:	db09      	blt.n	800d2a0 <__s2b+0x30>
 800d28c:	4630      	mov	r0, r6
 800d28e:	f7ff ff47 	bl	800d120 <_Balloc>
 800d292:	b940      	cbnz	r0, 800d2a6 <__s2b+0x36>
 800d294:	4602      	mov	r2, r0
 800d296:	4b19      	ldr	r3, [pc, #100]	; (800d2fc <__s2b+0x8c>)
 800d298:	4819      	ldr	r0, [pc, #100]	; (800d300 <__s2b+0x90>)
 800d29a:	21ce      	movs	r1, #206	; 0xce
 800d29c:	f7fe f9cc 	bl	800b638 <__assert_func>
 800d2a0:	0052      	lsls	r2, r2, #1
 800d2a2:	3101      	adds	r1, #1
 800d2a4:	e7f0      	b.n	800d288 <__s2b+0x18>
 800d2a6:	9b08      	ldr	r3, [sp, #32]
 800d2a8:	6143      	str	r3, [r0, #20]
 800d2aa:	2d09      	cmp	r5, #9
 800d2ac:	f04f 0301 	mov.w	r3, #1
 800d2b0:	6103      	str	r3, [r0, #16]
 800d2b2:	dd16      	ble.n	800d2e2 <__s2b+0x72>
 800d2b4:	f104 0909 	add.w	r9, r4, #9
 800d2b8:	46c8      	mov	r8, r9
 800d2ba:	442c      	add	r4, r5
 800d2bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d2c0:	4601      	mov	r1, r0
 800d2c2:	3b30      	subs	r3, #48	; 0x30
 800d2c4:	220a      	movs	r2, #10
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	f7ff ff8c 	bl	800d1e4 <__multadd>
 800d2cc:	45a0      	cmp	r8, r4
 800d2ce:	d1f5      	bne.n	800d2bc <__s2b+0x4c>
 800d2d0:	f1a5 0408 	sub.w	r4, r5, #8
 800d2d4:	444c      	add	r4, r9
 800d2d6:	1b2d      	subs	r5, r5, r4
 800d2d8:	1963      	adds	r3, r4, r5
 800d2da:	42bb      	cmp	r3, r7
 800d2dc:	db04      	blt.n	800d2e8 <__s2b+0x78>
 800d2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2e2:	340a      	adds	r4, #10
 800d2e4:	2509      	movs	r5, #9
 800d2e6:	e7f6      	b.n	800d2d6 <__s2b+0x66>
 800d2e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2ec:	4601      	mov	r1, r0
 800d2ee:	3b30      	subs	r3, #48	; 0x30
 800d2f0:	220a      	movs	r2, #10
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	f7ff ff76 	bl	800d1e4 <__multadd>
 800d2f8:	e7ee      	b.n	800d2d8 <__s2b+0x68>
 800d2fa:	bf00      	nop
 800d2fc:	0800f126 	.word	0x0800f126
 800d300:	0800f214 	.word	0x0800f214

0800d304 <__hi0bits>:
 800d304:	0c03      	lsrs	r3, r0, #16
 800d306:	041b      	lsls	r3, r3, #16
 800d308:	b9d3      	cbnz	r3, 800d340 <__hi0bits+0x3c>
 800d30a:	0400      	lsls	r0, r0, #16
 800d30c:	2310      	movs	r3, #16
 800d30e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d312:	bf04      	itt	eq
 800d314:	0200      	lsleq	r0, r0, #8
 800d316:	3308      	addeq	r3, #8
 800d318:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d31c:	bf04      	itt	eq
 800d31e:	0100      	lsleq	r0, r0, #4
 800d320:	3304      	addeq	r3, #4
 800d322:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d326:	bf04      	itt	eq
 800d328:	0080      	lsleq	r0, r0, #2
 800d32a:	3302      	addeq	r3, #2
 800d32c:	2800      	cmp	r0, #0
 800d32e:	db05      	blt.n	800d33c <__hi0bits+0x38>
 800d330:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d334:	f103 0301 	add.w	r3, r3, #1
 800d338:	bf08      	it	eq
 800d33a:	2320      	moveq	r3, #32
 800d33c:	4618      	mov	r0, r3
 800d33e:	4770      	bx	lr
 800d340:	2300      	movs	r3, #0
 800d342:	e7e4      	b.n	800d30e <__hi0bits+0xa>

0800d344 <__lo0bits>:
 800d344:	6803      	ldr	r3, [r0, #0]
 800d346:	f013 0207 	ands.w	r2, r3, #7
 800d34a:	4601      	mov	r1, r0
 800d34c:	d00b      	beq.n	800d366 <__lo0bits+0x22>
 800d34e:	07da      	lsls	r2, r3, #31
 800d350:	d423      	bmi.n	800d39a <__lo0bits+0x56>
 800d352:	0798      	lsls	r0, r3, #30
 800d354:	bf49      	itett	mi
 800d356:	085b      	lsrmi	r3, r3, #1
 800d358:	089b      	lsrpl	r3, r3, #2
 800d35a:	2001      	movmi	r0, #1
 800d35c:	600b      	strmi	r3, [r1, #0]
 800d35e:	bf5c      	itt	pl
 800d360:	600b      	strpl	r3, [r1, #0]
 800d362:	2002      	movpl	r0, #2
 800d364:	4770      	bx	lr
 800d366:	b298      	uxth	r0, r3
 800d368:	b9a8      	cbnz	r0, 800d396 <__lo0bits+0x52>
 800d36a:	0c1b      	lsrs	r3, r3, #16
 800d36c:	2010      	movs	r0, #16
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	b90a      	cbnz	r2, 800d376 <__lo0bits+0x32>
 800d372:	3008      	adds	r0, #8
 800d374:	0a1b      	lsrs	r3, r3, #8
 800d376:	071a      	lsls	r2, r3, #28
 800d378:	bf04      	itt	eq
 800d37a:	091b      	lsreq	r3, r3, #4
 800d37c:	3004      	addeq	r0, #4
 800d37e:	079a      	lsls	r2, r3, #30
 800d380:	bf04      	itt	eq
 800d382:	089b      	lsreq	r3, r3, #2
 800d384:	3002      	addeq	r0, #2
 800d386:	07da      	lsls	r2, r3, #31
 800d388:	d403      	bmi.n	800d392 <__lo0bits+0x4e>
 800d38a:	085b      	lsrs	r3, r3, #1
 800d38c:	f100 0001 	add.w	r0, r0, #1
 800d390:	d005      	beq.n	800d39e <__lo0bits+0x5a>
 800d392:	600b      	str	r3, [r1, #0]
 800d394:	4770      	bx	lr
 800d396:	4610      	mov	r0, r2
 800d398:	e7e9      	b.n	800d36e <__lo0bits+0x2a>
 800d39a:	2000      	movs	r0, #0
 800d39c:	4770      	bx	lr
 800d39e:	2020      	movs	r0, #32
 800d3a0:	4770      	bx	lr
	...

0800d3a4 <__i2b>:
 800d3a4:	b510      	push	{r4, lr}
 800d3a6:	460c      	mov	r4, r1
 800d3a8:	2101      	movs	r1, #1
 800d3aa:	f7ff feb9 	bl	800d120 <_Balloc>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	b928      	cbnz	r0, 800d3be <__i2b+0x1a>
 800d3b2:	4b05      	ldr	r3, [pc, #20]	; (800d3c8 <__i2b+0x24>)
 800d3b4:	4805      	ldr	r0, [pc, #20]	; (800d3cc <__i2b+0x28>)
 800d3b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d3ba:	f7fe f93d 	bl	800b638 <__assert_func>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	6144      	str	r4, [r0, #20]
 800d3c2:	6103      	str	r3, [r0, #16]
 800d3c4:	bd10      	pop	{r4, pc}
 800d3c6:	bf00      	nop
 800d3c8:	0800f126 	.word	0x0800f126
 800d3cc:	0800f214 	.word	0x0800f214

0800d3d0 <__multiply>:
 800d3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d4:	4691      	mov	r9, r2
 800d3d6:	690a      	ldr	r2, [r1, #16]
 800d3d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	bfb8      	it	lt
 800d3e0:	460b      	movlt	r3, r1
 800d3e2:	460c      	mov	r4, r1
 800d3e4:	bfbc      	itt	lt
 800d3e6:	464c      	movlt	r4, r9
 800d3e8:	4699      	movlt	r9, r3
 800d3ea:	6927      	ldr	r7, [r4, #16]
 800d3ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d3f0:	68a3      	ldr	r3, [r4, #8]
 800d3f2:	6861      	ldr	r1, [r4, #4]
 800d3f4:	eb07 060a 	add.w	r6, r7, sl
 800d3f8:	42b3      	cmp	r3, r6
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	bfb8      	it	lt
 800d3fe:	3101      	addlt	r1, #1
 800d400:	f7ff fe8e 	bl	800d120 <_Balloc>
 800d404:	b930      	cbnz	r0, 800d414 <__multiply+0x44>
 800d406:	4602      	mov	r2, r0
 800d408:	4b44      	ldr	r3, [pc, #272]	; (800d51c <__multiply+0x14c>)
 800d40a:	4845      	ldr	r0, [pc, #276]	; (800d520 <__multiply+0x150>)
 800d40c:	f240 115d 	movw	r1, #349	; 0x15d
 800d410:	f7fe f912 	bl	800b638 <__assert_func>
 800d414:	f100 0514 	add.w	r5, r0, #20
 800d418:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d41c:	462b      	mov	r3, r5
 800d41e:	2200      	movs	r2, #0
 800d420:	4543      	cmp	r3, r8
 800d422:	d321      	bcc.n	800d468 <__multiply+0x98>
 800d424:	f104 0314 	add.w	r3, r4, #20
 800d428:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d42c:	f109 0314 	add.w	r3, r9, #20
 800d430:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d434:	9202      	str	r2, [sp, #8]
 800d436:	1b3a      	subs	r2, r7, r4
 800d438:	3a15      	subs	r2, #21
 800d43a:	f022 0203 	bic.w	r2, r2, #3
 800d43e:	3204      	adds	r2, #4
 800d440:	f104 0115 	add.w	r1, r4, #21
 800d444:	428f      	cmp	r7, r1
 800d446:	bf38      	it	cc
 800d448:	2204      	movcc	r2, #4
 800d44a:	9201      	str	r2, [sp, #4]
 800d44c:	9a02      	ldr	r2, [sp, #8]
 800d44e:	9303      	str	r3, [sp, #12]
 800d450:	429a      	cmp	r2, r3
 800d452:	d80c      	bhi.n	800d46e <__multiply+0x9e>
 800d454:	2e00      	cmp	r6, #0
 800d456:	dd03      	ble.n	800d460 <__multiply+0x90>
 800d458:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d05a      	beq.n	800d516 <__multiply+0x146>
 800d460:	6106      	str	r6, [r0, #16]
 800d462:	b005      	add	sp, #20
 800d464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d468:	f843 2b04 	str.w	r2, [r3], #4
 800d46c:	e7d8      	b.n	800d420 <__multiply+0x50>
 800d46e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d472:	f1ba 0f00 	cmp.w	sl, #0
 800d476:	d024      	beq.n	800d4c2 <__multiply+0xf2>
 800d478:	f104 0e14 	add.w	lr, r4, #20
 800d47c:	46a9      	mov	r9, r5
 800d47e:	f04f 0c00 	mov.w	ip, #0
 800d482:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d486:	f8d9 1000 	ldr.w	r1, [r9]
 800d48a:	fa1f fb82 	uxth.w	fp, r2
 800d48e:	b289      	uxth	r1, r1
 800d490:	fb0a 110b 	mla	r1, sl, fp, r1
 800d494:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d498:	f8d9 2000 	ldr.w	r2, [r9]
 800d49c:	4461      	add	r1, ip
 800d49e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d4a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800d4a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d4aa:	b289      	uxth	r1, r1
 800d4ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d4b0:	4577      	cmp	r7, lr
 800d4b2:	f849 1b04 	str.w	r1, [r9], #4
 800d4b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d4ba:	d8e2      	bhi.n	800d482 <__multiply+0xb2>
 800d4bc:	9a01      	ldr	r2, [sp, #4]
 800d4be:	f845 c002 	str.w	ip, [r5, r2]
 800d4c2:	9a03      	ldr	r2, [sp, #12]
 800d4c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	f1b9 0f00 	cmp.w	r9, #0
 800d4ce:	d020      	beq.n	800d512 <__multiply+0x142>
 800d4d0:	6829      	ldr	r1, [r5, #0]
 800d4d2:	f104 0c14 	add.w	ip, r4, #20
 800d4d6:	46ae      	mov	lr, r5
 800d4d8:	f04f 0a00 	mov.w	sl, #0
 800d4dc:	f8bc b000 	ldrh.w	fp, [ip]
 800d4e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d4e4:	fb09 220b 	mla	r2, r9, fp, r2
 800d4e8:	4492      	add	sl, r2
 800d4ea:	b289      	uxth	r1, r1
 800d4ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d4f0:	f84e 1b04 	str.w	r1, [lr], #4
 800d4f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d4f8:	f8be 1000 	ldrh.w	r1, [lr]
 800d4fc:	0c12      	lsrs	r2, r2, #16
 800d4fe:	fb09 1102 	mla	r1, r9, r2, r1
 800d502:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d506:	4567      	cmp	r7, ip
 800d508:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d50c:	d8e6      	bhi.n	800d4dc <__multiply+0x10c>
 800d50e:	9a01      	ldr	r2, [sp, #4]
 800d510:	50a9      	str	r1, [r5, r2]
 800d512:	3504      	adds	r5, #4
 800d514:	e79a      	b.n	800d44c <__multiply+0x7c>
 800d516:	3e01      	subs	r6, #1
 800d518:	e79c      	b.n	800d454 <__multiply+0x84>
 800d51a:	bf00      	nop
 800d51c:	0800f126 	.word	0x0800f126
 800d520:	0800f214 	.word	0x0800f214

0800d524 <__pow5mult>:
 800d524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d528:	4615      	mov	r5, r2
 800d52a:	f012 0203 	ands.w	r2, r2, #3
 800d52e:	4606      	mov	r6, r0
 800d530:	460f      	mov	r7, r1
 800d532:	d007      	beq.n	800d544 <__pow5mult+0x20>
 800d534:	4c25      	ldr	r4, [pc, #148]	; (800d5cc <__pow5mult+0xa8>)
 800d536:	3a01      	subs	r2, #1
 800d538:	2300      	movs	r3, #0
 800d53a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d53e:	f7ff fe51 	bl	800d1e4 <__multadd>
 800d542:	4607      	mov	r7, r0
 800d544:	10ad      	asrs	r5, r5, #2
 800d546:	d03d      	beq.n	800d5c4 <__pow5mult+0xa0>
 800d548:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d54a:	b97c      	cbnz	r4, 800d56c <__pow5mult+0x48>
 800d54c:	2010      	movs	r0, #16
 800d54e:	f7fb fbdb 	bl	8008d08 <malloc>
 800d552:	4602      	mov	r2, r0
 800d554:	6270      	str	r0, [r6, #36]	; 0x24
 800d556:	b928      	cbnz	r0, 800d564 <__pow5mult+0x40>
 800d558:	4b1d      	ldr	r3, [pc, #116]	; (800d5d0 <__pow5mult+0xac>)
 800d55a:	481e      	ldr	r0, [pc, #120]	; (800d5d4 <__pow5mult+0xb0>)
 800d55c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d560:	f7fe f86a 	bl	800b638 <__assert_func>
 800d564:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d568:	6004      	str	r4, [r0, #0]
 800d56a:	60c4      	str	r4, [r0, #12]
 800d56c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d570:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d574:	b94c      	cbnz	r4, 800d58a <__pow5mult+0x66>
 800d576:	f240 2171 	movw	r1, #625	; 0x271
 800d57a:	4630      	mov	r0, r6
 800d57c:	f7ff ff12 	bl	800d3a4 <__i2b>
 800d580:	2300      	movs	r3, #0
 800d582:	f8c8 0008 	str.w	r0, [r8, #8]
 800d586:	4604      	mov	r4, r0
 800d588:	6003      	str	r3, [r0, #0]
 800d58a:	f04f 0900 	mov.w	r9, #0
 800d58e:	07eb      	lsls	r3, r5, #31
 800d590:	d50a      	bpl.n	800d5a8 <__pow5mult+0x84>
 800d592:	4639      	mov	r1, r7
 800d594:	4622      	mov	r2, r4
 800d596:	4630      	mov	r0, r6
 800d598:	f7ff ff1a 	bl	800d3d0 <__multiply>
 800d59c:	4639      	mov	r1, r7
 800d59e:	4680      	mov	r8, r0
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	f7ff fdfd 	bl	800d1a0 <_Bfree>
 800d5a6:	4647      	mov	r7, r8
 800d5a8:	106d      	asrs	r5, r5, #1
 800d5aa:	d00b      	beq.n	800d5c4 <__pow5mult+0xa0>
 800d5ac:	6820      	ldr	r0, [r4, #0]
 800d5ae:	b938      	cbnz	r0, 800d5c0 <__pow5mult+0x9c>
 800d5b0:	4622      	mov	r2, r4
 800d5b2:	4621      	mov	r1, r4
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	f7ff ff0b 	bl	800d3d0 <__multiply>
 800d5ba:	6020      	str	r0, [r4, #0]
 800d5bc:	f8c0 9000 	str.w	r9, [r0]
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	e7e4      	b.n	800d58e <__pow5mult+0x6a>
 800d5c4:	4638      	mov	r0, r7
 800d5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ca:	bf00      	nop
 800d5cc:	0800f360 	.word	0x0800f360
 800d5d0:	0800ecd0 	.word	0x0800ecd0
 800d5d4:	0800f214 	.word	0x0800f214

0800d5d8 <__lshift>:
 800d5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5dc:	460c      	mov	r4, r1
 800d5de:	6849      	ldr	r1, [r1, #4]
 800d5e0:	6923      	ldr	r3, [r4, #16]
 800d5e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5e6:	68a3      	ldr	r3, [r4, #8]
 800d5e8:	4607      	mov	r7, r0
 800d5ea:	4691      	mov	r9, r2
 800d5ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5f0:	f108 0601 	add.w	r6, r8, #1
 800d5f4:	42b3      	cmp	r3, r6
 800d5f6:	db0b      	blt.n	800d610 <__lshift+0x38>
 800d5f8:	4638      	mov	r0, r7
 800d5fa:	f7ff fd91 	bl	800d120 <_Balloc>
 800d5fe:	4605      	mov	r5, r0
 800d600:	b948      	cbnz	r0, 800d616 <__lshift+0x3e>
 800d602:	4602      	mov	r2, r0
 800d604:	4b2a      	ldr	r3, [pc, #168]	; (800d6b0 <__lshift+0xd8>)
 800d606:	482b      	ldr	r0, [pc, #172]	; (800d6b4 <__lshift+0xdc>)
 800d608:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d60c:	f7fe f814 	bl	800b638 <__assert_func>
 800d610:	3101      	adds	r1, #1
 800d612:	005b      	lsls	r3, r3, #1
 800d614:	e7ee      	b.n	800d5f4 <__lshift+0x1c>
 800d616:	2300      	movs	r3, #0
 800d618:	f100 0114 	add.w	r1, r0, #20
 800d61c:	f100 0210 	add.w	r2, r0, #16
 800d620:	4618      	mov	r0, r3
 800d622:	4553      	cmp	r3, sl
 800d624:	db37      	blt.n	800d696 <__lshift+0xbe>
 800d626:	6920      	ldr	r0, [r4, #16]
 800d628:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d62c:	f104 0314 	add.w	r3, r4, #20
 800d630:	f019 091f 	ands.w	r9, r9, #31
 800d634:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d638:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d63c:	d02f      	beq.n	800d69e <__lshift+0xc6>
 800d63e:	f1c9 0e20 	rsb	lr, r9, #32
 800d642:	468a      	mov	sl, r1
 800d644:	f04f 0c00 	mov.w	ip, #0
 800d648:	681a      	ldr	r2, [r3, #0]
 800d64a:	fa02 f209 	lsl.w	r2, r2, r9
 800d64e:	ea42 020c 	orr.w	r2, r2, ip
 800d652:	f84a 2b04 	str.w	r2, [sl], #4
 800d656:	f853 2b04 	ldr.w	r2, [r3], #4
 800d65a:	4298      	cmp	r0, r3
 800d65c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d660:	d8f2      	bhi.n	800d648 <__lshift+0x70>
 800d662:	1b03      	subs	r3, r0, r4
 800d664:	3b15      	subs	r3, #21
 800d666:	f023 0303 	bic.w	r3, r3, #3
 800d66a:	3304      	adds	r3, #4
 800d66c:	f104 0215 	add.w	r2, r4, #21
 800d670:	4290      	cmp	r0, r2
 800d672:	bf38      	it	cc
 800d674:	2304      	movcc	r3, #4
 800d676:	f841 c003 	str.w	ip, [r1, r3]
 800d67a:	f1bc 0f00 	cmp.w	ip, #0
 800d67e:	d001      	beq.n	800d684 <__lshift+0xac>
 800d680:	f108 0602 	add.w	r6, r8, #2
 800d684:	3e01      	subs	r6, #1
 800d686:	4638      	mov	r0, r7
 800d688:	612e      	str	r6, [r5, #16]
 800d68a:	4621      	mov	r1, r4
 800d68c:	f7ff fd88 	bl	800d1a0 <_Bfree>
 800d690:	4628      	mov	r0, r5
 800d692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d696:	f842 0f04 	str.w	r0, [r2, #4]!
 800d69a:	3301      	adds	r3, #1
 800d69c:	e7c1      	b.n	800d622 <__lshift+0x4a>
 800d69e:	3904      	subs	r1, #4
 800d6a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d6a8:	4298      	cmp	r0, r3
 800d6aa:	d8f9      	bhi.n	800d6a0 <__lshift+0xc8>
 800d6ac:	e7ea      	b.n	800d684 <__lshift+0xac>
 800d6ae:	bf00      	nop
 800d6b0:	0800f126 	.word	0x0800f126
 800d6b4:	0800f214 	.word	0x0800f214

0800d6b8 <__mcmp>:
 800d6b8:	b530      	push	{r4, r5, lr}
 800d6ba:	6902      	ldr	r2, [r0, #16]
 800d6bc:	690c      	ldr	r4, [r1, #16]
 800d6be:	1b12      	subs	r2, r2, r4
 800d6c0:	d10e      	bne.n	800d6e0 <__mcmp+0x28>
 800d6c2:	f100 0314 	add.w	r3, r0, #20
 800d6c6:	3114      	adds	r1, #20
 800d6c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d6cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d6d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d6d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d6d8:	42a5      	cmp	r5, r4
 800d6da:	d003      	beq.n	800d6e4 <__mcmp+0x2c>
 800d6dc:	d305      	bcc.n	800d6ea <__mcmp+0x32>
 800d6de:	2201      	movs	r2, #1
 800d6e0:	4610      	mov	r0, r2
 800d6e2:	bd30      	pop	{r4, r5, pc}
 800d6e4:	4283      	cmp	r3, r0
 800d6e6:	d3f3      	bcc.n	800d6d0 <__mcmp+0x18>
 800d6e8:	e7fa      	b.n	800d6e0 <__mcmp+0x28>
 800d6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ee:	e7f7      	b.n	800d6e0 <__mcmp+0x28>

0800d6f0 <__mdiff>:
 800d6f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f4:	460c      	mov	r4, r1
 800d6f6:	4606      	mov	r6, r0
 800d6f8:	4611      	mov	r1, r2
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	4690      	mov	r8, r2
 800d6fe:	f7ff ffdb 	bl	800d6b8 <__mcmp>
 800d702:	1e05      	subs	r5, r0, #0
 800d704:	d110      	bne.n	800d728 <__mdiff+0x38>
 800d706:	4629      	mov	r1, r5
 800d708:	4630      	mov	r0, r6
 800d70a:	f7ff fd09 	bl	800d120 <_Balloc>
 800d70e:	b930      	cbnz	r0, 800d71e <__mdiff+0x2e>
 800d710:	4b3a      	ldr	r3, [pc, #232]	; (800d7fc <__mdiff+0x10c>)
 800d712:	4602      	mov	r2, r0
 800d714:	f240 2132 	movw	r1, #562	; 0x232
 800d718:	4839      	ldr	r0, [pc, #228]	; (800d800 <__mdiff+0x110>)
 800d71a:	f7fd ff8d 	bl	800b638 <__assert_func>
 800d71e:	2301      	movs	r3, #1
 800d720:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d728:	bfa4      	itt	ge
 800d72a:	4643      	movge	r3, r8
 800d72c:	46a0      	movge	r8, r4
 800d72e:	4630      	mov	r0, r6
 800d730:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d734:	bfa6      	itte	ge
 800d736:	461c      	movge	r4, r3
 800d738:	2500      	movge	r5, #0
 800d73a:	2501      	movlt	r5, #1
 800d73c:	f7ff fcf0 	bl	800d120 <_Balloc>
 800d740:	b920      	cbnz	r0, 800d74c <__mdiff+0x5c>
 800d742:	4b2e      	ldr	r3, [pc, #184]	; (800d7fc <__mdiff+0x10c>)
 800d744:	4602      	mov	r2, r0
 800d746:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d74a:	e7e5      	b.n	800d718 <__mdiff+0x28>
 800d74c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d750:	6926      	ldr	r6, [r4, #16]
 800d752:	60c5      	str	r5, [r0, #12]
 800d754:	f104 0914 	add.w	r9, r4, #20
 800d758:	f108 0514 	add.w	r5, r8, #20
 800d75c:	f100 0e14 	add.w	lr, r0, #20
 800d760:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d764:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d768:	f108 0210 	add.w	r2, r8, #16
 800d76c:	46f2      	mov	sl, lr
 800d76e:	2100      	movs	r1, #0
 800d770:	f859 3b04 	ldr.w	r3, [r9], #4
 800d774:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d778:	fa1f f883 	uxth.w	r8, r3
 800d77c:	fa11 f18b 	uxtah	r1, r1, fp
 800d780:	0c1b      	lsrs	r3, r3, #16
 800d782:	eba1 0808 	sub.w	r8, r1, r8
 800d786:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d78a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d78e:	fa1f f888 	uxth.w	r8, r8
 800d792:	1419      	asrs	r1, r3, #16
 800d794:	454e      	cmp	r6, r9
 800d796:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d79a:	f84a 3b04 	str.w	r3, [sl], #4
 800d79e:	d8e7      	bhi.n	800d770 <__mdiff+0x80>
 800d7a0:	1b33      	subs	r3, r6, r4
 800d7a2:	3b15      	subs	r3, #21
 800d7a4:	f023 0303 	bic.w	r3, r3, #3
 800d7a8:	3304      	adds	r3, #4
 800d7aa:	3415      	adds	r4, #21
 800d7ac:	42a6      	cmp	r6, r4
 800d7ae:	bf38      	it	cc
 800d7b0:	2304      	movcc	r3, #4
 800d7b2:	441d      	add	r5, r3
 800d7b4:	4473      	add	r3, lr
 800d7b6:	469e      	mov	lr, r3
 800d7b8:	462e      	mov	r6, r5
 800d7ba:	4566      	cmp	r6, ip
 800d7bc:	d30e      	bcc.n	800d7dc <__mdiff+0xec>
 800d7be:	f10c 0203 	add.w	r2, ip, #3
 800d7c2:	1b52      	subs	r2, r2, r5
 800d7c4:	f022 0203 	bic.w	r2, r2, #3
 800d7c8:	3d03      	subs	r5, #3
 800d7ca:	45ac      	cmp	ip, r5
 800d7cc:	bf38      	it	cc
 800d7ce:	2200      	movcc	r2, #0
 800d7d0:	441a      	add	r2, r3
 800d7d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d7d6:	b17b      	cbz	r3, 800d7f8 <__mdiff+0x108>
 800d7d8:	6107      	str	r7, [r0, #16]
 800d7da:	e7a3      	b.n	800d724 <__mdiff+0x34>
 800d7dc:	f856 8b04 	ldr.w	r8, [r6], #4
 800d7e0:	fa11 f288 	uxtah	r2, r1, r8
 800d7e4:	1414      	asrs	r4, r2, #16
 800d7e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d7ea:	b292      	uxth	r2, r2
 800d7ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d7f0:	f84e 2b04 	str.w	r2, [lr], #4
 800d7f4:	1421      	asrs	r1, r4, #16
 800d7f6:	e7e0      	b.n	800d7ba <__mdiff+0xca>
 800d7f8:	3f01      	subs	r7, #1
 800d7fa:	e7ea      	b.n	800d7d2 <__mdiff+0xe2>
 800d7fc:	0800f126 	.word	0x0800f126
 800d800:	0800f214 	.word	0x0800f214

0800d804 <__ulp>:
 800d804:	b082      	sub	sp, #8
 800d806:	ed8d 0b00 	vstr	d0, [sp]
 800d80a:	9b01      	ldr	r3, [sp, #4]
 800d80c:	4912      	ldr	r1, [pc, #72]	; (800d858 <__ulp+0x54>)
 800d80e:	4019      	ands	r1, r3
 800d810:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d814:	2900      	cmp	r1, #0
 800d816:	dd05      	ble.n	800d824 <__ulp+0x20>
 800d818:	2200      	movs	r2, #0
 800d81a:	460b      	mov	r3, r1
 800d81c:	ec43 2b10 	vmov	d0, r2, r3
 800d820:	b002      	add	sp, #8
 800d822:	4770      	bx	lr
 800d824:	4249      	negs	r1, r1
 800d826:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d82a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d82e:	f04f 0200 	mov.w	r2, #0
 800d832:	f04f 0300 	mov.w	r3, #0
 800d836:	da04      	bge.n	800d842 <__ulp+0x3e>
 800d838:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d83c:	fa41 f300 	asr.w	r3, r1, r0
 800d840:	e7ec      	b.n	800d81c <__ulp+0x18>
 800d842:	f1a0 0114 	sub.w	r1, r0, #20
 800d846:	291e      	cmp	r1, #30
 800d848:	bfda      	itte	le
 800d84a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d84e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d852:	2101      	movgt	r1, #1
 800d854:	460a      	mov	r2, r1
 800d856:	e7e1      	b.n	800d81c <__ulp+0x18>
 800d858:	7ff00000 	.word	0x7ff00000

0800d85c <__b2d>:
 800d85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85e:	6905      	ldr	r5, [r0, #16]
 800d860:	f100 0714 	add.w	r7, r0, #20
 800d864:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d868:	1f2e      	subs	r6, r5, #4
 800d86a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d86e:	4620      	mov	r0, r4
 800d870:	f7ff fd48 	bl	800d304 <__hi0bits>
 800d874:	f1c0 0320 	rsb	r3, r0, #32
 800d878:	280a      	cmp	r0, #10
 800d87a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d8f8 <__b2d+0x9c>
 800d87e:	600b      	str	r3, [r1, #0]
 800d880:	dc14      	bgt.n	800d8ac <__b2d+0x50>
 800d882:	f1c0 0e0b 	rsb	lr, r0, #11
 800d886:	fa24 f10e 	lsr.w	r1, r4, lr
 800d88a:	42b7      	cmp	r7, r6
 800d88c:	ea41 030c 	orr.w	r3, r1, ip
 800d890:	bf34      	ite	cc
 800d892:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d896:	2100      	movcs	r1, #0
 800d898:	3015      	adds	r0, #21
 800d89a:	fa04 f000 	lsl.w	r0, r4, r0
 800d89e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d8a2:	ea40 0201 	orr.w	r2, r0, r1
 800d8a6:	ec43 2b10 	vmov	d0, r2, r3
 800d8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8ac:	42b7      	cmp	r7, r6
 800d8ae:	bf3a      	itte	cc
 800d8b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d8b4:	f1a5 0608 	subcc.w	r6, r5, #8
 800d8b8:	2100      	movcs	r1, #0
 800d8ba:	380b      	subs	r0, #11
 800d8bc:	d017      	beq.n	800d8ee <__b2d+0x92>
 800d8be:	f1c0 0c20 	rsb	ip, r0, #32
 800d8c2:	fa04 f500 	lsl.w	r5, r4, r0
 800d8c6:	42be      	cmp	r6, r7
 800d8c8:	fa21 f40c 	lsr.w	r4, r1, ip
 800d8cc:	ea45 0504 	orr.w	r5, r5, r4
 800d8d0:	bf8c      	ite	hi
 800d8d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d8d6:	2400      	movls	r4, #0
 800d8d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d8dc:	fa01 f000 	lsl.w	r0, r1, r0
 800d8e0:	fa24 f40c 	lsr.w	r4, r4, ip
 800d8e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d8e8:	ea40 0204 	orr.w	r2, r0, r4
 800d8ec:	e7db      	b.n	800d8a6 <__b2d+0x4a>
 800d8ee:	ea44 030c 	orr.w	r3, r4, ip
 800d8f2:	460a      	mov	r2, r1
 800d8f4:	e7d7      	b.n	800d8a6 <__b2d+0x4a>
 800d8f6:	bf00      	nop
 800d8f8:	3ff00000 	.word	0x3ff00000

0800d8fc <__d2b>:
 800d8fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d900:	4689      	mov	r9, r1
 800d902:	2101      	movs	r1, #1
 800d904:	ec57 6b10 	vmov	r6, r7, d0
 800d908:	4690      	mov	r8, r2
 800d90a:	f7ff fc09 	bl	800d120 <_Balloc>
 800d90e:	4604      	mov	r4, r0
 800d910:	b930      	cbnz	r0, 800d920 <__d2b+0x24>
 800d912:	4602      	mov	r2, r0
 800d914:	4b25      	ldr	r3, [pc, #148]	; (800d9ac <__d2b+0xb0>)
 800d916:	4826      	ldr	r0, [pc, #152]	; (800d9b0 <__d2b+0xb4>)
 800d918:	f240 310a 	movw	r1, #778	; 0x30a
 800d91c:	f7fd fe8c 	bl	800b638 <__assert_func>
 800d920:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d924:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d928:	bb35      	cbnz	r5, 800d978 <__d2b+0x7c>
 800d92a:	2e00      	cmp	r6, #0
 800d92c:	9301      	str	r3, [sp, #4]
 800d92e:	d028      	beq.n	800d982 <__d2b+0x86>
 800d930:	4668      	mov	r0, sp
 800d932:	9600      	str	r6, [sp, #0]
 800d934:	f7ff fd06 	bl	800d344 <__lo0bits>
 800d938:	9900      	ldr	r1, [sp, #0]
 800d93a:	b300      	cbz	r0, 800d97e <__d2b+0x82>
 800d93c:	9a01      	ldr	r2, [sp, #4]
 800d93e:	f1c0 0320 	rsb	r3, r0, #32
 800d942:	fa02 f303 	lsl.w	r3, r2, r3
 800d946:	430b      	orrs	r3, r1
 800d948:	40c2      	lsrs	r2, r0
 800d94a:	6163      	str	r3, [r4, #20]
 800d94c:	9201      	str	r2, [sp, #4]
 800d94e:	9b01      	ldr	r3, [sp, #4]
 800d950:	61a3      	str	r3, [r4, #24]
 800d952:	2b00      	cmp	r3, #0
 800d954:	bf14      	ite	ne
 800d956:	2202      	movne	r2, #2
 800d958:	2201      	moveq	r2, #1
 800d95a:	6122      	str	r2, [r4, #16]
 800d95c:	b1d5      	cbz	r5, 800d994 <__d2b+0x98>
 800d95e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d962:	4405      	add	r5, r0
 800d964:	f8c9 5000 	str.w	r5, [r9]
 800d968:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d96c:	f8c8 0000 	str.w	r0, [r8]
 800d970:	4620      	mov	r0, r4
 800d972:	b003      	add	sp, #12
 800d974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d978:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d97c:	e7d5      	b.n	800d92a <__d2b+0x2e>
 800d97e:	6161      	str	r1, [r4, #20]
 800d980:	e7e5      	b.n	800d94e <__d2b+0x52>
 800d982:	a801      	add	r0, sp, #4
 800d984:	f7ff fcde 	bl	800d344 <__lo0bits>
 800d988:	9b01      	ldr	r3, [sp, #4]
 800d98a:	6163      	str	r3, [r4, #20]
 800d98c:	2201      	movs	r2, #1
 800d98e:	6122      	str	r2, [r4, #16]
 800d990:	3020      	adds	r0, #32
 800d992:	e7e3      	b.n	800d95c <__d2b+0x60>
 800d994:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d998:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d99c:	f8c9 0000 	str.w	r0, [r9]
 800d9a0:	6918      	ldr	r0, [r3, #16]
 800d9a2:	f7ff fcaf 	bl	800d304 <__hi0bits>
 800d9a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9aa:	e7df      	b.n	800d96c <__d2b+0x70>
 800d9ac:	0800f126 	.word	0x0800f126
 800d9b0:	0800f214 	.word	0x0800f214

0800d9b4 <__ratio>:
 800d9b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b8:	4688      	mov	r8, r1
 800d9ba:	4669      	mov	r1, sp
 800d9bc:	4681      	mov	r9, r0
 800d9be:	f7ff ff4d 	bl	800d85c <__b2d>
 800d9c2:	a901      	add	r1, sp, #4
 800d9c4:	4640      	mov	r0, r8
 800d9c6:	ec55 4b10 	vmov	r4, r5, d0
 800d9ca:	f7ff ff47 	bl	800d85c <__b2d>
 800d9ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d9d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d9d6:	eba3 0c02 	sub.w	ip, r3, r2
 800d9da:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d9de:	1a9b      	subs	r3, r3, r2
 800d9e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d9e4:	ec51 0b10 	vmov	r0, r1, d0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	bfd6      	itet	le
 800d9ec:	460a      	movle	r2, r1
 800d9ee:	462a      	movgt	r2, r5
 800d9f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d9f4:	468b      	mov	fp, r1
 800d9f6:	462f      	mov	r7, r5
 800d9f8:	bfd4      	ite	le
 800d9fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d9fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800da02:	4620      	mov	r0, r4
 800da04:	ee10 2a10 	vmov	r2, s0
 800da08:	465b      	mov	r3, fp
 800da0a:	4639      	mov	r1, r7
 800da0c:	f7f2 ff28 	bl	8000860 <__aeabi_ddiv>
 800da10:	ec41 0b10 	vmov	d0, r0, r1
 800da14:	b003      	add	sp, #12
 800da16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da1a <__copybits>:
 800da1a:	3901      	subs	r1, #1
 800da1c:	b570      	push	{r4, r5, r6, lr}
 800da1e:	1149      	asrs	r1, r1, #5
 800da20:	6914      	ldr	r4, [r2, #16]
 800da22:	3101      	adds	r1, #1
 800da24:	f102 0314 	add.w	r3, r2, #20
 800da28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800da2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da30:	1f05      	subs	r5, r0, #4
 800da32:	42a3      	cmp	r3, r4
 800da34:	d30c      	bcc.n	800da50 <__copybits+0x36>
 800da36:	1aa3      	subs	r3, r4, r2
 800da38:	3b11      	subs	r3, #17
 800da3a:	f023 0303 	bic.w	r3, r3, #3
 800da3e:	3211      	adds	r2, #17
 800da40:	42a2      	cmp	r2, r4
 800da42:	bf88      	it	hi
 800da44:	2300      	movhi	r3, #0
 800da46:	4418      	add	r0, r3
 800da48:	2300      	movs	r3, #0
 800da4a:	4288      	cmp	r0, r1
 800da4c:	d305      	bcc.n	800da5a <__copybits+0x40>
 800da4e:	bd70      	pop	{r4, r5, r6, pc}
 800da50:	f853 6b04 	ldr.w	r6, [r3], #4
 800da54:	f845 6f04 	str.w	r6, [r5, #4]!
 800da58:	e7eb      	b.n	800da32 <__copybits+0x18>
 800da5a:	f840 3b04 	str.w	r3, [r0], #4
 800da5e:	e7f4      	b.n	800da4a <__copybits+0x30>

0800da60 <__any_on>:
 800da60:	f100 0214 	add.w	r2, r0, #20
 800da64:	6900      	ldr	r0, [r0, #16]
 800da66:	114b      	asrs	r3, r1, #5
 800da68:	4298      	cmp	r0, r3
 800da6a:	b510      	push	{r4, lr}
 800da6c:	db11      	blt.n	800da92 <__any_on+0x32>
 800da6e:	dd0a      	ble.n	800da86 <__any_on+0x26>
 800da70:	f011 011f 	ands.w	r1, r1, #31
 800da74:	d007      	beq.n	800da86 <__any_on+0x26>
 800da76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800da7a:	fa24 f001 	lsr.w	r0, r4, r1
 800da7e:	fa00 f101 	lsl.w	r1, r0, r1
 800da82:	428c      	cmp	r4, r1
 800da84:	d10b      	bne.n	800da9e <__any_on+0x3e>
 800da86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d803      	bhi.n	800da96 <__any_on+0x36>
 800da8e:	2000      	movs	r0, #0
 800da90:	bd10      	pop	{r4, pc}
 800da92:	4603      	mov	r3, r0
 800da94:	e7f7      	b.n	800da86 <__any_on+0x26>
 800da96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da9a:	2900      	cmp	r1, #0
 800da9c:	d0f5      	beq.n	800da8a <__any_on+0x2a>
 800da9e:	2001      	movs	r0, #1
 800daa0:	e7f6      	b.n	800da90 <__any_on+0x30>

0800daa2 <_calloc_r>:
 800daa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800daa4:	fba1 2402 	umull	r2, r4, r1, r2
 800daa8:	b94c      	cbnz	r4, 800dabe <_calloc_r+0x1c>
 800daaa:	4611      	mov	r1, r2
 800daac:	9201      	str	r2, [sp, #4]
 800daae:	f7fb fc21 	bl	80092f4 <_malloc_r>
 800dab2:	9a01      	ldr	r2, [sp, #4]
 800dab4:	4605      	mov	r5, r0
 800dab6:	b930      	cbnz	r0, 800dac6 <_calloc_r+0x24>
 800dab8:	4628      	mov	r0, r5
 800daba:	b003      	add	sp, #12
 800dabc:	bd30      	pop	{r4, r5, pc}
 800dabe:	220c      	movs	r2, #12
 800dac0:	6002      	str	r2, [r0, #0]
 800dac2:	2500      	movs	r5, #0
 800dac4:	e7f8      	b.n	800dab8 <_calloc_r+0x16>
 800dac6:	4621      	mov	r1, r4
 800dac8:	f7fb f92e 	bl	8008d28 <memset>
 800dacc:	e7f4      	b.n	800dab8 <_calloc_r+0x16>

0800dace <__ssputs_r>:
 800dace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dad2:	688e      	ldr	r6, [r1, #8]
 800dad4:	429e      	cmp	r6, r3
 800dad6:	4682      	mov	sl, r0
 800dad8:	460c      	mov	r4, r1
 800dada:	4690      	mov	r8, r2
 800dadc:	461f      	mov	r7, r3
 800dade:	d838      	bhi.n	800db52 <__ssputs_r+0x84>
 800dae0:	898a      	ldrh	r2, [r1, #12]
 800dae2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dae6:	d032      	beq.n	800db4e <__ssputs_r+0x80>
 800dae8:	6825      	ldr	r5, [r4, #0]
 800daea:	6909      	ldr	r1, [r1, #16]
 800daec:	eba5 0901 	sub.w	r9, r5, r1
 800daf0:	6965      	ldr	r5, [r4, #20]
 800daf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800daf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dafa:	3301      	adds	r3, #1
 800dafc:	444b      	add	r3, r9
 800dafe:	106d      	asrs	r5, r5, #1
 800db00:	429d      	cmp	r5, r3
 800db02:	bf38      	it	cc
 800db04:	461d      	movcc	r5, r3
 800db06:	0553      	lsls	r3, r2, #21
 800db08:	d531      	bpl.n	800db6e <__ssputs_r+0xa0>
 800db0a:	4629      	mov	r1, r5
 800db0c:	f7fb fbf2 	bl	80092f4 <_malloc_r>
 800db10:	4606      	mov	r6, r0
 800db12:	b950      	cbnz	r0, 800db2a <__ssputs_r+0x5c>
 800db14:	230c      	movs	r3, #12
 800db16:	f8ca 3000 	str.w	r3, [sl]
 800db1a:	89a3      	ldrh	r3, [r4, #12]
 800db1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db20:	81a3      	strh	r3, [r4, #12]
 800db22:	f04f 30ff 	mov.w	r0, #4294967295
 800db26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db2a:	6921      	ldr	r1, [r4, #16]
 800db2c:	464a      	mov	r2, r9
 800db2e:	f7ff fadd 	bl	800d0ec <memcpy>
 800db32:	89a3      	ldrh	r3, [r4, #12]
 800db34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db3c:	81a3      	strh	r3, [r4, #12]
 800db3e:	6126      	str	r6, [r4, #16]
 800db40:	6165      	str	r5, [r4, #20]
 800db42:	444e      	add	r6, r9
 800db44:	eba5 0509 	sub.w	r5, r5, r9
 800db48:	6026      	str	r6, [r4, #0]
 800db4a:	60a5      	str	r5, [r4, #8]
 800db4c:	463e      	mov	r6, r7
 800db4e:	42be      	cmp	r6, r7
 800db50:	d900      	bls.n	800db54 <__ssputs_r+0x86>
 800db52:	463e      	mov	r6, r7
 800db54:	6820      	ldr	r0, [r4, #0]
 800db56:	4632      	mov	r2, r6
 800db58:	4641      	mov	r1, r8
 800db5a:	f000 fbf9 	bl	800e350 <memmove>
 800db5e:	68a3      	ldr	r3, [r4, #8]
 800db60:	1b9b      	subs	r3, r3, r6
 800db62:	60a3      	str	r3, [r4, #8]
 800db64:	6823      	ldr	r3, [r4, #0]
 800db66:	4433      	add	r3, r6
 800db68:	6023      	str	r3, [r4, #0]
 800db6a:	2000      	movs	r0, #0
 800db6c:	e7db      	b.n	800db26 <__ssputs_r+0x58>
 800db6e:	462a      	mov	r2, r5
 800db70:	f000 fc08 	bl	800e384 <_realloc_r>
 800db74:	4606      	mov	r6, r0
 800db76:	2800      	cmp	r0, #0
 800db78:	d1e1      	bne.n	800db3e <__ssputs_r+0x70>
 800db7a:	6921      	ldr	r1, [r4, #16]
 800db7c:	4650      	mov	r0, sl
 800db7e:	f7fb fb4d 	bl	800921c <_free_r>
 800db82:	e7c7      	b.n	800db14 <__ssputs_r+0x46>

0800db84 <_svfiprintf_r>:
 800db84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db88:	4698      	mov	r8, r3
 800db8a:	898b      	ldrh	r3, [r1, #12]
 800db8c:	061b      	lsls	r3, r3, #24
 800db8e:	b09d      	sub	sp, #116	; 0x74
 800db90:	4607      	mov	r7, r0
 800db92:	460d      	mov	r5, r1
 800db94:	4614      	mov	r4, r2
 800db96:	d50e      	bpl.n	800dbb6 <_svfiprintf_r+0x32>
 800db98:	690b      	ldr	r3, [r1, #16]
 800db9a:	b963      	cbnz	r3, 800dbb6 <_svfiprintf_r+0x32>
 800db9c:	2140      	movs	r1, #64	; 0x40
 800db9e:	f7fb fba9 	bl	80092f4 <_malloc_r>
 800dba2:	6028      	str	r0, [r5, #0]
 800dba4:	6128      	str	r0, [r5, #16]
 800dba6:	b920      	cbnz	r0, 800dbb2 <_svfiprintf_r+0x2e>
 800dba8:	230c      	movs	r3, #12
 800dbaa:	603b      	str	r3, [r7, #0]
 800dbac:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb0:	e0d1      	b.n	800dd56 <_svfiprintf_r+0x1d2>
 800dbb2:	2340      	movs	r3, #64	; 0x40
 800dbb4:	616b      	str	r3, [r5, #20]
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	9309      	str	r3, [sp, #36]	; 0x24
 800dbba:	2320      	movs	r3, #32
 800dbbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbc0:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbc4:	2330      	movs	r3, #48	; 0x30
 800dbc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd70 <_svfiprintf_r+0x1ec>
 800dbca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbce:	f04f 0901 	mov.w	r9, #1
 800dbd2:	4623      	mov	r3, r4
 800dbd4:	469a      	mov	sl, r3
 800dbd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbda:	b10a      	cbz	r2, 800dbe0 <_svfiprintf_r+0x5c>
 800dbdc:	2a25      	cmp	r2, #37	; 0x25
 800dbde:	d1f9      	bne.n	800dbd4 <_svfiprintf_r+0x50>
 800dbe0:	ebba 0b04 	subs.w	fp, sl, r4
 800dbe4:	d00b      	beq.n	800dbfe <_svfiprintf_r+0x7a>
 800dbe6:	465b      	mov	r3, fp
 800dbe8:	4622      	mov	r2, r4
 800dbea:	4629      	mov	r1, r5
 800dbec:	4638      	mov	r0, r7
 800dbee:	f7ff ff6e 	bl	800dace <__ssputs_r>
 800dbf2:	3001      	adds	r0, #1
 800dbf4:	f000 80aa 	beq.w	800dd4c <_svfiprintf_r+0x1c8>
 800dbf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbfa:	445a      	add	r2, fp
 800dbfc:	9209      	str	r2, [sp, #36]	; 0x24
 800dbfe:	f89a 3000 	ldrb.w	r3, [sl]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f000 80a2 	beq.w	800dd4c <_svfiprintf_r+0x1c8>
 800dc08:	2300      	movs	r3, #0
 800dc0a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc12:	f10a 0a01 	add.w	sl, sl, #1
 800dc16:	9304      	str	r3, [sp, #16]
 800dc18:	9307      	str	r3, [sp, #28]
 800dc1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc1e:	931a      	str	r3, [sp, #104]	; 0x68
 800dc20:	4654      	mov	r4, sl
 800dc22:	2205      	movs	r2, #5
 800dc24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc28:	4851      	ldr	r0, [pc, #324]	; (800dd70 <_svfiprintf_r+0x1ec>)
 800dc2a:	f7f2 fad9 	bl	80001e0 <memchr>
 800dc2e:	9a04      	ldr	r2, [sp, #16]
 800dc30:	b9d8      	cbnz	r0, 800dc6a <_svfiprintf_r+0xe6>
 800dc32:	06d0      	lsls	r0, r2, #27
 800dc34:	bf44      	itt	mi
 800dc36:	2320      	movmi	r3, #32
 800dc38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc3c:	0711      	lsls	r1, r2, #28
 800dc3e:	bf44      	itt	mi
 800dc40:	232b      	movmi	r3, #43	; 0x2b
 800dc42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc46:	f89a 3000 	ldrb.w	r3, [sl]
 800dc4a:	2b2a      	cmp	r3, #42	; 0x2a
 800dc4c:	d015      	beq.n	800dc7a <_svfiprintf_r+0xf6>
 800dc4e:	9a07      	ldr	r2, [sp, #28]
 800dc50:	4654      	mov	r4, sl
 800dc52:	2000      	movs	r0, #0
 800dc54:	f04f 0c0a 	mov.w	ip, #10
 800dc58:	4621      	mov	r1, r4
 800dc5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc5e:	3b30      	subs	r3, #48	; 0x30
 800dc60:	2b09      	cmp	r3, #9
 800dc62:	d94e      	bls.n	800dd02 <_svfiprintf_r+0x17e>
 800dc64:	b1b0      	cbz	r0, 800dc94 <_svfiprintf_r+0x110>
 800dc66:	9207      	str	r2, [sp, #28]
 800dc68:	e014      	b.n	800dc94 <_svfiprintf_r+0x110>
 800dc6a:	eba0 0308 	sub.w	r3, r0, r8
 800dc6e:	fa09 f303 	lsl.w	r3, r9, r3
 800dc72:	4313      	orrs	r3, r2
 800dc74:	9304      	str	r3, [sp, #16]
 800dc76:	46a2      	mov	sl, r4
 800dc78:	e7d2      	b.n	800dc20 <_svfiprintf_r+0x9c>
 800dc7a:	9b03      	ldr	r3, [sp, #12]
 800dc7c:	1d19      	adds	r1, r3, #4
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	9103      	str	r1, [sp, #12]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	bfbb      	ittet	lt
 800dc86:	425b      	neglt	r3, r3
 800dc88:	f042 0202 	orrlt.w	r2, r2, #2
 800dc8c:	9307      	strge	r3, [sp, #28]
 800dc8e:	9307      	strlt	r3, [sp, #28]
 800dc90:	bfb8      	it	lt
 800dc92:	9204      	strlt	r2, [sp, #16]
 800dc94:	7823      	ldrb	r3, [r4, #0]
 800dc96:	2b2e      	cmp	r3, #46	; 0x2e
 800dc98:	d10c      	bne.n	800dcb4 <_svfiprintf_r+0x130>
 800dc9a:	7863      	ldrb	r3, [r4, #1]
 800dc9c:	2b2a      	cmp	r3, #42	; 0x2a
 800dc9e:	d135      	bne.n	800dd0c <_svfiprintf_r+0x188>
 800dca0:	9b03      	ldr	r3, [sp, #12]
 800dca2:	1d1a      	adds	r2, r3, #4
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	9203      	str	r2, [sp, #12]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	bfb8      	it	lt
 800dcac:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcb0:	3402      	adds	r4, #2
 800dcb2:	9305      	str	r3, [sp, #20]
 800dcb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd80 <_svfiprintf_r+0x1fc>
 800dcb8:	7821      	ldrb	r1, [r4, #0]
 800dcba:	2203      	movs	r2, #3
 800dcbc:	4650      	mov	r0, sl
 800dcbe:	f7f2 fa8f 	bl	80001e0 <memchr>
 800dcc2:	b140      	cbz	r0, 800dcd6 <_svfiprintf_r+0x152>
 800dcc4:	2340      	movs	r3, #64	; 0x40
 800dcc6:	eba0 000a 	sub.w	r0, r0, sl
 800dcca:	fa03 f000 	lsl.w	r0, r3, r0
 800dcce:	9b04      	ldr	r3, [sp, #16]
 800dcd0:	4303      	orrs	r3, r0
 800dcd2:	3401      	adds	r4, #1
 800dcd4:	9304      	str	r3, [sp, #16]
 800dcd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcda:	4826      	ldr	r0, [pc, #152]	; (800dd74 <_svfiprintf_r+0x1f0>)
 800dcdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dce0:	2206      	movs	r2, #6
 800dce2:	f7f2 fa7d 	bl	80001e0 <memchr>
 800dce6:	2800      	cmp	r0, #0
 800dce8:	d038      	beq.n	800dd5c <_svfiprintf_r+0x1d8>
 800dcea:	4b23      	ldr	r3, [pc, #140]	; (800dd78 <_svfiprintf_r+0x1f4>)
 800dcec:	bb1b      	cbnz	r3, 800dd36 <_svfiprintf_r+0x1b2>
 800dcee:	9b03      	ldr	r3, [sp, #12]
 800dcf0:	3307      	adds	r3, #7
 800dcf2:	f023 0307 	bic.w	r3, r3, #7
 800dcf6:	3308      	adds	r3, #8
 800dcf8:	9303      	str	r3, [sp, #12]
 800dcfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcfc:	4433      	add	r3, r6
 800dcfe:	9309      	str	r3, [sp, #36]	; 0x24
 800dd00:	e767      	b.n	800dbd2 <_svfiprintf_r+0x4e>
 800dd02:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd06:	460c      	mov	r4, r1
 800dd08:	2001      	movs	r0, #1
 800dd0a:	e7a5      	b.n	800dc58 <_svfiprintf_r+0xd4>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	3401      	adds	r4, #1
 800dd10:	9305      	str	r3, [sp, #20]
 800dd12:	4619      	mov	r1, r3
 800dd14:	f04f 0c0a 	mov.w	ip, #10
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd1e:	3a30      	subs	r2, #48	; 0x30
 800dd20:	2a09      	cmp	r2, #9
 800dd22:	d903      	bls.n	800dd2c <_svfiprintf_r+0x1a8>
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d0c5      	beq.n	800dcb4 <_svfiprintf_r+0x130>
 800dd28:	9105      	str	r1, [sp, #20]
 800dd2a:	e7c3      	b.n	800dcb4 <_svfiprintf_r+0x130>
 800dd2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd30:	4604      	mov	r4, r0
 800dd32:	2301      	movs	r3, #1
 800dd34:	e7f0      	b.n	800dd18 <_svfiprintf_r+0x194>
 800dd36:	ab03      	add	r3, sp, #12
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	462a      	mov	r2, r5
 800dd3c:	4b0f      	ldr	r3, [pc, #60]	; (800dd7c <_svfiprintf_r+0x1f8>)
 800dd3e:	a904      	add	r1, sp, #16
 800dd40:	4638      	mov	r0, r7
 800dd42:	f7fb fbeb 	bl	800951c <_printf_float>
 800dd46:	1c42      	adds	r2, r0, #1
 800dd48:	4606      	mov	r6, r0
 800dd4a:	d1d6      	bne.n	800dcfa <_svfiprintf_r+0x176>
 800dd4c:	89ab      	ldrh	r3, [r5, #12]
 800dd4e:	065b      	lsls	r3, r3, #25
 800dd50:	f53f af2c 	bmi.w	800dbac <_svfiprintf_r+0x28>
 800dd54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd56:	b01d      	add	sp, #116	; 0x74
 800dd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd5c:	ab03      	add	r3, sp, #12
 800dd5e:	9300      	str	r3, [sp, #0]
 800dd60:	462a      	mov	r2, r5
 800dd62:	4b06      	ldr	r3, [pc, #24]	; (800dd7c <_svfiprintf_r+0x1f8>)
 800dd64:	a904      	add	r1, sp, #16
 800dd66:	4638      	mov	r0, r7
 800dd68:	f7fb fe7c 	bl	8009a64 <_printf_i>
 800dd6c:	e7eb      	b.n	800dd46 <_svfiprintf_r+0x1c2>
 800dd6e:	bf00      	nop
 800dd70:	0800f36c 	.word	0x0800f36c
 800dd74:	0800f376 	.word	0x0800f376
 800dd78:	0800951d 	.word	0x0800951d
 800dd7c:	0800dacf 	.word	0x0800dacf
 800dd80:	0800f372 	.word	0x0800f372

0800dd84 <__sfputc_r>:
 800dd84:	6893      	ldr	r3, [r2, #8]
 800dd86:	3b01      	subs	r3, #1
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	b410      	push	{r4}
 800dd8c:	6093      	str	r3, [r2, #8]
 800dd8e:	da08      	bge.n	800dda2 <__sfputc_r+0x1e>
 800dd90:	6994      	ldr	r4, [r2, #24]
 800dd92:	42a3      	cmp	r3, r4
 800dd94:	db01      	blt.n	800dd9a <__sfputc_r+0x16>
 800dd96:	290a      	cmp	r1, #10
 800dd98:	d103      	bne.n	800dda2 <__sfputc_r+0x1e>
 800dd9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd9e:	f7fd bb43 	b.w	800b428 <__swbuf_r>
 800dda2:	6813      	ldr	r3, [r2, #0]
 800dda4:	1c58      	adds	r0, r3, #1
 800dda6:	6010      	str	r0, [r2, #0]
 800dda8:	7019      	strb	r1, [r3, #0]
 800ddaa:	4608      	mov	r0, r1
 800ddac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddb0:	4770      	bx	lr

0800ddb2 <__sfputs_r>:
 800ddb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddb4:	4606      	mov	r6, r0
 800ddb6:	460f      	mov	r7, r1
 800ddb8:	4614      	mov	r4, r2
 800ddba:	18d5      	adds	r5, r2, r3
 800ddbc:	42ac      	cmp	r4, r5
 800ddbe:	d101      	bne.n	800ddc4 <__sfputs_r+0x12>
 800ddc0:	2000      	movs	r0, #0
 800ddc2:	e007      	b.n	800ddd4 <__sfputs_r+0x22>
 800ddc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddc8:	463a      	mov	r2, r7
 800ddca:	4630      	mov	r0, r6
 800ddcc:	f7ff ffda 	bl	800dd84 <__sfputc_r>
 800ddd0:	1c43      	adds	r3, r0, #1
 800ddd2:	d1f3      	bne.n	800ddbc <__sfputs_r+0xa>
 800ddd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddd8 <_vfiprintf_r>:
 800ddd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dddc:	460d      	mov	r5, r1
 800ddde:	b09d      	sub	sp, #116	; 0x74
 800dde0:	4614      	mov	r4, r2
 800dde2:	4698      	mov	r8, r3
 800dde4:	4606      	mov	r6, r0
 800dde6:	b118      	cbz	r0, 800ddf0 <_vfiprintf_r+0x18>
 800dde8:	6983      	ldr	r3, [r0, #24]
 800ddea:	b90b      	cbnz	r3, 800ddf0 <_vfiprintf_r+0x18>
 800ddec:	f7fe fbec 	bl	800c5c8 <__sinit>
 800ddf0:	4b89      	ldr	r3, [pc, #548]	; (800e018 <_vfiprintf_r+0x240>)
 800ddf2:	429d      	cmp	r5, r3
 800ddf4:	d11b      	bne.n	800de2e <_vfiprintf_r+0x56>
 800ddf6:	6875      	ldr	r5, [r6, #4]
 800ddf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddfa:	07d9      	lsls	r1, r3, #31
 800ddfc:	d405      	bmi.n	800de0a <_vfiprintf_r+0x32>
 800ddfe:	89ab      	ldrh	r3, [r5, #12]
 800de00:	059a      	lsls	r2, r3, #22
 800de02:	d402      	bmi.n	800de0a <_vfiprintf_r+0x32>
 800de04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de06:	f7ff f8f7 	bl	800cff8 <__retarget_lock_acquire_recursive>
 800de0a:	89ab      	ldrh	r3, [r5, #12]
 800de0c:	071b      	lsls	r3, r3, #28
 800de0e:	d501      	bpl.n	800de14 <_vfiprintf_r+0x3c>
 800de10:	692b      	ldr	r3, [r5, #16]
 800de12:	b9eb      	cbnz	r3, 800de50 <_vfiprintf_r+0x78>
 800de14:	4629      	mov	r1, r5
 800de16:	4630      	mov	r0, r6
 800de18:	f7fd fb58 	bl	800b4cc <__swsetup_r>
 800de1c:	b1c0      	cbz	r0, 800de50 <_vfiprintf_r+0x78>
 800de1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de20:	07dc      	lsls	r4, r3, #31
 800de22:	d50e      	bpl.n	800de42 <_vfiprintf_r+0x6a>
 800de24:	f04f 30ff 	mov.w	r0, #4294967295
 800de28:	b01d      	add	sp, #116	; 0x74
 800de2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de2e:	4b7b      	ldr	r3, [pc, #492]	; (800e01c <_vfiprintf_r+0x244>)
 800de30:	429d      	cmp	r5, r3
 800de32:	d101      	bne.n	800de38 <_vfiprintf_r+0x60>
 800de34:	68b5      	ldr	r5, [r6, #8]
 800de36:	e7df      	b.n	800ddf8 <_vfiprintf_r+0x20>
 800de38:	4b79      	ldr	r3, [pc, #484]	; (800e020 <_vfiprintf_r+0x248>)
 800de3a:	429d      	cmp	r5, r3
 800de3c:	bf08      	it	eq
 800de3e:	68f5      	ldreq	r5, [r6, #12]
 800de40:	e7da      	b.n	800ddf8 <_vfiprintf_r+0x20>
 800de42:	89ab      	ldrh	r3, [r5, #12]
 800de44:	0598      	lsls	r0, r3, #22
 800de46:	d4ed      	bmi.n	800de24 <_vfiprintf_r+0x4c>
 800de48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de4a:	f7ff f8d7 	bl	800cffc <__retarget_lock_release_recursive>
 800de4e:	e7e9      	b.n	800de24 <_vfiprintf_r+0x4c>
 800de50:	2300      	movs	r3, #0
 800de52:	9309      	str	r3, [sp, #36]	; 0x24
 800de54:	2320      	movs	r3, #32
 800de56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800de5e:	2330      	movs	r3, #48	; 0x30
 800de60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e024 <_vfiprintf_r+0x24c>
 800de64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de68:	f04f 0901 	mov.w	r9, #1
 800de6c:	4623      	mov	r3, r4
 800de6e:	469a      	mov	sl, r3
 800de70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de74:	b10a      	cbz	r2, 800de7a <_vfiprintf_r+0xa2>
 800de76:	2a25      	cmp	r2, #37	; 0x25
 800de78:	d1f9      	bne.n	800de6e <_vfiprintf_r+0x96>
 800de7a:	ebba 0b04 	subs.w	fp, sl, r4
 800de7e:	d00b      	beq.n	800de98 <_vfiprintf_r+0xc0>
 800de80:	465b      	mov	r3, fp
 800de82:	4622      	mov	r2, r4
 800de84:	4629      	mov	r1, r5
 800de86:	4630      	mov	r0, r6
 800de88:	f7ff ff93 	bl	800ddb2 <__sfputs_r>
 800de8c:	3001      	adds	r0, #1
 800de8e:	f000 80aa 	beq.w	800dfe6 <_vfiprintf_r+0x20e>
 800de92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de94:	445a      	add	r2, fp
 800de96:	9209      	str	r2, [sp, #36]	; 0x24
 800de98:	f89a 3000 	ldrb.w	r3, [sl]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	f000 80a2 	beq.w	800dfe6 <_vfiprintf_r+0x20e>
 800dea2:	2300      	movs	r3, #0
 800dea4:	f04f 32ff 	mov.w	r2, #4294967295
 800dea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800deac:	f10a 0a01 	add.w	sl, sl, #1
 800deb0:	9304      	str	r3, [sp, #16]
 800deb2:	9307      	str	r3, [sp, #28]
 800deb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800deb8:	931a      	str	r3, [sp, #104]	; 0x68
 800deba:	4654      	mov	r4, sl
 800debc:	2205      	movs	r2, #5
 800debe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dec2:	4858      	ldr	r0, [pc, #352]	; (800e024 <_vfiprintf_r+0x24c>)
 800dec4:	f7f2 f98c 	bl	80001e0 <memchr>
 800dec8:	9a04      	ldr	r2, [sp, #16]
 800deca:	b9d8      	cbnz	r0, 800df04 <_vfiprintf_r+0x12c>
 800decc:	06d1      	lsls	r1, r2, #27
 800dece:	bf44      	itt	mi
 800ded0:	2320      	movmi	r3, #32
 800ded2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ded6:	0713      	lsls	r3, r2, #28
 800ded8:	bf44      	itt	mi
 800deda:	232b      	movmi	r3, #43	; 0x2b
 800dedc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dee0:	f89a 3000 	ldrb.w	r3, [sl]
 800dee4:	2b2a      	cmp	r3, #42	; 0x2a
 800dee6:	d015      	beq.n	800df14 <_vfiprintf_r+0x13c>
 800dee8:	9a07      	ldr	r2, [sp, #28]
 800deea:	4654      	mov	r4, sl
 800deec:	2000      	movs	r0, #0
 800deee:	f04f 0c0a 	mov.w	ip, #10
 800def2:	4621      	mov	r1, r4
 800def4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800def8:	3b30      	subs	r3, #48	; 0x30
 800defa:	2b09      	cmp	r3, #9
 800defc:	d94e      	bls.n	800df9c <_vfiprintf_r+0x1c4>
 800defe:	b1b0      	cbz	r0, 800df2e <_vfiprintf_r+0x156>
 800df00:	9207      	str	r2, [sp, #28]
 800df02:	e014      	b.n	800df2e <_vfiprintf_r+0x156>
 800df04:	eba0 0308 	sub.w	r3, r0, r8
 800df08:	fa09 f303 	lsl.w	r3, r9, r3
 800df0c:	4313      	orrs	r3, r2
 800df0e:	9304      	str	r3, [sp, #16]
 800df10:	46a2      	mov	sl, r4
 800df12:	e7d2      	b.n	800deba <_vfiprintf_r+0xe2>
 800df14:	9b03      	ldr	r3, [sp, #12]
 800df16:	1d19      	adds	r1, r3, #4
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	9103      	str	r1, [sp, #12]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	bfbb      	ittet	lt
 800df20:	425b      	neglt	r3, r3
 800df22:	f042 0202 	orrlt.w	r2, r2, #2
 800df26:	9307      	strge	r3, [sp, #28]
 800df28:	9307      	strlt	r3, [sp, #28]
 800df2a:	bfb8      	it	lt
 800df2c:	9204      	strlt	r2, [sp, #16]
 800df2e:	7823      	ldrb	r3, [r4, #0]
 800df30:	2b2e      	cmp	r3, #46	; 0x2e
 800df32:	d10c      	bne.n	800df4e <_vfiprintf_r+0x176>
 800df34:	7863      	ldrb	r3, [r4, #1]
 800df36:	2b2a      	cmp	r3, #42	; 0x2a
 800df38:	d135      	bne.n	800dfa6 <_vfiprintf_r+0x1ce>
 800df3a:	9b03      	ldr	r3, [sp, #12]
 800df3c:	1d1a      	adds	r2, r3, #4
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	9203      	str	r2, [sp, #12]
 800df42:	2b00      	cmp	r3, #0
 800df44:	bfb8      	it	lt
 800df46:	f04f 33ff 	movlt.w	r3, #4294967295
 800df4a:	3402      	adds	r4, #2
 800df4c:	9305      	str	r3, [sp, #20]
 800df4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e034 <_vfiprintf_r+0x25c>
 800df52:	7821      	ldrb	r1, [r4, #0]
 800df54:	2203      	movs	r2, #3
 800df56:	4650      	mov	r0, sl
 800df58:	f7f2 f942 	bl	80001e0 <memchr>
 800df5c:	b140      	cbz	r0, 800df70 <_vfiprintf_r+0x198>
 800df5e:	2340      	movs	r3, #64	; 0x40
 800df60:	eba0 000a 	sub.w	r0, r0, sl
 800df64:	fa03 f000 	lsl.w	r0, r3, r0
 800df68:	9b04      	ldr	r3, [sp, #16]
 800df6a:	4303      	orrs	r3, r0
 800df6c:	3401      	adds	r4, #1
 800df6e:	9304      	str	r3, [sp, #16]
 800df70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df74:	482c      	ldr	r0, [pc, #176]	; (800e028 <_vfiprintf_r+0x250>)
 800df76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df7a:	2206      	movs	r2, #6
 800df7c:	f7f2 f930 	bl	80001e0 <memchr>
 800df80:	2800      	cmp	r0, #0
 800df82:	d03f      	beq.n	800e004 <_vfiprintf_r+0x22c>
 800df84:	4b29      	ldr	r3, [pc, #164]	; (800e02c <_vfiprintf_r+0x254>)
 800df86:	bb1b      	cbnz	r3, 800dfd0 <_vfiprintf_r+0x1f8>
 800df88:	9b03      	ldr	r3, [sp, #12]
 800df8a:	3307      	adds	r3, #7
 800df8c:	f023 0307 	bic.w	r3, r3, #7
 800df90:	3308      	adds	r3, #8
 800df92:	9303      	str	r3, [sp, #12]
 800df94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df96:	443b      	add	r3, r7
 800df98:	9309      	str	r3, [sp, #36]	; 0x24
 800df9a:	e767      	b.n	800de6c <_vfiprintf_r+0x94>
 800df9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfa0:	460c      	mov	r4, r1
 800dfa2:	2001      	movs	r0, #1
 800dfa4:	e7a5      	b.n	800def2 <_vfiprintf_r+0x11a>
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	3401      	adds	r4, #1
 800dfaa:	9305      	str	r3, [sp, #20]
 800dfac:	4619      	mov	r1, r3
 800dfae:	f04f 0c0a 	mov.w	ip, #10
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfb8:	3a30      	subs	r2, #48	; 0x30
 800dfba:	2a09      	cmp	r2, #9
 800dfbc:	d903      	bls.n	800dfc6 <_vfiprintf_r+0x1ee>
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d0c5      	beq.n	800df4e <_vfiprintf_r+0x176>
 800dfc2:	9105      	str	r1, [sp, #20]
 800dfc4:	e7c3      	b.n	800df4e <_vfiprintf_r+0x176>
 800dfc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfca:	4604      	mov	r4, r0
 800dfcc:	2301      	movs	r3, #1
 800dfce:	e7f0      	b.n	800dfb2 <_vfiprintf_r+0x1da>
 800dfd0:	ab03      	add	r3, sp, #12
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	462a      	mov	r2, r5
 800dfd6:	4b16      	ldr	r3, [pc, #88]	; (800e030 <_vfiprintf_r+0x258>)
 800dfd8:	a904      	add	r1, sp, #16
 800dfda:	4630      	mov	r0, r6
 800dfdc:	f7fb fa9e 	bl	800951c <_printf_float>
 800dfe0:	4607      	mov	r7, r0
 800dfe2:	1c78      	adds	r0, r7, #1
 800dfe4:	d1d6      	bne.n	800df94 <_vfiprintf_r+0x1bc>
 800dfe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfe8:	07d9      	lsls	r1, r3, #31
 800dfea:	d405      	bmi.n	800dff8 <_vfiprintf_r+0x220>
 800dfec:	89ab      	ldrh	r3, [r5, #12]
 800dfee:	059a      	lsls	r2, r3, #22
 800dff0:	d402      	bmi.n	800dff8 <_vfiprintf_r+0x220>
 800dff2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dff4:	f7ff f802 	bl	800cffc <__retarget_lock_release_recursive>
 800dff8:	89ab      	ldrh	r3, [r5, #12]
 800dffa:	065b      	lsls	r3, r3, #25
 800dffc:	f53f af12 	bmi.w	800de24 <_vfiprintf_r+0x4c>
 800e000:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e002:	e711      	b.n	800de28 <_vfiprintf_r+0x50>
 800e004:	ab03      	add	r3, sp, #12
 800e006:	9300      	str	r3, [sp, #0]
 800e008:	462a      	mov	r2, r5
 800e00a:	4b09      	ldr	r3, [pc, #36]	; (800e030 <_vfiprintf_r+0x258>)
 800e00c:	a904      	add	r1, sp, #16
 800e00e:	4630      	mov	r0, r6
 800e010:	f7fb fd28 	bl	8009a64 <_printf_i>
 800e014:	e7e4      	b.n	800dfe0 <_vfiprintf_r+0x208>
 800e016:	bf00      	nop
 800e018:	0800f158 	.word	0x0800f158
 800e01c:	0800f178 	.word	0x0800f178
 800e020:	0800f138 	.word	0x0800f138
 800e024:	0800f36c 	.word	0x0800f36c
 800e028:	0800f376 	.word	0x0800f376
 800e02c:	0800951d 	.word	0x0800951d
 800e030:	0800ddb3 	.word	0x0800ddb3
 800e034:	0800f372 	.word	0x0800f372

0800e038 <nan>:
 800e038:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e040 <nan+0x8>
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop
 800e040:	00000000 	.word	0x00000000
 800e044:	7ff80000 	.word	0x7ff80000

0800e048 <siscanf>:
 800e048:	b40e      	push	{r1, r2, r3}
 800e04a:	b510      	push	{r4, lr}
 800e04c:	b09f      	sub	sp, #124	; 0x7c
 800e04e:	ac21      	add	r4, sp, #132	; 0x84
 800e050:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e054:	f854 2b04 	ldr.w	r2, [r4], #4
 800e058:	9201      	str	r2, [sp, #4]
 800e05a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e05e:	9004      	str	r0, [sp, #16]
 800e060:	9008      	str	r0, [sp, #32]
 800e062:	f7f2 f8b5 	bl	80001d0 <strlen>
 800e066:	4b0c      	ldr	r3, [pc, #48]	; (800e098 <siscanf+0x50>)
 800e068:	9005      	str	r0, [sp, #20]
 800e06a:	9009      	str	r0, [sp, #36]	; 0x24
 800e06c:	930d      	str	r3, [sp, #52]	; 0x34
 800e06e:	480b      	ldr	r0, [pc, #44]	; (800e09c <siscanf+0x54>)
 800e070:	9a01      	ldr	r2, [sp, #4]
 800e072:	6800      	ldr	r0, [r0, #0]
 800e074:	9403      	str	r4, [sp, #12]
 800e076:	2300      	movs	r3, #0
 800e078:	9311      	str	r3, [sp, #68]	; 0x44
 800e07a:	9316      	str	r3, [sp, #88]	; 0x58
 800e07c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e080:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e084:	a904      	add	r1, sp, #16
 800e086:	4623      	mov	r3, r4
 800e088:	f000 fa06 	bl	800e498 <__ssvfiscanf_r>
 800e08c:	b01f      	add	sp, #124	; 0x7c
 800e08e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e092:	b003      	add	sp, #12
 800e094:	4770      	bx	lr
 800e096:	bf00      	nop
 800e098:	0800e0c3 	.word	0x0800e0c3
 800e09c:	20000014 	.word	0x20000014

0800e0a0 <__sread>:
 800e0a0:	b510      	push	{r4, lr}
 800e0a2:	460c      	mov	r4, r1
 800e0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0a8:	f000 fcc0 	bl	800ea2c <_read_r>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	bfab      	itete	ge
 800e0b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e0b2:	89a3      	ldrhlt	r3, [r4, #12]
 800e0b4:	181b      	addge	r3, r3, r0
 800e0b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e0ba:	bfac      	ite	ge
 800e0bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e0be:	81a3      	strhlt	r3, [r4, #12]
 800e0c0:	bd10      	pop	{r4, pc}

0800e0c2 <__seofread>:
 800e0c2:	2000      	movs	r0, #0
 800e0c4:	4770      	bx	lr

0800e0c6 <__swrite>:
 800e0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ca:	461f      	mov	r7, r3
 800e0cc:	898b      	ldrh	r3, [r1, #12]
 800e0ce:	05db      	lsls	r3, r3, #23
 800e0d0:	4605      	mov	r5, r0
 800e0d2:	460c      	mov	r4, r1
 800e0d4:	4616      	mov	r6, r2
 800e0d6:	d505      	bpl.n	800e0e4 <__swrite+0x1e>
 800e0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0dc:	2302      	movs	r3, #2
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f000 f924 	bl	800e32c <_lseek_r>
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0ee:	81a3      	strh	r3, [r4, #12]
 800e0f0:	4632      	mov	r2, r6
 800e0f2:	463b      	mov	r3, r7
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0fa:	f000 b8bf 	b.w	800e27c <_write_r>

0800e0fe <__sseek>:
 800e0fe:	b510      	push	{r4, lr}
 800e100:	460c      	mov	r4, r1
 800e102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e106:	f000 f911 	bl	800e32c <_lseek_r>
 800e10a:	1c43      	adds	r3, r0, #1
 800e10c:	89a3      	ldrh	r3, [r4, #12]
 800e10e:	bf15      	itete	ne
 800e110:	6560      	strne	r0, [r4, #84]	; 0x54
 800e112:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e116:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e11a:	81a3      	strheq	r3, [r4, #12]
 800e11c:	bf18      	it	ne
 800e11e:	81a3      	strhne	r3, [r4, #12]
 800e120:	bd10      	pop	{r4, pc}

0800e122 <__sclose>:
 800e122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e126:	f000 b8c3 	b.w	800e2b0 <_close_r>

0800e12a <strcpy>:
 800e12a:	4603      	mov	r3, r0
 800e12c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e130:	f803 2b01 	strb.w	r2, [r3], #1
 800e134:	2a00      	cmp	r2, #0
 800e136:	d1f9      	bne.n	800e12c <strcpy+0x2>
 800e138:	4770      	bx	lr

0800e13a <strncmp>:
 800e13a:	b510      	push	{r4, lr}
 800e13c:	b17a      	cbz	r2, 800e15e <strncmp+0x24>
 800e13e:	4603      	mov	r3, r0
 800e140:	3901      	subs	r1, #1
 800e142:	1884      	adds	r4, r0, r2
 800e144:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e148:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e14c:	4290      	cmp	r0, r2
 800e14e:	d101      	bne.n	800e154 <strncmp+0x1a>
 800e150:	42a3      	cmp	r3, r4
 800e152:	d101      	bne.n	800e158 <strncmp+0x1e>
 800e154:	1a80      	subs	r0, r0, r2
 800e156:	bd10      	pop	{r4, pc}
 800e158:	2800      	cmp	r0, #0
 800e15a:	d1f3      	bne.n	800e144 <strncmp+0xa>
 800e15c:	e7fa      	b.n	800e154 <strncmp+0x1a>
 800e15e:	4610      	mov	r0, r2
 800e160:	e7f9      	b.n	800e156 <strncmp+0x1c>
	...

0800e164 <_strtoul_l.constprop.0>:
 800e164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e168:	4f36      	ldr	r7, [pc, #216]	; (800e244 <_strtoul_l.constprop.0+0xe0>)
 800e16a:	4686      	mov	lr, r0
 800e16c:	460d      	mov	r5, r1
 800e16e:	4628      	mov	r0, r5
 800e170:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e174:	5de6      	ldrb	r6, [r4, r7]
 800e176:	f016 0608 	ands.w	r6, r6, #8
 800e17a:	d1f8      	bne.n	800e16e <_strtoul_l.constprop.0+0xa>
 800e17c:	2c2d      	cmp	r4, #45	; 0x2d
 800e17e:	d12f      	bne.n	800e1e0 <_strtoul_l.constprop.0+0x7c>
 800e180:	782c      	ldrb	r4, [r5, #0]
 800e182:	2601      	movs	r6, #1
 800e184:	1c85      	adds	r5, r0, #2
 800e186:	2b00      	cmp	r3, #0
 800e188:	d057      	beq.n	800e23a <_strtoul_l.constprop.0+0xd6>
 800e18a:	2b10      	cmp	r3, #16
 800e18c:	d109      	bne.n	800e1a2 <_strtoul_l.constprop.0+0x3e>
 800e18e:	2c30      	cmp	r4, #48	; 0x30
 800e190:	d107      	bne.n	800e1a2 <_strtoul_l.constprop.0+0x3e>
 800e192:	7828      	ldrb	r0, [r5, #0]
 800e194:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e198:	2858      	cmp	r0, #88	; 0x58
 800e19a:	d149      	bne.n	800e230 <_strtoul_l.constprop.0+0xcc>
 800e19c:	786c      	ldrb	r4, [r5, #1]
 800e19e:	2310      	movs	r3, #16
 800e1a0:	3502      	adds	r5, #2
 800e1a2:	f04f 38ff 	mov.w	r8, #4294967295
 800e1a6:	2700      	movs	r7, #0
 800e1a8:	fbb8 f8f3 	udiv	r8, r8, r3
 800e1ac:	fb03 f908 	mul.w	r9, r3, r8
 800e1b0:	ea6f 0909 	mvn.w	r9, r9
 800e1b4:	4638      	mov	r0, r7
 800e1b6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e1ba:	f1bc 0f09 	cmp.w	ip, #9
 800e1be:	d814      	bhi.n	800e1ea <_strtoul_l.constprop.0+0x86>
 800e1c0:	4664      	mov	r4, ip
 800e1c2:	42a3      	cmp	r3, r4
 800e1c4:	dd22      	ble.n	800e20c <_strtoul_l.constprop.0+0xa8>
 800e1c6:	2f00      	cmp	r7, #0
 800e1c8:	db1d      	blt.n	800e206 <_strtoul_l.constprop.0+0xa2>
 800e1ca:	4580      	cmp	r8, r0
 800e1cc:	d31b      	bcc.n	800e206 <_strtoul_l.constprop.0+0xa2>
 800e1ce:	d101      	bne.n	800e1d4 <_strtoul_l.constprop.0+0x70>
 800e1d0:	45a1      	cmp	r9, r4
 800e1d2:	db18      	blt.n	800e206 <_strtoul_l.constprop.0+0xa2>
 800e1d4:	fb00 4003 	mla	r0, r0, r3, r4
 800e1d8:	2701      	movs	r7, #1
 800e1da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1de:	e7ea      	b.n	800e1b6 <_strtoul_l.constprop.0+0x52>
 800e1e0:	2c2b      	cmp	r4, #43	; 0x2b
 800e1e2:	bf04      	itt	eq
 800e1e4:	782c      	ldrbeq	r4, [r5, #0]
 800e1e6:	1c85      	addeq	r5, r0, #2
 800e1e8:	e7cd      	b.n	800e186 <_strtoul_l.constprop.0+0x22>
 800e1ea:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e1ee:	f1bc 0f19 	cmp.w	ip, #25
 800e1f2:	d801      	bhi.n	800e1f8 <_strtoul_l.constprop.0+0x94>
 800e1f4:	3c37      	subs	r4, #55	; 0x37
 800e1f6:	e7e4      	b.n	800e1c2 <_strtoul_l.constprop.0+0x5e>
 800e1f8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e1fc:	f1bc 0f19 	cmp.w	ip, #25
 800e200:	d804      	bhi.n	800e20c <_strtoul_l.constprop.0+0xa8>
 800e202:	3c57      	subs	r4, #87	; 0x57
 800e204:	e7dd      	b.n	800e1c2 <_strtoul_l.constprop.0+0x5e>
 800e206:	f04f 37ff 	mov.w	r7, #4294967295
 800e20a:	e7e6      	b.n	800e1da <_strtoul_l.constprop.0+0x76>
 800e20c:	2f00      	cmp	r7, #0
 800e20e:	da07      	bge.n	800e220 <_strtoul_l.constprop.0+0xbc>
 800e210:	2322      	movs	r3, #34	; 0x22
 800e212:	f8ce 3000 	str.w	r3, [lr]
 800e216:	f04f 30ff 	mov.w	r0, #4294967295
 800e21a:	b932      	cbnz	r2, 800e22a <_strtoul_l.constprop.0+0xc6>
 800e21c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e220:	b106      	cbz	r6, 800e224 <_strtoul_l.constprop.0+0xc0>
 800e222:	4240      	negs	r0, r0
 800e224:	2a00      	cmp	r2, #0
 800e226:	d0f9      	beq.n	800e21c <_strtoul_l.constprop.0+0xb8>
 800e228:	b107      	cbz	r7, 800e22c <_strtoul_l.constprop.0+0xc8>
 800e22a:	1e69      	subs	r1, r5, #1
 800e22c:	6011      	str	r1, [r2, #0]
 800e22e:	e7f5      	b.n	800e21c <_strtoul_l.constprop.0+0xb8>
 800e230:	2430      	movs	r4, #48	; 0x30
 800e232:	2b00      	cmp	r3, #0
 800e234:	d1b5      	bne.n	800e1a2 <_strtoul_l.constprop.0+0x3e>
 800e236:	2308      	movs	r3, #8
 800e238:	e7b3      	b.n	800e1a2 <_strtoul_l.constprop.0+0x3e>
 800e23a:	2c30      	cmp	r4, #48	; 0x30
 800e23c:	d0a9      	beq.n	800e192 <_strtoul_l.constprop.0+0x2e>
 800e23e:	230a      	movs	r3, #10
 800e240:	e7af      	b.n	800e1a2 <_strtoul_l.constprop.0+0x3e>
 800e242:	bf00      	nop
 800e244:	0800efbe 	.word	0x0800efbe

0800e248 <_strtoul_r>:
 800e248:	f7ff bf8c 	b.w	800e164 <_strtoul_l.constprop.0>

0800e24c <strtoul>:
 800e24c:	4613      	mov	r3, r2
 800e24e:	460a      	mov	r2, r1
 800e250:	4601      	mov	r1, r0
 800e252:	4802      	ldr	r0, [pc, #8]	; (800e25c <strtoul+0x10>)
 800e254:	6800      	ldr	r0, [r0, #0]
 800e256:	f7ff bf85 	b.w	800e164 <_strtoul_l.constprop.0>
 800e25a:	bf00      	nop
 800e25c:	20000014 	.word	0x20000014

0800e260 <__ascii_wctomb>:
 800e260:	b149      	cbz	r1, 800e276 <__ascii_wctomb+0x16>
 800e262:	2aff      	cmp	r2, #255	; 0xff
 800e264:	bf85      	ittet	hi
 800e266:	238a      	movhi	r3, #138	; 0x8a
 800e268:	6003      	strhi	r3, [r0, #0]
 800e26a:	700a      	strbls	r2, [r1, #0]
 800e26c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e270:	bf98      	it	ls
 800e272:	2001      	movls	r0, #1
 800e274:	4770      	bx	lr
 800e276:	4608      	mov	r0, r1
 800e278:	4770      	bx	lr
	...

0800e27c <_write_r>:
 800e27c:	b538      	push	{r3, r4, r5, lr}
 800e27e:	4d07      	ldr	r5, [pc, #28]	; (800e29c <_write_r+0x20>)
 800e280:	4604      	mov	r4, r0
 800e282:	4608      	mov	r0, r1
 800e284:	4611      	mov	r1, r2
 800e286:	2200      	movs	r2, #0
 800e288:	602a      	str	r2, [r5, #0]
 800e28a:	461a      	mov	r2, r3
 800e28c:	f7f4 face 	bl	800282c <_write>
 800e290:	1c43      	adds	r3, r0, #1
 800e292:	d102      	bne.n	800e29a <_write_r+0x1e>
 800e294:	682b      	ldr	r3, [r5, #0]
 800e296:	b103      	cbz	r3, 800e29a <_write_r+0x1e>
 800e298:	6023      	str	r3, [r4, #0]
 800e29a:	bd38      	pop	{r3, r4, r5, pc}
 800e29c:	200004bc 	.word	0x200004bc

0800e2a0 <abort>:
 800e2a0:	b508      	push	{r3, lr}
 800e2a2:	2006      	movs	r0, #6
 800e2a4:	f000 fc34 	bl	800eb10 <raise>
 800e2a8:	2001      	movs	r0, #1
 800e2aa:	f7f4 f8e5 	bl	8002478 <_exit>
	...

0800e2b0 <_close_r>:
 800e2b0:	b538      	push	{r3, r4, r5, lr}
 800e2b2:	4d06      	ldr	r5, [pc, #24]	; (800e2cc <_close_r+0x1c>)
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	4608      	mov	r0, r1
 800e2ba:	602b      	str	r3, [r5, #0]
 800e2bc:	f7f4 f8e6 	bl	800248c <_close>
 800e2c0:	1c43      	adds	r3, r0, #1
 800e2c2:	d102      	bne.n	800e2ca <_close_r+0x1a>
 800e2c4:	682b      	ldr	r3, [r5, #0]
 800e2c6:	b103      	cbz	r3, 800e2ca <_close_r+0x1a>
 800e2c8:	6023      	str	r3, [r4, #0]
 800e2ca:	bd38      	pop	{r3, r4, r5, pc}
 800e2cc:	200004bc 	.word	0x200004bc

0800e2d0 <__env_lock>:
 800e2d0:	4801      	ldr	r0, [pc, #4]	; (800e2d8 <__env_lock+0x8>)
 800e2d2:	f7fe be91 	b.w	800cff8 <__retarget_lock_acquire_recursive>
 800e2d6:	bf00      	nop
 800e2d8:	200004b4 	.word	0x200004b4

0800e2dc <__env_unlock>:
 800e2dc:	4801      	ldr	r0, [pc, #4]	; (800e2e4 <__env_unlock+0x8>)
 800e2de:	f7fe be8d 	b.w	800cffc <__retarget_lock_release_recursive>
 800e2e2:	bf00      	nop
 800e2e4:	200004b4 	.word	0x200004b4

0800e2e8 <_fstat_r>:
 800e2e8:	b538      	push	{r3, r4, r5, lr}
 800e2ea:	4d07      	ldr	r5, [pc, #28]	; (800e308 <_fstat_r+0x20>)
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	4608      	mov	r0, r1
 800e2f2:	4611      	mov	r1, r2
 800e2f4:	602b      	str	r3, [r5, #0]
 800e2f6:	f7f4 f8d5 	bl	80024a4 <_fstat>
 800e2fa:	1c43      	adds	r3, r0, #1
 800e2fc:	d102      	bne.n	800e304 <_fstat_r+0x1c>
 800e2fe:	682b      	ldr	r3, [r5, #0]
 800e300:	b103      	cbz	r3, 800e304 <_fstat_r+0x1c>
 800e302:	6023      	str	r3, [r4, #0]
 800e304:	bd38      	pop	{r3, r4, r5, pc}
 800e306:	bf00      	nop
 800e308:	200004bc 	.word	0x200004bc

0800e30c <_isatty_r>:
 800e30c:	b538      	push	{r3, r4, r5, lr}
 800e30e:	4d06      	ldr	r5, [pc, #24]	; (800e328 <_isatty_r+0x1c>)
 800e310:	2300      	movs	r3, #0
 800e312:	4604      	mov	r4, r0
 800e314:	4608      	mov	r0, r1
 800e316:	602b      	str	r3, [r5, #0]
 800e318:	f7f4 f8d4 	bl	80024c4 <_isatty>
 800e31c:	1c43      	adds	r3, r0, #1
 800e31e:	d102      	bne.n	800e326 <_isatty_r+0x1a>
 800e320:	682b      	ldr	r3, [r5, #0]
 800e322:	b103      	cbz	r3, 800e326 <_isatty_r+0x1a>
 800e324:	6023      	str	r3, [r4, #0]
 800e326:	bd38      	pop	{r3, r4, r5, pc}
 800e328:	200004bc 	.word	0x200004bc

0800e32c <_lseek_r>:
 800e32c:	b538      	push	{r3, r4, r5, lr}
 800e32e:	4d07      	ldr	r5, [pc, #28]	; (800e34c <_lseek_r+0x20>)
 800e330:	4604      	mov	r4, r0
 800e332:	4608      	mov	r0, r1
 800e334:	4611      	mov	r1, r2
 800e336:	2200      	movs	r2, #0
 800e338:	602a      	str	r2, [r5, #0]
 800e33a:	461a      	mov	r2, r3
 800e33c:	f7f4 f8cd 	bl	80024da <_lseek>
 800e340:	1c43      	adds	r3, r0, #1
 800e342:	d102      	bne.n	800e34a <_lseek_r+0x1e>
 800e344:	682b      	ldr	r3, [r5, #0]
 800e346:	b103      	cbz	r3, 800e34a <_lseek_r+0x1e>
 800e348:	6023      	str	r3, [r4, #0]
 800e34a:	bd38      	pop	{r3, r4, r5, pc}
 800e34c:	200004bc 	.word	0x200004bc

0800e350 <memmove>:
 800e350:	4288      	cmp	r0, r1
 800e352:	b510      	push	{r4, lr}
 800e354:	eb01 0402 	add.w	r4, r1, r2
 800e358:	d902      	bls.n	800e360 <memmove+0x10>
 800e35a:	4284      	cmp	r4, r0
 800e35c:	4623      	mov	r3, r4
 800e35e:	d807      	bhi.n	800e370 <memmove+0x20>
 800e360:	1e43      	subs	r3, r0, #1
 800e362:	42a1      	cmp	r1, r4
 800e364:	d008      	beq.n	800e378 <memmove+0x28>
 800e366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e36a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e36e:	e7f8      	b.n	800e362 <memmove+0x12>
 800e370:	4402      	add	r2, r0
 800e372:	4601      	mov	r1, r0
 800e374:	428a      	cmp	r2, r1
 800e376:	d100      	bne.n	800e37a <memmove+0x2a>
 800e378:	bd10      	pop	{r4, pc}
 800e37a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e37e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e382:	e7f7      	b.n	800e374 <memmove+0x24>

0800e384 <_realloc_r>:
 800e384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e388:	4680      	mov	r8, r0
 800e38a:	4614      	mov	r4, r2
 800e38c:	460e      	mov	r6, r1
 800e38e:	b921      	cbnz	r1, 800e39a <_realloc_r+0x16>
 800e390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e394:	4611      	mov	r1, r2
 800e396:	f7fa bfad 	b.w	80092f4 <_malloc_r>
 800e39a:	b92a      	cbnz	r2, 800e3a8 <_realloc_r+0x24>
 800e39c:	f7fa ff3e 	bl	800921c <_free_r>
 800e3a0:	4625      	mov	r5, r4
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a8:	f000 fc08 	bl	800ebbc <_malloc_usable_size_r>
 800e3ac:	4284      	cmp	r4, r0
 800e3ae:	4607      	mov	r7, r0
 800e3b0:	d802      	bhi.n	800e3b8 <_realloc_r+0x34>
 800e3b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e3b6:	d812      	bhi.n	800e3de <_realloc_r+0x5a>
 800e3b8:	4621      	mov	r1, r4
 800e3ba:	4640      	mov	r0, r8
 800e3bc:	f7fa ff9a 	bl	80092f4 <_malloc_r>
 800e3c0:	4605      	mov	r5, r0
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	d0ed      	beq.n	800e3a2 <_realloc_r+0x1e>
 800e3c6:	42bc      	cmp	r4, r7
 800e3c8:	4622      	mov	r2, r4
 800e3ca:	4631      	mov	r1, r6
 800e3cc:	bf28      	it	cs
 800e3ce:	463a      	movcs	r2, r7
 800e3d0:	f7fe fe8c 	bl	800d0ec <memcpy>
 800e3d4:	4631      	mov	r1, r6
 800e3d6:	4640      	mov	r0, r8
 800e3d8:	f7fa ff20 	bl	800921c <_free_r>
 800e3dc:	e7e1      	b.n	800e3a2 <_realloc_r+0x1e>
 800e3de:	4635      	mov	r5, r6
 800e3e0:	e7df      	b.n	800e3a2 <_realloc_r+0x1e>

0800e3e2 <_sungetc_r>:
 800e3e2:	b538      	push	{r3, r4, r5, lr}
 800e3e4:	1c4b      	adds	r3, r1, #1
 800e3e6:	4614      	mov	r4, r2
 800e3e8:	d103      	bne.n	800e3f2 <_sungetc_r+0x10>
 800e3ea:	f04f 35ff 	mov.w	r5, #4294967295
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	bd38      	pop	{r3, r4, r5, pc}
 800e3f2:	8993      	ldrh	r3, [r2, #12]
 800e3f4:	f023 0320 	bic.w	r3, r3, #32
 800e3f8:	8193      	strh	r3, [r2, #12]
 800e3fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3fc:	6852      	ldr	r2, [r2, #4]
 800e3fe:	b2cd      	uxtb	r5, r1
 800e400:	b18b      	cbz	r3, 800e426 <_sungetc_r+0x44>
 800e402:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e404:	4293      	cmp	r3, r2
 800e406:	dd08      	ble.n	800e41a <_sungetc_r+0x38>
 800e408:	6823      	ldr	r3, [r4, #0]
 800e40a:	1e5a      	subs	r2, r3, #1
 800e40c:	6022      	str	r2, [r4, #0]
 800e40e:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e412:	6863      	ldr	r3, [r4, #4]
 800e414:	3301      	adds	r3, #1
 800e416:	6063      	str	r3, [r4, #4]
 800e418:	e7e9      	b.n	800e3ee <_sungetc_r+0xc>
 800e41a:	4621      	mov	r1, r4
 800e41c:	f000 fb94 	bl	800eb48 <__submore>
 800e420:	2800      	cmp	r0, #0
 800e422:	d0f1      	beq.n	800e408 <_sungetc_r+0x26>
 800e424:	e7e1      	b.n	800e3ea <_sungetc_r+0x8>
 800e426:	6921      	ldr	r1, [r4, #16]
 800e428:	6823      	ldr	r3, [r4, #0]
 800e42a:	b151      	cbz	r1, 800e442 <_sungetc_r+0x60>
 800e42c:	4299      	cmp	r1, r3
 800e42e:	d208      	bcs.n	800e442 <_sungetc_r+0x60>
 800e430:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e434:	42a9      	cmp	r1, r5
 800e436:	d104      	bne.n	800e442 <_sungetc_r+0x60>
 800e438:	3b01      	subs	r3, #1
 800e43a:	3201      	adds	r2, #1
 800e43c:	6023      	str	r3, [r4, #0]
 800e43e:	6062      	str	r2, [r4, #4]
 800e440:	e7d5      	b.n	800e3ee <_sungetc_r+0xc>
 800e442:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e446:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e44a:	6363      	str	r3, [r4, #52]	; 0x34
 800e44c:	2303      	movs	r3, #3
 800e44e:	63a3      	str	r3, [r4, #56]	; 0x38
 800e450:	4623      	mov	r3, r4
 800e452:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e456:	6023      	str	r3, [r4, #0]
 800e458:	2301      	movs	r3, #1
 800e45a:	e7dc      	b.n	800e416 <_sungetc_r+0x34>

0800e45c <__ssrefill_r>:
 800e45c:	b510      	push	{r4, lr}
 800e45e:	460c      	mov	r4, r1
 800e460:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e462:	b169      	cbz	r1, 800e480 <__ssrefill_r+0x24>
 800e464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e468:	4299      	cmp	r1, r3
 800e46a:	d001      	beq.n	800e470 <__ssrefill_r+0x14>
 800e46c:	f7fa fed6 	bl	800921c <_free_r>
 800e470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e472:	6063      	str	r3, [r4, #4]
 800e474:	2000      	movs	r0, #0
 800e476:	6360      	str	r0, [r4, #52]	; 0x34
 800e478:	b113      	cbz	r3, 800e480 <__ssrefill_r+0x24>
 800e47a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e47c:	6023      	str	r3, [r4, #0]
 800e47e:	bd10      	pop	{r4, pc}
 800e480:	6923      	ldr	r3, [r4, #16]
 800e482:	6023      	str	r3, [r4, #0]
 800e484:	2300      	movs	r3, #0
 800e486:	6063      	str	r3, [r4, #4]
 800e488:	89a3      	ldrh	r3, [r4, #12]
 800e48a:	f043 0320 	orr.w	r3, r3, #32
 800e48e:	81a3      	strh	r3, [r4, #12]
 800e490:	f04f 30ff 	mov.w	r0, #4294967295
 800e494:	e7f3      	b.n	800e47e <__ssrefill_r+0x22>
	...

0800e498 <__ssvfiscanf_r>:
 800e498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e49c:	460c      	mov	r4, r1
 800e49e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e4a8:	49a6      	ldr	r1, [pc, #664]	; (800e744 <__ssvfiscanf_r+0x2ac>)
 800e4aa:	91a0      	str	r1, [sp, #640]	; 0x280
 800e4ac:	f10d 0804 	add.w	r8, sp, #4
 800e4b0:	49a5      	ldr	r1, [pc, #660]	; (800e748 <__ssvfiscanf_r+0x2b0>)
 800e4b2:	4fa6      	ldr	r7, [pc, #664]	; (800e74c <__ssvfiscanf_r+0x2b4>)
 800e4b4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e750 <__ssvfiscanf_r+0x2b8>
 800e4b8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e4bc:	4606      	mov	r6, r0
 800e4be:	91a1      	str	r1, [sp, #644]	; 0x284
 800e4c0:	9300      	str	r3, [sp, #0]
 800e4c2:	7813      	ldrb	r3, [r2, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	f000 815a 	beq.w	800e77e <__ssvfiscanf_r+0x2e6>
 800e4ca:	5dd9      	ldrb	r1, [r3, r7]
 800e4cc:	f011 0108 	ands.w	r1, r1, #8
 800e4d0:	f102 0501 	add.w	r5, r2, #1
 800e4d4:	d019      	beq.n	800e50a <__ssvfiscanf_r+0x72>
 800e4d6:	6863      	ldr	r3, [r4, #4]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	dd0f      	ble.n	800e4fc <__ssvfiscanf_r+0x64>
 800e4dc:	6823      	ldr	r3, [r4, #0]
 800e4de:	781a      	ldrb	r2, [r3, #0]
 800e4e0:	5cba      	ldrb	r2, [r7, r2]
 800e4e2:	0712      	lsls	r2, r2, #28
 800e4e4:	d401      	bmi.n	800e4ea <__ssvfiscanf_r+0x52>
 800e4e6:	462a      	mov	r2, r5
 800e4e8:	e7eb      	b.n	800e4c2 <__ssvfiscanf_r+0x2a>
 800e4ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e4ec:	3201      	adds	r2, #1
 800e4ee:	9245      	str	r2, [sp, #276]	; 0x114
 800e4f0:	6862      	ldr	r2, [r4, #4]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	3a01      	subs	r2, #1
 800e4f6:	6062      	str	r2, [r4, #4]
 800e4f8:	6023      	str	r3, [r4, #0]
 800e4fa:	e7ec      	b.n	800e4d6 <__ssvfiscanf_r+0x3e>
 800e4fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e4fe:	4621      	mov	r1, r4
 800e500:	4630      	mov	r0, r6
 800e502:	4798      	blx	r3
 800e504:	2800      	cmp	r0, #0
 800e506:	d0e9      	beq.n	800e4dc <__ssvfiscanf_r+0x44>
 800e508:	e7ed      	b.n	800e4e6 <__ssvfiscanf_r+0x4e>
 800e50a:	2b25      	cmp	r3, #37	; 0x25
 800e50c:	d012      	beq.n	800e534 <__ssvfiscanf_r+0x9c>
 800e50e:	469a      	mov	sl, r3
 800e510:	6863      	ldr	r3, [r4, #4]
 800e512:	2b00      	cmp	r3, #0
 800e514:	f340 8091 	ble.w	800e63a <__ssvfiscanf_r+0x1a2>
 800e518:	6822      	ldr	r2, [r4, #0]
 800e51a:	7813      	ldrb	r3, [r2, #0]
 800e51c:	4553      	cmp	r3, sl
 800e51e:	f040 812e 	bne.w	800e77e <__ssvfiscanf_r+0x2e6>
 800e522:	6863      	ldr	r3, [r4, #4]
 800e524:	3b01      	subs	r3, #1
 800e526:	6063      	str	r3, [r4, #4]
 800e528:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e52a:	3201      	adds	r2, #1
 800e52c:	3301      	adds	r3, #1
 800e52e:	6022      	str	r2, [r4, #0]
 800e530:	9345      	str	r3, [sp, #276]	; 0x114
 800e532:	e7d8      	b.n	800e4e6 <__ssvfiscanf_r+0x4e>
 800e534:	9141      	str	r1, [sp, #260]	; 0x104
 800e536:	9143      	str	r1, [sp, #268]	; 0x10c
 800e538:	7853      	ldrb	r3, [r2, #1]
 800e53a:	2b2a      	cmp	r3, #42	; 0x2a
 800e53c:	bf02      	ittt	eq
 800e53e:	2310      	moveq	r3, #16
 800e540:	1c95      	addeq	r5, r2, #2
 800e542:	9341      	streq	r3, [sp, #260]	; 0x104
 800e544:	220a      	movs	r2, #10
 800e546:	46aa      	mov	sl, r5
 800e548:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e54c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e550:	2b09      	cmp	r3, #9
 800e552:	d91d      	bls.n	800e590 <__ssvfiscanf_r+0xf8>
 800e554:	487e      	ldr	r0, [pc, #504]	; (800e750 <__ssvfiscanf_r+0x2b8>)
 800e556:	2203      	movs	r2, #3
 800e558:	f7f1 fe42 	bl	80001e0 <memchr>
 800e55c:	b140      	cbz	r0, 800e570 <__ssvfiscanf_r+0xd8>
 800e55e:	2301      	movs	r3, #1
 800e560:	eba0 0009 	sub.w	r0, r0, r9
 800e564:	fa03 f000 	lsl.w	r0, r3, r0
 800e568:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e56a:	4318      	orrs	r0, r3
 800e56c:	9041      	str	r0, [sp, #260]	; 0x104
 800e56e:	4655      	mov	r5, sl
 800e570:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e574:	2b78      	cmp	r3, #120	; 0x78
 800e576:	d806      	bhi.n	800e586 <__ssvfiscanf_r+0xee>
 800e578:	2b57      	cmp	r3, #87	; 0x57
 800e57a:	d810      	bhi.n	800e59e <__ssvfiscanf_r+0x106>
 800e57c:	2b25      	cmp	r3, #37	; 0x25
 800e57e:	d0c6      	beq.n	800e50e <__ssvfiscanf_r+0x76>
 800e580:	d856      	bhi.n	800e630 <__ssvfiscanf_r+0x198>
 800e582:	2b00      	cmp	r3, #0
 800e584:	d064      	beq.n	800e650 <__ssvfiscanf_r+0x1b8>
 800e586:	2303      	movs	r3, #3
 800e588:	9347      	str	r3, [sp, #284]	; 0x11c
 800e58a:	230a      	movs	r3, #10
 800e58c:	9342      	str	r3, [sp, #264]	; 0x108
 800e58e:	e071      	b.n	800e674 <__ssvfiscanf_r+0x1dc>
 800e590:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e592:	fb02 1103 	mla	r1, r2, r3, r1
 800e596:	3930      	subs	r1, #48	; 0x30
 800e598:	9143      	str	r1, [sp, #268]	; 0x10c
 800e59a:	4655      	mov	r5, sl
 800e59c:	e7d3      	b.n	800e546 <__ssvfiscanf_r+0xae>
 800e59e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e5a2:	2a20      	cmp	r2, #32
 800e5a4:	d8ef      	bhi.n	800e586 <__ssvfiscanf_r+0xee>
 800e5a6:	a101      	add	r1, pc, #4	; (adr r1, 800e5ac <__ssvfiscanf_r+0x114>)
 800e5a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e5ac:	0800e65f 	.word	0x0800e65f
 800e5b0:	0800e587 	.word	0x0800e587
 800e5b4:	0800e587 	.word	0x0800e587
 800e5b8:	0800e6bd 	.word	0x0800e6bd
 800e5bc:	0800e587 	.word	0x0800e587
 800e5c0:	0800e587 	.word	0x0800e587
 800e5c4:	0800e587 	.word	0x0800e587
 800e5c8:	0800e587 	.word	0x0800e587
 800e5cc:	0800e587 	.word	0x0800e587
 800e5d0:	0800e587 	.word	0x0800e587
 800e5d4:	0800e587 	.word	0x0800e587
 800e5d8:	0800e6d3 	.word	0x0800e6d3
 800e5dc:	0800e6a9 	.word	0x0800e6a9
 800e5e0:	0800e637 	.word	0x0800e637
 800e5e4:	0800e637 	.word	0x0800e637
 800e5e8:	0800e637 	.word	0x0800e637
 800e5ec:	0800e587 	.word	0x0800e587
 800e5f0:	0800e6ad 	.word	0x0800e6ad
 800e5f4:	0800e587 	.word	0x0800e587
 800e5f8:	0800e587 	.word	0x0800e587
 800e5fc:	0800e587 	.word	0x0800e587
 800e600:	0800e587 	.word	0x0800e587
 800e604:	0800e6e3 	.word	0x0800e6e3
 800e608:	0800e6b5 	.word	0x0800e6b5
 800e60c:	0800e657 	.word	0x0800e657
 800e610:	0800e587 	.word	0x0800e587
 800e614:	0800e587 	.word	0x0800e587
 800e618:	0800e6df 	.word	0x0800e6df
 800e61c:	0800e587 	.word	0x0800e587
 800e620:	0800e6a9 	.word	0x0800e6a9
 800e624:	0800e587 	.word	0x0800e587
 800e628:	0800e587 	.word	0x0800e587
 800e62c:	0800e65f 	.word	0x0800e65f
 800e630:	3b45      	subs	r3, #69	; 0x45
 800e632:	2b02      	cmp	r3, #2
 800e634:	d8a7      	bhi.n	800e586 <__ssvfiscanf_r+0xee>
 800e636:	2305      	movs	r3, #5
 800e638:	e01b      	b.n	800e672 <__ssvfiscanf_r+0x1da>
 800e63a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e63c:	4621      	mov	r1, r4
 800e63e:	4630      	mov	r0, r6
 800e640:	4798      	blx	r3
 800e642:	2800      	cmp	r0, #0
 800e644:	f43f af68 	beq.w	800e518 <__ssvfiscanf_r+0x80>
 800e648:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e64a:	2800      	cmp	r0, #0
 800e64c:	f040 808d 	bne.w	800e76a <__ssvfiscanf_r+0x2d2>
 800e650:	f04f 30ff 	mov.w	r0, #4294967295
 800e654:	e08f      	b.n	800e776 <__ssvfiscanf_r+0x2de>
 800e656:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e658:	f042 0220 	orr.w	r2, r2, #32
 800e65c:	9241      	str	r2, [sp, #260]	; 0x104
 800e65e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e664:	9241      	str	r2, [sp, #260]	; 0x104
 800e666:	2210      	movs	r2, #16
 800e668:	2b6f      	cmp	r3, #111	; 0x6f
 800e66a:	9242      	str	r2, [sp, #264]	; 0x108
 800e66c:	bf34      	ite	cc
 800e66e:	2303      	movcc	r3, #3
 800e670:	2304      	movcs	r3, #4
 800e672:	9347      	str	r3, [sp, #284]	; 0x11c
 800e674:	6863      	ldr	r3, [r4, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	dd42      	ble.n	800e700 <__ssvfiscanf_r+0x268>
 800e67a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e67c:	0659      	lsls	r1, r3, #25
 800e67e:	d404      	bmi.n	800e68a <__ssvfiscanf_r+0x1f2>
 800e680:	6823      	ldr	r3, [r4, #0]
 800e682:	781a      	ldrb	r2, [r3, #0]
 800e684:	5cba      	ldrb	r2, [r7, r2]
 800e686:	0712      	lsls	r2, r2, #28
 800e688:	d441      	bmi.n	800e70e <__ssvfiscanf_r+0x276>
 800e68a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e68c:	2b02      	cmp	r3, #2
 800e68e:	dc50      	bgt.n	800e732 <__ssvfiscanf_r+0x29a>
 800e690:	466b      	mov	r3, sp
 800e692:	4622      	mov	r2, r4
 800e694:	a941      	add	r1, sp, #260	; 0x104
 800e696:	4630      	mov	r0, r6
 800e698:	f000 f876 	bl	800e788 <_scanf_chars>
 800e69c:	2801      	cmp	r0, #1
 800e69e:	d06e      	beq.n	800e77e <__ssvfiscanf_r+0x2e6>
 800e6a0:	2802      	cmp	r0, #2
 800e6a2:	f47f af20 	bne.w	800e4e6 <__ssvfiscanf_r+0x4e>
 800e6a6:	e7cf      	b.n	800e648 <__ssvfiscanf_r+0x1b0>
 800e6a8:	220a      	movs	r2, #10
 800e6aa:	e7dd      	b.n	800e668 <__ssvfiscanf_r+0x1d0>
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	9342      	str	r3, [sp, #264]	; 0x108
 800e6b0:	2303      	movs	r3, #3
 800e6b2:	e7de      	b.n	800e672 <__ssvfiscanf_r+0x1da>
 800e6b4:	2308      	movs	r3, #8
 800e6b6:	9342      	str	r3, [sp, #264]	; 0x108
 800e6b8:	2304      	movs	r3, #4
 800e6ba:	e7da      	b.n	800e672 <__ssvfiscanf_r+0x1da>
 800e6bc:	4629      	mov	r1, r5
 800e6be:	4640      	mov	r0, r8
 800e6c0:	f000 f9c6 	bl	800ea50 <__sccl>
 800e6c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e6c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6ca:	9341      	str	r3, [sp, #260]	; 0x104
 800e6cc:	4605      	mov	r5, r0
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	e7cf      	b.n	800e672 <__ssvfiscanf_r+0x1da>
 800e6d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e6d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6d8:	9341      	str	r3, [sp, #260]	; 0x104
 800e6da:	2300      	movs	r3, #0
 800e6dc:	e7c9      	b.n	800e672 <__ssvfiscanf_r+0x1da>
 800e6de:	2302      	movs	r3, #2
 800e6e0:	e7c7      	b.n	800e672 <__ssvfiscanf_r+0x1da>
 800e6e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e6e4:	06c3      	lsls	r3, r0, #27
 800e6e6:	f53f aefe 	bmi.w	800e4e6 <__ssvfiscanf_r+0x4e>
 800e6ea:	9b00      	ldr	r3, [sp, #0]
 800e6ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e6ee:	1d19      	adds	r1, r3, #4
 800e6f0:	9100      	str	r1, [sp, #0]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	f010 0f01 	tst.w	r0, #1
 800e6f8:	bf14      	ite	ne
 800e6fa:	801a      	strhne	r2, [r3, #0]
 800e6fc:	601a      	streq	r2, [r3, #0]
 800e6fe:	e6f2      	b.n	800e4e6 <__ssvfiscanf_r+0x4e>
 800e700:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e702:	4621      	mov	r1, r4
 800e704:	4630      	mov	r0, r6
 800e706:	4798      	blx	r3
 800e708:	2800      	cmp	r0, #0
 800e70a:	d0b6      	beq.n	800e67a <__ssvfiscanf_r+0x1e2>
 800e70c:	e79c      	b.n	800e648 <__ssvfiscanf_r+0x1b0>
 800e70e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e710:	3201      	adds	r2, #1
 800e712:	9245      	str	r2, [sp, #276]	; 0x114
 800e714:	6862      	ldr	r2, [r4, #4]
 800e716:	3a01      	subs	r2, #1
 800e718:	2a00      	cmp	r2, #0
 800e71a:	6062      	str	r2, [r4, #4]
 800e71c:	dd02      	ble.n	800e724 <__ssvfiscanf_r+0x28c>
 800e71e:	3301      	adds	r3, #1
 800e720:	6023      	str	r3, [r4, #0]
 800e722:	e7ad      	b.n	800e680 <__ssvfiscanf_r+0x1e8>
 800e724:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e726:	4621      	mov	r1, r4
 800e728:	4630      	mov	r0, r6
 800e72a:	4798      	blx	r3
 800e72c:	2800      	cmp	r0, #0
 800e72e:	d0a7      	beq.n	800e680 <__ssvfiscanf_r+0x1e8>
 800e730:	e78a      	b.n	800e648 <__ssvfiscanf_r+0x1b0>
 800e732:	2b04      	cmp	r3, #4
 800e734:	dc0e      	bgt.n	800e754 <__ssvfiscanf_r+0x2bc>
 800e736:	466b      	mov	r3, sp
 800e738:	4622      	mov	r2, r4
 800e73a:	a941      	add	r1, sp, #260	; 0x104
 800e73c:	4630      	mov	r0, r6
 800e73e:	f000 f87d 	bl	800e83c <_scanf_i>
 800e742:	e7ab      	b.n	800e69c <__ssvfiscanf_r+0x204>
 800e744:	0800e3e3 	.word	0x0800e3e3
 800e748:	0800e45d 	.word	0x0800e45d
 800e74c:	0800efbe 	.word	0x0800efbe
 800e750:	0800f372 	.word	0x0800f372
 800e754:	4b0b      	ldr	r3, [pc, #44]	; (800e784 <__ssvfiscanf_r+0x2ec>)
 800e756:	2b00      	cmp	r3, #0
 800e758:	f43f aec5 	beq.w	800e4e6 <__ssvfiscanf_r+0x4e>
 800e75c:	466b      	mov	r3, sp
 800e75e:	4622      	mov	r2, r4
 800e760:	a941      	add	r1, sp, #260	; 0x104
 800e762:	4630      	mov	r0, r6
 800e764:	f7fb faa4 	bl	8009cb0 <_scanf_float>
 800e768:	e798      	b.n	800e69c <__ssvfiscanf_r+0x204>
 800e76a:	89a3      	ldrh	r3, [r4, #12]
 800e76c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e770:	bf18      	it	ne
 800e772:	f04f 30ff 	movne.w	r0, #4294967295
 800e776:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e77e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e780:	e7f9      	b.n	800e776 <__ssvfiscanf_r+0x2de>
 800e782:	bf00      	nop
 800e784:	08009cb1 	.word	0x08009cb1

0800e788 <_scanf_chars>:
 800e788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e78c:	4615      	mov	r5, r2
 800e78e:	688a      	ldr	r2, [r1, #8]
 800e790:	4680      	mov	r8, r0
 800e792:	460c      	mov	r4, r1
 800e794:	b932      	cbnz	r2, 800e7a4 <_scanf_chars+0x1c>
 800e796:	698a      	ldr	r2, [r1, #24]
 800e798:	2a00      	cmp	r2, #0
 800e79a:	bf0c      	ite	eq
 800e79c:	2201      	moveq	r2, #1
 800e79e:	f04f 32ff 	movne.w	r2, #4294967295
 800e7a2:	608a      	str	r2, [r1, #8]
 800e7a4:	6822      	ldr	r2, [r4, #0]
 800e7a6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e838 <_scanf_chars+0xb0>
 800e7aa:	06d1      	lsls	r1, r2, #27
 800e7ac:	bf5f      	itttt	pl
 800e7ae:	681a      	ldrpl	r2, [r3, #0]
 800e7b0:	1d11      	addpl	r1, r2, #4
 800e7b2:	6019      	strpl	r1, [r3, #0]
 800e7b4:	6816      	ldrpl	r6, [r2, #0]
 800e7b6:	2700      	movs	r7, #0
 800e7b8:	69a0      	ldr	r0, [r4, #24]
 800e7ba:	b188      	cbz	r0, 800e7e0 <_scanf_chars+0x58>
 800e7bc:	2801      	cmp	r0, #1
 800e7be:	d107      	bne.n	800e7d0 <_scanf_chars+0x48>
 800e7c0:	682a      	ldr	r2, [r5, #0]
 800e7c2:	7811      	ldrb	r1, [r2, #0]
 800e7c4:	6962      	ldr	r2, [r4, #20]
 800e7c6:	5c52      	ldrb	r2, [r2, r1]
 800e7c8:	b952      	cbnz	r2, 800e7e0 <_scanf_chars+0x58>
 800e7ca:	2f00      	cmp	r7, #0
 800e7cc:	d031      	beq.n	800e832 <_scanf_chars+0xaa>
 800e7ce:	e022      	b.n	800e816 <_scanf_chars+0x8e>
 800e7d0:	2802      	cmp	r0, #2
 800e7d2:	d120      	bne.n	800e816 <_scanf_chars+0x8e>
 800e7d4:	682b      	ldr	r3, [r5, #0]
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e7dc:	071b      	lsls	r3, r3, #28
 800e7de:	d41a      	bmi.n	800e816 <_scanf_chars+0x8e>
 800e7e0:	6823      	ldr	r3, [r4, #0]
 800e7e2:	06da      	lsls	r2, r3, #27
 800e7e4:	bf5e      	ittt	pl
 800e7e6:	682b      	ldrpl	r3, [r5, #0]
 800e7e8:	781b      	ldrbpl	r3, [r3, #0]
 800e7ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e7ee:	682a      	ldr	r2, [r5, #0]
 800e7f0:	686b      	ldr	r3, [r5, #4]
 800e7f2:	3201      	adds	r2, #1
 800e7f4:	602a      	str	r2, [r5, #0]
 800e7f6:	68a2      	ldr	r2, [r4, #8]
 800e7f8:	3b01      	subs	r3, #1
 800e7fa:	3a01      	subs	r2, #1
 800e7fc:	606b      	str	r3, [r5, #4]
 800e7fe:	3701      	adds	r7, #1
 800e800:	60a2      	str	r2, [r4, #8]
 800e802:	b142      	cbz	r2, 800e816 <_scanf_chars+0x8e>
 800e804:	2b00      	cmp	r3, #0
 800e806:	dcd7      	bgt.n	800e7b8 <_scanf_chars+0x30>
 800e808:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e80c:	4629      	mov	r1, r5
 800e80e:	4640      	mov	r0, r8
 800e810:	4798      	blx	r3
 800e812:	2800      	cmp	r0, #0
 800e814:	d0d0      	beq.n	800e7b8 <_scanf_chars+0x30>
 800e816:	6823      	ldr	r3, [r4, #0]
 800e818:	f013 0310 	ands.w	r3, r3, #16
 800e81c:	d105      	bne.n	800e82a <_scanf_chars+0xa2>
 800e81e:	68e2      	ldr	r2, [r4, #12]
 800e820:	3201      	adds	r2, #1
 800e822:	60e2      	str	r2, [r4, #12]
 800e824:	69a2      	ldr	r2, [r4, #24]
 800e826:	b102      	cbz	r2, 800e82a <_scanf_chars+0xa2>
 800e828:	7033      	strb	r3, [r6, #0]
 800e82a:	6923      	ldr	r3, [r4, #16]
 800e82c:	443b      	add	r3, r7
 800e82e:	6123      	str	r3, [r4, #16]
 800e830:	2000      	movs	r0, #0
 800e832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e836:	bf00      	nop
 800e838:	0800efbe 	.word	0x0800efbe

0800e83c <_scanf_i>:
 800e83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e840:	4698      	mov	r8, r3
 800e842:	4b76      	ldr	r3, [pc, #472]	; (800ea1c <_scanf_i+0x1e0>)
 800e844:	460c      	mov	r4, r1
 800e846:	4682      	mov	sl, r0
 800e848:	4616      	mov	r6, r2
 800e84a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e84e:	b087      	sub	sp, #28
 800e850:	ab03      	add	r3, sp, #12
 800e852:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e856:	4b72      	ldr	r3, [pc, #456]	; (800ea20 <_scanf_i+0x1e4>)
 800e858:	69a1      	ldr	r1, [r4, #24]
 800e85a:	4a72      	ldr	r2, [pc, #456]	; (800ea24 <_scanf_i+0x1e8>)
 800e85c:	2903      	cmp	r1, #3
 800e85e:	bf18      	it	ne
 800e860:	461a      	movne	r2, r3
 800e862:	68a3      	ldr	r3, [r4, #8]
 800e864:	9201      	str	r2, [sp, #4]
 800e866:	1e5a      	subs	r2, r3, #1
 800e868:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e86c:	bf88      	it	hi
 800e86e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e872:	4627      	mov	r7, r4
 800e874:	bf82      	ittt	hi
 800e876:	eb03 0905 	addhi.w	r9, r3, r5
 800e87a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e87e:	60a3      	strhi	r3, [r4, #8]
 800e880:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e884:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e888:	bf98      	it	ls
 800e88a:	f04f 0900 	movls.w	r9, #0
 800e88e:	6023      	str	r3, [r4, #0]
 800e890:	463d      	mov	r5, r7
 800e892:	f04f 0b00 	mov.w	fp, #0
 800e896:	6831      	ldr	r1, [r6, #0]
 800e898:	ab03      	add	r3, sp, #12
 800e89a:	7809      	ldrb	r1, [r1, #0]
 800e89c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e8a0:	2202      	movs	r2, #2
 800e8a2:	f7f1 fc9d 	bl	80001e0 <memchr>
 800e8a6:	b328      	cbz	r0, 800e8f4 <_scanf_i+0xb8>
 800e8a8:	f1bb 0f01 	cmp.w	fp, #1
 800e8ac:	d159      	bne.n	800e962 <_scanf_i+0x126>
 800e8ae:	6862      	ldr	r2, [r4, #4]
 800e8b0:	b92a      	cbnz	r2, 800e8be <_scanf_i+0x82>
 800e8b2:	6822      	ldr	r2, [r4, #0]
 800e8b4:	2308      	movs	r3, #8
 800e8b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e8ba:	6063      	str	r3, [r4, #4]
 800e8bc:	6022      	str	r2, [r4, #0]
 800e8be:	6822      	ldr	r2, [r4, #0]
 800e8c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e8c4:	6022      	str	r2, [r4, #0]
 800e8c6:	68a2      	ldr	r2, [r4, #8]
 800e8c8:	1e51      	subs	r1, r2, #1
 800e8ca:	60a1      	str	r1, [r4, #8]
 800e8cc:	b192      	cbz	r2, 800e8f4 <_scanf_i+0xb8>
 800e8ce:	6832      	ldr	r2, [r6, #0]
 800e8d0:	1c51      	adds	r1, r2, #1
 800e8d2:	6031      	str	r1, [r6, #0]
 800e8d4:	7812      	ldrb	r2, [r2, #0]
 800e8d6:	f805 2b01 	strb.w	r2, [r5], #1
 800e8da:	6872      	ldr	r2, [r6, #4]
 800e8dc:	3a01      	subs	r2, #1
 800e8de:	2a00      	cmp	r2, #0
 800e8e0:	6072      	str	r2, [r6, #4]
 800e8e2:	dc07      	bgt.n	800e8f4 <_scanf_i+0xb8>
 800e8e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e8e8:	4631      	mov	r1, r6
 800e8ea:	4650      	mov	r0, sl
 800e8ec:	4790      	blx	r2
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	f040 8085 	bne.w	800e9fe <_scanf_i+0x1c2>
 800e8f4:	f10b 0b01 	add.w	fp, fp, #1
 800e8f8:	f1bb 0f03 	cmp.w	fp, #3
 800e8fc:	d1cb      	bne.n	800e896 <_scanf_i+0x5a>
 800e8fe:	6863      	ldr	r3, [r4, #4]
 800e900:	b90b      	cbnz	r3, 800e906 <_scanf_i+0xca>
 800e902:	230a      	movs	r3, #10
 800e904:	6063      	str	r3, [r4, #4]
 800e906:	6863      	ldr	r3, [r4, #4]
 800e908:	4947      	ldr	r1, [pc, #284]	; (800ea28 <_scanf_i+0x1ec>)
 800e90a:	6960      	ldr	r0, [r4, #20]
 800e90c:	1ac9      	subs	r1, r1, r3
 800e90e:	f000 f89f 	bl	800ea50 <__sccl>
 800e912:	f04f 0b00 	mov.w	fp, #0
 800e916:	68a3      	ldr	r3, [r4, #8]
 800e918:	6822      	ldr	r2, [r4, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d03d      	beq.n	800e99a <_scanf_i+0x15e>
 800e91e:	6831      	ldr	r1, [r6, #0]
 800e920:	6960      	ldr	r0, [r4, #20]
 800e922:	f891 c000 	ldrb.w	ip, [r1]
 800e926:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e92a:	2800      	cmp	r0, #0
 800e92c:	d035      	beq.n	800e99a <_scanf_i+0x15e>
 800e92e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e932:	d124      	bne.n	800e97e <_scanf_i+0x142>
 800e934:	0510      	lsls	r0, r2, #20
 800e936:	d522      	bpl.n	800e97e <_scanf_i+0x142>
 800e938:	f10b 0b01 	add.w	fp, fp, #1
 800e93c:	f1b9 0f00 	cmp.w	r9, #0
 800e940:	d003      	beq.n	800e94a <_scanf_i+0x10e>
 800e942:	3301      	adds	r3, #1
 800e944:	f109 39ff 	add.w	r9, r9, #4294967295
 800e948:	60a3      	str	r3, [r4, #8]
 800e94a:	6873      	ldr	r3, [r6, #4]
 800e94c:	3b01      	subs	r3, #1
 800e94e:	2b00      	cmp	r3, #0
 800e950:	6073      	str	r3, [r6, #4]
 800e952:	dd1b      	ble.n	800e98c <_scanf_i+0x150>
 800e954:	6833      	ldr	r3, [r6, #0]
 800e956:	3301      	adds	r3, #1
 800e958:	6033      	str	r3, [r6, #0]
 800e95a:	68a3      	ldr	r3, [r4, #8]
 800e95c:	3b01      	subs	r3, #1
 800e95e:	60a3      	str	r3, [r4, #8]
 800e960:	e7d9      	b.n	800e916 <_scanf_i+0xda>
 800e962:	f1bb 0f02 	cmp.w	fp, #2
 800e966:	d1ae      	bne.n	800e8c6 <_scanf_i+0x8a>
 800e968:	6822      	ldr	r2, [r4, #0]
 800e96a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e96e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e972:	d1bf      	bne.n	800e8f4 <_scanf_i+0xb8>
 800e974:	2310      	movs	r3, #16
 800e976:	6063      	str	r3, [r4, #4]
 800e978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e97c:	e7a2      	b.n	800e8c4 <_scanf_i+0x88>
 800e97e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e982:	6022      	str	r2, [r4, #0]
 800e984:	780b      	ldrb	r3, [r1, #0]
 800e986:	f805 3b01 	strb.w	r3, [r5], #1
 800e98a:	e7de      	b.n	800e94a <_scanf_i+0x10e>
 800e98c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e990:	4631      	mov	r1, r6
 800e992:	4650      	mov	r0, sl
 800e994:	4798      	blx	r3
 800e996:	2800      	cmp	r0, #0
 800e998:	d0df      	beq.n	800e95a <_scanf_i+0x11e>
 800e99a:	6823      	ldr	r3, [r4, #0]
 800e99c:	05db      	lsls	r3, r3, #23
 800e99e:	d50d      	bpl.n	800e9bc <_scanf_i+0x180>
 800e9a0:	42bd      	cmp	r5, r7
 800e9a2:	d909      	bls.n	800e9b8 <_scanf_i+0x17c>
 800e9a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e9a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e9ac:	4632      	mov	r2, r6
 800e9ae:	4650      	mov	r0, sl
 800e9b0:	4798      	blx	r3
 800e9b2:	f105 39ff 	add.w	r9, r5, #4294967295
 800e9b6:	464d      	mov	r5, r9
 800e9b8:	42bd      	cmp	r5, r7
 800e9ba:	d02d      	beq.n	800ea18 <_scanf_i+0x1dc>
 800e9bc:	6822      	ldr	r2, [r4, #0]
 800e9be:	f012 0210 	ands.w	r2, r2, #16
 800e9c2:	d113      	bne.n	800e9ec <_scanf_i+0x1b0>
 800e9c4:	702a      	strb	r2, [r5, #0]
 800e9c6:	6863      	ldr	r3, [r4, #4]
 800e9c8:	9e01      	ldr	r6, [sp, #4]
 800e9ca:	4639      	mov	r1, r7
 800e9cc:	4650      	mov	r0, sl
 800e9ce:	47b0      	blx	r6
 800e9d0:	6821      	ldr	r1, [r4, #0]
 800e9d2:	f8d8 3000 	ldr.w	r3, [r8]
 800e9d6:	f011 0f20 	tst.w	r1, #32
 800e9da:	d013      	beq.n	800ea04 <_scanf_i+0x1c8>
 800e9dc:	1d1a      	adds	r2, r3, #4
 800e9de:	f8c8 2000 	str.w	r2, [r8]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	6018      	str	r0, [r3, #0]
 800e9e6:	68e3      	ldr	r3, [r4, #12]
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	60e3      	str	r3, [r4, #12]
 800e9ec:	1bed      	subs	r5, r5, r7
 800e9ee:	44ab      	add	fp, r5
 800e9f0:	6925      	ldr	r5, [r4, #16]
 800e9f2:	445d      	add	r5, fp
 800e9f4:	6125      	str	r5, [r4, #16]
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	b007      	add	sp, #28
 800e9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9fe:	f04f 0b00 	mov.w	fp, #0
 800ea02:	e7ca      	b.n	800e99a <_scanf_i+0x15e>
 800ea04:	1d1a      	adds	r2, r3, #4
 800ea06:	f8c8 2000 	str.w	r2, [r8]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f011 0f01 	tst.w	r1, #1
 800ea10:	bf14      	ite	ne
 800ea12:	8018      	strhne	r0, [r3, #0]
 800ea14:	6018      	streq	r0, [r3, #0]
 800ea16:	e7e6      	b.n	800e9e6 <_scanf_i+0x1aa>
 800ea18:	2001      	movs	r0, #1
 800ea1a:	e7ed      	b.n	800e9f8 <_scanf_i+0x1bc>
 800ea1c:	0800ec78 	.word	0x0800ec78
 800ea20:	0800e249 	.word	0x0800e249
 800ea24:	0800afad 	.word	0x0800afad
 800ea28:	0800f396 	.word	0x0800f396

0800ea2c <_read_r>:
 800ea2c:	b538      	push	{r3, r4, r5, lr}
 800ea2e:	4d07      	ldr	r5, [pc, #28]	; (800ea4c <_read_r+0x20>)
 800ea30:	4604      	mov	r4, r0
 800ea32:	4608      	mov	r0, r1
 800ea34:	4611      	mov	r1, r2
 800ea36:	2200      	movs	r2, #0
 800ea38:	602a      	str	r2, [r5, #0]
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	f7f3 feda 	bl	80027f4 <_read>
 800ea40:	1c43      	adds	r3, r0, #1
 800ea42:	d102      	bne.n	800ea4a <_read_r+0x1e>
 800ea44:	682b      	ldr	r3, [r5, #0]
 800ea46:	b103      	cbz	r3, 800ea4a <_read_r+0x1e>
 800ea48:	6023      	str	r3, [r4, #0]
 800ea4a:	bd38      	pop	{r3, r4, r5, pc}
 800ea4c:	200004bc 	.word	0x200004bc

0800ea50 <__sccl>:
 800ea50:	b570      	push	{r4, r5, r6, lr}
 800ea52:	780b      	ldrb	r3, [r1, #0]
 800ea54:	4604      	mov	r4, r0
 800ea56:	2b5e      	cmp	r3, #94	; 0x5e
 800ea58:	bf0b      	itete	eq
 800ea5a:	784b      	ldrbeq	r3, [r1, #1]
 800ea5c:	1c48      	addne	r0, r1, #1
 800ea5e:	1c88      	addeq	r0, r1, #2
 800ea60:	2200      	movne	r2, #0
 800ea62:	bf08      	it	eq
 800ea64:	2201      	moveq	r2, #1
 800ea66:	1e61      	subs	r1, r4, #1
 800ea68:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ea6c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ea70:	42a9      	cmp	r1, r5
 800ea72:	d1fb      	bne.n	800ea6c <__sccl+0x1c>
 800ea74:	b90b      	cbnz	r3, 800ea7a <__sccl+0x2a>
 800ea76:	3801      	subs	r0, #1
 800ea78:	bd70      	pop	{r4, r5, r6, pc}
 800ea7a:	f082 0201 	eor.w	r2, r2, #1
 800ea7e:	54e2      	strb	r2, [r4, r3]
 800ea80:	4605      	mov	r5, r0
 800ea82:	4628      	mov	r0, r5
 800ea84:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ea88:	292d      	cmp	r1, #45	; 0x2d
 800ea8a:	d006      	beq.n	800ea9a <__sccl+0x4a>
 800ea8c:	295d      	cmp	r1, #93	; 0x5d
 800ea8e:	d0f3      	beq.n	800ea78 <__sccl+0x28>
 800ea90:	b909      	cbnz	r1, 800ea96 <__sccl+0x46>
 800ea92:	4628      	mov	r0, r5
 800ea94:	e7f0      	b.n	800ea78 <__sccl+0x28>
 800ea96:	460b      	mov	r3, r1
 800ea98:	e7f1      	b.n	800ea7e <__sccl+0x2e>
 800ea9a:	786e      	ldrb	r6, [r5, #1]
 800ea9c:	2e5d      	cmp	r6, #93	; 0x5d
 800ea9e:	d0fa      	beq.n	800ea96 <__sccl+0x46>
 800eaa0:	42b3      	cmp	r3, r6
 800eaa2:	dcf8      	bgt.n	800ea96 <__sccl+0x46>
 800eaa4:	3502      	adds	r5, #2
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	3101      	adds	r1, #1
 800eaaa:	428e      	cmp	r6, r1
 800eaac:	5462      	strb	r2, [r4, r1]
 800eaae:	dcfb      	bgt.n	800eaa8 <__sccl+0x58>
 800eab0:	1af1      	subs	r1, r6, r3
 800eab2:	3901      	subs	r1, #1
 800eab4:	1c58      	adds	r0, r3, #1
 800eab6:	42b3      	cmp	r3, r6
 800eab8:	bfa8      	it	ge
 800eaba:	2100      	movge	r1, #0
 800eabc:	1843      	adds	r3, r0, r1
 800eabe:	e7e0      	b.n	800ea82 <__sccl+0x32>

0800eac0 <_raise_r>:
 800eac0:	291f      	cmp	r1, #31
 800eac2:	b538      	push	{r3, r4, r5, lr}
 800eac4:	4604      	mov	r4, r0
 800eac6:	460d      	mov	r5, r1
 800eac8:	d904      	bls.n	800ead4 <_raise_r+0x14>
 800eaca:	2316      	movs	r3, #22
 800eacc:	6003      	str	r3, [r0, #0]
 800eace:	f04f 30ff 	mov.w	r0, #4294967295
 800ead2:	bd38      	pop	{r3, r4, r5, pc}
 800ead4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ead6:	b112      	cbz	r2, 800eade <_raise_r+0x1e>
 800ead8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eadc:	b94b      	cbnz	r3, 800eaf2 <_raise_r+0x32>
 800eade:	4620      	mov	r0, r4
 800eae0:	f000 f830 	bl	800eb44 <_getpid_r>
 800eae4:	462a      	mov	r2, r5
 800eae6:	4601      	mov	r1, r0
 800eae8:	4620      	mov	r0, r4
 800eaea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaee:	f000 b817 	b.w	800eb20 <_kill_r>
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d00a      	beq.n	800eb0c <_raise_r+0x4c>
 800eaf6:	1c59      	adds	r1, r3, #1
 800eaf8:	d103      	bne.n	800eb02 <_raise_r+0x42>
 800eafa:	2316      	movs	r3, #22
 800eafc:	6003      	str	r3, [r0, #0]
 800eafe:	2001      	movs	r0, #1
 800eb00:	e7e7      	b.n	800ead2 <_raise_r+0x12>
 800eb02:	2400      	movs	r4, #0
 800eb04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb08:	4628      	mov	r0, r5
 800eb0a:	4798      	blx	r3
 800eb0c:	2000      	movs	r0, #0
 800eb0e:	e7e0      	b.n	800ead2 <_raise_r+0x12>

0800eb10 <raise>:
 800eb10:	4b02      	ldr	r3, [pc, #8]	; (800eb1c <raise+0xc>)
 800eb12:	4601      	mov	r1, r0
 800eb14:	6818      	ldr	r0, [r3, #0]
 800eb16:	f7ff bfd3 	b.w	800eac0 <_raise_r>
 800eb1a:	bf00      	nop
 800eb1c:	20000014 	.word	0x20000014

0800eb20 <_kill_r>:
 800eb20:	b538      	push	{r3, r4, r5, lr}
 800eb22:	4d07      	ldr	r5, [pc, #28]	; (800eb40 <_kill_r+0x20>)
 800eb24:	2300      	movs	r3, #0
 800eb26:	4604      	mov	r4, r0
 800eb28:	4608      	mov	r0, r1
 800eb2a:	4611      	mov	r1, r2
 800eb2c:	602b      	str	r3, [r5, #0]
 800eb2e:	f7f3 fc93 	bl	8002458 <_kill>
 800eb32:	1c43      	adds	r3, r0, #1
 800eb34:	d102      	bne.n	800eb3c <_kill_r+0x1c>
 800eb36:	682b      	ldr	r3, [r5, #0]
 800eb38:	b103      	cbz	r3, 800eb3c <_kill_r+0x1c>
 800eb3a:	6023      	str	r3, [r4, #0]
 800eb3c:	bd38      	pop	{r3, r4, r5, pc}
 800eb3e:	bf00      	nop
 800eb40:	200004bc 	.word	0x200004bc

0800eb44 <_getpid_r>:
 800eb44:	f7f3 bc80 	b.w	8002448 <_getpid>

0800eb48 <__submore>:
 800eb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4c:	460c      	mov	r4, r1
 800eb4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800eb50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb54:	4299      	cmp	r1, r3
 800eb56:	d11d      	bne.n	800eb94 <__submore+0x4c>
 800eb58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800eb5c:	f7fa fbca 	bl	80092f4 <_malloc_r>
 800eb60:	b918      	cbnz	r0, 800eb6a <__submore+0x22>
 800eb62:	f04f 30ff 	mov.w	r0, #4294967295
 800eb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb6e:	63a3      	str	r3, [r4, #56]	; 0x38
 800eb70:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800eb74:	6360      	str	r0, [r4, #52]	; 0x34
 800eb76:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800eb7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800eb7e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800eb82:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800eb86:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800eb8a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800eb8e:	6020      	str	r0, [r4, #0]
 800eb90:	2000      	movs	r0, #0
 800eb92:	e7e8      	b.n	800eb66 <__submore+0x1e>
 800eb94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800eb96:	0077      	lsls	r7, r6, #1
 800eb98:	463a      	mov	r2, r7
 800eb9a:	f7ff fbf3 	bl	800e384 <_realloc_r>
 800eb9e:	4605      	mov	r5, r0
 800eba0:	2800      	cmp	r0, #0
 800eba2:	d0de      	beq.n	800eb62 <__submore+0x1a>
 800eba4:	eb00 0806 	add.w	r8, r0, r6
 800eba8:	4601      	mov	r1, r0
 800ebaa:	4632      	mov	r2, r6
 800ebac:	4640      	mov	r0, r8
 800ebae:	f7fe fa9d 	bl	800d0ec <memcpy>
 800ebb2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ebb6:	f8c4 8000 	str.w	r8, [r4]
 800ebba:	e7e9      	b.n	800eb90 <__submore+0x48>

0800ebbc <_malloc_usable_size_r>:
 800ebbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebc0:	1f18      	subs	r0, r3, #4
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	bfbc      	itt	lt
 800ebc6:	580b      	ldrlt	r3, [r1, r0]
 800ebc8:	18c0      	addlt	r0, r0, r3
 800ebca:	4770      	bx	lr

0800ebcc <_init>:
 800ebcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebce:	bf00      	nop
 800ebd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebd2:	bc08      	pop	{r3}
 800ebd4:	469e      	mov	lr, r3
 800ebd6:	4770      	bx	lr

0800ebd8 <_fini>:
 800ebd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebda:	bf00      	nop
 800ebdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebde:	bc08      	pop	{r3}
 800ebe0:	469e      	mov	lr, r3
 800ebe2:	4770      	bx	lr
