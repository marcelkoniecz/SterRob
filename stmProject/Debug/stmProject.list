
stmProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005f98  08005f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ffc  08005ffc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006004  08006004  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800600c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000010  0800601c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  0800601c  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f1e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f26  00000000  00000000  00038f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001620  00000000  00000000  0003be88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  0003d4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b173  00000000  00000000  0003e930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134b8  00000000  00000000  00069aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011016b  00000000  00000000  0007cf5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018d0c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d84  00000000  00000000  0018d144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f80 	.word	0x08005f80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005f80 	.word	0x08005f80

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
 80004f8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004fa:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <MX_ADC1_Init+0xe0>)
 80004fc:	4a2f      	ldr	r2, [pc, #188]	; (80005bc <MX_ADC1_Init+0xe4>)
 80004fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000500:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <MX_ADC1_Init+0xe0>)
 8000502:	2200      	movs	r2, #0
 8000504:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000506:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <MX_ADC1_Init+0xe0>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050c:	4b2a      	ldr	r3, [pc, #168]	; (80005b8 <MX_ADC1_Init+0xe0>)
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <MX_ADC1_Init+0xe0>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <MX_ADC1_Init+0xe0>)
 800051a:	2204      	movs	r2, #4
 800051c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800051e:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <MX_ADC1_Init+0xe0>)
 8000520:	2200      	movs	r2, #0
 8000522:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000524:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <MX_ADC1_Init+0xe0>)
 8000526:	2200      	movs	r2, #0
 8000528:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800052a:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <MX_ADC1_Init+0xe0>)
 800052c:	2201      	movs	r2, #1
 800052e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000530:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <MX_ADC1_Init+0xe0>)
 8000532:	2200      	movs	r2, #0
 8000534:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <MX_ADC1_Init+0xe0>)
 800053a:	2200      	movs	r2, #0
 800053c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <MX_ADC1_Init+0xe0>)
 8000540:	2200      	movs	r2, #0
 8000542:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <MX_ADC1_Init+0xe0>)
 8000546:	2200      	movs	r2, #0
 8000548:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800054c:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <MX_ADC1_Init+0xe0>)
 800054e:	2200      	movs	r2, #0
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000552:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <MX_ADC1_Init+0xe0>)
 8000554:	2200      	movs	r2, #0
 8000556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800055a:	4817      	ldr	r0, [pc, #92]	; (80005b8 <MX_ADC1_Init+0xe0>)
 800055c:	f001 f9ae 	bl	80018bc <HAL_ADC_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000566:	f000 f9eb 	bl	8000940 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	4619      	mov	r1, r3
 8000574:	4810      	ldr	r0, [pc, #64]	; (80005b8 <MX_ADC1_Init+0xe0>)
 8000576:	f001 ff09 	bl	800238c <HAL_ADCEx_MultiModeConfigChannel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000580:	f000 f9de 	bl	8000940 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_ADC1_Init+0xe8>)
 8000586:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000588:	2306      	movs	r3, #6
 800058a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000590:	237f      	movs	r3, #127	; 0x7f
 8000592:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000594:	2304      	movs	r3, #4
 8000596:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	4619      	mov	r1, r3
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_ADC1_Init+0xe0>)
 80005a2:	f001 fadf 	bl	8001b64 <HAL_ADC_ConfigChannel>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80005ac:	f000 f9c8 	bl	8000940 <Error_Handler>
  }

}
 80005b0:	bf00      	nop
 80005b2:	3728      	adds	r7, #40	; 0x28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2000002c 	.word	0x2000002c
 80005bc:	50040000 	.word	0x50040000
 80005c0:	19200040 	.word	0x19200040

080005c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a15      	ldr	r2, [pc, #84]	; (8000638 <HAL_ADC_MspInit+0x74>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d124      	bne.n	8000630 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_ADC_MspInit+0x78>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <HAL_ADC_MspInit+0x78>)
 80005ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_ADC_MspInit+0x78>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <HAL_ADC_MspInit+0x78>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a0e      	ldr	r2, [pc, #56]	; (800063c <HAL_ADC_MspInit+0x78>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <HAL_ADC_MspInit+0x78>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800061a:	230b      	movs	r3, #11
 800061c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f002 f87e 	bl	800272c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000630:	bf00      	nop
 8000632:	3728      	adds	r7, #40	; 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	50040000 	.word	0x50040000
 800063c:	40021000 	.word	0x40021000

08000640 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	4b3e      	ldr	r3, [pc, #248]	; (8000750 <MX_GPIO_Init+0x110>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a3d      	ldr	r2, [pc, #244]	; (8000750 <MX_GPIO_Init+0x110>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b3b      	ldr	r3, [pc, #236]	; (8000750 <MX_GPIO_Init+0x110>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0304 	and.w	r3, r3, #4
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066e:	4b38      	ldr	r3, [pc, #224]	; (8000750 <MX_GPIO_Init+0x110>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a37      	ldr	r2, [pc, #220]	; (8000750 <MX_GPIO_Init+0x110>)
 8000674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b35      	ldr	r3, [pc, #212]	; (8000750 <MX_GPIO_Init+0x110>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b32      	ldr	r3, [pc, #200]	; (8000750 <MX_GPIO_Init+0x110>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4a31      	ldr	r2, [pc, #196]	; (8000750 <MX_GPIO_Init+0x110>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000692:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <MX_GPIO_Init+0x110>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069e:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <MX_GPIO_Init+0x110>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a2b      	ldr	r2, [pc, #172]	; (8000750 <MX_GPIO_Init+0x110>)
 80006a4:	f043 0310 	orr.w	r3, r3, #16
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b29      	ldr	r3, [pc, #164]	; (8000750 <MX_GPIO_Init+0x110>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0310 	and.w	r3, r3, #16
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	4b26      	ldr	r3, [pc, #152]	; (8000750 <MX_GPIO_Init+0x110>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a25      	ldr	r2, [pc, #148]	; (8000750 <MX_GPIO_Init+0x110>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b23      	ldr	r3, [pc, #140]	; (8000750 <MX_GPIO_Init+0x110>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2121      	movs	r1, #33	; 0x21
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f002 fac5 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e0:	481c      	ldr	r0, [pc, #112]	; (8000754 <MX_GPIO_Init+0x114>)
 80006e2:	f002 fabf 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	21c0      	movs	r1, #192	; 0xc0
 80006ea:	481b      	ldr	r0, [pc, #108]	; (8000758 <MX_GPIO_Init+0x118>)
 80006ec:	f002 faba 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80006f0:	2321      	movs	r3, #33	; 0x21
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f002 f80f 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800070e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <MX_GPIO_Init+0x114>)
 8000728:	f002 f800 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800072c:	23c0      	movs	r3, #192	; 0xc0
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_GPIO_Init+0x118>)
 8000744:	f001 fff2 	bl	800272c <HAL_GPIO_Init>

}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	; 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	48001000 	.word	0x48001000
 8000758:	48000400 	.word	0x48000400

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b598      	push	{r3, r4, r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f000 fe82 	bl	8001468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f850 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f7ff ff6a 	bl	8000640 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 800076c:	f000 f8f4 	bl	8000958 <MX_QUADSPI_Init>
  MX_ADC1_Init();
 8000770:	f7ff feb2 	bl	80004d8 <MX_ADC1_Init>
  MX_RTC_Init();
 8000774:	f000 fc28 	bl	8000fc8 <MX_RTC_Init>
  MX_TIM2_Init();
 8000778:	f000 fd6e 	bl	8001258 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800077c:	f000 fdd8 	bl	8001330 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	//Inicjalizacja
	if (CSP_QUADSPI_Init() != HAL_OK) {
 8000780:	f000 f972 	bl	8000a68 <CSP_QUADSPI_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <main+0x32>
		Error_Handler();
 800078a:	f000 f8d9 	bl	8000940 <Error_Handler>
	}

	if (CSP_QSPI_Erase_Chip() != HAL_OK) {
 800078e:	f000 f9a1 	bl	8000ad4 <CSP_QSPI_Erase_Chip>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <main+0x40>
		Error_Handler();
 8000798:	f000 f8d2 	bl	8000940 <Error_Handler>
	}

	//Ustawienie daty i godziny
	if (setDate(14, 04, 22, 3))
 800079c:	2303      	movs	r3, #3
 800079e:	2216      	movs	r2, #22
 80007a0:	2104      	movs	r1, #4
 80007a2:	200e      	movs	r0, #14
 80007a4:	f000 fc88 	bl	80010b8 <setDate>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <main+0x56>
		Error_Handler();
 80007ae:	f000 f8c7 	bl	8000940 <Error_Handler>
	if (setTime(0, 33, 17))
 80007b2:	2211      	movs	r2, #17
 80007b4:	2121      	movs	r1, #33	; 0x21
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fca4 	bl	8001104 <setTime>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <main+0x6a>
		Error_Handler();
 80007c2:	f000 f8bd 	bl	8000940 <Error_Handler>




	if (CSP_QSPI_Write(buf, 0, strlen(buf)) != HAL_OK) {
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <main+0xa4>)
 80007c8:	681c      	ldr	r4, [r3, #0]
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <main+0xa4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fcfa 	bl	80001c8 <strlen>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	2100      	movs	r1, #0
 80007da:	4620      	mov	r0, r4
 80007dc:	f000 fb24 	bl	8000e28 <CSP_QSPI_Write>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <main+0x8e>
		Error_Handler();
 80007e6:	f000 f8ab 	bl	8000940 <Error_Handler>
	}

	if (CSP_QSPI_Read(readbuf, 0, 100) != HAL_OK) {
 80007ea:	2264      	movs	r2, #100	; 0x64
 80007ec:	2100      	movs	r1, #0
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <main+0xa8>)
 80007f0:	f000 fb94 	bl	8000f1c <CSP_QSPI_Read>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <main+0xa2>
		Error_Handler();
 80007fa:	f000 f8a1 	bl	8000940 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80007fe:	e7fe      	b.n	80007fe <main+0xa2>
 8000800:	20000000 	.word	0x20000000
 8000804:	20000090 	.word	0x20000090

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b0b8      	sub	sp, #224	; 0xe0
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000812:	2244      	movs	r2, #68	; 0x44
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f005 fbaa 	bl	8005f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800082c:	463b      	mov	r3, r7
 800082e:	2288      	movs	r2, #136	; 0x88
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f005 fb9c 	bl	8005f70 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000838:	f002 fa2c 	bl	8002c94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800083c:	4b3e      	ldr	r3, [pc, #248]	; (8000938 <SystemClock_Config+0x130>)
 800083e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000842:	4a3d      	ldr	r2, [pc, #244]	; (8000938 <SystemClock_Config+0x130>)
 8000844:	f023 0318 	bic.w	r3, r3, #24
 8000848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800084c:	2306      	movs	r3, #6
 800084e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000852:	2301      	movs	r3, #1
 8000854:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800085c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000860:	2310      	movs	r3, #16
 8000862:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086c:	2302      	movs	r3, #2
 800086e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000872:	2301      	movs	r3, #1
 8000874:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000878:	230a      	movs	r3, #10
 800087a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800087e:	2307      	movs	r3, #7
 8000880:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000884:	2302      	movs	r3, #2
 8000886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000894:	4618      	mov	r0, r3
 8000896:	f002 ff51 	bl	800373c <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008a0:	f000 f84e 	bl	8000940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008aa:	2303      	movs	r3, #3
 80008ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008c6:	2104      	movs	r1, #4
 80008c8:	4618      	mov	r0, r3
 80008ca:	f003 fb1d 	bl	8003f08 <HAL_RCC_ClockConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008d4:	f000 f834 	bl	8000940 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <SystemClock_Config+0x134>)
 80008da:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008dc:	2300      	movs	r3, #0
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008e4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80008ee:	2302      	movs	r3, #2
 80008f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80008f6:	2308      	movs	r3, #8
 80008f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008fa:	2307      	movs	r3, #7
 80008fc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008fe:	2302      	movs	r3, #2
 8000900:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000906:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800090a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090c:	463b      	mov	r3, r7
 800090e:	4618      	mov	r0, r3
 8000910:	f003 fcfe 	bl	8004310 <HAL_RCCEx_PeriphCLKConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x116>
  {
    Error_Handler();
 800091a:	f000 f811 	bl	8000940 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800091e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000922:	f002 f9d5 	bl	8002cd0 <HAL_PWREx_ControlVoltageScaling>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x128>
  {
    Error_Handler();
 800092c:	f000 f808 	bl	8000940 <Error_Handler>
  }
}
 8000930:	bf00      	nop
 8000932:	37e0      	adds	r7, #224	; 0xe0
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000
 800093c:	00024002 	.word	0x00024002

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	int a = 10;
 8000946:	230a      	movs	r3, #10
 8000948:	607b      	str	r3, [r7, #4]
  /* USER CODE END Error_Handler_Debug */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_QUADSPI_Init+0x44>)
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <MX_QUADSPI_Init+0x48>)
 8000960:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_QUADSPI_Init+0x44>)
 8000964:	2201      	movs	r2, #1
 8000966:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_QUADSPI_Init+0x44>)
 800096a:	2204      	movs	r2, #4
 800096c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_QUADSPI_Init+0x44>)
 8000970:	2210      	movs	r2, #16
 8000972:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_QUADSPI_Init+0x44>)
 8000976:	2217      	movs	r2, #23
 8000978:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_QUADSPI_Init+0x44>)
 800097c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000980:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_QUADSPI_Init+0x44>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_QUADSPI_Init+0x44>)
 800098a:	f002 f9f7 	bl	8002d7c <HAL_QSPI_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_QUADSPI_Init+0x40>
  {
    Error_Handler();
 8000994:	f7ff ffd4 	bl	8000940 <Error_Handler>
  }

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000010c 	.word	0x2000010c
 80009a0:	a0001000 	.word	0xa0001000

080009a4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_QSPI_MspInit+0x7c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d128      	bne.n	8000a18 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_QSPI_MspInit+0x80>)
 80009c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <HAL_QSPI_MspInit+0x80>)
 80009cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d0:	6513      	str	r3, [r2, #80]	; 0x50
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_QSPI_MspInit+0x80>)
 80009d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_QSPI_MspInit+0x80>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_QSPI_MspInit+0x80>)
 80009e4:	f043 0310 	orr.w	r3, r3, #16
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_QSPI_MspInit+0x80>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80009f6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80009fa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a08:	230a      	movs	r3, #10
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_QSPI_MspInit+0x84>)
 8000a14:	f001 fe8a 	bl	800272c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	a0001000 	.word	0xa0001000
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48001000 	.word	0x48001000

08000a2c <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_QSPI_MspDeInit+0x30>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d10a      	bne.n	8000a54 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_QSPI_MspDeInit+0x34>)
 8000a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a42:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_QSPI_MspDeInit+0x34>)
 8000a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a48:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000a4a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <HAL_QSPI_MspDeInit+0x38>)
 8000a50:	f002 f814 	bl	8002a7c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	a0001000 	.word	0xa0001000
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48001000 	.word	0x48001000

08000a68 <CSP_QUADSPI_Init>:
*/



uint8_t CSP_QUADSPI_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <CSP_QUADSPI_Init+0x64>)
 8000a6e:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <CSP_QUADSPI_Init+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000a72:	4816      	ldr	r0, [pc, #88]	; (8000acc <CSP_QUADSPI_Init+0x64>)
 8000a74:	f002 f9f8 	bl	8002e68 <HAL_QSPI_DeInit>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <CSP_QUADSPI_Init+0x1a>
        return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e021      	b.n	8000ac6 <CSP_QUADSPI_Init+0x5e>
    }

    MX_QUADSPI_Init();
 8000a82:	f7ff ff69 	bl	8000958 <MX_QUADSPI_Init>

    if (QSPI_ResetChip() != HAL_OK) {
 8000a86:	f000 f971 	bl	8000d6c <QSPI_ResetChip>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <CSP_QUADSPI_Init+0x2c>
        return HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e018      	b.n	8000ac6 <CSP_QUADSPI_Init+0x5e>
    }

    HAL_Delay(1);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 fd63 	bl	8001560 <HAL_Delay>

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000a9a:	f000 f857 	bl	8000b4c <QSPI_AutoPollingMemReady>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <CSP_QUADSPI_Init+0x40>
        return HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e00e      	b.n	8000ac6 <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
 8000aa8:	f000 f888 	bl	8000bbc <QSPI_WriteEnable>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <CSP_QUADSPI_Init+0x4e>

        return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e007      	b.n	8000ac6 <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_Configuration() != HAL_OK) {
 8000ab6:	f000 f8cb 	bl	8000c50 <QSPI_Configuration>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <CSP_QUADSPI_Init+0x5c>
        return HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e000      	b.n	8000ac6 <CSP_QUADSPI_Init+0x5e>
    }

    return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000010c 	.word	0x2000010c
 8000ad0:	a0001000 	.word	0xa0001000

08000ad4 <CSP_QSPI_Erase_Chip>:


uint8_t CSP_QSPI_Erase_Chip(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	; 0x38
 8000ad8:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;


    if (QSPI_WriteEnable() != HAL_OK) {
 8000ada:	f000 f86f 	bl	8000bbc <QSPI_WriteEnable>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <CSP_QSPI_Erase_Chip+0x14>
        return HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e02b      	b.n	8000b40 <CSP_QSPI_Erase_Chip+0x6c>
    }


    /* Erasing Sequence --------------------------------- */
    sCommand.Instruction = BULK_ERASE_CMD;
 8000ae8:	23c7      	movs	r3, #199	; 0xc7
 8000aea:	603b      	str	r3, [r7, #0]
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af0:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af6:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b00:	2300      	movs	r3, #0
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b04:	2300      	movs	r3, #0
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
    sCommand.Address = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
    sCommand.DataMode = QSPI_DATA_NONE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DummyCycles = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]


    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_MAX_DELAY)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <CSP_QSPI_Erase_Chip+0x74>)
 8000b22:	f002 f9c5 	bl	8002eb0 <HAL_QSPI_Command>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <CSP_QSPI_Erase_Chip+0x5c>
        != HAL_OK) {
        return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e007      	b.n	8000b40 <CSP_QSPI_Erase_Chip+0x6c>
    }

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000b30:	f000 f80c 	bl	8000b4c <QSPI_AutoPollingMemReady>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <CSP_QSPI_Erase_Chip+0x6a>
        return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <CSP_QSPI_Erase_Chip+0x6c>
    }

    return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3738      	adds	r7, #56	; 0x38
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000010c 	.word	0x2000010c

08000b4c <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	; 0x50
 8000b50:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8000b58:	2305      	movs	r3, #5
 8000b5a:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b68:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b72:	2300      	movs	r3, #0
 8000b74:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b76:	2300      	movs	r3, #0
 8000b78:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match = 0x00;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
    sConfig.Mask = N25Q128A_SR_WIP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8000b8a:	2310      	movs	r3, #16
 8000b8c:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000b8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b92:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_MAX_DELAY) != HAL_OK)
 8000b94:	463a      	mov	r2, r7
 8000b96:	f107 0118 	add.w	r1, r7, #24
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <QSPI_AutoPollingMemReady+0x6c>)
 8000ba0:	f002 fb1d 	bl	80031de <HAL_QSPI_AutoPolling>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <QSPI_AutoPollingMemReady+0x62>
    {
        return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e000      	b.n	8000bb0 <QSPI_AutoPollingMemReady+0x64>
    }

    return HAL_OK;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3750      	adds	r7, #80	; 0x50
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000010c 	.word	0x2000010c

08000bbc <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	; 0x50
 8000bc0:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 8000bc8:	2306      	movs	r3, #6
 8000bca:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000be0:	2300      	movs	r3, #0
 8000be2:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000be4:	2300      	movs	r3, #0
 8000be6:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000be8:	f107 0318 	add.w	r3, r7, #24
 8000bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4816      	ldr	r0, [pc, #88]	; (8000c4c <QSPI_WriteEnable+0x90>)
 8000bf4:	f002 f95c 	bl	8002eb0 <HAL_QSPI_Command>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e01f      	b.n	8000c42 <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
 8000c02:	2302      	movs	r3, #2
 8000c04:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
 8000c06:	2302      	movs	r3, #2
 8000c08:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8000c12:	2310      	movs	r3, #16
 8000c14:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000c16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c1a:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 8000c1c:	2305      	movs	r3, #5
 8000c1e:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c24:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000c26:	463a      	mov	r2, r7
 8000c28:	f107 0118 	add.w	r1, r7, #24
 8000c2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c30:	4806      	ldr	r0, [pc, #24]	; (8000c4c <QSPI_WriteEnable+0x90>)
 8000c32:	f002 fad4 	bl	80031de <HAL_QSPI_AutoPolling>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e000      	b.n	8000c42 <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3750      	adds	r7, #80	; 0x50
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000010c 	.word	0x2000010c

08000c50 <QSPI_Configuration>:


/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b092      	sub	sp, #72	; 0x48
 8000c54:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    uint8_t reg;

    /*read configuration register*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5a:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction = READ_VOL_CFG_REG_CMD;
 8000c5c:	2385      	movs	r3, #133	; 0x85
 8000c5e:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c76:	2300      	movs	r3, #0
 8000c78:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.NbData = 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4837      	ldr	r0, [pc, #220]	; (8000d68 <QSPI_Configuration+0x118>)
 8000c8c:	f002 f910 	bl	8002eb0 <HAL_QSPI_Command>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <QSPI_Configuration+0x4a>
        != HAL_OK) {
        return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e061      	b.n	8000d5e <QSPI_Configuration+0x10e>
    }


    if (HAL_QSPI_Receive(&hqspi, &reg,
 8000c9a:	1cfb      	adds	r3, r7, #3
 8000c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4831      	ldr	r0, [pc, #196]	; (8000d68 <QSPI_Configuration+0x118>)
 8000ca4:	f002 f9f9 	bl	800309a <HAL_QSPI_Receive>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <QSPI_Configuration+0x62>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e055      	b.n	8000d5e <QSPI_Configuration+0x10e>
    }



    if (QSPI_WriteEnable() != HAL_OK) {
 8000cb2:	f7ff ff83 	bl	8000bbc <QSPI_WriteEnable>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <QSPI_Configuration+0x70>

        return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e04e      	b.n	8000d5e <QSPI_Configuration+0x10e>
    }


    /*set dummy cycles*/
    MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	f003 030f 	and.w	r3, r3, #15
 8000cc8:	b25a      	sxtb	r2, r3
 8000cca:	23f0      	movs	r3, #240	; 0xf0
 8000ccc:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cd0:	fa93 f3a3 	rbit	r3, r3
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cd8:	647b      	str	r3, [r7, #68]	; 0x44
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <QSPI_Configuration+0x94>
  {
    return 32U;
 8000ce0:	2320      	movs	r3, #32
 8000ce2:	e003      	b.n	8000cec <QSPI_Configuration+0x9c>
  }
  return __builtin_clz(value);
 8000ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ce6:	fab3 f383 	clz	r3, r3
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4619      	mov	r1, r3
 8000cee:	230a      	movs	r3, #10
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	70fb      	strb	r3, [r7, #3]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d00:	61fb      	str	r3, [r7, #28]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8000d12:	2381      	movs	r3, #129	; 0x81
 8000d14:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000d1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
    sCommand.NbData = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <QSPI_Configuration+0x118>)
 8000d32:	f002 f8bd 	bl	8002eb0 <HAL_QSPI_Command>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <QSPI_Configuration+0xf0>
        != HAL_OK) {
        return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e00e      	b.n	8000d5e <QSPI_Configuration+0x10e>
    }

    if (HAL_QSPI_Transmit(&hqspi, &reg,
 8000d40:	1cfb      	adds	r3, r7, #3
 8000d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d46:	4619      	mov	r1, r3
 8000d48:	4807      	ldr	r0, [pc, #28]	; (8000d68 <QSPI_Configuration+0x118>)
 8000d4a:	f002 f90f 	bl	8002f6c <HAL_QSPI_Transmit>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <QSPI_Configuration+0x10c>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        Error_Handler();
 8000d54:	f7ff fdf4 	bl	8000940 <Error_Handler>
        return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <QSPI_Configuration+0x10e>
    }
    return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3748      	adds	r7, #72	; 0x48
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2000010c 	.word	0x2000010c

08000d6c <QSPI_ResetChip>:
    }
    return HAL_OK;
}

uint8_t QSPI_ResetChip()
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b090      	sub	sp, #64	; 0x40
 8000d70:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d7a:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d80:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 8000d92:	2366      	movs	r3, #102	; 0x66
 8000d94:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dac:	4619      	mov	r1, r3
 8000dae:	481d      	ldr	r0, [pc, #116]	; (8000e24 <QSPI_ResetChip+0xb8>)
 8000db0:	f002 f87e 	bl	8002eb0 <HAL_QSPI_Command>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e02e      	b.n	8000e1c <QSPI_ResetChip+0xb0>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dc2:	e003      	b.n	8000dcc <QSPI_ResetChip+0x60>
        __NOP();
 8000dc4:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 8000dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dc8:	3301      	adds	r3, #1
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dce:	2b2e      	cmp	r3, #46	; 0x2e
 8000dd0:	d9f8      	bls.n	8000dc4 <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd6:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ddc:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000de6:	2300      	movs	r3, #0
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000dea:	2300      	movs	r3, #0
 8000dec:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_MEMORY_CMD;
 8000dee:	2399      	movs	r3, #153	; 0x99
 8000df0:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	; (8000e24 <QSPI_ResetChip+0xb8>)
 8000e0c:	f002 f850 	bl	8002eb0 <HAL_QSPI_Command>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e000      	b.n	8000e1c <QSPI_ResetChip+0xb0>
    }
    return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3740      	adds	r7, #64	; 0x40
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2000010c 	.word	0x2000010c

08000e28 <CSP_QSPI_Write>:
  return HAL_OK;
}


uint8_t CSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b096      	sub	sp, #88	; 0x58
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000e3c:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8000e3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d901      	bls.n	8000e4a <CSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8000e5c:	2312      	movs	r3, #18
 8000e5e:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000e60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e64:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6a:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000e70:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000e82:	2300      	movs	r3, #0
 8000e84:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8000e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e88:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8000e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e8c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 8000e8e:	f7ff fe95 	bl	8000bbc <QSPI_WriteEnable>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <CSP_QSPI_Write+0x74>
    {
      return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e038      	b.n	8000f0e <CSP_QSPI_Write+0xe6>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	481c      	ldr	r0, [pc, #112]	; (8000f18 <CSP_QSPI_Write+0xf0>)
 8000ea8:	f002 f802 	bl	8002eb0 <HAL_QSPI_Command>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <CSP_QSPI_Write+0x8e>
    {
      return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e02b      	b.n	8000f0e <CSP_QSPI_Write+0xe6>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eba:	68f9      	ldr	r1, [r7, #12]
 8000ebc:	4816      	ldr	r0, [pc, #88]	; (8000f18 <CSP_QSPI_Write+0xf0>)
 8000ebe:	f002 f855 	bl	8002f6c <HAL_QSPI_Transmit>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <CSP_QSPI_Write+0xa4>
    {
      return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e020      	b.n	8000f0e <CSP_QSPI_Write+0xe6>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady() != HAL_OK)
 8000ecc:	f7ff fe3e 	bl	8000b4c <QSPI_AutoPollingMemReady>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <CSP_QSPI_Write+0xb2>
    {
      return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e019      	b.n	8000f0e <CSP_QSPI_Write+0xe6>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8000eda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ede:	4413      	add	r3, r2
 8000ee0:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8000eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000eec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d203      	bcs.n	8000efe <CSP_QSPI_Write+0xd6>
 8000ef6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	e001      	b.n	8000f02 <CSP_QSPI_Write+0xda>
 8000efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f02:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8000f04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d3bc      	bcc.n	8000e86 <CSP_QSPI_Write+0x5e>

  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3758      	adds	r7, #88	; 0x58
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000010c 	.word	0x2000010c

08000f1c <CSP_QSPI_Read>:


uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b092      	sub	sp, #72	; 0x48
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8000f2e:	23eb      	movs	r3, #235	; 0xeb
 8000f30:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000f32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3c:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000f46:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000f4a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8000f4c:	230a      	movs	r3, #10
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4816      	ldr	r0, [pc, #88]	; (8000fc4 <CSP_QSPI_Read+0xa8>)
 8000f6c:	f001 ffa0 	bl	8002eb0 <HAL_QSPI_Command>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <CSP_QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e01f      	b.n	8000fba <CSP_QSPI_Read+0x9e>
  }

  /* Set S# timing for Read command */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <CSP_QSPI_Read+0xa8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <CSP_QSPI_Read+0xa8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f8c:	605a      	str	r2, [r3, #4]

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f92:	68f9      	ldr	r1, [r7, #12]
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <CSP_QSPI_Read+0xa8>)
 8000f96:	f002 f880 	bl	800309a <HAL_QSPI_Receive>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <CSP_QSPI_Read+0x88>
  {
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e00a      	b.n	8000fba <CSP_QSPI_Read+0x9e>
  }

  /* Restore S# timing for nonRead commands */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <CSP_QSPI_Read+0xa8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <CSP_QSPI_Read+0xa8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8000fb6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3748      	adds	r7, #72	; 0x48
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000010c 	.word	0x2000010c

08000fc8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000fdc:	2300      	movs	r3, #0
 8000fde:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <MX_RTC_Init+0xb0>)
 8000fe2:	4a26      	ldr	r2, [pc, #152]	; (800107c <MX_RTC_Init+0xb4>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <MX_RTC_Init+0xb0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_RTC_Init+0xb0>)
 8000fee:	227f      	movs	r2, #127	; 0x7f
 8000ff0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_RTC_Init+0xb0>)
 8000ff4:	22ff      	movs	r2, #255	; 0xff
 8000ff6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_RTC_Init+0xb0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <MX_RTC_Init+0xb0>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <MX_RTC_Init+0xb0>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_RTC_Init+0xb0>)
 800100c:	2200      	movs	r2, #0
 800100e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001010:	4819      	ldr	r0, [pc, #100]	; (8001078 <MX_RTC_Init+0xb0>)
 8001012:	f003 fe2d 	bl	8004c70 <HAL_RTC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800101c:	f7ff fc90 	bl	8000940 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	4619      	mov	r1, r3
 800103a:	480f      	ldr	r0, [pc, #60]	; (8001078 <MX_RTC_Init+0xb0>)
 800103c:	f003 fe93 	bl	8004d66 <HAL_RTC_SetTime>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001046:	f7ff fc7b 	bl	8000940 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800104a:	2301      	movs	r3, #1
 800104c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800104e:	2301      	movs	r3, #1
 8001050:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001052:	2301      	movs	r3, #1
 8001054:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_RTC_Init+0xb0>)
 8001062:	f003 ff1d 	bl	8004ea0 <HAL_RTC_SetDate>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800106c:	f7ff fc68 	bl	8000940 <Error_Handler>
  }

}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000150 	.word	0x20000150
 800107c:	40002800 	.word	0x40002800

08001080 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <HAL_RTC_MspInit+0x30>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d107      	bne.n	80010a2 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_RTC_MspInit+0x34>)
 8001094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_RTC_MspInit+0x34>)
 800109a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800109e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40002800 	.word	0x40002800
 80010b4:	40021000 	.word	0x40021000

080010b8 <setDate>:
  /* USER CODE END RTC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint8_t setDate(int day,int month,int year,int weekDay) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
	  RTC_DateTypeDef Date;
	  Date.Date=day;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	75bb      	strb	r3, [r7, #22]
	  Date.Month=month;
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	757b      	strb	r3, [r7, #21]
	  Date.WeekDay=weekDay;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	753b      	strb	r3, [r7, #20]
	  Date.Year=year;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	75fb      	strb	r3, [r7, #23]

	 if( HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN))
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <setDate+0x48>)
 80010e8:	f003 feda 	bl	8004ea0 <HAL_RTC_SetDate>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <setDate+0x3e>
		 return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <setDate+0x40>
	 else
		 return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1

}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000150 	.word	0x20000150

08001104 <setTime>:
uint8_t setTime(int sec,int min,int hour){
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	  RTC_TimeTypeDef Time;
	  Time.Seconds=sec;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	75bb      	strb	r3, [r7, #22]
	  Time.Minutes=min;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	757b      	strb	r3, [r7, #21]
	  Time.Hours=hour;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	753b      	strb	r3, [r7, #20]

	  if(HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN))
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2200      	movs	r2, #0
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <setTime+0x40>)
 800112c:	f003 fe1b 	bl	8004d66 <HAL_RTC_SetTime>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <setTime+0x36>
		  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <setTime+0x38>
	  else
		  return HAL_ERROR;
 800113a:	2301      	movs	r3, #1

}
 800113c:	4618      	mov	r0, r3
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000150 	.word	0x20000150

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_MspInit+0x44>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001152:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_MspInit+0x44>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6613      	str	r3, [r2, #96]	; 0x60
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_MspInit+0x44>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_MspInit+0x44>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <HAL_MspInit+0x44>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	6593      	str	r3, [r2, #88]	; 0x58
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_MspInit+0x44>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e4:	f000 f99c 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <SystemInit+0x64>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <SystemInit+0x64>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <SystemInit+0x68>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a13      	ldr	r2, [pc, #76]	; (8001254 <SystemInit+0x68>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <SystemInit+0x68>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <SystemInit+0x68>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <SystemInit+0x68>)
 8001218:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800121c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001220:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <SystemInit+0x68>)
 8001224:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001228:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <SystemInit+0x68>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <SystemInit+0x68>)
 8001230:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001234:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <SystemInit+0x68>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <SystemInit+0x64>)
 800123e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001242:	609a      	str	r2, [r3, #8]
#endif
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00
 8001254:	40021000 	.word	0x40021000

08001258 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <MX_TIM2_Init+0x98>)
 8001278:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800127c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_TIM2_Init+0x98>)
 8001280:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_TIM2_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_TIM2_Init+0x98>)
 800128e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001292:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_TIM2_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_TIM2_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <MX_TIM2_Init+0x98>)
 80012a2:	f003 ff3b 	bl	800511c <HAL_TIM_Base_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80012ac:	f7ff fb48 	bl	8000940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	4619      	mov	r1, r3
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <MX_TIM2_Init+0x98>)
 80012be:	f003 ff84 	bl	80051ca <HAL_TIM_ConfigClockSource>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80012c8:	f7ff fb3a 	bl	8000940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012cc:	2320      	movs	r3, #32
 80012ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_TIM2_Init+0x98>)
 80012da:	f004 f963 	bl	80055a4 <HAL_TIMEx_MasterConfigSynchronization>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80012e4:	f7ff fb2c 	bl	8000940 <Error_Handler>
  }

}
 80012e8:	bf00      	nop
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000174 	.word	0x20000174

080012f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001304:	d10b      	bne.n	800131e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_TIM_Base_MspInit+0x38>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_TIM_Base_MspInit+0x38>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6593      	str	r3, [r2, #88]	; 0x58
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_TIM_Base_MspInit+0x38>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_USART2_UART_Init+0x58>)
 8001336:	4a15      	ldr	r2, [pc, #84]	; (800138c <MX_USART2_UART_Init+0x5c>)
 8001338:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <MX_USART2_UART_Init+0x58>)
 800133c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001340:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_USART2_UART_Init+0x58>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_USART2_UART_Init+0x58>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_USART2_UART_Init+0x58>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_USART2_UART_Init+0x58>)
 8001356:	220c      	movs	r2, #12
 8001358:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <MX_USART2_UART_Init+0x58>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_USART2_UART_Init+0x58>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <MX_USART2_UART_Init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_USART2_UART_Init+0x58>)
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_USART2_UART_Init+0x58>)
 8001374:	f004 f99e 	bl	80056b4 <HAL_UART_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800137e:	f7ff fadf 	bl	8000940 <Error_Handler>
  }

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200001c0 	.word	0x200001c0
 800138c:	40004400 	.word	0x40004400

08001390 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a17      	ldr	r2, [pc, #92]	; (800140c <HAL_UART_MspInit+0x7c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d128      	bne.n	8001404 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_UART_MspInit+0x80>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	4a16      	ldr	r2, [pc, #88]	; (8001410 <HAL_UART_MspInit+0x80>)
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	6593      	str	r3, [r2, #88]	; 0x58
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_UART_MspInit+0x80>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_UART_MspInit+0x80>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_UART_MspInit+0x80>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_UART_MspInit+0x80>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013e2:	230c      	movs	r3, #12
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013f2:	2307      	movs	r3, #7
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001400:	f001 f994 	bl	800272c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40004400 	.word	0x40004400
 8001410:	40021000 	.word	0x40021000

08001414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800144c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001418:	f7ff fee8 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800141c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800141e:	e003      	b.n	8001428 <LoopCopyDataInit>

08001420 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001422:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001424:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001426:	3104      	adds	r1, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001428:	480a      	ldr	r0, [pc, #40]	; (8001454 <LoopForever+0xa>)
	ldr	r3, =_edata
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <LoopForever+0xe>)
	adds	r2, r0, r1
 800142c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800142e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001430:	d3f6      	bcc.n	8001420 <CopyDataInit>
	ldr	r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001434:	e002      	b.n	800143c <LoopFillZerobss>

08001436 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001436:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001438:	f842 3b04 	str.w	r3, [r2], #4

0800143c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <LoopForever+0x16>)
	cmp	r2, r3
 800143e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001440:	d3f9      	bcc.n	8001436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001442:	f004 fd71 	bl	8005f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001446:	f7ff f989 	bl	800075c <main>

0800144a <LoopForever>:

LoopForever:
    b LoopForever
 800144a:	e7fe      	b.n	800144a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800144c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001450:	0800600c 	.word	0x0800600c
	ldr	r0, =_sdata
 8001454:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001458:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800145c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001460:	20000244 	.word	0x20000244

08001464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC1_2_IRQHandler>
	...

08001468 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_Init+0x3c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <HAL_Init+0x3c>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147e:	2003      	movs	r0, #3
 8001480:	f001 f8e2 	bl	8002648 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001484:	2000      	movs	r0, #0
 8001486:	f000 f80f 	bl	80014a8 <HAL_InitTick>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	71fb      	strb	r3, [r7, #7]
 8001494:	e001      	b.n	800149a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001496:	f7ff fe57 	bl	8001148 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800149a:	79fb      	ldrb	r3, [r7, #7]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40022000 	.word	0x40022000

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_InitTick+0x6c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d023      	beq.n	8001504 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_InitTick+0x70>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_InitTick+0x6c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 f8df 	bl	8002696 <HAL_SYSTICK_Config>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10f      	bne.n	80014fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b0f      	cmp	r3, #15
 80014e2:	d809      	bhi.n	80014f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e4:	2200      	movs	r2, #0
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014ec:	f001 f8b7 	bl	800265e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014f0:	4a0a      	ldr	r2, [pc, #40]	; (800151c <HAL_InitTick+0x74>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e007      	b.n	8001508 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e004      	b.n	8001508 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	73fb      	strb	r3, [r7, #15]
 8001502:	e001      	b.n	8001508 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000000c 	.word	0x2000000c
 8001518:	20000004 	.word	0x20000004
 800151c:	20000008 	.word	0x20000008

08001520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	2000000c 	.word	0x2000000c
 8001544:	20000240 	.word	0x20000240

08001548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000240 	.word	0x20000240

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff ffee 	bl	8001548 <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_Delay+0x40>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffde 	bl	8001548 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000000c 	.word	0x2000000c

080015a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	609a      	str	r2, [r3, #8]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	609a      	str	r2, [r3, #8]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3360      	adds	r3, #96	; 0x60
 800161e:	461a      	mov	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <LL_ADC_SetOffset+0x44>)
 800162e:	4013      	ands	r3, r2
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	4313      	orrs	r3, r2
 800163c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001644:	bf00      	nop
 8001646:	371c      	adds	r7, #28
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	03fff000 	.word	0x03fff000

08001654 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3360      	adds	r3, #96	; 0x60
 8001662:	461a      	mov	r2, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	3360      	adds	r3, #96	; 0x60
 8001690:	461a      	mov	r2, r3
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016aa:	bf00      	nop
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b087      	sub	sp, #28
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3330      	adds	r3, #48	; 0x30
 80016c6:	461a      	mov	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	4413      	add	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	211f      	movs	r1, #31
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	401a      	ands	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	0e9b      	lsrs	r3, r3, #26
 80016ee:	f003 011f 	and.w	r1, r3, #31
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	431a      	orrs	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001702:	bf00      	nop
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800170e:	b480      	push	{r7}
 8001710:	b087      	sub	sp, #28
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3314      	adds	r3, #20
 800171e:	461a      	mov	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	0e5b      	lsrs	r3, r3, #25
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	4413      	add	r3, r2
 800172c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	0d1b      	lsrs	r3, r3, #20
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	2107      	movs	r1, #7
 800173c:	fa01 f303 	lsl.w	r3, r1, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	401a      	ands	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	0d1b      	lsrs	r3, r3, #20
 8001748:	f003 031f 	and.w	r3, r3, #31
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	431a      	orrs	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001758:	bf00      	nop
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800177c:	43db      	mvns	r3, r3
 800177e:	401a      	ands	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0318 	and.w	r3, r3, #24
 8001786:	4908      	ldr	r1, [pc, #32]	; (80017a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001788:	40d9      	lsrs	r1, r3
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	400b      	ands	r3, r1
 800178e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001792:	431a      	orrs	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	0007ffff 	.word	0x0007ffff

080017ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6093      	str	r3, [r2, #8]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017e4:	d101      	bne.n	80017ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001808:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800180c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001834:	d101      	bne.n	800183a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <LL_ADC_IsEnabled+0x18>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <LL_ADC_IsEnabled+0x1a>
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b04      	cmp	r3, #4
 8001880:	d101      	bne.n	8001886 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d101      	bne.n	80018ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e134      	b.n	8001b40 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d109      	bne.n	80018f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7fe fe6d 	bl	80005c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff67 	bl	80017d0 <LL_ADC_IsDeepPowerDownEnabled>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d004      	beq.n	8001912 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff4d 	bl	80017ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff82 	bl	8001820 <LL_ADC_IsInternalRegulatorEnabled>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d113      	bne.n	800194a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff66 	bl	80017f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800192c:	4b86      	ldr	r3, [pc, #536]	; (8001b48 <HAL_ADC_Init+0x28c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	099b      	lsrs	r3, r3, #6
 8001932:	4a86      	ldr	r2, [pc, #536]	; (8001b4c <HAL_ADC_Init+0x290>)
 8001934:	fba2 2303 	umull	r2, r3, r2, r3
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800193c:	e002      	b.n	8001944 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3b01      	subs	r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f9      	bne.n	800193e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff66 	bl	8001820 <LL_ADC_IsInternalRegulatorEnabled>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10d      	bne.n	8001976 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195e:	f043 0210 	orr.w	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	f043 0201 	orr.w	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff77 	bl	800186e <LL_ADC_REG_IsConversionOngoing>
 8001980:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 80cf 	bne.w	8001b2e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 80cb 	bne.w	8001b2e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019a0:	f043 0202 	orr.w	r2, r3, #2
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff4b 	bl	8001848 <LL_ADC_IsEnabled>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d115      	bne.n	80019e4 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019b8:	4865      	ldr	r0, [pc, #404]	; (8001b50 <HAL_ADC_Init+0x294>)
 80019ba:	f7ff ff45 	bl	8001848 <LL_ADC_IsEnabled>
 80019be:	4604      	mov	r4, r0
 80019c0:	4864      	ldr	r0, [pc, #400]	; (8001b54 <HAL_ADC_Init+0x298>)
 80019c2:	f7ff ff41 	bl	8001848 <LL_ADC_IsEnabled>
 80019c6:	4603      	mov	r3, r0
 80019c8:	431c      	orrs	r4, r3
 80019ca:	4863      	ldr	r0, [pc, #396]	; (8001b58 <HAL_ADC_Init+0x29c>)
 80019cc:	f7ff ff3c 	bl	8001848 <LL_ADC_IsEnabled>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4323      	orrs	r3, r4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4619      	mov	r1, r3
 80019de:	485f      	ldr	r0, [pc, #380]	; (8001b5c <HAL_ADC_Init+0x2a0>)
 80019e0:	f7ff fde0 	bl	80015a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7e5b      	ldrb	r3, [r3, #25]
 80019e8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019ee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80019f4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80019fa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a02:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d106      	bne.n	8001a20 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	3b01      	subs	r3, #1
 8001a18:	045b      	lsls	r3, r3, #17
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d009      	beq.n	8001a3c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_ADC_Init+0x2a4>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	69b9      	ldr	r1, [r7, #24]
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff0a 	bl	800186e <LL_ADC_REG_IsConversionOngoing>
 8001a5a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff17 	bl	8001894 <LL_ADC_INJ_IsConversionOngoing>
 8001a66:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d13d      	bne.n	8001aea <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d13a      	bne.n	8001aea <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a78:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a80:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a90:	f023 0302 	bic.w	r3, r3, #2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	69b9      	ldr	r1, [r7, #24]
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d118      	bne.n	8001ada <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ab2:	f023 0304 	bic.w	r3, r3, #4
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001abe:	4311      	orrs	r1, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ac4:	4311      	orrs	r1, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001aca:	430a      	orrs	r2, r1
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	e007      	b.n	8001aea <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0201 	bic.w	r2, r2, #1
 8001ae8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d10c      	bne.n	8001b0c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	f023 010f 	bic.w	r1, r3, #15
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	1e5a      	subs	r2, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
 8001b0a:	e007      	b.n	8001b1c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 020f 	bic.w	r2, r2, #15
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	f023 0303 	bic.w	r3, r3, #3
 8001b24:	f043 0201 	orr.w	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	655a      	str	r2, [r3, #84]	; 0x54
 8001b2c:	e007      	b.n	8001b3e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b32:	f043 0210 	orr.w	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3724      	adds	r7, #36	; 0x24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd90      	pop	{r4, r7, pc}
 8001b48:	20000004 	.word	0x20000004
 8001b4c:	053e2d63 	.word	0x053e2d63
 8001b50:	50040000 	.word	0x50040000
 8001b54:	50040100 	.word	0x50040100
 8001b58:	50040200 	.word	0x50040200
 8001b5c:	50040300 	.word	0x50040300
 8001b60:	fff0c007 	.word	0xfff0c007

08001b64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b0b6      	sub	sp, #216	; 0xd8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x22>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e3c6      	b.n	8002314 <HAL_ADC_ConfigChannel+0x7b0>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fe6b 	bl	800186e <LL_ADC_REG_IsConversionOngoing>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 83a7 	bne.w	80022ee <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d824      	bhi.n	8001bf2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	3b02      	subs	r3, #2
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d81b      	bhi.n	8001bea <HAL_ADC_ConfigChannel+0x86>
 8001bb2:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <HAL_ADC_ConfigChannel+0x54>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001bc9 	.word	0x08001bc9
 8001bbc:	08001bd1 	.word	0x08001bd1
 8001bc0:	08001bd9 	.word	0x08001bd9
 8001bc4:	08001be1 	.word	0x08001be1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	220c      	movs	r2, #12
 8001bcc:	605a      	str	r2, [r3, #4]
          break;
 8001bce:	e011      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2212      	movs	r2, #18
 8001bd4:	605a      	str	r2, [r3, #4]
          break;
 8001bd6:	e00d      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	2218      	movs	r2, #24
 8001bdc:	605a      	str	r2, [r3, #4]
          break;
 8001bde:	e009      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be6:	605a      	str	r2, [r3, #4]
          break;
 8001be8:	e004      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2206      	movs	r2, #6
 8001bee:	605a      	str	r2, [r3, #4]
          break;
 8001bf0:	e000      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001bf2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	f7ff fd58 	bl	80016b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fe2f 	bl	800186e <LL_ADC_REG_IsConversionOngoing>
 8001c10:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fe3b 	bl	8001894 <LL_ADC_INJ_IsConversionOngoing>
 8001c1e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f040 81a6 	bne.w	8001f78 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 81a1 	bne.w	8001f78 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6819      	ldr	r1, [r3, #0]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	461a      	mov	r2, r3
 8001c44:	f7ff fd63 	bl	800170e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	08db      	lsrs	r3, r3, #3
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d00a      	beq.n	8001c80 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6919      	ldr	r1, [r3, #16]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c7a:	f7ff fcc7 	bl	800160c <LL_ADC_SetOffset>
 8001c7e:	e17b      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fce4 	bl	8001654 <LL_ADC_GetOffsetChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10a      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x148>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fcd9 	bl	8001654 <LL_ADC_GetOffsetChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	0e9b      	lsrs	r3, r3, #26
 8001ca6:	f003 021f 	and.w	r2, r3, #31
 8001caa:	e01e      	b.n	8001cea <HAL_ADC_ConfigChannel+0x186>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fcce 	bl	8001654 <LL_ADC_GetOffsetChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8001cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001cce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8001cd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e004      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 8001cde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d105      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x19e>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	0e9b      	lsrs	r3, r3, #26
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	e018      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x1d0>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001d1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001d26:	2320      	movs	r3, #32
 8001d28:	e004      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001d2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d106      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fc9d 	bl	8001680 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fc81 	bl	8001654 <LL_ADC_GetOffsetChannel>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10a      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x20e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fc76 	bl	8001654 <LL_ADC_GetOffsetChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	0e9b      	lsrs	r3, r3, #26
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	e01e      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x24c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2101      	movs	r1, #1
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fc6b 	bl	8001654 <LL_ADC_GetOffsetChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001da0:	2320      	movs	r3, #32
 8001da2:	e004      	b.n	8001dae <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001da4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d105      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x264>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0e9b      	lsrs	r3, r3, #26
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	e018      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x296>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ddc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001de0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001dec:	2320      	movs	r3, #32
 8001dee:	e004      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001df0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d106      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	2101      	movs	r1, #1
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fc3a 	bl	8001680 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2102      	movs	r1, #2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fc1e 	bl	8001654 <LL_ADC_GetOffsetChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10a      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x2d4>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2102      	movs	r1, #2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fc13 	bl	8001654 <LL_ADC_GetOffsetChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	f003 021f 	and.w	r2, r3, #31
 8001e36:	e01e      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x312>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fc08 	bl	8001654 <LL_ADC_GetOffsetChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e004      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d105      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x32a>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	0e9b      	lsrs	r3, r3, #26
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	e016      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x358>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001ea0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ea2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	e004      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d106      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2102      	movs	r1, #2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fbd9 	bl	8001680 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2103      	movs	r1, #3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fbbd 	bl	8001654 <LL_ADC_GetOffsetChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10a      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x396>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2103      	movs	r1, #3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fbb2 	bl	8001654 <LL_ADC_GetOffsetChannel>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	0e9b      	lsrs	r3, r3, #26
 8001ef4:	f003 021f 	and.w	r2, r3, #31
 8001ef8:	e017      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x3c6>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2103      	movs	r1, #3
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fba7 	bl	8001654 <LL_ADC_GetOffsetChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f14:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	e003      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d105      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x3de>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	0e9b      	lsrs	r3, r3, #26
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	e011      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x402>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f52:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001f5a:	2320      	movs	r3, #32
 8001f5c:	e003      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f60:	fab3 f383 	clz	r3, r3
 8001f64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d106      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2103      	movs	r1, #3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fb84 	bl	8001680 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fc63 	bl	8001848 <LL_ADC_IsEnabled>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f040 813f 	bne.w	8002208 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6819      	ldr	r1, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	461a      	mov	r2, r3
 8001f98:	f7ff fbe4 	bl	8001764 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4a8e      	ldr	r2, [pc, #568]	; (80021dc <HAL_ADC_ConfigChannel+0x678>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	f040 8130 	bne.w	8002208 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x46c>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0e9b      	lsrs	r3, r3, #26
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	2b09      	cmp	r3, #9
 8001fc6:	bf94      	ite	ls
 8001fc8:	2301      	movls	r3, #1
 8001fca:	2300      	movhi	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	e019      	b.n	8002004 <HAL_ADC_ConfigChannel+0x4a0>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fe0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	e003      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	2b09      	cmp	r3, #9
 8001ffc:	bf94      	ite	ls
 8001ffe:	2301      	movls	r3, #1
 8002000:	2300      	movhi	r3, #0
 8002002:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002004:	2b00      	cmp	r3, #0
 8002006:	d079      	beq.n	80020fc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002010:	2b00      	cmp	r3, #0
 8002012:	d107      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x4c0>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0e9b      	lsrs	r3, r3, #26
 800201a:	3301      	adds	r3, #1
 800201c:	069b      	lsls	r3, r3, #26
 800201e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002022:	e015      	b.n	8002050 <HAL_ADC_ConfigChannel+0x4ec>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002034:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800203c:	2320      	movs	r3, #32
 800203e:	e003      	b.n	8002048 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	3301      	adds	r3, #1
 800204a:	069b      	lsls	r3, r3, #26
 800204c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x50c>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0e9b      	lsrs	r3, r3, #26
 8002062:	3301      	adds	r3, #1
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	2101      	movs	r1, #1
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	e017      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x53c>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800207e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002080:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002088:	2320      	movs	r3, #32
 800208a:	e003      	b.n	8002094 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800208c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	3301      	adds	r3, #1
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	2101      	movs	r1, #1
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	ea42 0103 	orr.w	r1, r2, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10a      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x562>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0e9b      	lsrs	r3, r3, #26
 80020b6:	3301      	adds	r3, #1
 80020b8:	f003 021f 	and.w	r2, r3, #31
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	051b      	lsls	r3, r3, #20
 80020c4:	e018      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x594>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80020d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80020de:	2320      	movs	r3, #32
 80020e0:	e003      	b.n	80020ea <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80020e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	f003 021f 	and.w	r2, r3, #31
 80020f0:	4613      	mov	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f8:	430b      	orrs	r3, r1
 80020fa:	e080      	b.n	80021fe <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002104:	2b00      	cmp	r3, #0
 8002106:	d107      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x5b4>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0e9b      	lsrs	r3, r3, #26
 800210e:	3301      	adds	r3, #1
 8002110:	069b      	lsls	r3, r3, #26
 8002112:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002116:	e015      	b.n	8002144 <HAL_ADC_ConfigChannel+0x5e0>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	e003      	b.n	800213c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3301      	adds	r3, #1
 800213e:	069b      	lsls	r3, r3, #26
 8002140:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x600>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	3301      	adds	r3, #1
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	2101      	movs	r1, #1
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	e017      	b.n	8002194 <HAL_ADC_ConfigChannel+0x630>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	61fb      	str	r3, [r7, #28]
  return result;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800217c:	2320      	movs	r3, #32
 800217e:	e003      	b.n	8002188 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	3301      	adds	r3, #1
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2101      	movs	r1, #1
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	ea42 0103 	orr.w	r1, r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10d      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x65c>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0e9b      	lsrs	r3, r3, #26
 80021aa:	3301      	adds	r3, #1
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	3b1e      	subs	r3, #30
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021be:	e01d      	b.n	80021fc <HAL_ADC_ConfigChannel+0x698>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	613b      	str	r3, [r7, #16]
  return result;
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d103      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80021d8:	2320      	movs	r3, #32
 80021da:	e005      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x684>
 80021dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	f003 021f 	and.w	r2, r3, #31
 80021ee:	4613      	mov	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	3b1e      	subs	r3, #30
 80021f6:	051b      	lsls	r3, r3, #20
 80021f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021fc:	430b      	orrs	r3, r1
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	6892      	ldr	r2, [r2, #8]
 8002202:	4619      	mov	r1, r3
 8002204:	f7ff fa83 	bl	800170e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b43      	ldr	r3, [pc, #268]	; (800231c <HAL_ADC_ConfigChannel+0x7b8>)
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d079      	beq.n	8002308 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002214:	4842      	ldr	r0, [pc, #264]	; (8002320 <HAL_ADC_ConfigChannel+0x7bc>)
 8002216:	f7ff f9eb 	bl	80015f0 <LL_ADC_GetCommonPathInternalCh>
 800221a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a40      	ldr	r2, [pc, #256]	; (8002324 <HAL_ADC_ConfigChannel+0x7c0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d12b      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002228:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800222c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d125      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a3b      	ldr	r2, [pc, #236]	; (8002328 <HAL_ADC_ConfigChannel+0x7c4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d004      	beq.n	8002248 <HAL_ADC_ConfigChannel+0x6e4>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a3a      	ldr	r2, [pc, #232]	; (800232c <HAL_ADC_ConfigChannel+0x7c8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d15c      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800224c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002250:	4619      	mov	r1, r3
 8002252:	4833      	ldr	r0, [pc, #204]	; (8002320 <HAL_ADC_ConfigChannel+0x7bc>)
 8002254:	f7ff f9b9 	bl	80015ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002258:	4b35      	ldr	r3, [pc, #212]	; (8002330 <HAL_ADC_ConfigChannel+0x7cc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	099b      	lsrs	r3, r3, #6
 800225e:	4a35      	ldr	r2, [pc, #212]	; (8002334 <HAL_ADC_ConfigChannel+0x7d0>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	099a      	lsrs	r2, r3, #6
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002270:	e002      	b.n	8002278 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	3b01      	subs	r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f9      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800227e:	e040      	b.n	8002302 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a2c      	ldr	r2, [pc, #176]	; (8002338 <HAL_ADC_ConfigChannel+0x7d4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d118      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x758>
 800228a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800228e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d112      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a23      	ldr	r2, [pc, #140]	; (8002328 <HAL_ADC_ConfigChannel+0x7c4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d004      	beq.n	80022aa <HAL_ADC_ConfigChannel+0x746>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a21      	ldr	r2, [pc, #132]	; (800232c <HAL_ADC_ConfigChannel+0x7c8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d12d      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b2:	4619      	mov	r1, r3
 80022b4:	481a      	ldr	r0, [pc, #104]	; (8002320 <HAL_ADC_ConfigChannel+0x7bc>)
 80022b6:	f7ff f988 	bl	80015ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ba:	e024      	b.n	8002306 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1e      	ldr	r2, [pc, #120]	; (800233c <HAL_ADC_ConfigChannel+0x7d8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d120      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d11a      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a14      	ldr	r2, [pc, #80]	; (8002328 <HAL_ADC_ConfigChannel+0x7c4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d115      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022e4:	4619      	mov	r1, r3
 80022e6:	480e      	ldr	r0, [pc, #56]	; (8002320 <HAL_ADC_ConfigChannel+0x7bc>)
 80022e8:	f7ff f96f 	bl	80015ca <LL_ADC_SetCommonPathInternalCh>
 80022ec:	e00c      	b.n	8002308 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f2:	f043 0220 	orr.w	r2, r3, #32
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002300:	e002      	b.n	8002308 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002302:	bf00      	nop
 8002304:	e000      	b.n	8002308 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002306:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002310:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002314:	4618      	mov	r0, r3
 8002316:	37d8      	adds	r7, #216	; 0xd8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	80080000 	.word	0x80080000
 8002320:	50040300 	.word	0x50040300
 8002324:	c7520000 	.word	0xc7520000
 8002328:	50040000 	.word	0x50040000
 800232c:	50040200 	.word	0x50040200
 8002330:	20000004 	.word	0x20000004
 8002334:	053e2d63 	.word	0x053e2d63
 8002338:	cb840000 	.word	0xcb840000
 800233c:	80000001 	.word	0x80000001

08002340 <LL_ADC_IsEnabled>:
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <LL_ADC_IsEnabled+0x18>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <LL_ADC_IsEnabled+0x1a>
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <LL_ADC_REG_IsConversionOngoing>:
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b04      	cmp	r3, #4
 8002378:	d101      	bne.n	800237e <LL_ADC_REG_IsConversionOngoing+0x18>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b09f      	sub	sp, #124	; 0x7c
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e08f      	b.n	80024ca <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a47      	ldr	r2, [pc, #284]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d102      	bne.n	80023c2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80023bc:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	e001      	b.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	f043 0220 	orr.w	r2, r3, #32
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e072      	b.n	80024ca <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff ffbd 	bl	8002366 <LL_ADC_REG_IsConversionOngoing>
 80023ec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ffb7 	bl	8002366 <LL_ADC_REG_IsConversionOngoing>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d154      	bne.n	80024a8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80023fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002400:	2b00      	cmp	r3, #0
 8002402:	d151      	bne.n	80024a8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002404:	4b35      	ldr	r3, [pc, #212]	; (80024dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002406:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d02c      	beq.n	800246a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002422:	035b      	lsls	r3, r3, #13
 8002424:	430b      	orrs	r3, r1
 8002426:	431a      	orrs	r2, r3
 8002428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800242c:	4829      	ldr	r0, [pc, #164]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800242e:	f7ff ff87 	bl	8002340 <LL_ADC_IsEnabled>
 8002432:	4604      	mov	r4, r0
 8002434:	4828      	ldr	r0, [pc, #160]	; (80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002436:	f7ff ff83 	bl	8002340 <LL_ADC_IsEnabled>
 800243a:	4603      	mov	r3, r0
 800243c:	431c      	orrs	r4, r3
 800243e:	4828      	ldr	r0, [pc, #160]	; (80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002440:	f7ff ff7e 	bl	8002340 <LL_ADC_IsEnabled>
 8002444:	4603      	mov	r3, r0
 8002446:	4323      	orrs	r3, r4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d137      	bne.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800244c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002454:	f023 030f 	bic.w	r3, r3, #15
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	6811      	ldr	r1, [r2, #0]
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	6892      	ldr	r2, [r2, #8]
 8002460:	430a      	orrs	r2, r1
 8002462:	431a      	orrs	r2, r3
 8002464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002466:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002468:	e028      	b.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800246a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002474:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002476:	4817      	ldr	r0, [pc, #92]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002478:	f7ff ff62 	bl	8002340 <LL_ADC_IsEnabled>
 800247c:	4604      	mov	r4, r0
 800247e:	4816      	ldr	r0, [pc, #88]	; (80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002480:	f7ff ff5e 	bl	8002340 <LL_ADC_IsEnabled>
 8002484:	4603      	mov	r3, r0
 8002486:	431c      	orrs	r4, r3
 8002488:	4815      	ldr	r0, [pc, #84]	; (80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800248a:	f7ff ff59 	bl	8002340 <LL_ADC_IsEnabled>
 800248e:	4603      	mov	r3, r0
 8002490:	4323      	orrs	r3, r4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d112      	bne.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800249e:	f023 030f 	bic.w	r3, r3, #15
 80024a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024a6:	e009      	b.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	f043 0220 	orr.w	r2, r3, #32
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80024ba:	e000      	b.n	80024be <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	377c      	adds	r7, #124	; 0x7c
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd90      	pop	{r4, r7, pc}
 80024d2:	bf00      	nop
 80024d4:	50040000 	.word	0x50040000
 80024d8:	50040100 	.word	0x50040100
 80024dc:	50040300 	.word	0x50040300
 80024e0:	50040200 	.word	0x50040200

080024e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002500:	4013      	ands	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800250c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002516:	4a04      	ldr	r2, [pc, #16]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	60d3      	str	r3, [r2, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <__NVIC_GetPriorityGrouping+0x18>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	f003 0307 	and.w	r3, r3, #7
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	db0a      	blt.n	8002572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	490c      	ldr	r1, [pc, #48]	; (8002594 <__NVIC_SetPriority+0x4c>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	440b      	add	r3, r1
 800256c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002570:	e00a      	b.n	8002588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4908      	ldr	r1, [pc, #32]	; (8002598 <__NVIC_SetPriority+0x50>)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3b04      	subs	r3, #4
 8002580:	0112      	lsls	r2, r2, #4
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	440b      	add	r3, r1
 8002586:	761a      	strb	r2, [r3, #24]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000e100 	.word	0xe000e100
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	; 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f1c3 0307 	rsb	r3, r3, #7
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	bf28      	it	cs
 80025ba:	2304      	movcs	r3, #4
 80025bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d902      	bls.n	80025cc <NVIC_EncodePriority+0x30>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3b03      	subs	r3, #3
 80025ca:	e000      	b.n	80025ce <NVIC_EncodePriority+0x32>
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	401a      	ands	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43d9      	mvns	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	4313      	orrs	r3, r2
         );
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002614:	d301      	bcc.n	800261a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002616:	2301      	movs	r3, #1
 8002618:	e00f      	b.n	800263a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <SysTick_Config+0x40>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002622:	210f      	movs	r1, #15
 8002624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002628:	f7ff ff8e 	bl	8002548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <SysTick_Config+0x40>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002632:	4b04      	ldr	r3, [pc, #16]	; (8002644 <SysTick_Config+0x40>)
 8002634:	2207      	movs	r2, #7
 8002636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	e000e010 	.word	0xe000e010

08002648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ff47 	bl	80024e4 <__NVIC_SetPriorityGrouping>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002670:	f7ff ff5c 	bl	800252c <__NVIC_GetPriorityGrouping>
 8002674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	6978      	ldr	r0, [r7, #20]
 800267c:	f7ff ff8e 	bl	800259c <NVIC_EncodePriority>
 8002680:	4602      	mov	r2, r0
 8002682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff5d 	bl	8002548 <__NVIC_SetPriority>
}
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ffb0 	bl	8002604 <SysTick_Config>
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d008      	beq.n	80026d8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2204      	movs	r2, #4
 80026ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e022      	b.n	800271e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 020e 	bic.w	r2, r2, #14
 80026e6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	f003 021c 	and.w	r2, r3, #28
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f202 	lsl.w	r2, r1, r2
 800270a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273a:	e17f      	b.n	8002a3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	2101      	movs	r1, #1
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8171 	beq.w	8002a36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d00b      	beq.n	8002774 <HAL_GPIO_Init+0x48>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d007      	beq.n	8002774 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002768:	2b11      	cmp	r3, #17
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b12      	cmp	r3, #18
 8002772:	d130      	bne.n	80027d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027aa:	2201      	movs	r2, #1
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	f003 0201 	and.w	r2, r3, #1
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d118      	bne.n	8002814 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80027e8:	2201      	movs	r2, #1
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	08db      	lsrs	r3, r3, #3
 80027fe:	f003 0201 	and.w	r2, r3, #1
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x128>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b12      	cmp	r3, #18
 8002852:	d123      	bne.n	800289c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	08da      	lsrs	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3208      	adds	r2, #8
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	6939      	ldr	r1, [r7, #16]
 8002898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80ac 	beq.w	8002a36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	4b5e      	ldr	r3, [pc, #376]	; (8002a58 <HAL_GPIO_Init+0x32c>)
 80028e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e2:	4a5d      	ldr	r2, [pc, #372]	; (8002a58 <HAL_GPIO_Init+0x32c>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6613      	str	r3, [r2, #96]	; 0x60
 80028ea:	4b5b      	ldr	r3, [pc, #364]	; (8002a58 <HAL_GPIO_Init+0x32c>)
 80028ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028f6:	4a59      	ldr	r2, [pc, #356]	; (8002a5c <HAL_GPIO_Init+0x330>)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	3302      	adds	r3, #2
 80028fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002902:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	220f      	movs	r2, #15
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002920:	d025      	beq.n	800296e <HAL_GPIO_Init+0x242>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4e      	ldr	r2, [pc, #312]	; (8002a60 <HAL_GPIO_Init+0x334>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d01f      	beq.n	800296a <HAL_GPIO_Init+0x23e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4d      	ldr	r2, [pc, #308]	; (8002a64 <HAL_GPIO_Init+0x338>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d019      	beq.n	8002966 <HAL_GPIO_Init+0x23a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4c      	ldr	r2, [pc, #304]	; (8002a68 <HAL_GPIO_Init+0x33c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_GPIO_Init+0x236>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4b      	ldr	r2, [pc, #300]	; (8002a6c <HAL_GPIO_Init+0x340>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00d      	beq.n	800295e <HAL_GPIO_Init+0x232>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4a      	ldr	r2, [pc, #296]	; (8002a70 <HAL_GPIO_Init+0x344>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x22e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a49      	ldr	r2, [pc, #292]	; (8002a74 <HAL_GPIO_Init+0x348>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <HAL_GPIO_Init+0x22a>
 8002952:	2306      	movs	r3, #6
 8002954:	e00c      	b.n	8002970 <HAL_GPIO_Init+0x244>
 8002956:	2307      	movs	r3, #7
 8002958:	e00a      	b.n	8002970 <HAL_GPIO_Init+0x244>
 800295a:	2305      	movs	r3, #5
 800295c:	e008      	b.n	8002970 <HAL_GPIO_Init+0x244>
 800295e:	2304      	movs	r3, #4
 8002960:	e006      	b.n	8002970 <HAL_GPIO_Init+0x244>
 8002962:	2303      	movs	r3, #3
 8002964:	e004      	b.n	8002970 <HAL_GPIO_Init+0x244>
 8002966:	2302      	movs	r3, #2
 8002968:	e002      	b.n	8002970 <HAL_GPIO_Init+0x244>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_GPIO_Init+0x244>
 800296e:	2300      	movs	r3, #0
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	f002 0203 	and.w	r2, r2, #3
 8002976:	0092      	lsls	r2, r2, #2
 8002978:	4093      	lsls	r3, r2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002980:	4936      	ldr	r1, [pc, #216]	; (8002a5c <HAL_GPIO_Init+0x330>)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	3302      	adds	r3, #2
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800298e:	4b3a      	ldr	r3, [pc, #232]	; (8002a78 <HAL_GPIO_Init+0x34c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029b2:	4a31      	ldr	r2, [pc, #196]	; (8002a78 <HAL_GPIO_Init+0x34c>)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80029b8:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <HAL_GPIO_Init+0x34c>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029dc:	4a26      	ldr	r2, [pc, #152]	; (8002a78 <HAL_GPIO_Init+0x34c>)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029e2:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <HAL_GPIO_Init+0x34c>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a06:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <HAL_GPIO_Init+0x34c>)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a0c:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <HAL_GPIO_Init+0x34c>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a30:	4a11      	ldr	r2, [pc, #68]	; (8002a78 <HAL_GPIO_Init+0x34c>)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fa22 f303 	lsr.w	r3, r2, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f47f ae78 	bne.w	800273c <HAL_GPIO_Init+0x10>
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	48000400 	.word	0x48000400
 8002a64:	48000800 	.word	0x48000800
 8002a68:	48000c00 	.word	0x48000c00
 8002a6c:	48001000 	.word	0x48001000
 8002a70:	48001400 	.word	0x48001400
 8002a74:	48001800 	.word	0x48001800
 8002a78:	40010400 	.word	0x40010400

08002a7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002a8a:	e0cd      	b.n	8002c28 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80c0 	beq.w	8002c22 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002aa2:	4a68      	ldr	r2, [pc, #416]	; (8002c44 <HAL_GPIO_DeInit+0x1c8>)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002aca:	d025      	beq.n	8002b18 <HAL_GPIO_DeInit+0x9c>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a5e      	ldr	r2, [pc, #376]	; (8002c48 <HAL_GPIO_DeInit+0x1cc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d01f      	beq.n	8002b14 <HAL_GPIO_DeInit+0x98>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a5d      	ldr	r2, [pc, #372]	; (8002c4c <HAL_GPIO_DeInit+0x1d0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d019      	beq.n	8002b10 <HAL_GPIO_DeInit+0x94>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a5c      	ldr	r2, [pc, #368]	; (8002c50 <HAL_GPIO_DeInit+0x1d4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d013      	beq.n	8002b0c <HAL_GPIO_DeInit+0x90>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a5b      	ldr	r2, [pc, #364]	; (8002c54 <HAL_GPIO_DeInit+0x1d8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00d      	beq.n	8002b08 <HAL_GPIO_DeInit+0x8c>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a5a      	ldr	r2, [pc, #360]	; (8002c58 <HAL_GPIO_DeInit+0x1dc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d007      	beq.n	8002b04 <HAL_GPIO_DeInit+0x88>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a59      	ldr	r2, [pc, #356]	; (8002c5c <HAL_GPIO_DeInit+0x1e0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d101      	bne.n	8002b00 <HAL_GPIO_DeInit+0x84>
 8002afc:	2306      	movs	r3, #6
 8002afe:	e00c      	b.n	8002b1a <HAL_GPIO_DeInit+0x9e>
 8002b00:	2307      	movs	r3, #7
 8002b02:	e00a      	b.n	8002b1a <HAL_GPIO_DeInit+0x9e>
 8002b04:	2305      	movs	r3, #5
 8002b06:	e008      	b.n	8002b1a <HAL_GPIO_DeInit+0x9e>
 8002b08:	2304      	movs	r3, #4
 8002b0a:	e006      	b.n	8002b1a <HAL_GPIO_DeInit+0x9e>
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e004      	b.n	8002b1a <HAL_GPIO_DeInit+0x9e>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e002      	b.n	8002b1a <HAL_GPIO_DeInit+0x9e>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <HAL_GPIO_DeInit+0x9e>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	f002 0203 	and.w	r2, r2, #3
 8002b20:	0092      	lsls	r2, r2, #2
 8002b22:	4093      	lsls	r3, r2
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d132      	bne.n	8002b90 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002b2a:	4b4d      	ldr	r3, [pc, #308]	; (8002c60 <HAL_GPIO_DeInit+0x1e4>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	494b      	ldr	r1, [pc, #300]	; (8002c60 <HAL_GPIO_DeInit+0x1e4>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002b38:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <HAL_GPIO_DeInit+0x1e4>)
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	4947      	ldr	r1, [pc, #284]	; (8002c60 <HAL_GPIO_DeInit+0x1e4>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002b46:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <HAL_GPIO_DeInit+0x1e4>)
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	4944      	ldr	r1, [pc, #272]	; (8002c60 <HAL_GPIO_DeInit+0x1e4>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002b54:	4b42      	ldr	r3, [pc, #264]	; (8002c60 <HAL_GPIO_DeInit+0x1e4>)
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	4940      	ldr	r1, [pc, #256]	; (8002c60 <HAL_GPIO_DeInit+0x1e4>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002b72:	4a34      	ldr	r2, [pc, #208]	; (8002c44 <HAL_GPIO_DeInit+0x1c8>)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	3302      	adds	r3, #2
 8002b7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	43da      	mvns	r2, r3
 8002b82:	4830      	ldr	r0, [pc, #192]	; (8002c44 <HAL_GPIO_DeInit+0x1c8>)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	400a      	ands	r2, r1
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	2103      	movs	r1, #3
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	08da      	lsrs	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3208      	adds	r2, #8
 8002bac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	08d2      	lsrs	r2, r2, #3
 8002bc4:	4019      	ands	r1, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3208      	adds	r2, #8
 8002bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2103      	movs	r1, #3
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	401a      	ands	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	2101      	movs	r1, #1
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	2103      	movs	r1, #3
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	401a      	ands	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c12:	2101      	movs	r1, #1
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	401a      	ands	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	3301      	adds	r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f47f af2b 	bne.w	8002a8c <HAL_GPIO_DeInit+0x10>
  }
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40010000 	.word	0x40010000
 8002c48:	48000400 	.word	0x48000400
 8002c4c:	48000800 	.word	0x48000800
 8002c50:	48000c00 	.word	0x48000c00
 8002c54:	48001000 	.word	0x48001000
 8002c58:	48001400 	.word	0x48001400
 8002c5c:	48001800 	.word	0x48001800
 8002c60:	40010400 	.word	0x40010400

08002c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
 8002c70:	4613      	mov	r3, r2
 8002c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c74:	787b      	ldrb	r3, [r7, #1]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c80:	e002      	b.n	8002c88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca2:	6013      	str	r3, [r2, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40007000 	.word	0x40007000

08002cb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <HAL_PWREx_GetVoltageRange+0x18>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40007000 	.word	0x40007000

08002cd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cde:	d130      	bne.n	8002d42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce0:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cec:	d038      	beq.n	8002d60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2232      	movs	r2, #50	; 0x32
 8002d04:	fb02 f303 	mul.w	r3, r2, r3
 8002d08:	4a1b      	ldr	r2, [pc, #108]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	0c9b      	lsrs	r3, r3, #18
 8002d10:	3301      	adds	r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d14:	e002      	b.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d28:	d102      	bne.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f2      	bne.n	8002d16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3c:	d110      	bne.n	8002d60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e00f      	b.n	8002d62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d42:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4e:	d007      	beq.n	8002d60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d58:	4a05      	ldr	r2, [pc, #20]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40007000 	.word	0x40007000
 8002d74:	20000004 	.word	0x20000004
 8002d78:	431bde83 	.word	0x431bde83

08002d7c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002d84:	f7fe fbe0 	bl	8001548 <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e063      	b.n	8002e5c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7fd fdfb 	bl	80009a4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002dae:	f241 3188 	movw	r1, #5000	; 0x1388
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 faf7 	bl	80033a6 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	021a      	lsls	r2, r3, #8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2120      	movs	r1, #32
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 faef 	bl	80033c2 <QSPI_WaitFlagStateUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002de8:	7afb      	ldrb	r3, [r7, #11]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d131      	bne.n	8002e52 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002df8:	f023 0310 	bic.w	r3, r3, #16
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6852      	ldr	r2, [r2, #4]
 8002e00:	0611      	lsls	r1, r2, #24
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68d2      	ldr	r2, [r2, #12]
 8002e06:	4311      	orrs	r1, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <HAL_QSPI_Init+0xe8>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6912      	ldr	r2, [r2, #16]
 8002e1e:	0411      	lsls	r1, r2, #16
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6952      	ldr	r2, [r2, #20]
 8002e24:	4311      	orrs	r1, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6992      	ldr	r2, [r2, #24]
 8002e2a:	4311      	orrs	r1, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002e5a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	ffe0f8fe 	.word	0xffe0f8fe

08002e68 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e016      	b.n	8002ea8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0201 	bic.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fd fdce 	bl	8000a2c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7fe fb44 	bl	8001548 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_QSPI_Command+0x22>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e048      	b.n	8002f64 <HAL_QSPI_Command+0xb4>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d137      	bne.n	8002f56 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2200      	movs	r2, #0
 8002efc:	2120      	movs	r1, #32
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 fa5f 	bl	80033c2 <QSPI_WaitFlagStateUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d125      	bne.n	8002f5a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fa8c 	bl	8003430 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d115      	bne.n	8002f4c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2201      	movs	r2, #1
 8002f28:	2102      	movs	r1, #2
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fa49 	bl	80033c2 <QSPI_WaitFlagStateUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10f      	bne.n	8002f5a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002f4a:	e006      	b.n	8002f5a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002f54:	e001      	b.n	8002f5a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
 8002f58:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002f7c:	f7fe fae4 	bl	8001548 <HAL_GetTick>
 8002f80:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3320      	adds	r3, #32
 8002f88:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_QSPI_Transmit+0x2e>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e07b      	b.n	8003092 <HAL_QSPI_Transmit+0x126>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d16a      	bne.n	8003084 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d05b      	beq.n	8003072 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2212      	movs	r2, #18
 8002fbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002fee:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002ff0:	e01b      	b.n	800302a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	2104      	movs	r1, #4
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f9e0 	bl	80033c2 <QSPI_WaitFlagStateUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003006:	7ffb      	ldrb	r3, [r7, #31]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d113      	bne.n	8003034 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	1e5a      	subs	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1df      	bne.n	8002ff2 <HAL_QSPI_Transmit+0x86>
 8003032:	e000      	b.n	8003036 <HAL_QSPI_Transmit+0xca>
          break;
 8003034:	bf00      	nop
      }

      if (status == HAL_OK)
 8003036:	7ffb      	ldrb	r3, [r7, #31]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d115      	bne.n	8003068 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2201      	movs	r2, #1
 8003044:	2102      	movs	r1, #2
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f9bb 	bl	80033c2 <QSPI_WaitFlagStateUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003050:	7ffb      	ldrb	r3, [r7, #31]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d108      	bne.n	8003068 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2202      	movs	r2, #2
 800305c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f934 	bl	80032cc <HAL_QSPI_Abort>
 8003064:	4603      	mov	r3, r0
 8003066:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003070:	e00a      	b.n	8003088 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	f043 0208 	orr.w	r2, r3, #8
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	77fb      	strb	r3, [r7, #31]
 8003082:	e001      	b.n	8003088 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003084:	2302      	movs	r3, #2
 8003086:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003090:	7ffb      	ldrb	r3, [r7, #31]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b08a      	sub	sp, #40	; 0x28
 800309e:	af02      	add	r7, sp, #8
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80030aa:	f7fe fa4d 	bl	8001548 <HAL_GetTick>
 80030ae:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3320      	adds	r3, #32
 80030be:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_QSPI_Receive+0x36>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e082      	b.n	80031d6 <HAL_QSPI_Receive+0x13c>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d171      	bne.n	80031c8 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d062      	beq.n	80031b6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2222      	movs	r2, #34	; 0x22
 80030f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003128:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003132:	e01c      	b.n	800316e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2201      	movs	r2, #1
 800313c:	2106      	movs	r1, #6
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f93f 	bl	80033c2 <QSPI_WaitFlagStateUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003148:	7ffb      	ldrb	r3, [r7, #31]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d114      	bne.n	8003178 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	7812      	ldrb	r2, [r2, #0]
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	1e5a      	subs	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1de      	bne.n	8003134 <HAL_QSPI_Receive+0x9a>
 8003176:	e000      	b.n	800317a <HAL_QSPI_Receive+0xe0>
          break;
 8003178:	bf00      	nop
      }

      if (status == HAL_OK)
 800317a:	7ffb      	ldrb	r3, [r7, #31]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d115      	bne.n	80031ac <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2201      	movs	r2, #1
 8003188:	2102      	movs	r1, #2
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f919 	bl	80033c2 <QSPI_WaitFlagStateUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003194:	7ffb      	ldrb	r3, [r7, #31]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d108      	bne.n	80031ac <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2202      	movs	r2, #2
 80031a0:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f892 	bl	80032cc <HAL_QSPI_Abort>
 80031a8:	4603      	mov	r3, r0
 80031aa:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80031b4:	e00a      	b.n	80031cc <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	f043 0208 	orr.w	r2, r3, #8
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	77fb      	strb	r3, [r7, #31]
 80031c6:	e001      	b.n	80031cc <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
 80031ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80031d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b088      	sub	sp, #32
 80031e2:	af02      	add	r7, sp, #8
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80031ec:	f7fe f9ac 	bl	8001548 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_QSPI_AutoPolling+0x24>
 80031fe:	2302      	movs	r3, #2
 8003200:	e060      	b.n	80032c4 <HAL_QSPI_AutoPolling+0xe6>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d14f      	bne.n	80032b6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2242      	movs	r2, #66	; 0x42
 8003220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2200      	movs	r2, #0
 800322c:	2120      	movs	r1, #32
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f8c7 	bl	80033c2 <QSPI_WaitFlagStateUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d13d      	bne.n	80032ba <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6852      	ldr	r2, [r2, #4]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6892      	ldr	r2, [r2, #8]
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	431a      	orrs	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003274:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800327e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f8d3 	bl	8003430 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2201      	movs	r2, #1
 8003292:	2108      	movs	r1, #8
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f894 	bl	80033c2 <QSPI_WaitFlagStateUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800329e:	7dfb      	ldrb	r3, [r7, #23]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2208      	movs	r2, #8
 80032aa:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80032b4:	e001      	b.n	80032ba <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
 80032b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7fe f936 	bl	8001548 <HAL_GetTick>
 80032dc:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d056      	beq.n	800339c <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d017      	beq.n	8003334 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0204 	bic.w	r2, r2, #4
 8003312:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff f9c8 	bl	80026ae <HAL_DMA_Abort>
 800331e:	4603      	mov	r3, r0
 8003320:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332c:	f043 0204 	orr.w	r2, r3, #4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0202 	orr.w	r2, r2, #2
 8003342:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2201      	movs	r2, #1
 800334e:	2102      	movs	r1, #2
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f836 	bl	80033c2 <QSPI_WaitFlagStateUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10e      	bne.n	800337e <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2202      	movs	r2, #2
 8003366:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2200      	movs	r2, #0
 8003372:	2120      	movs	r1, #32
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f824 	bl	80033c2 <QSPI_WaitFlagStateUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10b      	bne.n	800339c <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003392:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	4613      	mov	r3, r2
 80033d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80033d2:	e01a      	b.n	800340a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033da:	d016      	beq.n	800340a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033dc:	f7fe f8b4 	bl	8001548 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d302      	bcc.n	80033f2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10b      	bne.n	800340a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2204      	movs	r2, #4
 80033f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	f043 0201 	orr.w	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e00e      	b.n	8003428 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	429a      	cmp	r2, r3
 8003424:	d1d6      	bne.n	80033d4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	2b00      	cmp	r3, #0
 8003442:	d009      	beq.n	8003458 <QSPI_Config+0x28>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800344a:	d005      	beq.n	8003458 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3a01      	subs	r2, #1
 8003456:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80b9 	beq.w	80035d4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d05f      	beq.n	800352a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	6892      	ldr	r2, [r2, #8]
 8003472:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d031      	beq.n	80034e0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	431a      	orrs	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348a:	431a      	orrs	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	431a      	orrs	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	049b      	lsls	r3, r3, #18
 8003498:	431a      	orrs	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	431a      	orrs	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	ea42 0103 	orr.w	r1, r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80034d0:	f000 812e 	beq.w	8003730 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	6852      	ldr	r2, [r2, #4]
 80034dc:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80034de:	e127      	b.n	8003730 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	431a      	orrs	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	431a      	orrs	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	431a      	orrs	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	049b      	lsls	r3, r3, #18
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	431a      	orrs	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	431a      	orrs	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	431a      	orrs	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	431a      	orrs	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	ea42 0103 	orr.w	r1, r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	430a      	orrs	r2, r1
 8003526:	615a      	str	r2, [r3, #20]
}
 8003528:	e102      	b.n	8003730 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d02e      	beq.n	8003590 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	431a      	orrs	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	431a      	orrs	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	431a      	orrs	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	049b      	lsls	r3, r3, #18
 800354e:	431a      	orrs	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	431a      	orrs	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	431a      	orrs	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	431a      	orrs	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	431a      	orrs	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	ea42 0103 	orr.w	r1, r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	430a      	orrs	r2, r1
 8003578:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003580:	f000 80d6 	beq.w	8003730 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	6852      	ldr	r2, [r2, #4]
 800358c:	619a      	str	r2, [r3, #24]
}
 800358e:	e0cf      	b.n	8003730 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	431a      	orrs	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359e:	431a      	orrs	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	049b      	lsls	r3, r3, #18
 80035ac:	431a      	orrs	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	431a      	orrs	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	ea42 0103 	orr.w	r1, r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	615a      	str	r2, [r3, #20]
}
 80035d2:	e0ad      	b.n	8003730 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d058      	beq.n	800368e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	6892      	ldr	r2, [r2, #8]
 80035e4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d02d      	beq.n	800364a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	431a      	orrs	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fc:	431a      	orrs	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	431a      	orrs	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	049b      	lsls	r3, r3, #18
 800360a:	431a      	orrs	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	431a      	orrs	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	431a      	orrs	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	431a      	orrs	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	431a      	orrs	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	ea42 0103 	orr.w	r1, r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	430a      	orrs	r2, r1
 8003634:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800363c:	d078      	beq.n	8003730 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	6852      	ldr	r2, [r2, #4]
 8003646:	619a      	str	r2, [r3, #24]
}
 8003648:	e072      	b.n	8003730 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	431a      	orrs	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003658:	431a      	orrs	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	431a      	orrs	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	049b      	lsls	r3, r3, #18
 8003666:	431a      	orrs	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	431a      	orrs	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	431a      	orrs	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	431a      	orrs	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	ea42 0103 	orr.w	r1, r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	430a      	orrs	r2, r1
 800368a:	615a      	str	r2, [r3, #20]
}
 800368c:	e050      	b.n	8003730 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d02a      	beq.n	80036ec <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	431a      	orrs	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a4:	431a      	orrs	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	431a      	orrs	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	049b      	lsls	r3, r3, #18
 80036b2:	431a      	orrs	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	431a      	orrs	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	431a      	orrs	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	ea42 0103 	orr.w	r1, r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80036de:	d027      	beq.n	8003730 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	6852      	ldr	r2, [r2, #4]
 80036e8:	619a      	str	r2, [r3, #24]
}
 80036ea:	e021      	b.n	8003730 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01d      	beq.n	8003730 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	431a      	orrs	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003702:	431a      	orrs	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	431a      	orrs	r2, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	049b      	lsls	r3, r3, #18
 8003710:	431a      	orrs	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	431a      	orrs	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	431a      	orrs	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	ea42 0103 	orr.w	r1, r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	430a      	orrs	r2, r1
 800372e:	615a      	str	r2, [r3, #20]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e3d4      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800374e:	4ba1      	ldr	r3, [pc, #644]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003758:	4b9e      	ldr	r3, [pc, #632]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 80e4 	beq.w	8003938 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d007      	beq.n	8003786 <HAL_RCC_OscConfig+0x4a>
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b0c      	cmp	r3, #12
 800377a:	f040 808b 	bne.w	8003894 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b01      	cmp	r3, #1
 8003782:	f040 8087 	bne.w	8003894 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003786:	4b93      	ldr	r3, [pc, #588]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_RCC_OscConfig+0x62>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e3ac      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1a      	ldr	r2, [r3, #32]
 80037a2:	4b8c      	ldr	r3, [pc, #560]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d004      	beq.n	80037b8 <HAL_RCC_OscConfig+0x7c>
 80037ae:	4b89      	ldr	r3, [pc, #548]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b6:	e005      	b.n	80037c4 <HAL_RCC_OscConfig+0x88>
 80037b8:	4b86      	ldr	r3, [pc, #536]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d223      	bcs.n	8003810 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fd3f 	bl	8004250 <RCC_SetFlashLatencyFromMSIRange>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e38d      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037dc:	4b7d      	ldr	r3, [pc, #500]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a7c      	ldr	r2, [pc, #496]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037e2:	f043 0308 	orr.w	r3, r3, #8
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b7a      	ldr	r3, [pc, #488]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4977      	ldr	r1, [pc, #476]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037fa:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	4972      	ldr	r1, [pc, #456]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
 800380e:	e025      	b.n	800385c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003810:	4b70      	ldr	r3, [pc, #448]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a6f      	ldr	r2, [pc, #444]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003816:	f043 0308 	orr.w	r3, r3, #8
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4b6d      	ldr	r3, [pc, #436]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	496a      	ldr	r1, [pc, #424]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800382e:	4b69      	ldr	r3, [pc, #420]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	4965      	ldr	r1, [pc, #404]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d109      	bne.n	800385c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fcff 	bl	8004250 <RCC_SetFlashLatencyFromMSIRange>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e34d      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800385c:	f000 fc36 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8003860:	4601      	mov	r1, r0
 8003862:	4b5c      	ldr	r3, [pc, #368]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	4a5a      	ldr	r2, [pc, #360]	; (80039d8 <HAL_RCC_OscConfig+0x29c>)
 800386e:	5cd3      	ldrb	r3, [r2, r3]
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	fa21 f303 	lsr.w	r3, r1, r3
 8003878:	4a58      	ldr	r2, [pc, #352]	; (80039dc <HAL_RCC_OscConfig+0x2a0>)
 800387a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800387c:	4b58      	ldr	r3, [pc, #352]	; (80039e0 <HAL_RCC_OscConfig+0x2a4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7fd fe11 	bl	80014a8 <HAL_InitTick>
 8003886:	4603      	mov	r3, r0
 8003888:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d052      	beq.n	8003936 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	e331      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d032      	beq.n	8003902 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800389c:	4b4d      	ldr	r3, [pc, #308]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a4c      	ldr	r2, [pc, #304]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038a8:	f7fd fe4e 	bl	8001548 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038b0:	f7fd fe4a 	bl	8001548 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e31a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038c2:	4b44      	ldr	r3, [pc, #272]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ce:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a40      	ldr	r2, [pc, #256]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038d4:	f043 0308 	orr.w	r3, r3, #8
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	4b3e      	ldr	r3, [pc, #248]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	493b      	ldr	r1, [pc, #236]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ec:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	4936      	ldr	r1, [pc, #216]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
 8003900:	e01a      	b.n	8003938 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003902:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a33      	ldr	r2, [pc, #204]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800390e:	f7fd fe1b 	bl	8001548 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003916:	f7fd fe17 	bl	8001548 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e2e7      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003928:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1f0      	bne.n	8003916 <HAL_RCC_OscConfig+0x1da>
 8003934:	e000      	b.n	8003938 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003936:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d074      	beq.n	8003a2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b08      	cmp	r3, #8
 8003948:	d005      	beq.n	8003956 <HAL_RCC_OscConfig+0x21a>
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	2b0c      	cmp	r3, #12
 800394e:	d10e      	bne.n	800396e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d10b      	bne.n	800396e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003956:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d064      	beq.n	8003a2c <HAL_RCC_OscConfig+0x2f0>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d160      	bne.n	8003a2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e2c4      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003976:	d106      	bne.n	8003986 <HAL_RCC_OscConfig+0x24a>
 8003978:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800397e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	e01d      	b.n	80039c2 <HAL_RCC_OscConfig+0x286>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800398e:	d10c      	bne.n	80039aa <HAL_RCC_OscConfig+0x26e>
 8003990:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0f      	ldr	r2, [pc, #60]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003996:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80039a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	e00b      	b.n	80039c2 <HAL_RCC_OscConfig+0x286>
 80039aa:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a06      	ldr	r2, [pc, #24]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80039bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01c      	beq.n	8003a04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ca:	f7fd fdbd 	bl	8001548 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039d0:	e011      	b.n	80039f6 <HAL_RCC_OscConfig+0x2ba>
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
 80039d8:	08005fb4 	.word	0x08005fb4
 80039dc:	20000004 	.word	0x20000004
 80039e0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e4:	f7fd fdb0 	bl	8001548 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	; 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e280      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039f6:	4baf      	ldr	r3, [pc, #700]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x2a8>
 8003a02:	e014      	b.n	8003a2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fd fda0 	bl	8001548 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7fd fd9c 	bl	8001548 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	; 0x64
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e26c      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a1e:	4ba5      	ldr	r3, [pc, #660]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x2d0>
 8003a2a:	e000      	b.n	8003a2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d060      	beq.n	8003afc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_OscConfig+0x310>
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2b0c      	cmp	r3, #12
 8003a44:	d119      	bne.n	8003a7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d116      	bne.n	8003a7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a4c:	4b99      	ldr	r3, [pc, #612]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_OscConfig+0x328>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e249      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a64:	4b93      	ldr	r3, [pc, #588]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	061b      	lsls	r3, r3, #24
 8003a72:	4990      	ldr	r1, [pc, #576]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a78:	e040      	b.n	8003afc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d023      	beq.n	8003aca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a82:	4b8c      	ldr	r3, [pc, #560]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a8b      	ldr	r2, [pc, #556]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7fd fd5b 	bl	8001548 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fd fd57 	bl	8001548 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e227      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa8:	4b82      	ldr	r3, [pc, #520]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b7f      	ldr	r3, [pc, #508]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	497c      	ldr	r1, [pc, #496]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
 8003ac8:	e018      	b.n	8003afc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aca:	4b7a      	ldr	r3, [pc, #488]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a79      	ldr	r2, [pc, #484]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fd fd37 	bl	8001548 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fd fd33 	bl	8001548 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e203      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003af0:	4b70      	ldr	r3, [pc, #448]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f0      	bne.n	8003ade <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d03c      	beq.n	8003b82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01c      	beq.n	8003b4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b10:	4b68      	ldr	r3, [pc, #416]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b16:	4a67      	ldr	r2, [pc, #412]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b20:	f7fd fd12 	bl	8001548 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b28:	f7fd fd0e 	bl	8001548 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e1de      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b3a:	4b5e      	ldr	r3, [pc, #376]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ef      	beq.n	8003b28 <HAL_RCC_OscConfig+0x3ec>
 8003b48:	e01b      	b.n	8003b82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b4a:	4b5a      	ldr	r3, [pc, #360]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b50:	4a58      	ldr	r2, [pc, #352]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fd fcf5 	bl	8001548 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b62:	f7fd fcf1 	bl	8001548 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e1c1      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b74:	4b4f      	ldr	r3, [pc, #316]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1ef      	bne.n	8003b62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80a6 	beq.w	8003cdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b90:	2300      	movs	r3, #0
 8003b92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b94:	4b47      	ldr	r3, [pc, #284]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10d      	bne.n	8003bbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba0:	4b44      	ldr	r3, [pc, #272]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba4:	4a43      	ldr	r2, [pc, #268]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003baa:	6593      	str	r3, [r2, #88]	; 0x58
 8003bac:	4b41      	ldr	r3, [pc, #260]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bbc:	4b3e      	ldr	r3, [pc, #248]	; (8003cb8 <HAL_RCC_OscConfig+0x57c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d118      	bne.n	8003bfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc8:	4b3b      	ldr	r3, [pc, #236]	; (8003cb8 <HAL_RCC_OscConfig+0x57c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a3a      	ldr	r2, [pc, #232]	; (8003cb8 <HAL_RCC_OscConfig+0x57c>)
 8003bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd4:	f7fd fcb8 	bl	8001548 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bdc:	f7fd fcb4 	bl	8001548 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e184      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bee:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <HAL_RCC_OscConfig+0x57c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d108      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4d8>
 8003c02:	4b2c      	ldr	r3, [pc, #176]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c12:	e024      	b.n	8003c5e <HAL_RCC_OscConfig+0x522>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b05      	cmp	r3, #5
 8003c1a:	d110      	bne.n	8003c3e <HAL_RCC_OscConfig+0x502>
 8003c1c:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	4a24      	ldr	r2, [pc, #144]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c24:	f043 0304 	orr.w	r3, r3, #4
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c2c:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	4a20      	ldr	r2, [pc, #128]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c3c:	e00f      	b.n	8003c5e <HAL_RCC_OscConfig+0x522>
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c44:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c4e:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c54:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c56:	f023 0304 	bic.w	r3, r3, #4
 8003c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d016      	beq.n	8003c94 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c66:	f7fd fc6f 	bl	8001548 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6c:	e00a      	b.n	8003c84 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6e:	f7fd fc6b 	bl	8001548 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e139      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ed      	beq.n	8003c6e <HAL_RCC_OscConfig+0x532>
 8003c92:	e01a      	b.n	8003cca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fd fc58 	bl	8001548 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c9a:	e00f      	b.n	8003cbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7fd fc54 	bl	8001548 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d906      	bls.n	8003cbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e122      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cbc:	4b90      	ldr	r3, [pc, #576]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e8      	bne.n	8003c9c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cca:	7ffb      	ldrb	r3, [r7, #31]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd0:	4b8b      	ldr	r3, [pc, #556]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	4a8a      	ldr	r2, [pc, #552]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8108 	beq.w	8003ef6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	f040 80d0 	bne.w	8003e90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cf0:	4b83      	ldr	r3, [pc, #524]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0203 	and.w	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d130      	bne.n	8003d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d127      	bne.n	8003d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d11f      	bne.n	8003d66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d30:	2a07      	cmp	r2, #7
 8003d32:	bf14      	ite	ne
 8003d34:	2201      	movne	r2, #1
 8003d36:	2200      	moveq	r2, #0
 8003d38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d113      	bne.n	8003d66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d109      	bne.n	8003d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d06e      	beq.n	8003e44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b0c      	cmp	r3, #12
 8003d6a:	d069      	beq.n	8003e40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d6c:	4b64      	ldr	r3, [pc, #400]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d105      	bne.n	8003d84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d78:	4b61      	ldr	r3, [pc, #388]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0b7      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d88:	4b5d      	ldr	r3, [pc, #372]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a5c      	ldr	r2, [pc, #368]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d94:	f7fd fbd8 	bl	8001548 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fd fbd4 	bl	8001548 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e0a4      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dae:	4b54      	ldr	r3, [pc, #336]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dba:	4b51      	ldr	r3, [pc, #324]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	4b51      	ldr	r3, [pc, #324]	; (8003f04 <HAL_RCC_OscConfig+0x7c8>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dca:	3a01      	subs	r2, #1
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dd4:	0212      	lsls	r2, r2, #8
 8003dd6:	4311      	orrs	r1, r2
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ddc:	0852      	lsrs	r2, r2, #1
 8003dde:	3a01      	subs	r2, #1
 8003de0:	0552      	lsls	r2, r2, #21
 8003de2:	4311      	orrs	r1, r2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003de8:	0852      	lsrs	r2, r2, #1
 8003dea:	3a01      	subs	r2, #1
 8003dec:	0652      	lsls	r2, r2, #25
 8003dee:	4311      	orrs	r1, r2
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003df4:	0912      	lsrs	r2, r2, #4
 8003df6:	0452      	lsls	r2, r2, #17
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	4941      	ldr	r1, [pc, #260]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e00:	4b3f      	ldr	r3, [pc, #252]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a3e      	ldr	r2, [pc, #248]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e0c:	4b3c      	ldr	r3, [pc, #240]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4a3b      	ldr	r2, [pc, #236]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e18:	f7fd fb96 	bl	8001548 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e20:	f7fd fb92 	bl	8001548 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e062      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e32:	4b33      	ldr	r3, [pc, #204]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e3e:	e05a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e059      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e44:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d152      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e50:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2a      	ldr	r2, [pc, #168]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e5c:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e68:	f7fd fb6e 	bl	8001548 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fd fb6a 	bl	8001548 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e03a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e82:	4b1f      	ldr	r3, [pc, #124]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x734>
 8003e8e:	e032      	b.n	8003ef6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	d02d      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e96:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a19      	ldr	r2, [pc, #100]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003e9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003ea2:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003eb4:	f023 0303 	bic.w	r3, r3, #3
 8003eb8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	4a10      	ldr	r2, [pc, #64]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003ec0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eca:	f7fd fb3d 	bl	8001548 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed2:	f7fd fb39 	bl	8001548 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e009      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_RCC_OscConfig+0x7c4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f0      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x796>
 8003ef0:	e001      	b.n	8003ef6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40021000 	.word	0x40021000
 8003f04:	f99d808c 	.word	0xf99d808c

08003f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0c8      	b.n	80040ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f1c:	4b66      	ldr	r3, [pc, #408]	; (80040b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d910      	bls.n	8003f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4b63      	ldr	r3, [pc, #396]	; (80040b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 0207 	bic.w	r2, r3, #7
 8003f32:	4961      	ldr	r1, [pc, #388]	; (80040b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	4b5f      	ldr	r3, [pc, #380]	; (80040b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e0b0      	b.n	80040ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d04c      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f60:	4b56      	ldr	r3, [pc, #344]	; (80040bc <HAL_RCC_ClockConfig+0x1b4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d121      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e09e      	b.n	80040ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d107      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f78:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_ClockConfig+0x1b4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d115      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e092      	b.n	80040ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f90:	4b4a      	ldr	r3, [pc, #296]	; (80040bc <HAL_RCC_ClockConfig+0x1b4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d109      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e086      	b.n	80040ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa0:	4b46      	ldr	r3, [pc, #280]	; (80040bc <HAL_RCC_ClockConfig+0x1b4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e07e      	b.n	80040ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fb0:	4b42      	ldr	r3, [pc, #264]	; (80040bc <HAL_RCC_ClockConfig+0x1b4>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f023 0203 	bic.w	r2, r3, #3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	493f      	ldr	r1, [pc, #252]	; (80040bc <HAL_RCC_ClockConfig+0x1b4>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc2:	f7fd fac1 	bl	8001548 <HAL_GetTick>
 8003fc6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fca:	f7fd fabd 	bl	8001548 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e066      	b.n	80040ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe0:	4b36      	ldr	r3, [pc, #216]	; (80040bc <HAL_RCC_ClockConfig+0x1b4>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 020c 	and.w	r2, r3, #12
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d1eb      	bne.n	8003fca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ffe:	4b2f      	ldr	r3, [pc, #188]	; (80040bc <HAL_RCC_ClockConfig+0x1b4>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	492c      	ldr	r1, [pc, #176]	; (80040bc <HAL_RCC_ClockConfig+0x1b4>)
 800400c:	4313      	orrs	r3, r2
 800400e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004010:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <HAL_RCC_ClockConfig+0x1b0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d210      	bcs.n	8004040 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401e:	4b26      	ldr	r3, [pc, #152]	; (80040b8 <HAL_RCC_ClockConfig+0x1b0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 0207 	bic.w	r2, r3, #7
 8004026:	4924      	ldr	r1, [pc, #144]	; (80040b8 <HAL_RCC_ClockConfig+0x1b0>)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <HAL_RCC_ClockConfig+0x1b0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e036      	b.n	80040ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCC_ClockConfig+0x1b4>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4918      	ldr	r1, [pc, #96]	; (80040bc <HAL_RCC_ClockConfig+0x1b4>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800406a:	4b14      	ldr	r3, [pc, #80]	; (80040bc <HAL_RCC_ClockConfig+0x1b4>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4910      	ldr	r1, [pc, #64]	; (80040bc <HAL_RCC_ClockConfig+0x1b4>)
 800407a:	4313      	orrs	r3, r2
 800407c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800407e:	f000 f825 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8004082:	4601      	mov	r1, r0
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <HAL_RCC_ClockConfig+0x1b4>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	091b      	lsrs	r3, r3, #4
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	4a0c      	ldr	r2, [pc, #48]	; (80040c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	5cd3      	ldrb	r3, [r2, r3]
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	fa21 f303 	lsr.w	r3, r1, r3
 800409a:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800409e:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <HAL_RCC_ClockConfig+0x1c0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd fa00 	bl	80014a8 <HAL_InitTick>
 80040a8:	4603      	mov	r3, r0
 80040aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80040ac:	7afb      	ldrb	r3, [r7, #11]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40022000 	.word	0x40022000
 80040bc:	40021000 	.word	0x40021000
 80040c0:	08005fb4 	.word	0x08005fb4
 80040c4:	20000004 	.word	0x20000004
 80040c8:	20000008 	.word	0x20000008

080040cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	; 0x24
 80040d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	2300      	movs	r3, #0
 80040d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040da:	4b3d      	ldr	r3, [pc, #244]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e4:	4b3a      	ldr	r3, [pc, #232]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x34>
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	2b0c      	cmp	r3, #12
 80040f8:	d121      	bne.n	800413e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d11e      	bne.n	800413e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004100:	4b33      	ldr	r3, [pc, #204]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d107      	bne.n	800411c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800410c:	4b30      	ldr	r3, [pc, #192]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800410e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	e005      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800411c:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004128:	4a2a      	ldr	r2, [pc, #168]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004130:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10d      	bne.n	8004154 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800413c:	e00a      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b04      	cmp	r3, #4
 8004142:	d102      	bne.n	800414a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004144:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	e004      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d101      	bne.n	8004154 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004150:	4b22      	ldr	r3, [pc, #136]	; (80041dc <HAL_RCC_GetSysClockFreq+0x110>)
 8004152:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b0c      	cmp	r3, #12
 8004158:	d133      	bne.n	80041c2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800415a:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d002      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0xa4>
 800416a:	2b03      	cmp	r3, #3
 800416c:	d003      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0xaa>
 800416e:	e005      	b.n	800417c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004170:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004172:	617b      	str	r3, [r7, #20]
      break;
 8004174:	e005      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004176:	4b19      	ldr	r3, [pc, #100]	; (80041dc <HAL_RCC_GetSysClockFreq+0x110>)
 8004178:	617b      	str	r3, [r7, #20]
      break;
 800417a:	e002      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	617b      	str	r3, [r7, #20]
      break;
 8004180:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004182:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	3301      	adds	r3, #1
 800418e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004190:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	0a1b      	lsrs	r3, r3, #8
 8004196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	fb02 f203 	mul.w	r2, r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	0e5b      	lsrs	r3, r3, #25
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	3301      	adds	r3, #1
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041c2:	69bb      	ldr	r3, [r7, #24]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3724      	adds	r7, #36	; 0x24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40021000 	.word	0x40021000
 80041d4:	08005fcc 	.word	0x08005fcc
 80041d8:	00f42400 	.word	0x00f42400
 80041dc:	007a1200 	.word	0x007a1200

080041e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e4:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041e6:	681b      	ldr	r3, [r3, #0]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000004 	.word	0x20000004

080041f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041fc:	f7ff fff0 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 8004200:	4601      	mov	r1, r0
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	4a04      	ldr	r2, [pc, #16]	; (8004220 <HAL_RCC_GetPCLK1Freq+0x28>)
 800420e:	5cd3      	ldrb	r3, [r2, r3]
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	08005fc4 	.word	0x08005fc4

08004224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004228:	f7ff ffda 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 800422c:	4601      	mov	r1, r0
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	0adb      	lsrs	r3, r3, #11
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	4a04      	ldr	r2, [pc, #16]	; (800424c <HAL_RCC_GetPCLK2Freq+0x28>)
 800423a:	5cd3      	ldrb	r3, [r2, r3]
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000
 800424c:	08005fc4 	.word	0x08005fc4

08004250 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004258:	2300      	movs	r3, #0
 800425a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800425c:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004268:	f7fe fd24 	bl	8002cb4 <HAL_PWREx_GetVoltageRange>
 800426c:	6178      	str	r0, [r7, #20]
 800426e:	e014      	b.n	800429a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	4a24      	ldr	r2, [pc, #144]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427a:	6593      	str	r3, [r2, #88]	; 0x58
 800427c:	4b22      	ldr	r3, [pc, #136]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004288:	f7fe fd14 	bl	8002cb4 <HAL_PWREx_GetVoltageRange>
 800428c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800428e:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004298:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a0:	d10b      	bne.n	80042ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b80      	cmp	r3, #128	; 0x80
 80042a6:	d919      	bls.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2ba0      	cmp	r3, #160	; 0xa0
 80042ac:	d902      	bls.n	80042b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042ae:	2302      	movs	r3, #2
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	e013      	b.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042b4:	2301      	movs	r3, #1
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	e010      	b.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b80      	cmp	r3, #128	; 0x80
 80042be:	d902      	bls.n	80042c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042c0:	2303      	movs	r3, #3
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	e00a      	b.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d102      	bne.n	80042d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042cc:	2302      	movs	r3, #2
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	e004      	b.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b70      	cmp	r3, #112	; 0x70
 80042d6:	d101      	bne.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042d8:	2301      	movs	r3, #1
 80042da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f023 0207 	bic.w	r2, r3, #7
 80042e4:	4909      	ldr	r1, [pc, #36]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042ec:	4b07      	ldr	r3, [pc, #28]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d001      	beq.n	80042fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021000 	.word	0x40021000
 800430c:	40022000 	.word	0x40022000

08004310 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004318:	2300      	movs	r3, #0
 800431a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800431c:	2300      	movs	r3, #0
 800431e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004328:	2b00      	cmp	r3, #0
 800432a:	d03f      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004334:	d01c      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800433a:	d802      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00e      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004340:	e01f      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004342:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004346:	d003      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004348:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800434c:	d01c      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800434e:	e018      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004350:	4b85      	ldr	r3, [pc, #532]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a84      	ldr	r2, [pc, #528]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800435c:	e015      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3304      	adds	r3, #4
 8004362:	2100      	movs	r1, #0
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fab9 	bl	80048dc <RCCEx_PLLSAI1_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800436e:	e00c      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3320      	adds	r3, #32
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fba0 	bl	8004abc <RCCEx_PLLSAI2_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004380:	e003      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	74fb      	strb	r3, [r7, #19]
      break;
 8004386:	e000      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800438a:	7cfb      	ldrb	r3, [r7, #19]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10b      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004390:	4b75      	ldr	r3, [pc, #468]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800439e:	4972      	ldr	r1, [pc, #456]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043a6:	e001      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d03f      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043c0:	d01c      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80043c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043c6:	d802      	bhi.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00e      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xda>
 80043cc:	e01f      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80043ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043d2:	d003      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80043d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043d8:	d01c      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80043da:	e018      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043dc:	4b62      	ldr	r3, [pc, #392]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4a61      	ldr	r2, [pc, #388]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043e8:	e015      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3304      	adds	r3, #4
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fa73 	bl	80048dc <RCCEx_PLLSAI1_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043fa:	e00c      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3320      	adds	r3, #32
 8004400:	2100      	movs	r1, #0
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fb5a 	bl	8004abc <RCCEx_PLLSAI2_Config>
 8004408:	4603      	mov	r3, r0
 800440a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800440c:	e003      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	74fb      	strb	r3, [r7, #19]
      break;
 8004412:	e000      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004416:	7cfb      	ldrb	r3, [r7, #19]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10b      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800441c:	4b52      	ldr	r3, [pc, #328]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800442a:	494f      	ldr	r1, [pc, #316]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004432:	e001      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	7cfb      	ldrb	r3, [r7, #19]
 8004436:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80a0 	beq.w	8004586 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004446:	2300      	movs	r3, #0
 8004448:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00d      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	4b41      	ldr	r3, [pc, #260]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004464:	4a40      	ldr	r2, [pc, #256]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446a:	6593      	str	r3, [r2, #88]	; 0x58
 800446c:	4b3e      	ldr	r3, [pc, #248]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004478:	2301      	movs	r3, #1
 800447a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800447c:	4b3b      	ldr	r3, [pc, #236]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a3a      	ldr	r2, [pc, #232]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004486:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004488:	f7fd f85e 	bl	8001548 <HAL_GetTick>
 800448c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800448e:	e009      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004490:	f7fd f85a 	bl	8001548 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d902      	bls.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	74fb      	strb	r3, [r7, #19]
        break;
 80044a2:	e005      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044a4:	4b31      	ldr	r3, [pc, #196]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0ef      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80044b0:	7cfb      	ldrb	r3, [r7, #19]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d15c      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044b6:	4b2c      	ldr	r3, [pc, #176]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01f      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d019      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044d4:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044e0:	4b21      	ldr	r3, [pc, #132]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	4a20      	ldr	r2, [pc, #128]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044f0:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004500:	4a19      	ldr	r2, [pc, #100]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7fd f819 	bl	8001548 <HAL_GetTick>
 8004516:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004518:	e00b      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451a:	f7fd f815 	bl	8001548 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f241 3288 	movw	r2, #5000	; 0x1388
 8004528:	4293      	cmp	r3, r2
 800452a:	d902      	bls.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	74fb      	strb	r3, [r7, #19]
            break;
 8004530:	e006      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ec      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004540:	7cfb      	ldrb	r3, [r7, #19]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10c      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004546:	4b08      	ldr	r3, [pc, #32]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004556:	4904      	ldr	r1, [pc, #16]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800455e:	e009      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	74bb      	strb	r3, [r7, #18]
 8004564:	e006      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004566:	bf00      	nop
 8004568:	40021000 	.word	0x40021000
 800456c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004574:	7c7b      	ldrb	r3, [r7, #17]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d105      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800457a:	4b9e      	ldr	r3, [pc, #632]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	4a9d      	ldr	r2, [pc, #628]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004584:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004592:	4b98      	ldr	r3, [pc, #608]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f023 0203 	bic.w	r2, r3, #3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	4994      	ldr	r1, [pc, #592]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045b4:	4b8f      	ldr	r3, [pc, #572]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f023 020c 	bic.w	r2, r3, #12
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	498c      	ldr	r1, [pc, #560]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045d6:	4b87      	ldr	r3, [pc, #540]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	4983      	ldr	r1, [pc, #524]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045f8:	4b7e      	ldr	r3, [pc, #504]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	497b      	ldr	r1, [pc, #492]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0310 	and.w	r3, r3, #16
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800461a:	4b76      	ldr	r3, [pc, #472]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004628:	4972      	ldr	r1, [pc, #456]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800463c:	4b6d      	ldr	r3, [pc, #436]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004642:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464a:	496a      	ldr	r1, [pc, #424]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800465e:	4b65      	ldr	r3, [pc, #404]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	4961      	ldr	r1, [pc, #388]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004680:	4b5c      	ldr	r3, [pc, #368]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468e:	4959      	ldr	r1, [pc, #356]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046a2:	4b54      	ldr	r3, [pc, #336]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b0:	4950      	ldr	r1, [pc, #320]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046c4:	4b4b      	ldr	r3, [pc, #300]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	4948      	ldr	r1, [pc, #288]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046e6:	4b43      	ldr	r3, [pc, #268]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	493f      	ldr	r1, [pc, #252]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d028      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004708:	4b3a      	ldr	r3, [pc, #232]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004716:	4937      	ldr	r1, [pc, #220]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004726:	d106      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004728:	4b32      	ldr	r3, [pc, #200]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4a31      	ldr	r2, [pc, #196]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800472e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004732:	60d3      	str	r3, [r2, #12]
 8004734:	e011      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800473e:	d10c      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	2101      	movs	r1, #1
 8004746:	4618      	mov	r0, r3
 8004748:	f000 f8c8 	bl	80048dc <RCCEx_PLLSAI1_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004750:	7cfb      	ldrb	r3, [r7, #19]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004756:	7cfb      	ldrb	r3, [r7, #19]
 8004758:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d028      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004766:	4b23      	ldr	r3, [pc, #140]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004774:	491f      	ldr	r1, [pc, #124]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004784:	d106      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004786:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800478c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004790:	60d3      	str	r3, [r2, #12]
 8004792:	e011      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800479c:	d10c      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3304      	adds	r3, #4
 80047a2:	2101      	movs	r1, #1
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f899 	bl	80048dc <RCCEx_PLLSAI1_Config>
 80047aa:	4603      	mov	r3, r0
 80047ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ae:	7cfb      	ldrb	r3, [r7, #19]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d02b      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d2:	4908      	ldr	r1, [pc, #32]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e2:	d109      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4a02      	ldr	r2, [pc, #8]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ee:	60d3      	str	r3, [r2, #12]
 80047f0:	e014      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004800:	d10c      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3304      	adds	r3, #4
 8004806:	2101      	movs	r1, #1
 8004808:	4618      	mov	r0, r3
 800480a:	f000 f867 	bl	80048dc <RCCEx_PLLSAI1_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004812:	7cfb      	ldrb	r3, [r7, #19]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004818:	7cfb      	ldrb	r3, [r7, #19]
 800481a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02f      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004828:	4b2b      	ldr	r3, [pc, #172]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004836:	4928      	ldr	r1, [pc, #160]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004846:	d10d      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3304      	adds	r3, #4
 800484c:	2102      	movs	r1, #2
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f844 	bl	80048dc <RCCEx_PLLSAI1_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004858:	7cfb      	ldrb	r3, [r7, #19]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d014      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	74bb      	strb	r3, [r7, #18]
 8004862:	e011      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800486c:	d10c      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3320      	adds	r3, #32
 8004872:	2102      	movs	r1, #2
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f921 	bl	8004abc <RCCEx_PLLSAI2_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800487e:	7cfb      	ldrb	r3, [r7, #19]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004884:	7cfb      	ldrb	r3, [r7, #19]
 8004886:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004894:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048a2:	490d      	ldr	r1, [pc, #52]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048b6:	4b08      	ldr	r3, [pc, #32]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048c6:	4904      	ldr	r1, [pc, #16]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40021000 	.word	0x40021000

080048dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ea:	4b73      	ldr	r3, [pc, #460]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d018      	beq.n	8004928 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048f6:	4b70      	ldr	r3, [pc, #448]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f003 0203 	and.w	r2, r3, #3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d10d      	bne.n	8004922 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
       ||
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800490e:	4b6a      	ldr	r3, [pc, #424]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
       ||
 800491e:	429a      	cmp	r2, r3
 8004920:	d044      	beq.n	80049ac <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
 8004926:	e041      	b.n	80049ac <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d00c      	beq.n	800494a <RCCEx_PLLSAI1_Config+0x6e>
 8004930:	2b03      	cmp	r3, #3
 8004932:	d013      	beq.n	800495c <RCCEx_PLLSAI1_Config+0x80>
 8004934:	2b01      	cmp	r3, #1
 8004936:	d120      	bne.n	800497a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004938:	4b5f      	ldr	r3, [pc, #380]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d11d      	bne.n	8004980 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004948:	e01a      	b.n	8004980 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800494a:	4b5b      	ldr	r3, [pc, #364]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004952:	2b00      	cmp	r3, #0
 8004954:	d116      	bne.n	8004984 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800495a:	e013      	b.n	8004984 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800495c:	4b56      	ldr	r3, [pc, #344]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10f      	bne.n	8004988 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004968:	4b53      	ldr	r3, [pc, #332]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d109      	bne.n	8004988 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004978:	e006      	b.n	8004988 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
      break;
 800497e:	e004      	b.n	800498a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004980:	bf00      	nop
 8004982:	e002      	b.n	800498a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004984:	bf00      	nop
 8004986:	e000      	b.n	800498a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004988:	bf00      	nop
    }

    if(status == HAL_OK)
 800498a:	7bfb      	ldrb	r3, [r7, #15]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10d      	bne.n	80049ac <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004990:	4b49      	ldr	r3, [pc, #292]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6819      	ldr	r1, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	430b      	orrs	r3, r1
 80049a6:	4944      	ldr	r1, [pc, #272]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d17d      	bne.n	8004aae <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049b2:	4b41      	ldr	r3, [pc, #260]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a40      	ldr	r2, [pc, #256]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049be:	f7fc fdc3 	bl	8001548 <HAL_GetTick>
 80049c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049c4:	e009      	b.n	80049da <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049c6:	f7fc fdbf 	bl	8001548 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d902      	bls.n	80049da <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	73fb      	strb	r3, [r7, #15]
        break;
 80049d8:	e005      	b.n	80049e6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049da:	4b37      	ldr	r3, [pc, #220]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1ef      	bne.n	80049c6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d160      	bne.n	8004aae <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d111      	bne.n	8004a16 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049f2:	4b31      	ldr	r3, [pc, #196]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6892      	ldr	r2, [r2, #8]
 8004a02:	0211      	lsls	r1, r2, #8
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	68d2      	ldr	r2, [r2, #12]
 8004a08:	0912      	lsrs	r2, r2, #4
 8004a0a:	0452      	lsls	r2, r2, #17
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	492a      	ldr	r1, [pc, #168]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	610b      	str	r3, [r1, #16]
 8004a14:	e027      	b.n	8004a66 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d112      	bne.n	8004a42 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a1c:	4b26      	ldr	r3, [pc, #152]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6892      	ldr	r2, [r2, #8]
 8004a2c:	0211      	lsls	r1, r2, #8
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6912      	ldr	r2, [r2, #16]
 8004a32:	0852      	lsrs	r2, r2, #1
 8004a34:	3a01      	subs	r2, #1
 8004a36:	0552      	lsls	r2, r2, #21
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	491f      	ldr	r1, [pc, #124]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	610b      	str	r3, [r1, #16]
 8004a40:	e011      	b.n	8004a66 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a42:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6892      	ldr	r2, [r2, #8]
 8004a52:	0211      	lsls	r1, r2, #8
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6952      	ldr	r2, [r2, #20]
 8004a58:	0852      	lsrs	r2, r2, #1
 8004a5a:	3a01      	subs	r2, #1
 8004a5c:	0652      	lsls	r2, r2, #25
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	4915      	ldr	r1, [pc, #84]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a66:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a70:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a72:	f7fc fd69 	bl	8001548 <HAL_GetTick>
 8004a76:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a78:	e009      	b.n	8004a8e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a7a:	f7fc fd65 	bl	8001548 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d902      	bls.n	8004a8e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	73fb      	strb	r3, [r7, #15]
          break;
 8004a8c:	e005      	b.n	8004a9a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0ef      	beq.n	8004a7a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	4903      	ldr	r1, [pc, #12]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40021000 	.word	0x40021000

08004abc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004aca:	4b68      	ldr	r3, [pc, #416]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d018      	beq.n	8004b08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ad6:	4b65      	ldr	r3, [pc, #404]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0203 	and.w	r2, r3, #3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d10d      	bne.n	8004b02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
       ||
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004aee:	4b5f      	ldr	r3, [pc, #380]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
       ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d044      	beq.n	8004b8c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	73fb      	strb	r3, [r7, #15]
 8004b06:	e041      	b.n	8004b8c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d00c      	beq.n	8004b2a <RCCEx_PLLSAI2_Config+0x6e>
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d013      	beq.n	8004b3c <RCCEx_PLLSAI2_Config+0x80>
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d120      	bne.n	8004b5a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b18:	4b54      	ldr	r3, [pc, #336]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d11d      	bne.n	8004b60 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b28:	e01a      	b.n	8004b60 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b2a:	4b50      	ldr	r3, [pc, #320]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d116      	bne.n	8004b64 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b3a:	e013      	b.n	8004b64 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b3c:	4b4b      	ldr	r3, [pc, #300]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10f      	bne.n	8004b68 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b48:	4b48      	ldr	r3, [pc, #288]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d109      	bne.n	8004b68 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b58:	e006      	b.n	8004b68 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b5e:	e004      	b.n	8004b6a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004b60:	bf00      	nop
 8004b62:	e002      	b.n	8004b6a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004b64:	bf00      	nop
 8004b66:	e000      	b.n	8004b6a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004b68:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10d      	bne.n	8004b8c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b70:	4b3e      	ldr	r3, [pc, #248]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6819      	ldr	r1, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	430b      	orrs	r3, r1
 8004b86:	4939      	ldr	r1, [pc, #228]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d167      	bne.n	8004c62 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b92:	4b36      	ldr	r3, [pc, #216]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a35      	ldr	r2, [pc, #212]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b9e:	f7fc fcd3 	bl	8001548 <HAL_GetTick>
 8004ba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ba4:	e009      	b.n	8004bba <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ba6:	f7fc fccf 	bl	8001548 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d902      	bls.n	8004bba <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	73fb      	strb	r3, [r7, #15]
        break;
 8004bb8:	e005      	b.n	8004bc6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bba:	4b2c      	ldr	r3, [pc, #176]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1ef      	bne.n	8004ba6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d14a      	bne.n	8004c62 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d111      	bne.n	8004bf6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bd2:	4b26      	ldr	r3, [pc, #152]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6892      	ldr	r2, [r2, #8]
 8004be2:	0211      	lsls	r1, r2, #8
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	68d2      	ldr	r2, [r2, #12]
 8004be8:	0912      	lsrs	r2, r2, #4
 8004bea:	0452      	lsls	r2, r2, #17
 8004bec:	430a      	orrs	r2, r1
 8004bee:	491f      	ldr	r1, [pc, #124]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	614b      	str	r3, [r1, #20]
 8004bf4:	e011      	b.n	8004c1a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bf6:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bfe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6892      	ldr	r2, [r2, #8]
 8004c06:	0211      	lsls	r1, r2, #8
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6912      	ldr	r2, [r2, #16]
 8004c0c:	0852      	lsrs	r2, r2, #1
 8004c0e:	3a01      	subs	r2, #1
 8004c10:	0652      	lsls	r2, r2, #25
 8004c12:	430a      	orrs	r2, r1
 8004c14:	4915      	ldr	r1, [pc, #84]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c1a:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c26:	f7fc fc8f 	bl	8001548 <HAL_GetTick>
 8004c2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c2c:	e009      	b.n	8004c42 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c2e:	f7fc fc8b 	bl	8001548 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d902      	bls.n	8004c42 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	73fb      	strb	r3, [r7, #15]
          break;
 8004c40:	e005      	b.n	8004c4e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c42:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0ef      	beq.n	8004c2e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	4903      	ldr	r1, [pc, #12]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000

08004c70 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d06c      	beq.n	8004d5c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc f9f2 	bl	8001080 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	22ca      	movs	r2, #202	; 0xca
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2253      	movs	r2, #83	; 0x53
 8004cb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f9a0 	bl	8004ffa <RTC_EnterInitMode>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d14b      	bne.n	8004d5c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6899      	ldr	r1, [r3, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68d2      	ldr	r2, [r2, #12]
 8004cfe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6919      	ldr	r1, [r3, #16]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	041a      	lsls	r2, r3, #16
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f9a3 	bl	8005060 <RTC_ExitInitMode>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d11b      	bne.n	8004d5c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0203 	bic.w	r2, r2, #3
 8004d32:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	22ff      	movs	r2, #255	; 0xff
 8004d52:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d66:	b590      	push	{r4, r7, lr}
 8004d68:	b087      	sub	sp, #28
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_RTC_SetTime+0x1a>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e08b      	b.n	8004e98 <HAL_RTC_SetTime+0x132>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	22ca      	movs	r2, #202	; 0xca
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2253      	movs	r2, #83	; 0x53
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f92a 	bl	8004ffa <RTC_EnterInitMode>
 8004da6:	4603      	mov	r3, r0
 8004da8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004daa:	7cfb      	ldrb	r3, [r7, #19]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d163      	bne.n	8004e78 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d126      	bne.n	8004e04 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d102      	bne.n	8004dca <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f984 	bl	80050dc <RTC_ByteToBcd2>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 f97d 	bl	80050dc <RTC_ByteToBcd2>
 8004de2:	4603      	mov	r3, r0
 8004de4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004de6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	789b      	ldrb	r3, [r3, #2]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 f975 	bl	80050dc <RTC_ByteToBcd2>
 8004df2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004df4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	78db      	ldrb	r3, [r3, #3]
 8004dfc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	e018      	b.n	8004e36 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2200      	movs	r2, #0
 8004e16:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	785b      	ldrb	r3, [r3, #1]
 8004e22:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e24:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e2a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	78db      	ldrb	r3, [r3, #3]
 8004e30:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e40:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e44:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e54:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6899      	ldr	r1, [r3, #8]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f8f6 	bl	8005060 <RTC_ExitInitMode>
 8004e74:	4603      	mov	r3, r0
 8004e76:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	22ff      	movs	r2, #255	; 0xff
 8004e7e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004e80:	7cfb      	ldrb	r3, [r7, #19]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d103      	bne.n	8004e8e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004e96:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd90      	pop	{r4, r7, pc}

08004ea0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ea0:	b590      	push	{r4, r7, lr}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_RTC_SetDate+0x1a>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e075      	b.n	8004fa6 <HAL_RTC_SetDate+0x106>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10e      	bne.n	8004eee <HAL_RTC_SetDate+0x4e>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	785b      	ldrb	r3, [r3, #1]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	785b      	ldrb	r3, [r3, #1]
 8004ee0:	f023 0310 	bic.w	r3, r3, #16
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	330a      	adds	r3, #10
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d11c      	bne.n	8004f2e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	78db      	ldrb	r3, [r3, #3]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 f8ef 	bl	80050dc <RTC_ByteToBcd2>
 8004efe:	4603      	mov	r3, r0
 8004f00:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	785b      	ldrb	r3, [r3, #1]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 f8e8 	bl	80050dc <RTC_ByteToBcd2>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004f10:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	789b      	ldrb	r3, [r3, #2]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 f8e0 	bl	80050dc <RTC_ByteToBcd2>
 8004f1c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f1e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	e00e      	b.n	8004f4c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	78db      	ldrb	r3, [r3, #3]
 8004f32:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f3a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004f40:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	22ca      	movs	r2, #202	; 0xca
 8004f52:	625a      	str	r2, [r3, #36]	; 0x24
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2253      	movs	r2, #83	; 0x53
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f84c 	bl	8004ffa <RTC_EnterInitMode>
 8004f62:	4603      	mov	r3, r0
 8004f64:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004f66:	7cfb      	ldrb	r3, [r7, #19]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10c      	bne.n	8004f86 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f7a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f86f 	bl	8005060 <RTC_ExitInitMode>
 8004f82:	4603      	mov	r3, r0
 8004f84:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	22ff      	movs	r2, #255	; 0xff
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004f8e:	7cfb      	ldrb	r3, [r7, #19]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d103      	bne.n	8004f9c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004fa4:	7cfb      	ldrb	r3, [r7, #19]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd90      	pop	{r4, r7, pc}

08004fae <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fc4:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004fc6:	f7fc fabf 	bl	8001548 <HAL_GetTick>
 8004fca:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004fcc:	e009      	b.n	8004fe2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fce:	f7fc fabb 	bl	8001548 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e007      	b.n	8004ff2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0ee      	beq.n	8004fce <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d120      	bne.n	8005056 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800501c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800501e:	f7fc fa93 	bl	8001548 <HAL_GetTick>
 8005022:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005024:	e00d      	b.n	8005042 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005026:	f7fc fa8f 	bl	8001548 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005034:	d905      	bls.n	8005042 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2203      	movs	r2, #3
 800503e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d102      	bne.n	8005056 <RTC_EnterInitMode+0x5c>
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	2b03      	cmp	r3, #3
 8005054:	d1e7      	bne.n	8005026 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005056:	7bfb      	ldrb	r3, [r7, #15]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800506c:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <RTC_ExitInitMode+0x78>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	4a19      	ldr	r2, [pc, #100]	; (80050d8 <RTC_ExitInitMode+0x78>)
 8005072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005076:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005078:	4b17      	ldr	r3, [pc, #92]	; (80050d8 <RTC_ExitInitMode+0x78>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10c      	bne.n	800509e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff ff92 	bl	8004fae <HAL_RTC_WaitForSynchro>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01e      	beq.n	80050ce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2203      	movs	r2, #3
 8005094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	73fb      	strb	r3, [r7, #15]
 800509c:	e017      	b.n	80050ce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800509e:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <RTC_ExitInitMode+0x78>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4a0d      	ldr	r2, [pc, #52]	; (80050d8 <RTC_ExitInitMode+0x78>)
 80050a4:	f023 0320 	bic.w	r3, r3, #32
 80050a8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff ff7f 	bl	8004fae <HAL_RTC_WaitForSynchro>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2203      	movs	r2, #3
 80050ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <RTC_ExitInitMode+0x78>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	4a04      	ldr	r2, [pc, #16]	; (80050d8 <RTC_ExitInitMode+0x78>)
 80050c8:	f043 0320 	orr.w	r3, r3, #32
 80050cc:	6093      	str	r3, [r2, #8]
  }

  return status;
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40002800 	.word	0x40002800

080050dc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80050ee:	e005      	b.n	80050fc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3301      	adds	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80050f6:	7afb      	ldrb	r3, [r7, #11]
 80050f8:	3b0a      	subs	r3, #10
 80050fa:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80050fc:	7afb      	ldrb	r3, [r7, #11]
 80050fe:	2b09      	cmp	r3, #9
 8005100:	d8f6      	bhi.n	80050f0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	b2da      	uxtb	r2, r3
 800510a:	7afb      	ldrb	r3, [r7, #11]
 800510c:	4313      	orrs	r3, r2
 800510e:	b2db      	uxtb	r3, r3
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e049      	b.n	80051c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fc f8d6 	bl	80012f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f000 f8ee 	bl	800533c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_ConfigClockSource+0x18>
 80051de:	2302      	movs	r3, #2
 80051e0:	e0a8      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x16a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005200:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005204:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800520c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	d067      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0x124>
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	d80b      	bhi.n	800523a <HAL_TIM_ConfigClockSource+0x70>
 8005222:	2b10      	cmp	r3, #16
 8005224:	d073      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x144>
 8005226:	2b10      	cmp	r3, #16
 8005228:	d802      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x66>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d06f      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800522e:	e078      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005230:	2b20      	cmp	r3, #32
 8005232:	d06c      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x144>
 8005234:	2b30      	cmp	r3, #48	; 0x30
 8005236:	d06a      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005238:	e073      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800523a:	2b70      	cmp	r3, #112	; 0x70
 800523c:	d00d      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x90>
 800523e:	2b70      	cmp	r3, #112	; 0x70
 8005240:	d804      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x82>
 8005242:	2b50      	cmp	r3, #80	; 0x50
 8005244:	d033      	beq.n	80052ae <HAL_TIM_ConfigClockSource+0xe4>
 8005246:	2b60      	cmp	r3, #96	; 0x60
 8005248:	d041      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x104>
      break;
 800524a:	e06a      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800524c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005250:	d066      	beq.n	8005320 <HAL_TIM_ConfigClockSource+0x156>
 8005252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005256:	d017      	beq.n	8005288 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005258:	e063      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6899      	ldr	r1, [r3, #8]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f000 f97b 	bl	8005564 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800527c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	609a      	str	r2, [r3, #8]
      break;
 8005286:	e04c      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	6899      	ldr	r1, [r3, #8]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f000 f964 	bl	8005564 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052aa:	609a      	str	r2, [r3, #8]
      break;
 80052ac:	e039      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6859      	ldr	r1, [r3, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f000 f8d8 	bl	8005470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2150      	movs	r1, #80	; 0x50
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f931 	bl	800552e <TIM_ITRx_SetConfig>
      break;
 80052cc:	e029      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6859      	ldr	r1, [r3, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	461a      	mov	r2, r3
 80052dc:	f000 f8f7 	bl	80054ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2160      	movs	r1, #96	; 0x60
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f921 	bl	800552e <TIM_ITRx_SetConfig>
      break;
 80052ec:	e019      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f000 f8b8 	bl	8005470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2140      	movs	r1, #64	; 0x40
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f911 	bl	800552e <TIM_ITRx_SetConfig>
      break;
 800530c:	e009      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f000 f908 	bl	800552e <TIM_ITRx_SetConfig>
        break;
 800531e:	e000      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005320:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a40      	ldr	r2, [pc, #256]	; (8005450 <TIM_Base_SetConfig+0x114>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d013      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535a:	d00f      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a3d      	ldr	r2, [pc, #244]	; (8005454 <TIM_Base_SetConfig+0x118>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00b      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a3c      	ldr	r2, [pc, #240]	; (8005458 <TIM_Base_SetConfig+0x11c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d007      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a3b      	ldr	r2, [pc, #236]	; (800545c <TIM_Base_SetConfig+0x120>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d003      	beq.n	800537c <TIM_Base_SetConfig+0x40>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a3a      	ldr	r2, [pc, #232]	; (8005460 <TIM_Base_SetConfig+0x124>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d108      	bne.n	800538e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2f      	ldr	r2, [pc, #188]	; (8005450 <TIM_Base_SetConfig+0x114>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d01f      	beq.n	80053d6 <TIM_Base_SetConfig+0x9a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539c:	d01b      	beq.n	80053d6 <TIM_Base_SetConfig+0x9a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2c      	ldr	r2, [pc, #176]	; (8005454 <TIM_Base_SetConfig+0x118>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d017      	beq.n	80053d6 <TIM_Base_SetConfig+0x9a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2b      	ldr	r2, [pc, #172]	; (8005458 <TIM_Base_SetConfig+0x11c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <TIM_Base_SetConfig+0x9a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2a      	ldr	r2, [pc, #168]	; (800545c <TIM_Base_SetConfig+0x120>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00f      	beq.n	80053d6 <TIM_Base_SetConfig+0x9a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a29      	ldr	r2, [pc, #164]	; (8005460 <TIM_Base_SetConfig+0x124>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00b      	beq.n	80053d6 <TIM_Base_SetConfig+0x9a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a28      	ldr	r2, [pc, #160]	; (8005464 <TIM_Base_SetConfig+0x128>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d007      	beq.n	80053d6 <TIM_Base_SetConfig+0x9a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a27      	ldr	r2, [pc, #156]	; (8005468 <TIM_Base_SetConfig+0x12c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d003      	beq.n	80053d6 <TIM_Base_SetConfig+0x9a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a26      	ldr	r2, [pc, #152]	; (800546c <TIM_Base_SetConfig+0x130>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d108      	bne.n	80053e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a10      	ldr	r2, [pc, #64]	; (8005450 <TIM_Base_SetConfig+0x114>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00f      	beq.n	8005434 <TIM_Base_SetConfig+0xf8>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a12      	ldr	r2, [pc, #72]	; (8005460 <TIM_Base_SetConfig+0x124>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00b      	beq.n	8005434 <TIM_Base_SetConfig+0xf8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a11      	ldr	r2, [pc, #68]	; (8005464 <TIM_Base_SetConfig+0x128>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d007      	beq.n	8005434 <TIM_Base_SetConfig+0xf8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a10      	ldr	r2, [pc, #64]	; (8005468 <TIM_Base_SetConfig+0x12c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_Base_SetConfig+0xf8>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a0f      	ldr	r2, [pc, #60]	; (800546c <TIM_Base_SetConfig+0x130>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d103      	bne.n	800543c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	615a      	str	r2, [r3, #20]
}
 8005442:	bf00      	nop
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40012c00 	.word	0x40012c00
 8005454:	40000400 	.word	0x40000400
 8005458:	40000800 	.word	0x40000800
 800545c:	40000c00 	.word	0x40000c00
 8005460:	40013400 	.word	0x40013400
 8005464:	40014000 	.word	0x40014000
 8005468:	40014400 	.word	0x40014400
 800546c:	40014800 	.word	0x40014800

08005470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f023 0201 	bic.w	r2, r3, #1
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800549a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f023 030a 	bic.w	r3, r3, #10
 80054ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	621a      	str	r2, [r3, #32]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b087      	sub	sp, #28
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f023 0210 	bic.w	r2, r3, #16
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	031b      	lsls	r3, r3, #12
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800550a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800552e:	b480      	push	{r7}
 8005530:	b085      	sub	sp, #20
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	f043 0307 	orr.w	r3, r3, #7
 8005550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	609a      	str	r2, [r3, #8]
}
 8005558:	bf00      	nop
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800557e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	021a      	lsls	r2, r3, #8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	431a      	orrs	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4313      	orrs	r3, r2
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	609a      	str	r2, [r3, #8]
}
 8005598:	bf00      	nop
 800559a:	371c      	adds	r7, #28
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e068      	b.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2e      	ldr	r2, [pc, #184]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d004      	beq.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2d      	ldr	r2, [pc, #180]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d108      	bne.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005608:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a1e      	ldr	r2, [pc, #120]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01d      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562e:	d018      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1b      	ldr	r2, [pc, #108]	; (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1a      	ldr	r2, [pc, #104]	; (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00e      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a18      	ldr	r2, [pc, #96]	; (80056ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d10c      	bne.n	800567c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	4313      	orrs	r3, r2
 8005672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40012c00 	.word	0x40012c00
 80056a0:	40013400 	.word	0x40013400
 80056a4:	40000400 	.word	0x40000400
 80056a8:	40000800 	.word	0x40000800
 80056ac:	40000c00 	.word	0x40000c00
 80056b0:	40014000 	.word	0x40014000

080056b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e040      	b.n	8005748 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fb fe5a 	bl	8001390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2224      	movs	r2, #36	; 0x24
 80056e0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0201 	bic.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f82c 	bl	8005750 <UART_SetConfig>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e022      	b.n	8005748 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 faaa 	bl	8005c64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800571e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800572e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fb31 	bl	8005da8 <UART_CheckIdleState>
 8005746:	4603      	mov	r3, r0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005750:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005754:	b088      	sub	sp, #32
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	4313      	orrs	r3, r2
 8005774:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4bac      	ldr	r3, [pc, #688]	; (8005a30 <UART_SetConfig+0x2e0>)
 800577e:	4013      	ands	r3, r2
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	69f9      	ldr	r1, [r7, #28]
 8005786:	430b      	orrs	r3, r1
 8005788:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4aa2      	ldr	r2, [pc, #648]	; (8005a34 <UART_SetConfig+0x2e4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d004      	beq.n	80057ba <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a99      	ldr	r2, [pc, #612]	; (8005a38 <UART_SetConfig+0x2e8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d121      	bne.n	800581c <UART_SetConfig+0xcc>
 80057d8:	4b98      	ldr	r3, [pc, #608]	; (8005a3c <UART_SetConfig+0x2ec>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d816      	bhi.n	8005814 <UART_SetConfig+0xc4>
 80057e6:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <UART_SetConfig+0x9c>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	080057fd 	.word	0x080057fd
 80057f0:	08005809 	.word	0x08005809
 80057f4:	08005803 	.word	0x08005803
 80057f8:	0800580f 	.word	0x0800580f
 80057fc:	2301      	movs	r3, #1
 80057fe:	76fb      	strb	r3, [r7, #27]
 8005800:	e0e8      	b.n	80059d4 <UART_SetConfig+0x284>
 8005802:	2302      	movs	r3, #2
 8005804:	76fb      	strb	r3, [r7, #27]
 8005806:	e0e5      	b.n	80059d4 <UART_SetConfig+0x284>
 8005808:	2304      	movs	r3, #4
 800580a:	76fb      	strb	r3, [r7, #27]
 800580c:	e0e2      	b.n	80059d4 <UART_SetConfig+0x284>
 800580e:	2308      	movs	r3, #8
 8005810:	76fb      	strb	r3, [r7, #27]
 8005812:	e0df      	b.n	80059d4 <UART_SetConfig+0x284>
 8005814:	2310      	movs	r3, #16
 8005816:	76fb      	strb	r3, [r7, #27]
 8005818:	bf00      	nop
 800581a:	e0db      	b.n	80059d4 <UART_SetConfig+0x284>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a87      	ldr	r2, [pc, #540]	; (8005a40 <UART_SetConfig+0x2f0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d134      	bne.n	8005890 <UART_SetConfig+0x140>
 8005826:	4b85      	ldr	r3, [pc, #532]	; (8005a3c <UART_SetConfig+0x2ec>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582c:	f003 030c 	and.w	r3, r3, #12
 8005830:	2b0c      	cmp	r3, #12
 8005832:	d829      	bhi.n	8005888 <UART_SetConfig+0x138>
 8005834:	a201      	add	r2, pc, #4	; (adr r2, 800583c <UART_SetConfig+0xec>)
 8005836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583a:	bf00      	nop
 800583c:	08005871 	.word	0x08005871
 8005840:	08005889 	.word	0x08005889
 8005844:	08005889 	.word	0x08005889
 8005848:	08005889 	.word	0x08005889
 800584c:	0800587d 	.word	0x0800587d
 8005850:	08005889 	.word	0x08005889
 8005854:	08005889 	.word	0x08005889
 8005858:	08005889 	.word	0x08005889
 800585c:	08005877 	.word	0x08005877
 8005860:	08005889 	.word	0x08005889
 8005864:	08005889 	.word	0x08005889
 8005868:	08005889 	.word	0x08005889
 800586c:	08005883 	.word	0x08005883
 8005870:	2300      	movs	r3, #0
 8005872:	76fb      	strb	r3, [r7, #27]
 8005874:	e0ae      	b.n	80059d4 <UART_SetConfig+0x284>
 8005876:	2302      	movs	r3, #2
 8005878:	76fb      	strb	r3, [r7, #27]
 800587a:	e0ab      	b.n	80059d4 <UART_SetConfig+0x284>
 800587c:	2304      	movs	r3, #4
 800587e:	76fb      	strb	r3, [r7, #27]
 8005880:	e0a8      	b.n	80059d4 <UART_SetConfig+0x284>
 8005882:	2308      	movs	r3, #8
 8005884:	76fb      	strb	r3, [r7, #27]
 8005886:	e0a5      	b.n	80059d4 <UART_SetConfig+0x284>
 8005888:	2310      	movs	r3, #16
 800588a:	76fb      	strb	r3, [r7, #27]
 800588c:	bf00      	nop
 800588e:	e0a1      	b.n	80059d4 <UART_SetConfig+0x284>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a6b      	ldr	r2, [pc, #428]	; (8005a44 <UART_SetConfig+0x2f4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d120      	bne.n	80058dc <UART_SetConfig+0x18c>
 800589a:	4b68      	ldr	r3, [pc, #416]	; (8005a3c <UART_SetConfig+0x2ec>)
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d00f      	beq.n	80058c8 <UART_SetConfig+0x178>
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d802      	bhi.n	80058b2 <UART_SetConfig+0x162>
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <UART_SetConfig+0x16c>
 80058b0:	e010      	b.n	80058d4 <UART_SetConfig+0x184>
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d005      	beq.n	80058c2 <UART_SetConfig+0x172>
 80058b6:	2b30      	cmp	r3, #48	; 0x30
 80058b8:	d009      	beq.n	80058ce <UART_SetConfig+0x17e>
 80058ba:	e00b      	b.n	80058d4 <UART_SetConfig+0x184>
 80058bc:	2300      	movs	r3, #0
 80058be:	76fb      	strb	r3, [r7, #27]
 80058c0:	e088      	b.n	80059d4 <UART_SetConfig+0x284>
 80058c2:	2302      	movs	r3, #2
 80058c4:	76fb      	strb	r3, [r7, #27]
 80058c6:	e085      	b.n	80059d4 <UART_SetConfig+0x284>
 80058c8:	2304      	movs	r3, #4
 80058ca:	76fb      	strb	r3, [r7, #27]
 80058cc:	e082      	b.n	80059d4 <UART_SetConfig+0x284>
 80058ce:	2308      	movs	r3, #8
 80058d0:	76fb      	strb	r3, [r7, #27]
 80058d2:	e07f      	b.n	80059d4 <UART_SetConfig+0x284>
 80058d4:	2310      	movs	r3, #16
 80058d6:	76fb      	strb	r3, [r7, #27]
 80058d8:	bf00      	nop
 80058da:	e07b      	b.n	80059d4 <UART_SetConfig+0x284>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a59      	ldr	r2, [pc, #356]	; (8005a48 <UART_SetConfig+0x2f8>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d120      	bne.n	8005928 <UART_SetConfig+0x1d8>
 80058e6:	4b55      	ldr	r3, [pc, #340]	; (8005a3c <UART_SetConfig+0x2ec>)
 80058e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	d00f      	beq.n	8005914 <UART_SetConfig+0x1c4>
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	d802      	bhi.n	80058fe <UART_SetConfig+0x1ae>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <UART_SetConfig+0x1b8>
 80058fc:	e010      	b.n	8005920 <UART_SetConfig+0x1d0>
 80058fe:	2b80      	cmp	r3, #128	; 0x80
 8005900:	d005      	beq.n	800590e <UART_SetConfig+0x1be>
 8005902:	2bc0      	cmp	r3, #192	; 0xc0
 8005904:	d009      	beq.n	800591a <UART_SetConfig+0x1ca>
 8005906:	e00b      	b.n	8005920 <UART_SetConfig+0x1d0>
 8005908:	2300      	movs	r3, #0
 800590a:	76fb      	strb	r3, [r7, #27]
 800590c:	e062      	b.n	80059d4 <UART_SetConfig+0x284>
 800590e:	2302      	movs	r3, #2
 8005910:	76fb      	strb	r3, [r7, #27]
 8005912:	e05f      	b.n	80059d4 <UART_SetConfig+0x284>
 8005914:	2304      	movs	r3, #4
 8005916:	76fb      	strb	r3, [r7, #27]
 8005918:	e05c      	b.n	80059d4 <UART_SetConfig+0x284>
 800591a:	2308      	movs	r3, #8
 800591c:	76fb      	strb	r3, [r7, #27]
 800591e:	e059      	b.n	80059d4 <UART_SetConfig+0x284>
 8005920:	2310      	movs	r3, #16
 8005922:	76fb      	strb	r3, [r7, #27]
 8005924:	bf00      	nop
 8005926:	e055      	b.n	80059d4 <UART_SetConfig+0x284>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a47      	ldr	r2, [pc, #284]	; (8005a4c <UART_SetConfig+0x2fc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d124      	bne.n	800597c <UART_SetConfig+0x22c>
 8005932:	4b42      	ldr	r3, [pc, #264]	; (8005a3c <UART_SetConfig+0x2ec>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800593c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005940:	d012      	beq.n	8005968 <UART_SetConfig+0x218>
 8005942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005946:	d802      	bhi.n	800594e <UART_SetConfig+0x1fe>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d007      	beq.n	800595c <UART_SetConfig+0x20c>
 800594c:	e012      	b.n	8005974 <UART_SetConfig+0x224>
 800594e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005952:	d006      	beq.n	8005962 <UART_SetConfig+0x212>
 8005954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005958:	d009      	beq.n	800596e <UART_SetConfig+0x21e>
 800595a:	e00b      	b.n	8005974 <UART_SetConfig+0x224>
 800595c:	2300      	movs	r3, #0
 800595e:	76fb      	strb	r3, [r7, #27]
 8005960:	e038      	b.n	80059d4 <UART_SetConfig+0x284>
 8005962:	2302      	movs	r3, #2
 8005964:	76fb      	strb	r3, [r7, #27]
 8005966:	e035      	b.n	80059d4 <UART_SetConfig+0x284>
 8005968:	2304      	movs	r3, #4
 800596a:	76fb      	strb	r3, [r7, #27]
 800596c:	e032      	b.n	80059d4 <UART_SetConfig+0x284>
 800596e:	2308      	movs	r3, #8
 8005970:	76fb      	strb	r3, [r7, #27]
 8005972:	e02f      	b.n	80059d4 <UART_SetConfig+0x284>
 8005974:	2310      	movs	r3, #16
 8005976:	76fb      	strb	r3, [r7, #27]
 8005978:	bf00      	nop
 800597a:	e02b      	b.n	80059d4 <UART_SetConfig+0x284>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a2c      	ldr	r2, [pc, #176]	; (8005a34 <UART_SetConfig+0x2e4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d124      	bne.n	80059d0 <UART_SetConfig+0x280>
 8005986:	4b2d      	ldr	r3, [pc, #180]	; (8005a3c <UART_SetConfig+0x2ec>)
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005994:	d012      	beq.n	80059bc <UART_SetConfig+0x26c>
 8005996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599a:	d802      	bhi.n	80059a2 <UART_SetConfig+0x252>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <UART_SetConfig+0x260>
 80059a0:	e012      	b.n	80059c8 <UART_SetConfig+0x278>
 80059a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a6:	d006      	beq.n	80059b6 <UART_SetConfig+0x266>
 80059a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059ac:	d009      	beq.n	80059c2 <UART_SetConfig+0x272>
 80059ae:	e00b      	b.n	80059c8 <UART_SetConfig+0x278>
 80059b0:	2300      	movs	r3, #0
 80059b2:	76fb      	strb	r3, [r7, #27]
 80059b4:	e00e      	b.n	80059d4 <UART_SetConfig+0x284>
 80059b6:	2302      	movs	r3, #2
 80059b8:	76fb      	strb	r3, [r7, #27]
 80059ba:	e00b      	b.n	80059d4 <UART_SetConfig+0x284>
 80059bc:	2304      	movs	r3, #4
 80059be:	76fb      	strb	r3, [r7, #27]
 80059c0:	e008      	b.n	80059d4 <UART_SetConfig+0x284>
 80059c2:	2308      	movs	r3, #8
 80059c4:	76fb      	strb	r3, [r7, #27]
 80059c6:	e005      	b.n	80059d4 <UART_SetConfig+0x284>
 80059c8:	2310      	movs	r3, #16
 80059ca:	76fb      	strb	r3, [r7, #27]
 80059cc:	bf00      	nop
 80059ce:	e001      	b.n	80059d4 <UART_SetConfig+0x284>
 80059d0:	2310      	movs	r3, #16
 80059d2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a16      	ldr	r2, [pc, #88]	; (8005a34 <UART_SetConfig+0x2e4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	f040 8087 	bne.w	8005aee <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059e0:	7efb      	ldrb	r3, [r7, #27]
 80059e2:	2b08      	cmp	r3, #8
 80059e4:	d836      	bhi.n	8005a54 <UART_SetConfig+0x304>
 80059e6:	a201      	add	r2, pc, #4	; (adr r2, 80059ec <UART_SetConfig+0x29c>)
 80059e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ec:	08005a11 	.word	0x08005a11
 80059f0:	08005a55 	.word	0x08005a55
 80059f4:	08005a19 	.word	0x08005a19
 80059f8:	08005a55 	.word	0x08005a55
 80059fc:	08005a1f 	.word	0x08005a1f
 8005a00:	08005a55 	.word	0x08005a55
 8005a04:	08005a55 	.word	0x08005a55
 8005a08:	08005a55 	.word	0x08005a55
 8005a0c:	08005a27 	.word	0x08005a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a10:	f7fe fbf2 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8005a14:	6178      	str	r0, [r7, #20]
        break;
 8005a16:	e022      	b.n	8005a5e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a18:	4b0d      	ldr	r3, [pc, #52]	; (8005a50 <UART_SetConfig+0x300>)
 8005a1a:	617b      	str	r3, [r7, #20]
        break;
 8005a1c:	e01f      	b.n	8005a5e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a1e:	f7fe fb55 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8005a22:	6178      	str	r0, [r7, #20]
        break;
 8005a24:	e01b      	b.n	8005a5e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2a:	617b      	str	r3, [r7, #20]
        break;
 8005a2c:	e017      	b.n	8005a5e <UART_SetConfig+0x30e>
 8005a2e:	bf00      	nop
 8005a30:	efff69f3 	.word	0xefff69f3
 8005a34:	40008000 	.word	0x40008000
 8005a38:	40013800 	.word	0x40013800
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	40004400 	.word	0x40004400
 8005a44:	40004800 	.word	0x40004800
 8005a48:	40004c00 	.word	0x40004c00
 8005a4c:	40005000 	.word	0x40005000
 8005a50:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	76bb      	strb	r3, [r7, #26]
        break;
 8005a5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80f1 	beq.w	8005c48 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d305      	bcc.n	8005a82 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d902      	bls.n	8005a88 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	76bb      	strb	r3, [r7, #26]
 8005a86:	e0df      	b.n	8005c48 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	f04f 0400 	mov.w	r4, #0
 8005a98:	0214      	lsls	r4, r2, #8
 8005a9a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005a9e:	020b      	lsls	r3, r1, #8
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6852      	ldr	r2, [r2, #4]
 8005aa4:	0852      	lsrs	r2, r2, #1
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	eb13 0b01 	adds.w	fp, r3, r1
 8005ab0:	eb44 0c02 	adc.w	ip, r4, r2
 8005ab4:	4658      	mov	r0, fp
 8005ab6:	4661      	mov	r1, ip
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f04f 0400 	mov.w	r4, #0
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4623      	mov	r3, r4
 8005ac4:	f7fa fb88 	bl	80001d8 <__aeabi_uldivmod>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad4:	d308      	bcc.n	8005ae8 <UART_SetConfig+0x398>
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005adc:	d204      	bcs.n	8005ae8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	60da      	str	r2, [r3, #12]
 8005ae6:	e0af      	b.n	8005c48 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	76bb      	strb	r3, [r7, #26]
 8005aec:	e0ac      	b.n	8005c48 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af6:	d15b      	bne.n	8005bb0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005af8:	7efb      	ldrb	r3, [r7, #27]
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d827      	bhi.n	8005b4e <UART_SetConfig+0x3fe>
 8005afe:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <UART_SetConfig+0x3b4>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b29 	.word	0x08005b29
 8005b08:	08005b31 	.word	0x08005b31
 8005b0c:	08005b39 	.word	0x08005b39
 8005b10:	08005b4f 	.word	0x08005b4f
 8005b14:	08005b3f 	.word	0x08005b3f
 8005b18:	08005b4f 	.word	0x08005b4f
 8005b1c:	08005b4f 	.word	0x08005b4f
 8005b20:	08005b4f 	.word	0x08005b4f
 8005b24:	08005b47 	.word	0x08005b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b28:	f7fe fb66 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8005b2c:	6178      	str	r0, [r7, #20]
        break;
 8005b2e:	e013      	b.n	8005b58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b30:	f7fe fb78 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 8005b34:	6178      	str	r0, [r7, #20]
        break;
 8005b36:	e00f      	b.n	8005b58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b38:	4b49      	ldr	r3, [pc, #292]	; (8005c60 <UART_SetConfig+0x510>)
 8005b3a:	617b      	str	r3, [r7, #20]
        break;
 8005b3c:	e00c      	b.n	8005b58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b3e:	f7fe fac5 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8005b42:	6178      	str	r0, [r7, #20]
        break;
 8005b44:	e008      	b.n	8005b58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4a:	617b      	str	r3, [r7, #20]
        break;
 8005b4c:	e004      	b.n	8005b58 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	76bb      	strb	r3, [r7, #26]
        break;
 8005b56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d074      	beq.n	8005c48 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	005a      	lsls	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	441a      	add	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b0f      	cmp	r3, #15
 8005b7a:	d916      	bls.n	8005baa <UART_SetConfig+0x45a>
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b82:	d212      	bcs.n	8005baa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	f023 030f 	bic.w	r3, r3, #15
 8005b8c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	085b      	lsrs	r3, r3, #1
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	89fb      	ldrh	r3, [r7, #14]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	89fa      	ldrh	r2, [r7, #14]
 8005ba6:	60da      	str	r2, [r3, #12]
 8005ba8:	e04e      	b.n	8005c48 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	76bb      	strb	r3, [r7, #26]
 8005bae:	e04b      	b.n	8005c48 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bb0:	7efb      	ldrb	r3, [r7, #27]
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d827      	bhi.n	8005c06 <UART_SetConfig+0x4b6>
 8005bb6:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <UART_SetConfig+0x46c>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005be1 	.word	0x08005be1
 8005bc0:	08005be9 	.word	0x08005be9
 8005bc4:	08005bf1 	.word	0x08005bf1
 8005bc8:	08005c07 	.word	0x08005c07
 8005bcc:	08005bf7 	.word	0x08005bf7
 8005bd0:	08005c07 	.word	0x08005c07
 8005bd4:	08005c07 	.word	0x08005c07
 8005bd8:	08005c07 	.word	0x08005c07
 8005bdc:	08005bff 	.word	0x08005bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be0:	f7fe fb0a 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8005be4:	6178      	str	r0, [r7, #20]
        break;
 8005be6:	e013      	b.n	8005c10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be8:	f7fe fb1c 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 8005bec:	6178      	str	r0, [r7, #20]
        break;
 8005bee:	e00f      	b.n	8005c10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf0:	4b1b      	ldr	r3, [pc, #108]	; (8005c60 <UART_SetConfig+0x510>)
 8005bf2:	617b      	str	r3, [r7, #20]
        break;
 8005bf4:	e00c      	b.n	8005c10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bf6:	f7fe fa69 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8005bfa:	6178      	str	r0, [r7, #20]
        break;
 8005bfc:	e008      	b.n	8005c10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c02:	617b      	str	r3, [r7, #20]
        break;
 8005c04:	e004      	b.n	8005c10 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	76bb      	strb	r3, [r7, #26]
        break;
 8005c0e:	bf00      	nop
    }

    if (pclk != 0U)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d018      	beq.n	8005c48 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	085a      	lsrs	r2, r3, #1
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	441a      	add	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b0f      	cmp	r3, #15
 8005c30:	d908      	bls.n	8005c44 <UART_SetConfig+0x4f4>
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c38:	d204      	bcs.n	8005c44 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	e001      	b.n	8005c48 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005c54:	7ebb      	ldrb	r3, [r7, #26]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3720      	adds	r7, #32
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005c60:	00f42400 	.word	0x00f42400

08005c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00a      	beq.n	8005c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00a      	beq.n	8005cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00a      	beq.n	8005d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01a      	beq.n	8005d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d62:	d10a      	bne.n	8005d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	605a      	str	r2, [r3, #4]
  }
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005db6:	f7fb fbc7 	bl	8001548 <HAL_GetTick>
 8005dba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d10e      	bne.n	8005de8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f82a 	bl	8005e32 <UART_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e020      	b.n	8005e2a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0304 	and.w	r3, r3, #4
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d10e      	bne.n	8005e14 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005df6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f814 	bl	8005e32 <UART_WaitOnFlagUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e00a      	b.n	8005e2a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2220      	movs	r2, #32
 8005e18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e42:	e05d      	b.n	8005f00 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e4a:	d059      	beq.n	8005f00 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4c:	f7fb fb7c 	bl	8001548 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d302      	bcc.n	8005e62 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d11b      	bne.n	8005e9a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e70:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0201 	bic.w	r2, r2, #1
 8005e80:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2220      	movs	r2, #32
 8005e86:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e042      	b.n	8005f20 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0304 	and.w	r3, r3, #4
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d02b      	beq.n	8005f00 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb6:	d123      	bne.n	8005f00 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ec0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ed0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0201 	bic.w	r2, r2, #1
 8005ee0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2220      	movs	r2, #32
 8005eec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e00f      	b.n	8005f20 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69da      	ldr	r2, [r3, #28]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	bf0c      	ite	eq
 8005f10:	2301      	moveq	r3, #1
 8005f12:	2300      	movne	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	461a      	mov	r2, r3
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d092      	beq.n	8005e44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <__libc_init_array>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	4e0d      	ldr	r6, [pc, #52]	; (8005f60 <__libc_init_array+0x38>)
 8005f2c:	4c0d      	ldr	r4, [pc, #52]	; (8005f64 <__libc_init_array+0x3c>)
 8005f2e:	1ba4      	subs	r4, r4, r6
 8005f30:	10a4      	asrs	r4, r4, #2
 8005f32:	2500      	movs	r5, #0
 8005f34:	42a5      	cmp	r5, r4
 8005f36:	d109      	bne.n	8005f4c <__libc_init_array+0x24>
 8005f38:	4e0b      	ldr	r6, [pc, #44]	; (8005f68 <__libc_init_array+0x40>)
 8005f3a:	4c0c      	ldr	r4, [pc, #48]	; (8005f6c <__libc_init_array+0x44>)
 8005f3c:	f000 f820 	bl	8005f80 <_init>
 8005f40:	1ba4      	subs	r4, r4, r6
 8005f42:	10a4      	asrs	r4, r4, #2
 8005f44:	2500      	movs	r5, #0
 8005f46:	42a5      	cmp	r5, r4
 8005f48:	d105      	bne.n	8005f56 <__libc_init_array+0x2e>
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f50:	4798      	blx	r3
 8005f52:	3501      	adds	r5, #1
 8005f54:	e7ee      	b.n	8005f34 <__libc_init_array+0xc>
 8005f56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f5a:	4798      	blx	r3
 8005f5c:	3501      	adds	r5, #1
 8005f5e:	e7f2      	b.n	8005f46 <__libc_init_array+0x1e>
 8005f60:	08006004 	.word	0x08006004
 8005f64:	08006004 	.word	0x08006004
 8005f68:	08006004 	.word	0x08006004
 8005f6c:	08006008 	.word	0x08006008

08005f70 <memset>:
 8005f70:	4402      	add	r2, r0
 8005f72:	4603      	mov	r3, r0
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d100      	bne.n	8005f7a <memset+0xa>
 8005f78:	4770      	bx	lr
 8005f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f7e:	e7f9      	b.n	8005f74 <memset+0x4>

08005f80 <_init>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	bf00      	nop
 8005f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f86:	bc08      	pop	{r3}
 8005f88:	469e      	mov	lr, r3
 8005f8a:	4770      	bx	lr

08005f8c <_fini>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	bf00      	nop
 8005f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f92:	bc08      	pop	{r3}
 8005f94:	469e      	mov	lr, r3
 8005f96:	4770      	bx	lr
