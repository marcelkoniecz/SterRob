
stmProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007224  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a4  080074a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074ac  080074ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074ac  080074ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080074b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000070  08007524  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08007524  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5b7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035c6  00000000  00000000  0003b657  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001728  00000000  00000000  0003ec20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001560  00000000  00000000  00040348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bd52  00000000  00000000  000418a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014b15  00000000  00000000  0006d5fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011151f  00000000  00000000  0008210f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019362e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006828  00000000  00000000  001936ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800739c 	.word	0x0800739c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800739c 	.word	0x0800739c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
 8000590:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000592:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <MX_ADC1_Init+0xe0>)
 8000594:	4a2f      	ldr	r2, [pc, #188]	; (8000654 <MX_ADC1_Init+0xe4>)
 8000596:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <MX_ADC1_Init+0xe0>)
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800059e:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a4:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005aa:	4b29      	ldr	r3, [pc, #164]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005b2:	2204      	movs	r2, #4
 80005b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005c2:	4b23      	ldr	r3, [pc, #140]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f2:	4817      	ldr	r0, [pc, #92]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005f4:	f001 fbf2 	bl	8001ddc <HAL_ADC_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005fe:	f000 fad7 	bl	8000bb0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4619      	mov	r1, r3
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <MX_ADC1_Init+0xe0>)
 800060e:	f002 f94d 	bl	80028ac <HAL_ADCEx_MultiModeConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000618:	f000 faca 	bl	8000bb0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_ADC1_Init+0xe8>)
 800061e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000620:	2306      	movs	r3, #6
 8000622:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000628:	237f      	movs	r3, #127	; 0x7f
 800062a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800062c:	2304      	movs	r3, #4
 800062e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_ADC1_Init+0xe0>)
 800063a:	f001 fd23 	bl	8002084 <HAL_ADC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000644:	f000 fab4 	bl	8000bb0 <Error_Handler>
  }

}
 8000648:	bf00      	nop
 800064a:	3728      	adds	r7, #40	; 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000b4 	.word	0x200000b4
 8000654:	50040000 	.word	0x50040000
 8000658:	19200040 	.word	0x19200040

0800065c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <HAL_ADC_MspInit+0x74>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d124      	bne.n	80006c8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_ADC_MspInit+0x78>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <HAL_ADC_MspInit+0x78>)
 8000684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_ADC_MspInit+0x78>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_ADC_MspInit+0x78>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_ADC_MspInit+0x78>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_ADC_MspInit+0x78>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006ae:	2302      	movs	r3, #2
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006b2:	230b      	movs	r3, #11
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f002 fac2 	bl	8002c4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	50040000 	.word	0x50040000
 80006d4:	40021000 	.word	0x40021000

080006d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b44      	ldr	r3, [pc, #272]	; (8000800 <MX_GPIO_Init+0x128>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a43      	ldr	r2, [pc, #268]	; (8000800 <MX_GPIO_Init+0x128>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b41      	ldr	r3, [pc, #260]	; (8000800 <MX_GPIO_Init+0x128>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	61bb      	str	r3, [r7, #24]
 8000704:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <MX_GPIO_Init+0x128>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a3d      	ldr	r2, [pc, #244]	; (8000800 <MX_GPIO_Init+0x128>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <MX_GPIO_Init+0x128>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b38      	ldr	r3, [pc, #224]	; (8000800 <MX_GPIO_Init+0x128>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a37      	ldr	r2, [pc, #220]	; (8000800 <MX_GPIO_Init+0x128>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b35      	ldr	r3, [pc, #212]	; (8000800 <MX_GPIO_Init+0x128>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	4b32      	ldr	r3, [pc, #200]	; (8000800 <MX_GPIO_Init+0x128>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a31      	ldr	r2, [pc, #196]	; (8000800 <MX_GPIO_Init+0x128>)
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <MX_GPIO_Init+0x128>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <MX_GPIO_Init+0x128>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a2b      	ldr	r2, [pc, #172]	; (8000800 <MX_GPIO_Init+0x128>)
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b29      	ldr	r3, [pc, #164]	; (8000800 <MX_GPIO_Init+0x128>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_GPIO_Init+0x128>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a25      	ldr	r2, [pc, #148]	; (8000800 <MX_GPIO_Init+0x128>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_GPIO_Init+0x128>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S1_Pin|S0_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2121      	movs	r1, #33	; 0x21
 8000782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000786:	f002 fcfd 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000790:	481c      	ldr	r0, [pc, #112]	; (8000804 <MX_GPIO_Init+0x12c>)
 8000792:	f002 fcf7 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S2_Pin|S3_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	21c0      	movs	r1, #192	; 0xc0
 800079a:	481b      	ldr	r0, [pc, #108]	; (8000808 <MX_GPIO_Init+0x130>)
 800079c:	f002 fcf2 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = S1_Pin|S0_Pin;
 80007a0:	2321      	movs	r3, #33	; 0x21
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f002 fa47 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_Pin;
 80007be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	480b      	ldr	r0, [pc, #44]	; (8000804 <MX_GPIO_Init+0x12c>)
 80007d8:	f002 fa38 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = S2_Pin|S3_Pin;
 80007dc:	23c0      	movs	r3, #192	; 0xc0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_GPIO_Init+0x130>)
 80007f4:	f002 fa2a 	bl	8002c4c <HAL_GPIO_Init>

}
 80007f8:	bf00      	nop
 80007fa:	3730      	adds	r7, #48	; 0x30
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40021000 	.word	0x40021000
 8000804:	48001000 	.word	0x48001000
 8000808:	48000400 	.word	0x48000400

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000810:	b086      	sub	sp, #24
 8000812:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000814:	f001 f8b8 	bl	8001988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000818:	f000 f92e 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081c:	f7ff ff5c 	bl	80006d8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000820:	f000 fa8a 	bl	8000d38 <MX_QUADSPI_Init>
  MX_ADC1_Init();
 8000824:	f7ff fea4 	bl	8000570 <MX_ADC1_Init>
  MX_RTC_Init();
 8000828:	f000 fdbe 	bl	80013a8 <MX_RTC_Init>
  MX_TIM2_Init();
 800082c:	f000 ff8c 	bl	8001748 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000830:	f000 fff6 	bl	8001820 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	 //Inicjalizacja
	 if (CSP_QUADSPI_Init() != HAL_OK) {
 8000834:	f000 fb08 	bl	8000e48 <CSP_QUADSPI_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <main+0x36>
	 Error_Handler();
 800083e:	f000 f9b7 	bl	8000bb0 <Error_Handler>
	 }

	 if (CSP_QSPI_Erase_Chip() != HAL_OK) {
 8000842:	f000 fb37 	bl	8000eb4 <CSP_QSPI_Erase_Chip>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <main+0x44>
	 Error_Handler();
 800084c:	f000 f9b0 	bl	8000bb0 <Error_Handler>
	 }

	 //Ustawienie daty i godziny
	 if (setDate(14, 04, 22, 3))
 8000850:	2303      	movs	r3, #3
 8000852:	2216      	movs	r2, #22
 8000854:	2104      	movs	r1, #4
 8000856:	200e      	movs	r0, #14
 8000858:	f000 fe1e 	bl	8001498 <setDate>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <main+0x5a>
	 Error_Handler();
 8000862:	f000 f9a5 	bl	8000bb0 <Error_Handler>
	 if (setTime(0, 33, 17))
 8000866:	2211      	movs	r2, #17
 8000868:	2121      	movs	r1, #33	; 0x21
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fe3a 	bl	80014e4 <setTime>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <main+0x6e>
	 Error_Handler();
 8000876:	f000 f99b 	bl	8000bb0 <Error_Handler>
	 if (CSP_QSPI_Read(&readbuf, 0, 4) != HAL_OK) {
	 Error_Handler();
	 }*/

	 //Testy zapisow i odczytow do pamieci
	 int n=1000;
 800087a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087e:	60bb      	str	r3, [r7, #8]
	struct measurement mes[n];
 8000880:	68b8      	ldr	r0, [r7, #8]
 8000882:	1e43      	subs	r3, r0, #1
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4603      	mov	r3, r0
 8000888:	4619      	mov	r1, r3
 800088a:	f04f 0200 	mov.w	r2, #0
 800088e:	468b      	mov	fp, r1
 8000890:	4694      	mov	ip, r2
 8000892:	eb1b 030b 	adds.w	r3, fp, fp
 8000896:	eb4c 040c 	adc.w	r4, ip, ip
 800089a:	469b      	mov	fp, r3
 800089c:	46a4      	mov	ip, r4
 800089e:	eb1b 0b01 	adds.w	fp, fp, r1
 80008a2:	eb4c 0c02 	adc.w	ip, ip, r2
 80008a6:	f04f 0100 	mov.w	r1, #0
 80008aa:	f04f 0200 	mov.w	r2, #0
 80008ae:	ea4f 128c 	mov.w	r2, ip, lsl #6
 80008b2:	ea42 629b 	orr.w	r2, r2, fp, lsr #26
 80008b6:	ea4f 118b 	mov.w	r1, fp, lsl #6
 80008ba:	468b      	mov	fp, r1
 80008bc:	4694      	mov	ip, r2
 80008be:	4602      	mov	r2, r0
 80008c0:	4613      	mov	r3, r2
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	4603      	mov	r3, r0
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 0200 	mov.w	r2, #0
 80008d0:	468b      	mov	fp, r1
 80008d2:	4694      	mov	ip, r2
 80008d4:	eb1b 030b 	adds.w	r3, fp, fp
 80008d8:	eb4c 040c 	adc.w	r4, ip, ip
 80008dc:	469b      	mov	fp, r3
 80008de:	46a4      	mov	ip, r4
 80008e0:	eb1b 0b01 	adds.w	fp, fp, r1
 80008e4:	eb4c 0c02 	adc.w	ip, ip, r2
 80008e8:	f04f 0100 	mov.w	r1, #0
 80008ec:	f04f 0200 	mov.w	r2, #0
 80008f0:	ea4f 128c 	mov.w	r2, ip, lsl #6
 80008f4:	ea42 629b 	orr.w	r2, r2, fp, lsr #26
 80008f8:	ea4f 118b 	mov.w	r1, fp, lsl #6
 80008fc:	468b      	mov	fp, r1
 80008fe:	4694      	mov	ip, r2
 8000900:	4602      	mov	r2, r0
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	3303      	adds	r3, #3
 800090c:	3307      	adds	r3, #7
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	ebad 0d03 	sub.w	sp, sp, r3
 8000916:	ab02      	add	r3, sp, #8
 8000918:	3303      	adds	r3, #3
 800091a:	089b      	lsrs	r3, r3, #2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	603b      	str	r3, [r7, #0]
	for(int i=0;i<n;i++){
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e09d      	b.n	8000a62 <main+0x256>
	mes[i].time = 10000000+i;
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	4b52      	ldr	r3, [pc, #328]	; (8000a74 <main+0x268>)
 800092a:	4413      	add	r3, r2
 800092c:	4618      	mov	r0, r3
 800092e:	6839      	ldr	r1, [r7, #0]
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	4613      	mov	r3, r2
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	4413      	add	r3, r2
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	440b      	add	r3, r1
 800093c:	6018      	str	r0, [r3, #0]
	mes[i].meas[0] = 1+i;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	b29b      	uxth	r3, r3
 8000942:	3301      	adds	r3, #1
 8000944:	b298      	uxth	r0, r3
 8000946:	6839      	ldr	r1, [r7, #0]
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	440b      	add	r3, r1
 8000954:	3304      	adds	r3, #4
 8000956:	4602      	mov	r2, r0
 8000958:	801a      	strh	r2, [r3, #0]
	mes[i].meas[1] = 8+i;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	b29b      	uxth	r3, r3
 800095e:	3308      	adds	r3, #8
 8000960:	b298      	uxth	r0, r3
 8000962:	6839      	ldr	r1, [r7, #0]
 8000964:	68fa      	ldr	r2, [r7, #12]
 8000966:	4613      	mov	r3, r2
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	4413      	add	r3, r2
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	440b      	add	r3, r1
 8000970:	3306      	adds	r3, #6
 8000972:	4602      	mov	r2, r0
 8000974:	801a      	strh	r2, [r3, #0]
	mes[i].meas[2] = 4+i;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	b29b      	uxth	r3, r3
 800097a:	3304      	adds	r3, #4
 800097c:	b298      	uxth	r0, r3
 800097e:	6839      	ldr	r1, [r7, #0]
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	4613      	mov	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4413      	add	r3, r2
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	440b      	add	r3, r1
 800098c:	3308      	adds	r3, #8
 800098e:	4602      	mov	r2, r0
 8000990:	801a      	strh	r2, [r3, #0]
	mes[i].meas[3] = 1+i;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	b29b      	uxth	r3, r3
 8000996:	3301      	adds	r3, #1
 8000998:	b298      	uxth	r0, r3
 800099a:	6839      	ldr	r1, [r7, #0]
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	4613      	mov	r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	4413      	add	r3, r2
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	440b      	add	r3, r1
 80009a8:	330a      	adds	r3, #10
 80009aa:	4602      	mov	r2, r0
 80009ac:	801a      	strh	r2, [r3, #0]
	mes[i].meas[4] = 5+i;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	3305      	adds	r3, #5
 80009b4:	b298      	uxth	r0, r3
 80009b6:	6839      	ldr	r1, [r7, #0]
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	440b      	add	r3, r1
 80009c4:	330c      	adds	r3, #12
 80009c6:	4602      	mov	r2, r0
 80009c8:	801a      	strh	r2, [r3, #0]
	mes[i].meas[5] = 14+i;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	330e      	adds	r3, #14
 80009d0:	b298      	uxth	r0, r3
 80009d2:	6839      	ldr	r1, [r7, #0]
 80009d4:	68fa      	ldr	r2, [r7, #12]
 80009d6:	4613      	mov	r3, r2
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	440b      	add	r3, r1
 80009e0:	330e      	adds	r3, #14
 80009e2:	4602      	mov	r2, r0
 80009e4:	801a      	strh	r2, [r3, #0]
	mes[i].meas[6] = 18+i;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	3312      	adds	r3, #18
 80009ec:	b298      	uxth	r0, r3
 80009ee:	6839      	ldr	r1, [r7, #0]
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	4613      	mov	r3, r2
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	440b      	add	r3, r1
 80009fc:	3310      	adds	r3, #16
 80009fe:	4602      	mov	r2, r0
 8000a00:	801a      	strh	r2, [r3, #0]
	mes[i].meas[7] = 12+i;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	330c      	adds	r3, #12
 8000a08:	b298      	uxth	r0, r3
 8000a0a:	6839      	ldr	r1, [r7, #0]
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	440b      	add	r3, r1
 8000a18:	3312      	adds	r3, #18
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	801a      	strh	r2, [r3, #0]
	mes[i].meas[8] = 11+i;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	330b      	adds	r3, #11
 8000a24:	b298      	uxth	r0, r3
 8000a26:	6839      	ldr	r1, [r7, #0]
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	440b      	add	r3, r1
 8000a34:	3314      	adds	r3, #20
 8000a36:	4602      	mov	r2, r0
 8000a38:	801a      	strh	r2, [r3, #0]
	storeData(mes[i]);
 8000a3a:	6839      	ldr	r1, [r7, #0]
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4413      	add	r3, r2
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	440b      	add	r3, r1
 8000a48:	466c      	mov	r4, sp
 8000a4a:	f103 0210 	add.w	r2, r3, #16
 8000a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a52:	e884 0003 	stmia.w	r4, {r0, r1}
 8000a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a58:	f000 f8b6 	bl	8000bc8 <storeData>
	for(int i=0;i<n;i++){
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	f6ff af5d 	blt.w	8000926 <main+0x11a>
	}
	sendData();
 8000a6c:	f000 f900 	bl	8000c70 <sendData>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000a70:	e7fe      	b.n	8000a70 <main+0x264>
 8000a72:	bf00      	nop
 8000a74:	00989680 	.word	0x00989680

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b0b8      	sub	sp, #224	; 0xe0
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a82:	2244      	movs	r2, #68	; 0x44
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f005 fd9c 	bl	80065c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2288      	movs	r2, #136	; 0x88
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f005 fd8e 	bl	80065c4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aa8:	f002 fb84 	bl	80031b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000aac:	4b3e      	ldr	r3, [pc, #248]	; (8000ba8 <SystemClock_Config+0x130>)
 8000aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ab2:	4a3d      	ldr	r2, [pc, #244]	; (8000ba8 <SystemClock_Config+0x130>)
 8000ab4:	f023 0318 	bic.w	r3, r3, #24
 8000ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000abc:	2306      	movs	r3, #6
 8000abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000acc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000adc:	2302      	movs	r3, #2
 8000ade:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ae8:	230a      	movs	r3, #10
 8000aea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aee:	2307      	movs	r3, #7
 8000af0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 f8a9 	bl	8003c5c <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b10:	f000 f84e 	bl	8000bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	230f      	movs	r3, #15
 8000b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b32:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b36:	2104      	movs	r1, #4
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 fc75 	bl	8004428 <HAL_RCC_ClockConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b44:	f000 f834 	bl	8000bb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <SystemClock_Config+0x134>)
 8000b4a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b54:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b66:	2308      	movs	r3, #8
 8000b68:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b7a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f003 fe56 	bl	8004830 <HAL_RCCEx_PeriphCLKConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000b8a:	f000 f811 	bl	8000bb0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b92:	f002 fb2d 	bl	80031f0 <HAL_PWREx_ControlVoltageScaling>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000b9c:	f000 f808 	bl	8000bb0 <Error_Handler>
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	37e0      	adds	r7, #224	; 0xe0
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	00024002 	.word	0x00024002

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	int a = 10;
 8000bb6:	230a      	movs	r3, #10
 8000bb8:	607b      	str	r3, [r7, #4]
  /* USER CODE END Error_Handler_Debug */
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <storeData>:

//Variable with current address
uint32_t curAddr = 0;

//Write date and data to memory
HAL_StatusTypeDef storeData(struct measurement mes) {
 8000bc8:	b084      	sub	sp, #16
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	f107 0c18 	add.w	ip, r7, #24
 8000bd4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	if ((curAddr + 22) >= FLASH_SIZE_HERE)
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <storeData+0xa4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	3316      	adds	r3, #22
 8000bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000be2:	d301      	bcc.n	8000be8 <storeData+0x20>
		return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e039      	b.n	8000c5c <storeData+0x94>
	uint32_t tmp2 = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
	tmp2 = mes.time;
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	60bb      	str	r3, [r7, #8]
	if (CSP_QSPI_Write(&tmp2, curAddr, 4) != HAL_OK)
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <storeData+0xa4>)
 8000bf2:	6819      	ldr	r1, [r3, #0]
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fb04 	bl	8001208 <CSP_QSPI_Write>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <storeData+0x42>
		return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e028      	b.n	8000c5c <storeData+0x94>

	curAddr = curAddr + 4;
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <storeData+0xa4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3304      	adds	r3, #4
 8000c10:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <storeData+0xa4>)
 8000c12:	6013      	str	r3, [r2, #0]
	uint16_t tmp = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 9; i++) {
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	e01a      	b.n	8000c54 <storeData+0x8c>
		tmp = mes.meas[i];
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	f107 0218 	add.w	r2, r7, #24
 8000c26:	4413      	add	r3, r2
 8000c28:	889b      	ldrh	r3, [r3, #4]
 8000c2a:	80fb      	strh	r3, [r7, #6]
		if (CSP_QSPI_Write(&tmp, curAddr, 2) != HAL_OK)
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <storeData+0xa4>)
 8000c2e:	6819      	ldr	r1, [r3, #0]
 8000c30:	1dbb      	adds	r3, r7, #6
 8000c32:	2202      	movs	r2, #2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fae7 	bl	8001208 <CSP_QSPI_Write>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <storeData+0x7c>
			return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e00b      	b.n	8000c5c <storeData+0x94>
		curAddr = curAddr + 2;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <storeData+0xa4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3302      	adds	r3, #2
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <storeData+0xa4>)
 8000c4c:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 9; i++) {
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3301      	adds	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2b08      	cmp	r3, #8
 8000c58:	dde1      	ble.n	8000c1e <storeData+0x56>
	}
	return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c66:	b004      	add	sp, #16
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	2000008c 	.word	0x2000008c

08000c70 <sendData>:

uint16_t sendData() {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
	uint16_t dataNum = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	81fb      	strh	r3, [r7, #14]
	uint32_t tmpCurAddr = curAddr;
 8000c7a:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <sendData+0xb0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	603b      	str	r3, [r7, #0]
	static uint16_t readData[11];
	//string uartData;
	if (curAddr < 18)
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <sendData+0xb0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b11      	cmp	r3, #17
 8000c86:	d801      	bhi.n	8000c8c <sendData+0x1c>
		return dataNum;
 8000c88:	89fb      	ldrh	r3, [r7, #14]
 8000c8a:	e045      	b.n	8000d18 <sendData+0xa8>
	for (int i = 0; i < (tmpCurAddr / 22); i++) {
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	e031      	b.n	8000cf6 <sendData+0x86>
		if (CSP_QSPI_Read(&readData, dataNum * 22, 22) != HAL_OK)
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	2216      	movs	r2, #22
 8000c96:	fb02 f303 	mul.w	r3, r2, r3
 8000c9a:	2216      	movs	r2, #22
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4821      	ldr	r0, [pc, #132]	; (8000d24 <sendData+0xb4>)
 8000ca0:	f000 fb2c 	bl	80012fc <CSP_QSPI_Read>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <sendData+0x40>
			return -1;
 8000caa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cae:	e033      	b.n	8000d18 <sendData+0xa8>
		dataNum++;
 8000cb0:	89fb      	ldrh	r3, [r7, #14]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	81fb      	strh	r3, [r7, #14]
		curAddr = curAddr - 22;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <sendData+0xb0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	3b16      	subs	r3, #22
 8000cbc:	4a18      	ldr	r2, [pc, #96]	; (8000d20 <sendData+0xb0>)
 8000cbe:	6013      	str	r3, [r2, #0]
		printf("%d. ", i);
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	4819      	ldr	r0, [pc, #100]	; (8000d28 <sendData+0xb8>)
 8000cc4:	f005 fd2e 	bl	8006724 <iprintf>
		for (int i = 0; i < 11; i++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	e00a      	b.n	8000ce4 <sendData+0x74>
			printf("%d ", readData[i]);
 8000cce:	4a15      	ldr	r2, [pc, #84]	; (8000d24 <sendData+0xb4>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4814      	ldr	r0, [pc, #80]	; (8000d2c <sendData+0xbc>)
 8000cda:	f005 fd23 	bl	8006724 <iprintf>
		for (int i = 0; i < 11; i++)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b0a      	cmp	r3, #10
 8000ce8:	ddf1      	ble.n	8000cce <sendData+0x5e>
		printf("\n\r");
 8000cea:	4811      	ldr	r0, [pc, #68]	; (8000d30 <sendData+0xc0>)
 8000cec:	f005 fd1a 	bl	8006724 <iprintf>
	for (int i = 0; i < (tmpCurAddr / 22); i++) {
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <sendData+0xc4>)
 8000cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfe:	091a      	lsrs	r2, r3, #4
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d8c5      	bhi.n	8000c92 <sendData+0x22>
	}
	if (CSP_QSPI_Erase_Chip() != HAL_OK)
 8000d06:	f000 f8d5 	bl	8000eb4 <CSP_QSPI_Erase_Chip>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <sendData+0xa6>
		return -2;
 8000d10:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000d14:	e000      	b.n	8000d18 <sendData+0xa8>
	return dataNum;
 8000d16:	89fb      	ldrh	r3, [r7, #14]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000008c 	.word	0x2000008c
 8000d24:	20000090 	.word	0x20000090
 8000d28:	080073b4 	.word	0x080073b4
 8000d2c:	080073bc 	.word	0x080073bc
 8000d30:	080073c0 	.word	0x080073c0
 8000d34:	ba2e8ba3 	.word	0xba2e8ba3

08000d38 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_QUADSPI_Init+0x44>)
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <MX_QUADSPI_Init+0x48>)
 8000d40:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_QUADSPI_Init+0x44>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_QUADSPI_Init+0x44>)
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_QUADSPI_Init+0x44>)
 8000d50:	2210      	movs	r2, #16
 8000d52:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_QUADSPI_Init+0x44>)
 8000d56:	2217      	movs	r2, #23
 8000d58:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_QUADSPI_Init+0x44>)
 8000d5c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000d60:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_QUADSPI_Init+0x44>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_QUADSPI_Init+0x44>)
 8000d6a:	f002 fa97 	bl	800329c <HAL_QSPI_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_QUADSPI_Init+0x40>
  {
    Error_Handler();
 8000d74:	f7ff ff1c 	bl	8000bb0 <Error_Handler>
  }

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000118 	.word	0x20000118
 8000d80:	a0001000 	.word	0xa0001000

08000d84 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <HAL_QSPI_MspInit+0x7c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d128      	bne.n	8000df8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <HAL_QSPI_MspInit+0x80>)
 8000da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000daa:	4a16      	ldr	r2, [pc, #88]	; (8000e04 <HAL_QSPI_MspInit+0x80>)
 8000dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db0:	6513      	str	r3, [r2, #80]	; 0x50
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <HAL_QSPI_MspInit+0x80>)
 8000db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_QSPI_MspInit+0x80>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a10      	ldr	r2, [pc, #64]	; (8000e04 <HAL_QSPI_MspInit+0x80>)
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_QSPI_MspInit+0x80>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000dd6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000dda:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000de8:	230a      	movs	r3, #10
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <HAL_QSPI_MspInit+0x84>)
 8000df4:	f001 ff2a 	bl	8002c4c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	; 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	a0001000 	.word	0xa0001000
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48001000 	.word	0x48001000

08000e0c <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_QSPI_MspDeInit+0x30>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d10a      	bne.n	8000e34 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_QSPI_MspDeInit+0x34>)
 8000e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e22:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_QSPI_MspDeInit+0x34>)
 8000e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e28:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000e2a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <HAL_QSPI_MspDeInit+0x38>)
 8000e30:	f002 f8b4 	bl	8002f9c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	a0001000 	.word	0xa0001000
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48001000 	.word	0x48001000

08000e48 <CSP_QUADSPI_Init>:
*/



uint8_t CSP_QUADSPI_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <CSP_QUADSPI_Init+0x64>)
 8000e4e:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <CSP_QUADSPI_Init+0x68>)
 8000e50:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000e52:	4816      	ldr	r0, [pc, #88]	; (8000eac <CSP_QUADSPI_Init+0x64>)
 8000e54:	f002 fa98 	bl	8003388 <HAL_QSPI_DeInit>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <CSP_QUADSPI_Init+0x1a>
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e021      	b.n	8000ea6 <CSP_QUADSPI_Init+0x5e>
    }

    MX_QUADSPI_Init();
 8000e62:	f7ff ff69 	bl	8000d38 <MX_QUADSPI_Init>

    if (QSPI_ResetChip() != HAL_OK) {
 8000e66:	f000 f971 	bl	800114c <QSPI_ResetChip>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <CSP_QUADSPI_Init+0x2c>
        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e018      	b.n	8000ea6 <CSP_QUADSPI_Init+0x5e>
    }

    HAL_Delay(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f000 fe03 	bl	8001a80 <HAL_Delay>

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000e7a:	f000 f857 	bl	8000f2c <QSPI_AutoPollingMemReady>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <CSP_QUADSPI_Init+0x40>
        return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e00e      	b.n	8000ea6 <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
 8000e88:	f000 f888 	bl	8000f9c <QSPI_WriteEnable>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <CSP_QUADSPI_Init+0x4e>

        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e007      	b.n	8000ea6 <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_Configuration() != HAL_OK) {
 8000e96:	f000 f8cb 	bl	8001030 <QSPI_Configuration>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <CSP_QUADSPI_Init+0x5c>
        return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <CSP_QUADSPI_Init+0x5e>
    }

    return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000118 	.word	0x20000118
 8000eb0:	a0001000 	.word	0xa0001000

08000eb4 <CSP_QSPI_Erase_Chip>:


uint8_t CSP_QSPI_Erase_Chip(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	; 0x38
 8000eb8:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;


    if (QSPI_WriteEnable() != HAL_OK) {
 8000eba:	f000 f86f 	bl	8000f9c <QSPI_WriteEnable>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <CSP_QSPI_Erase_Chip+0x14>
        return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e02b      	b.n	8000f20 <CSP_QSPI_Erase_Chip+0x6c>
    }


    /* Erasing Sequence --------------------------------- */
    sCommand.Instruction = BULK_ERASE_CMD;
 8000ec8:	23c7      	movs	r3, #199	; 0xc7
 8000eca:	603b      	str	r3, [r7, #0]
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed0:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000ed2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed6:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
    sCommand.Address = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
    sCommand.DataMode = QSPI_DATA_NONE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DummyCycles = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]


    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_MAX_DELAY)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000efe:	4619      	mov	r1, r3
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <CSP_QSPI_Erase_Chip+0x74>)
 8000f02:	f002 fa65 	bl	80033d0 <HAL_QSPI_Command>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <CSP_QSPI_Erase_Chip+0x5c>
        != HAL_OK) {
        return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e007      	b.n	8000f20 <CSP_QSPI_Erase_Chip+0x6c>
    }

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000f10:	f000 f80c 	bl	8000f2c <QSPI_AutoPollingMemReady>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <CSP_QSPI_Erase_Chip+0x6a>
        return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <CSP_QSPI_Erase_Chip+0x6c>
    }

    return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3738      	adds	r7, #56	; 0x38
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000118 	.word	0x20000118

08000f2c <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	; 0x50
 8000f30:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8000f38:	2305      	movs	r3, #5
 8000f3a:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f52:	2300      	movs	r3, #0
 8000f54:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f56:	2300      	movs	r3, #0
 8000f58:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
    sConfig.Mask = N25Q128A_SR_WIP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000f6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f72:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_MAX_DELAY) != HAL_OK)
 8000f74:	463a      	mov	r2, r7
 8000f76:	f107 0118 	add.w	r1, r7, #24
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <QSPI_AutoPollingMemReady+0x6c>)
 8000f80:	f002 fbbd 	bl	80036fe <HAL_QSPI_AutoPolling>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <QSPI_AutoPollingMemReady+0x62>
    {
        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <QSPI_AutoPollingMemReady+0x64>
    }

    return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3750      	adds	r7, #80	; 0x50
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000118 	.word	0x20000118

08000f9c <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	; 0x50
 8000fa0:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 8000fa8:	2306      	movs	r3, #6
 8000faa:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4816      	ldr	r0, [pc, #88]	; (800102c <QSPI_WriteEnable+0x90>)
 8000fd4:	f002 f9fc 	bl	80033d0 <HAL_QSPI_Command>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e01f      	b.n	8001022 <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000ff6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ffa:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 8000ffc:	2305      	movs	r3, #5
 8000ffe:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001004:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001006:	463a      	mov	r2, r7
 8001008:	f107 0118 	add.w	r1, r7, #24
 800100c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001010:	4806      	ldr	r0, [pc, #24]	; (800102c <QSPI_WriteEnable+0x90>)
 8001012:	f002 fb74 	bl	80036fe <HAL_QSPI_AutoPolling>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3750      	adds	r7, #80	; 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000118 	.word	0x20000118

08001030 <QSPI_Configuration>:


/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b092      	sub	sp, #72	; 0x48
 8001034:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    uint8_t reg;

    /*read configuration register*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103a:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction = READ_VOL_CFG_REG_CMD;
 800103c:	2385      	movs	r3, #133	; 0x85
 800103e:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800105a:	2300      	movs	r3, #0
 800105c:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.NbData = 1;
 800105e:	2301      	movs	r3, #1
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	f241 3288 	movw	r2, #5000	; 0x1388
 8001068:	4619      	mov	r1, r3
 800106a:	4837      	ldr	r0, [pc, #220]	; (8001148 <QSPI_Configuration+0x118>)
 800106c:	f002 f9b0 	bl	80033d0 <HAL_QSPI_Command>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <QSPI_Configuration+0x4a>
        != HAL_OK) {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e061      	b.n	800113e <QSPI_Configuration+0x10e>
    }


    if (HAL_QSPI_Receive(&hqspi, &reg,
 800107a:	1cfb      	adds	r3, r7, #3
 800107c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001080:	4619      	mov	r1, r3
 8001082:	4831      	ldr	r0, [pc, #196]	; (8001148 <QSPI_Configuration+0x118>)
 8001084:	f002 fa99 	bl	80035ba <HAL_QSPI_Receive>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <QSPI_Configuration+0x62>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e055      	b.n	800113e <QSPI_Configuration+0x10e>
    }



    if (QSPI_WriteEnable() != HAL_OK) {
 8001092:	f7ff ff83 	bl	8000f9c <QSPI_WriteEnable>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <QSPI_Configuration+0x70>

        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e04e      	b.n	800113e <QSPI_Configuration+0x10e>
    }


    /*set dummy cycles*/
    MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	23f0      	movs	r3, #240	; 0xf0
 80010ac:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010b0:	fa93 f3a3 	rbit	r3, r3
 80010b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010b8:	647b      	str	r3, [r7, #68]	; 0x44
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80010ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <QSPI_Configuration+0x94>
  {
    return 32U;
 80010c0:	2320      	movs	r3, #32
 80010c2:	e003      	b.n	80010cc <QSPI_Configuration+0x9c>
  }
  return __builtin_clz(value);
 80010c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010c6:	fab3 f383 	clz	r3, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	4619      	mov	r1, r3
 80010ce:	230a      	movs	r3, #10
 80010d0:	408b      	lsls	r3, r1
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	70fb      	strb	r3, [r7, #3]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80010dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e0:	61fb      	str	r3, [r7, #28]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80010ea:	2300      	movs	r3, #0
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80010ee:	2300      	movs	r3, #0
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 80010f2:	2381      	movs	r3, #129	; 0x81
 80010f4:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80010fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
    sCommand.NbData = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	f241 3288 	movw	r2, #5000	; 0x1388
 800110e:	4619      	mov	r1, r3
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <QSPI_Configuration+0x118>)
 8001112:	f002 f95d 	bl	80033d0 <HAL_QSPI_Command>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <QSPI_Configuration+0xf0>
        != HAL_OK) {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e00e      	b.n	800113e <QSPI_Configuration+0x10e>
    }

    if (HAL_QSPI_Transmit(&hqspi, &reg,
 8001120:	1cfb      	adds	r3, r7, #3
 8001122:	f241 3288 	movw	r2, #5000	; 0x1388
 8001126:	4619      	mov	r1, r3
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <QSPI_Configuration+0x118>)
 800112a:	f002 f9af 	bl	800348c <HAL_QSPI_Transmit>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <QSPI_Configuration+0x10c>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        Error_Handler();
 8001134:	f7ff fd3c 	bl	8000bb0 <Error_Handler>
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <QSPI_Configuration+0x10e>
    }
    return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3748      	adds	r7, #72	; 0x48
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000118 	.word	0x20000118

0800114c <QSPI_ResetChip>:
    }
    return HAL_OK;
}

uint8_t QSPI_ResetChip()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b090      	sub	sp, #64	; 0x40
 8001150:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800115a:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800115c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001160:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800116a:	2300      	movs	r3, #0
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800116e:	2300      	movs	r3, #0
 8001170:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 8001172:	2366      	movs	r3, #102	; 0x66
 8001174:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	f241 3288 	movw	r2, #5000	; 0x1388
 800118c:	4619      	mov	r1, r3
 800118e:	481d      	ldr	r0, [pc, #116]	; (8001204 <QSPI_ResetChip+0xb8>)
 8001190:	f002 f91e 	bl	80033d0 <HAL_QSPI_Command>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e02e      	b.n	80011fc <QSPI_ResetChip+0xb0>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 800119e:	2300      	movs	r3, #0
 80011a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011a2:	e003      	b.n	80011ac <QSPI_ResetChip+0x60>
        __NOP();
 80011a4:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 80011a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a8:	3301      	adds	r3, #1
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ae:	2b2e      	cmp	r3, #46	; 0x2e
 80011b0:	d9f8      	bls.n	80011a4 <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80011b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b6:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80011b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011bc:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80011c6:	2300      	movs	r3, #0
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80011ca:	2300      	movs	r3, #0
 80011cc:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_MEMORY_CMD;
 80011ce:	2399      	movs	r3, #153	; 0x99
 80011d0:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 80011da:	2300      	movs	r3, #0
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <QSPI_ResetChip+0xb8>)
 80011ec:	f002 f8f0 	bl	80033d0 <HAL_QSPI_Command>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <QSPI_ResetChip+0xb0>
    }
    return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3740      	adds	r7, #64	; 0x40
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000118 	.word	0x20000118

08001208 <CSP_QSPI_Write>:
  return HAL_OK;
}


uint8_t CSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b096      	sub	sp, #88	; 0x58
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800121c:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800121e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	d901      	bls.n	800122a <CSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4413      	add	r3, r2
 8001234:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 800123c:	2312      	movs	r3, #18
 800123e:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001240:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124a:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800124c:	2300      	movs	r3, #0
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001250:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800125e:	2300      	movs	r3, #0
 8001260:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001262:	2300      	movs	r3, #0
 8001264:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8001266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001268:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 800126a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800126c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 800126e:	f7ff fe95 	bl	8000f9c <QSPI_WriteEnable>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <CSP_QSPI_Write+0x74>
    {
      return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e038      	b.n	80012ee <CSP_QSPI_Write+0xe6>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	f241 3288 	movw	r2, #5000	; 0x1388
 8001284:	4619      	mov	r1, r3
 8001286:	481c      	ldr	r0, [pc, #112]	; (80012f8 <CSP_QSPI_Write+0xf0>)
 8001288:	f002 f8a2 	bl	80033d0 <HAL_QSPI_Command>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <CSP_QSPI_Write+0x8e>
    {
      return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e02b      	b.n	80012ee <CSP_QSPI_Write+0xe6>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001296:	f241 3288 	movw	r2, #5000	; 0x1388
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	4816      	ldr	r0, [pc, #88]	; (80012f8 <CSP_QSPI_Write+0xf0>)
 800129e:	f002 f8f5 	bl	800348c <HAL_QSPI_Transmit>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <CSP_QSPI_Write+0xa4>
    {
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e020      	b.n	80012ee <CSP_QSPI_Write+0xe6>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady() != HAL_OK)
 80012ac:	f7ff fe3e 	bl	8000f2c <QSPI_AutoPollingMemReady>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <CSP_QSPI_Write+0xb2>
    {
      return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e019      	b.n	80012ee <CSP_QSPI_Write+0xe6>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 80012ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80012bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012be:	4413      	add	r3, r2
 80012c0:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 80012ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d203      	bcs.n	80012de <CSP_QSPI_Write+0xd6>
 80012d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	e001      	b.n	80012e2 <CSP_QSPI_Write+0xda>
 80012de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e2:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 80012e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80012e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d3bc      	bcc.n	8001266 <CSP_QSPI_Write+0x5e>

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3758      	adds	r7, #88	; 0x58
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000118 	.word	0x20000118

080012fc <CSP_QSPI_Read>:


uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b092      	sub	sp, #72	; 0x48
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800130e:	23eb      	movs	r3, #235	; 0xeb
 8001310:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001312:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131c:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001326:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 800132c:	230a      	movs	r3, #10
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001338:	2300      	movs	r3, #0
 800133a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800133c:	2300      	movs	r3, #0
 800133e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	f241 3288 	movw	r2, #5000	; 0x1388
 8001348:	4619      	mov	r1, r3
 800134a:	4816      	ldr	r0, [pc, #88]	; (80013a4 <CSP_QSPI_Read+0xa8>)
 800134c:	f002 f840 	bl	80033d0 <HAL_QSPI_Command>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <CSP_QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e01f      	b.n	800139a <CSP_QSPI_Read+0x9e>
  }

  /* Set S# timing for Read command */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <CSP_QSPI_Read+0xa8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <CSP_QSPI_Read+0xa8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800136c:	605a      	str	r2, [r3, #4]

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001372:	68f9      	ldr	r1, [r7, #12]
 8001374:	480b      	ldr	r0, [pc, #44]	; (80013a4 <CSP_QSPI_Read+0xa8>)
 8001376:	f002 f920 	bl	80035ba <HAL_QSPI_Receive>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <CSP_QSPI_Read+0x88>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e00a      	b.n	800139a <CSP_QSPI_Read+0x9e>
  }

  /* Restore S# timing for nonRead commands */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <CSP_QSPI_Read+0xa8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <CSP_QSPI_Read+0xa8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8001396:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3748      	adds	r7, #72	; 0x48
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000118 	.word	0x20000118

080013a8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80013bc:	2300      	movs	r3, #0
 80013be:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013c0:	4b25      	ldr	r3, [pc, #148]	; (8001458 <MX_RTC_Init+0xb0>)
 80013c2:	4a26      	ldr	r2, [pc, #152]	; (800145c <MX_RTC_Init+0xb4>)
 80013c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <MX_RTC_Init+0xb0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <MX_RTC_Init+0xb0>)
 80013ce:	227f      	movs	r2, #127	; 0x7f
 80013d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <MX_RTC_Init+0xb0>)
 80013d4:	22ff      	movs	r2, #255	; 0xff
 80013d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <MX_RTC_Init+0xb0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013de:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <MX_RTC_Init+0xb0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013e4:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <MX_RTC_Init+0xb0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_RTC_Init+0xb0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013f0:	4819      	ldr	r0, [pc, #100]	; (8001458 <MX_RTC_Init+0xb0>)
 80013f2:	f003 fecd 	bl	8005190 <HAL_RTC_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80013fc:	f7ff fbd8 	bl	8000bb0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800140c:	2300      	movs	r3, #0
 800140e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	4619      	mov	r1, r3
 800141a:	480f      	ldr	r0, [pc, #60]	; (8001458 <MX_RTC_Init+0xb0>)
 800141c:	f003 ff33 	bl	8005286 <HAL_RTC_SetTime>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001426:	f7ff fbc3 	bl	8000bb0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800142a:	2301      	movs	r3, #1
 800142c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800142e:	2301      	movs	r3, #1
 8001430:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001432:	2301      	movs	r3, #1
 8001434:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800143a:	463b      	mov	r3, r7
 800143c:	2200      	movs	r2, #0
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_RTC_Init+0xb0>)
 8001442:	f003 ffbd 	bl	80053c0 <HAL_RTC_SetDate>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800144c:	f7ff fbb0 	bl	8000bb0 <Error_Handler>
  }

}
 8001450:	bf00      	nop
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	2000015c 	.word	0x2000015c
 800145c:	40002800 	.word	0x40002800

08001460 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_RTC_MspInit+0x30>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d107      	bne.n	8001482 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_RTC_MspInit+0x34>)
 8001474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001478:	4a06      	ldr	r2, [pc, #24]	; (8001494 <HAL_RTC_MspInit+0x34>)
 800147a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800147e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40002800 	.word	0x40002800
 8001494:	40021000 	.word	0x40021000

08001498 <setDate>:
  /* USER CODE END RTC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint8_t setDate(int day, int month, int year, int weekDay) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
	RTC_DateTypeDef Date;
	Date.Date = day;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	75bb      	strb	r3, [r7, #22]
	Date.Month = month;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	757b      	strb	r3, [r7, #21]
	Date.WeekDay = weekDay;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	753b      	strb	r3, [r7, #20]
	Date.Year = year;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	75fb      	strb	r3, [r7, #23]

	if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) == HAL_OK)
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	2200      	movs	r2, #0
 80014c4:	4619      	mov	r1, r3
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <setDate+0x48>)
 80014c8:	f003 ff7a 	bl	80053c0 <HAL_RTC_SetDate>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <setDate+0x3e>
		return HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e000      	b.n	80014d8 <setDate+0x40>
	else
		return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1

}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000015c 	.word	0x2000015c

080014e4 <setTime>:
uint8_t setTime(int sec, int min, int hour) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	RTC_TimeTypeDef Time;
	Time.Seconds = sec;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	75bb      	strb	r3, [r7, #22]
	Time.Minutes = min;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	757b      	strb	r3, [r7, #21]
	Time.Hours = hour;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	753b      	strb	r3, [r7, #20]

	if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <setTime+0x40>)
 800150c:	f003 febb 	bl	8005286 <HAL_RTC_SetTime>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <setTime+0x36>
		return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <setTime+0x38>
	else
		return HAL_ERROR;
 800151a:	2301      	movs	r3, #1

}
 800151c:	4618      	mov	r0, r3
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000015c 	.word	0x2000015c

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_MspInit+0x44>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_MspInit+0x44>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6613      	str	r3, [r2, #96]	; 0x60
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_MspInit+0x44>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_MspInit+0x44>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	4a08      	ldr	r2, [pc, #32]	; (800156c <HAL_MspInit+0x44>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6593      	str	r3, [r2, #88]	; 0x58
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_MspInit+0x44>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <MemManage_Handler+0x4>

0800158a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <UsageFault_Handler+0x4>

08001596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c4:	f000 fa3c 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	e00a      	b.n	80015f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015de:	f3af 8000 	nop.w
 80015e2:	4601      	mov	r1, r0
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	60ba      	str	r2, [r7, #8]
 80015ea:	b2ca      	uxtb	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbf0      	blt.n	80015de <_read+0x12>
	}

return len;
 80015fc:	687b      	ldr	r3, [r7, #4]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
	return -1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162e:	605a      	str	r2, [r3, #4]
	return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_isatty>:

int _isatty(int file)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
	return 1;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	return 0;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f004 ff66 	bl	8006570 <__errno>
 80016a4:	4602      	mov	r2, r0
 80016a6:	230c      	movs	r3, #12
 80016a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20018000 	.word	0x20018000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	200000a8 	.word	0x200000a8
 80016d8:	20000258 	.word	0x20000258

080016dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <SystemInit+0x64>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	4a16      	ldr	r2, [pc, #88]	; (8001740 <SystemInit+0x64>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <SystemInit+0x68>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a13      	ldr	r2, [pc, #76]	; (8001744 <SystemInit+0x68>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <SystemInit+0x68>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <SystemInit+0x68>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <SystemInit+0x68>)
 8001708:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800170c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001710:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <SystemInit+0x68>)
 8001714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001718:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <SystemInit+0x68>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <SystemInit+0x68>)
 8001720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001724:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <SystemInit+0x68>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <SystemInit+0x64>)
 800172e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001732:	609a      	str	r2, [r3, #8]
#endif
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00
 8001744:	40021000 	.word	0x40021000

08001748 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <MX_TIM2_Init+0x98>)
 8001768:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <MX_TIM2_Init+0x98>)
 8001770:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001774:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <MX_TIM2_Init+0x98>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <MX_TIM2_Init+0x98>)
 800177e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001782:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <MX_TIM2_Init+0x98>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MX_TIM2_Init+0x98>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <MX_TIM2_Init+0x98>)
 8001792:	f003 ff53 	bl	800563c <HAL_TIM_Base_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800179c:	f7ff fa08 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	4619      	mov	r1, r3
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <MX_TIM2_Init+0x98>)
 80017ae:	f003 ff9c 	bl	80056ea <HAL_TIM_ConfigClockSource>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80017b8:	f7ff f9fa 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017bc:	2320      	movs	r3, #32
 80017be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	4619      	mov	r1, r3
 80017c8:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_TIM2_Init+0x98>)
 80017ca:	f004 f97b 	bl	8005ac4 <HAL_TIMEx_MasterConfigSynchronization>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80017d4:	f7ff f9ec 	bl	8000bb0 <Error_Handler>
  }

}
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000180 	.word	0x20000180

080017e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f4:	d10b      	bne.n	800180e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_TIM_Base_MspInit+0x38>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_TIM_Base_MspInit+0x38>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6593      	str	r3, [r2, #88]	; 0x58
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_TIM_Base_MspInit+0x38>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000

08001820 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001826:	4a15      	ldr	r2, [pc, #84]	; (800187c <MX_USART2_UART_Init+0x5c>)
 8001828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <MX_USART2_UART_Init+0x58>)
 800182c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_USART2_UART_Init+0x58>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <MX_USART2_UART_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_USART2_UART_Init+0x58>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001864:	f004 f9b6 	bl	8005bd4 <HAL_UART_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800186e:	f7ff f99f 	bl	8000bb0 <Error_Handler>
  }

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200001cc 	.word	0x200001cc
 800187c:	40004400 	.word	0x40004400

08001880 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a17      	ldr	r2, [pc, #92]	; (80018fc <HAL_UART_MspInit+0x7c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d127      	bne.n	80018f2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_UART_MspInit+0x80>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	4a16      	ldr	r2, [pc, #88]	; (8001900 <HAL_UART_MspInit+0x80>)
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	6593      	str	r3, [r2, #88]	; 0x58
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <HAL_UART_MspInit+0x80>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_UART_MspInit+0x80>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	4a10      	ldr	r2, [pc, #64]	; (8001900 <HAL_UART_MspInit+0x80>)
 80018c0:	f043 0308 	orr.w	r3, r3, #8
 80018c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_UART_MspInit+0x80>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018d2:	2360      	movs	r3, #96	; 0x60
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e2:	2307      	movs	r3, #7
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <HAL_UART_MspInit+0x84>)
 80018ee:	f001 f9ad 	bl	8002c4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	; 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40004400 	.word	0x40004400
 8001900:	40021000 	.word	0x40021000
 8001904:	48000c00 	.word	0x48000c00

08001908 <_write>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int _write(int file,char *ptr,int len){
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, 1000);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	b29a      	uxth	r2, r3
 8001918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	4804      	ldr	r0, [pc, #16]	; (8001930 <_write+0x28>)
 8001920:	f004 f9a6 	bl	8005c70 <HAL_UART_Transmit>
	return len;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200001cc 	.word	0x200001cc

08001934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800196c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001938:	f7ff fed0 	bl	80016dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800193c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800193e:	e003      	b.n	8001948 <LoopCopyDataInit>

08001940 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001942:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001944:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001946:	3104      	adds	r1, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001948:	480a      	ldr	r0, [pc, #40]	; (8001974 <LoopForever+0xa>)
	ldr	r3, =_edata
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <LoopForever+0xe>)
	adds	r2, r0, r1
 800194c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800194e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001950:	d3f6      	bcc.n	8001940 <CopyDataInit>
	ldr	r2, =_sbss
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001954:	e002      	b.n	800195c <LoopFillZerobss>

08001956 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001956:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001958:	f842 3b04 	str.w	r3, [r2], #4

0800195c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <LoopForever+0x16>)
	cmp	r2, r3
 800195e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001960:	d3f9      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001962:	f004 fe0b 	bl	800657c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001966:	f7fe ff51 	bl	800080c <main>

0800196a <LoopForever>:

LoopForever:
    b LoopForever
 800196a:	e7fe      	b.n	800196a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800196c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001970:	080074b4 	.word	0x080074b4
	ldr	r0, =_sdata
 8001974:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001978:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800197c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001980:	20000254 	.word	0x20000254

08001984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC1_2_IRQHandler>
	...

08001988 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_Init+0x3c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_Init+0x3c>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199e:	2003      	movs	r0, #3
 80019a0:	f001 f8e2 	bl	8002b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019a4:	2000      	movs	r0, #0
 80019a6:	f000 f80f 	bl	80019c8 <HAL_InitTick>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	e001      	b.n	80019ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019b6:	f7ff fdb7 	bl	8001528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ba:	79fb      	ldrb	r3, [r7, #7]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40022000 	.word	0x40022000

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_InitTick+0x6c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d023      	beq.n	8001a24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <HAL_InitTick+0x70>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_InitTick+0x6c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 f8df 	bl	8002bb6 <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10f      	bne.n	8001a1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d809      	bhi.n	8001a18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a0c:	f001 f8b7 	bl	8002b7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a10:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_InitTick+0x74>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e007      	b.n	8001a28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e004      	b.n	8001a28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e001      	b.n	8001a28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x20>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_IncTick+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_IncTick+0x24>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000008 	.word	0x20000008
 8001a64:	2000024c 	.word	0x2000024c

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	2000024c 	.word	0x2000024c

08001a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff ffee 	bl	8001a68 <HAL_GetTick>
 8001a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a98:	d005      	beq.n	8001aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_Delay+0x40>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aa6:	bf00      	nop
 8001aa8:	f7ff ffde 	bl	8001a68 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d8f7      	bhi.n	8001aa8 <HAL_Delay+0x28>
  {
  }
}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000008 	.word	0x20000008

08001ac4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	609a      	str	r2, [r3, #8]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	3360      	adds	r3, #96	; 0x60
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <LL_ADC_SetOffset+0x44>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b64:	bf00      	nop
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	03fff000 	.word	0x03fff000

08001b74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3360      	adds	r3, #96	; 0x60
 8001b82:	461a      	mov	r2, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3360      	adds	r3, #96	; 0x60
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bca:	bf00      	nop
 8001bcc:	371c      	adds	r7, #28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b087      	sub	sp, #28
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3330      	adds	r3, #48	; 0x30
 8001be6:	461a      	mov	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	4413      	add	r3, r2
 8001bf4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	211f      	movs	r1, #31
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	401a      	ands	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	0e9b      	lsrs	r3, r3, #26
 8001c0e:	f003 011f 	and.w	r1, r3, #31
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c22:	bf00      	nop
 8001c24:	371c      	adds	r7, #28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b087      	sub	sp, #28
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3314      	adds	r3, #20
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	0e5b      	lsrs	r3, r3, #25
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	4413      	add	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	0d1b      	lsrs	r3, r3, #20
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	2107      	movs	r1, #7
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	0d1b      	lsrs	r3, r3, #20
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	431a      	orrs	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c78:	bf00      	nop
 8001c7a:	371c      	adds	r7, #28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0318 	and.w	r3, r3, #24
 8001ca6:	4908      	ldr	r1, [pc, #32]	; (8001cc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ca8:	40d9      	lsrs	r1, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	400b      	ands	r3, r1
 8001cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	0007ffff 	.word	0x0007ffff

08001ccc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001cdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6093      	str	r3, [r2, #8]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d04:	d101      	bne.n	8001d0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d54:	d101      	bne.n	8001d5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <LL_ADC_IsEnabled+0x18>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <LL_ADC_IsEnabled+0x1a>
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d101      	bne.n	8001da6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d101      	bne.n	8001dcc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b089      	sub	sp, #36	; 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e134      	b.n	8002060 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7fe fc29 	bl	800065c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff67 	bl	8001cf0 <LL_ADC_IsDeepPowerDownEnabled>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d004      	beq.n	8001e32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff4d 	bl	8001ccc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff82 	bl	8001d40 <LL_ADC_IsInternalRegulatorEnabled>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d113      	bne.n	8001e6a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff66 	bl	8001d18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001e4c:	4b86      	ldr	r3, [pc, #536]	; (8002068 <HAL_ADC_Init+0x28c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	4a86      	ldr	r2, [pc, #536]	; (800206c <HAL_ADC_Init+0x290>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e5c:	e002      	b.n	8001e64 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f9      	bne.n	8001e5e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ff66 	bl	8001d40 <LL_ADC_IsInternalRegulatorEnabled>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10d      	bne.n	8001e96 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7e:	f043 0210 	orr.w	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff77 	bl	8001d8e <LL_ADC_REG_IsConversionOngoing>
 8001ea0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 80cf 	bne.w	800204e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 80cb 	bne.w	800204e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ec0:	f043 0202 	orr.w	r2, r3, #2
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff4b 	bl	8001d68 <LL_ADC_IsEnabled>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d115      	bne.n	8001f04 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ed8:	4865      	ldr	r0, [pc, #404]	; (8002070 <HAL_ADC_Init+0x294>)
 8001eda:	f7ff ff45 	bl	8001d68 <LL_ADC_IsEnabled>
 8001ede:	4604      	mov	r4, r0
 8001ee0:	4864      	ldr	r0, [pc, #400]	; (8002074 <HAL_ADC_Init+0x298>)
 8001ee2:	f7ff ff41 	bl	8001d68 <LL_ADC_IsEnabled>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	431c      	orrs	r4, r3
 8001eea:	4863      	ldr	r0, [pc, #396]	; (8002078 <HAL_ADC_Init+0x29c>)
 8001eec:	f7ff ff3c 	bl	8001d68 <LL_ADC_IsEnabled>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4323      	orrs	r3, r4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4619      	mov	r1, r3
 8001efe:	485f      	ldr	r0, [pc, #380]	; (800207c <HAL_ADC_Init+0x2a0>)
 8001f00:	f7ff fde0 	bl	8001ac4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7e5b      	ldrb	r3, [r3, #25]
 8001f08:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f0e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001f14:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001f1a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f22:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d106      	bne.n	8001f40 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	3b01      	subs	r3, #1
 8001f38:	045b      	lsls	r3, r3, #17
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d009      	beq.n	8001f5c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <HAL_ADC_Init+0x2a4>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff0a 	bl	8001d8e <LL_ADC_REG_IsConversionOngoing>
 8001f7a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff17 	bl	8001db4 <LL_ADC_INJ_IsConversionOngoing>
 8001f86:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d13d      	bne.n	800200a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d13a      	bne.n	800200a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f98:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fa0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fb0:	f023 0302 	bic.w	r3, r3, #2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	69b9      	ldr	r1, [r7, #24]
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d118      	bne.n	8001ffa <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fd2:	f023 0304 	bic.w	r3, r3, #4
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fe4:	4311      	orrs	r1, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fea:	430a      	orrs	r2, r1
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	611a      	str	r2, [r3, #16]
 8001ff8:	e007      	b.n	800200a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d10c      	bne.n	800202c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	f023 010f 	bic.w	r1, r3, #15
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	1e5a      	subs	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	631a      	str	r2, [r3, #48]	; 0x30
 800202a:	e007      	b.n	800203c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 020f 	bic.w	r2, r2, #15
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002040:	f023 0303 	bic.w	r3, r3, #3
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
 800204c:	e007      	b.n	800205e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f043 0210 	orr.w	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800205e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3724      	adds	r7, #36	; 0x24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	20000000 	.word	0x20000000
 800206c:	053e2d63 	.word	0x053e2d63
 8002070:	50040000 	.word	0x50040000
 8002074:	50040100 	.word	0x50040100
 8002078:	50040200 	.word	0x50040200
 800207c:	50040300 	.word	0x50040300
 8002080:	fff0c007 	.word	0xfff0c007

08002084 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b0b6      	sub	sp, #216	; 0xd8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x22>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e3c6      	b.n	8002834 <HAL_ADC_ConfigChannel+0x7b0>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fe6b 	bl	8001d8e <LL_ADC_REG_IsConversionOngoing>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 83a7 	bne.w	800280e <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d824      	bhi.n	8002112 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	3b02      	subs	r3, #2
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d81b      	bhi.n	800210a <HAL_ADC_ConfigChannel+0x86>
 80020d2:	a201      	add	r2, pc, #4	; (adr r2, 80020d8 <HAL_ADC_ConfigChannel+0x54>)
 80020d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d8:	080020e9 	.word	0x080020e9
 80020dc:	080020f1 	.word	0x080020f1
 80020e0:	080020f9 	.word	0x080020f9
 80020e4:	08002101 	.word	0x08002101
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	220c      	movs	r2, #12
 80020ec:	605a      	str	r2, [r3, #4]
          break;
 80020ee:	e011      	b.n	8002114 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2212      	movs	r2, #18
 80020f4:	605a      	str	r2, [r3, #4]
          break;
 80020f6:	e00d      	b.n	8002114 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2218      	movs	r2, #24
 80020fc:	605a      	str	r2, [r3, #4]
          break;
 80020fe:	e009      	b.n	8002114 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002106:	605a      	str	r2, [r3, #4]
          break;
 8002108:	e004      	b.n	8002114 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2206      	movs	r2, #6
 800210e:	605a      	str	r2, [r3, #4]
          break;
 8002110:	e000      	b.n	8002114 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002112:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	f7ff fd58 	bl	8001bd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fe2f 	bl	8001d8e <LL_ADC_REG_IsConversionOngoing>
 8002130:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fe3b 	bl	8001db4 <LL_ADC_INJ_IsConversionOngoing>
 800213e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002142:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 81a6 	bne.w	8002498 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800214c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 81a1 	bne.w	8002498 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6819      	ldr	r1, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	461a      	mov	r2, r3
 8002164:	f7ff fd63 	bl	8001c2e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	08db      	lsrs	r3, r3, #3
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b04      	cmp	r3, #4
 8002188:	d00a      	beq.n	80021a0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6919      	ldr	r1, [r3, #16]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800219a:	f7ff fcc7 	bl	8001b2c <LL_ADC_SetOffset>
 800219e:	e17b      	b.n	8002498 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fce4 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10a      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x148>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fcd9 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	0e9b      	lsrs	r3, r3, #26
 80021c6:	f003 021f 	and.w	r2, r3, #31
 80021ca:	e01e      	b.n	800220a <HAL_ADC_ConfigChannel+0x186>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fcce 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 80021ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 80021f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 80021fa:	2320      	movs	r3, #32
 80021fc:	e004      	b.n	8002208 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 80021fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x19e>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	e018      	b.n	8002254 <HAL_ADC_ConfigChannel+0x1d0>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800223a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800223e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e004      	b.n	8002254 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800224a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002254:	429a      	cmp	r2, r3
 8002256:	d106      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fc9d 	bl	8001ba0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2101      	movs	r1, #1
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fc81 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x20e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fc76 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 8002288:	4603      	mov	r3, r0
 800228a:	0e9b      	lsrs	r3, r3, #26
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	e01e      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x24c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2101      	movs	r1, #1
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fc6b 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e004      	b.n	80022ce <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80022c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x264>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0e9b      	lsrs	r3, r3, #26
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	e018      	b.n	800231a <HAL_ADC_ConfigChannel+0x296>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002304:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e004      	b.n	800231a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002310:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800231a:	429a      	cmp	r2, r3
 800231c:	d106      	bne.n	800232c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	2101      	movs	r1, #1
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fc3a 	bl	8001ba0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2102      	movs	r1, #2
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fc1e 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10a      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x2d4>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2102      	movs	r1, #2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fc13 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	f003 021f 	and.w	r2, r3, #31
 8002356:	e01e      	b.n	8002396 <HAL_ADC_ConfigChannel+0x312>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2102      	movs	r1, #2
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fc08 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800237a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800237e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002386:	2320      	movs	r3, #32
 8002388:	e004      	b.n	8002394 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800238a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x32a>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0e9b      	lsrs	r3, r3, #26
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	e016      	b.n	80023dc <HAL_ADC_ConfigChannel+0x358>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80023ce:	2320      	movs	r3, #32
 80023d0:	e004      	b.n	80023dc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80023d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023dc:	429a      	cmp	r2, r3
 80023de:	d106      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	2102      	movs	r1, #2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fbd9 	bl	8001ba0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2103      	movs	r1, #3
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fbbd 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <HAL_ADC_ConfigChannel+0x396>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2103      	movs	r1, #3
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fbb2 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 8002410:	4603      	mov	r3, r0
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	e017      	b.n	800244a <HAL_ADC_ConfigChannel+0x3c6>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2103      	movs	r1, #3
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fba7 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002434:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e003      	b.n	8002448 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x3de>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0e9b      	lsrs	r3, r3, #26
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	e011      	b.n	8002486 <HAL_ADC_ConfigChannel+0x402>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002472:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800247a:	2320      	movs	r3, #32
 800247c:	e003      	b.n	8002486 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800247e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002486:	429a      	cmp	r2, r3
 8002488:	d106      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2200      	movs	r2, #0
 8002490:	2103      	movs	r1, #3
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fb84 	bl	8001ba0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fc63 	bl	8001d68 <LL_ADC_IsEnabled>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f040 813f 	bne.w	8002728 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6819      	ldr	r1, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f7ff fbe4 	bl	8001c84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a8e      	ldr	r2, [pc, #568]	; (80026fc <HAL_ADC_ConfigChannel+0x678>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	f040 8130 	bne.w	8002728 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10b      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x46c>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0e9b      	lsrs	r3, r3, #26
 80024de:	3301      	adds	r3, #1
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2b09      	cmp	r3, #9
 80024e6:	bf94      	ite	ls
 80024e8:	2301      	movls	r3, #1
 80024ea:	2300      	movhi	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	e019      	b.n	8002524 <HAL_ADC_ConfigChannel+0x4a0>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002500:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002508:	2320      	movs	r3, #32
 800250a:	e003      	b.n	8002514 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800250c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3301      	adds	r3, #1
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2b09      	cmp	r3, #9
 800251c:	bf94      	ite	ls
 800251e:	2301      	movls	r3, #1
 8002520:	2300      	movhi	r3, #0
 8002522:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002524:	2b00      	cmp	r3, #0
 8002526:	d079      	beq.n	800261c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x4c0>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	3301      	adds	r3, #1
 800253c:	069b      	lsls	r3, r3, #26
 800253e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002542:	e015      	b.n	8002570 <HAL_ADC_ConfigChannel+0x4ec>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002554:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	e003      	b.n	8002568 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	3301      	adds	r3, #1
 800256a:	069b      	lsls	r3, r3, #26
 800256c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x50c>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0e9b      	lsrs	r3, r3, #26
 8002582:	3301      	adds	r3, #1
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	2101      	movs	r1, #1
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	e017      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x53c>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800259e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80025a8:	2320      	movs	r3, #32
 80025aa:	e003      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80025ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	ea42 0103 	orr.w	r1, r2, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x562>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	3301      	adds	r3, #1
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	051b      	lsls	r3, r3, #20
 80025e4:	e018      	b.n	8002618 <HAL_ADC_ConfigChannel+0x594>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80025fe:	2320      	movs	r3, #32
 8002600:	e003      	b.n	800260a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	3301      	adds	r3, #1
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002618:	430b      	orrs	r3, r1
 800261a:	e080      	b.n	800271e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x5b4>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	069b      	lsls	r3, r3, #26
 8002632:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002636:	e015      	b.n	8002664 <HAL_ADC_ConfigChannel+0x5e0>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002650:	2320      	movs	r3, #32
 8002652:	e003      	b.n	800265c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	069b      	lsls	r3, r3, #26
 8002660:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x600>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0e9b      	lsrs	r3, r3, #26
 8002676:	3301      	adds	r3, #1
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	e017      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x630>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	61fb      	str	r3, [r7, #28]
  return result;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800269c:	2320      	movs	r3, #32
 800269e:	e003      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	ea42 0103 	orr.w	r1, r2, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10d      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x65c>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	3301      	adds	r3, #1
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	3b1e      	subs	r3, #30
 80026d8:	051b      	lsls	r3, r3, #20
 80026da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026de:	e01d      	b.n	800271c <HAL_ADC_ConfigChannel+0x698>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	613b      	str	r3, [r7, #16]
  return result;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d103      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e005      	b.n	8002708 <HAL_ADC_ConfigChannel+0x684>
 80026fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	3301      	adds	r3, #1
 800270a:	f003 021f 	and.w	r2, r3, #31
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	3b1e      	subs	r3, #30
 8002716:	051b      	lsls	r3, r3, #20
 8002718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271c:	430b      	orrs	r3, r1
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	6892      	ldr	r2, [r2, #8]
 8002722:	4619      	mov	r1, r3
 8002724:	f7ff fa83 	bl	8001c2e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b43      	ldr	r3, [pc, #268]	; (800283c <HAL_ADC_ConfigChannel+0x7b8>)
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d079      	beq.n	8002828 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002734:	4842      	ldr	r0, [pc, #264]	; (8002840 <HAL_ADC_ConfigChannel+0x7bc>)
 8002736:	f7ff f9eb 	bl	8001b10 <LL_ADC_GetCommonPathInternalCh>
 800273a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a40      	ldr	r2, [pc, #256]	; (8002844 <HAL_ADC_ConfigChannel+0x7c0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d12b      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800274c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d125      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3b      	ldr	r2, [pc, #236]	; (8002848 <HAL_ADC_ConfigChannel+0x7c4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_ADC_ConfigChannel+0x6e4>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a3a      	ldr	r2, [pc, #232]	; (800284c <HAL_ADC_ConfigChannel+0x7c8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d15c      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800276c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002770:	4619      	mov	r1, r3
 8002772:	4833      	ldr	r0, [pc, #204]	; (8002840 <HAL_ADC_ConfigChannel+0x7bc>)
 8002774:	f7ff f9b9 	bl	8001aea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002778:	4b35      	ldr	r3, [pc, #212]	; (8002850 <HAL_ADC_ConfigChannel+0x7cc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	4a35      	ldr	r2, [pc, #212]	; (8002854 <HAL_ADC_ConfigChannel+0x7d0>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	099a      	lsrs	r2, r3, #6
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002790:	e002      	b.n	8002798 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3b01      	subs	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f9      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800279e:	e040      	b.n	8002822 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a2c      	ldr	r2, [pc, #176]	; (8002858 <HAL_ADC_ConfigChannel+0x7d4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d118      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x758>
 80027aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d112      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a23      	ldr	r2, [pc, #140]	; (8002848 <HAL_ADC_ConfigChannel+0x7c4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d004      	beq.n	80027ca <HAL_ADC_ConfigChannel+0x746>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a21      	ldr	r2, [pc, #132]	; (800284c <HAL_ADC_ConfigChannel+0x7c8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d12d      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d2:	4619      	mov	r1, r3
 80027d4:	481a      	ldr	r0, [pc, #104]	; (8002840 <HAL_ADC_ConfigChannel+0x7bc>)
 80027d6:	f7ff f988 	bl	8001aea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027da:	e024      	b.n	8002826 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1e      	ldr	r2, [pc, #120]	; (800285c <HAL_ADC_ConfigChannel+0x7d8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d120      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d11a      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a14      	ldr	r2, [pc, #80]	; (8002848 <HAL_ADC_ConfigChannel+0x7c4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d115      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002804:	4619      	mov	r1, r3
 8002806:	480e      	ldr	r0, [pc, #56]	; (8002840 <HAL_ADC_ConfigChannel+0x7bc>)
 8002808:	f7ff f96f 	bl	8001aea <LL_ADC_SetCommonPathInternalCh>
 800280c:	e00c      	b.n	8002828 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f043 0220 	orr.w	r2, r3, #32
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002820:	e002      	b.n	8002828 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002826:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002830:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002834:	4618      	mov	r0, r3
 8002836:	37d8      	adds	r7, #216	; 0xd8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	80080000 	.word	0x80080000
 8002840:	50040300 	.word	0x50040300
 8002844:	c7520000 	.word	0xc7520000
 8002848:	50040000 	.word	0x50040000
 800284c:	50040200 	.word	0x50040200
 8002850:	20000000 	.word	0x20000000
 8002854:	053e2d63 	.word	0x053e2d63
 8002858:	cb840000 	.word	0xcb840000
 800285c:	80000001 	.word	0x80000001

08002860 <LL_ADC_IsEnabled>:
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <LL_ADC_IsEnabled+0x18>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <LL_ADC_IsEnabled+0x1a>
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_ADC_REG_IsConversionOngoing>:
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b04      	cmp	r3, #4
 8002898:	d101      	bne.n	800289e <LL_ADC_REG_IsConversionOngoing+0x18>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b09f      	sub	sp, #124	; 0x7c
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e08f      	b.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a47      	ldr	r2, [pc, #284]	; (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d102      	bne.n	80028e2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80028dc:	4b46      	ldr	r3, [pc, #280]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	e001      	b.n	80028e6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10b      	bne.n	8002904 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e072      	b.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ffbd 	bl	8002886 <LL_ADC_REG_IsConversionOngoing>
 800290c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ffb7 	bl	8002886 <LL_ADC_REG_IsConversionOngoing>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d154      	bne.n	80029c8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800291e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002920:	2b00      	cmp	r3, #0
 8002922:	d151      	bne.n	80029c8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002924:	4b35      	ldr	r3, [pc, #212]	; (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002926:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d02c      	beq.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002942:	035b      	lsls	r3, r3, #13
 8002944:	430b      	orrs	r3, r1
 8002946:	431a      	orrs	r2, r3
 8002948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800294c:	4829      	ldr	r0, [pc, #164]	; (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800294e:	f7ff ff87 	bl	8002860 <LL_ADC_IsEnabled>
 8002952:	4604      	mov	r4, r0
 8002954:	4828      	ldr	r0, [pc, #160]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002956:	f7ff ff83 	bl	8002860 <LL_ADC_IsEnabled>
 800295a:	4603      	mov	r3, r0
 800295c:	431c      	orrs	r4, r3
 800295e:	4828      	ldr	r0, [pc, #160]	; (8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002960:	f7ff ff7e 	bl	8002860 <LL_ADC_IsEnabled>
 8002964:	4603      	mov	r3, r0
 8002966:	4323      	orrs	r3, r4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d137      	bne.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800296c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002974:	f023 030f 	bic.w	r3, r3, #15
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	6811      	ldr	r1, [r2, #0]
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	6892      	ldr	r2, [r2, #8]
 8002980:	430a      	orrs	r2, r1
 8002982:	431a      	orrs	r2, r3
 8002984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002986:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002988:	e028      	b.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800298a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002994:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002996:	4817      	ldr	r0, [pc, #92]	; (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002998:	f7ff ff62 	bl	8002860 <LL_ADC_IsEnabled>
 800299c:	4604      	mov	r4, r0
 800299e:	4816      	ldr	r0, [pc, #88]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80029a0:	f7ff ff5e 	bl	8002860 <LL_ADC_IsEnabled>
 80029a4:	4603      	mov	r3, r0
 80029a6:	431c      	orrs	r4, r3
 80029a8:	4815      	ldr	r0, [pc, #84]	; (8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029aa:	f7ff ff59 	bl	8002860 <LL_ADC_IsEnabled>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4323      	orrs	r3, r4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d112      	bne.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029be:	f023 030f 	bic.w	r3, r3, #15
 80029c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029c4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029c6:	e009      	b.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80029da:	e000      	b.n	80029de <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	377c      	adds	r7, #124	; 0x7c
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd90      	pop	{r4, r7, pc}
 80029f2:	bf00      	nop
 80029f4:	50040000 	.word	0x50040000
 80029f8:	50040100 	.word	0x50040100
 80029fc:	50040300 	.word	0x50040300
 8002a00:	50040200 	.word	0x50040200

08002a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a20:	4013      	ands	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a36:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	60d3      	str	r3, [r2, #12]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a50:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <__NVIC_GetPriorityGrouping+0x18>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	f003 0307 	and.w	r3, r3, #7
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	db0a      	blt.n	8002a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	490c      	ldr	r1, [pc, #48]	; (8002ab4 <__NVIC_SetPriority+0x4c>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a90:	e00a      	b.n	8002aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <__NVIC_SetPriority+0x50>)
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	3b04      	subs	r3, #4
 8002aa0:	0112      	lsls	r2, r2, #4
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	761a      	strb	r2, [r3, #24]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000e100 	.word	0xe000e100
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f1c3 0307 	rsb	r3, r3, #7
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	bf28      	it	cs
 8002ada:	2304      	movcs	r3, #4
 8002adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d902      	bls.n	8002aec <NVIC_EncodePriority+0x30>
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3b03      	subs	r3, #3
 8002aea:	e000      	b.n	8002aee <NVIC_EncodePriority+0x32>
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	401a      	ands	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43d9      	mvns	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b14:	4313      	orrs	r3, r2
         );
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3724      	adds	r7, #36	; 0x24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b34:	d301      	bcc.n	8002b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b36:	2301      	movs	r3, #1
 8002b38:	e00f      	b.n	8002b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <SysTick_Config+0x40>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b42:	210f      	movs	r1, #15
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b48:	f7ff ff8e 	bl	8002a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <SysTick_Config+0x40>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b52:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <SysTick_Config+0x40>)
 8002b54:	2207      	movs	r2, #7
 8002b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	e000e010 	.word	0xe000e010

08002b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ff47 	bl	8002a04 <__NVIC_SetPriorityGrouping>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b086      	sub	sp, #24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	4603      	mov	r3, r0
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b90:	f7ff ff5c 	bl	8002a4c <__NVIC_GetPriorityGrouping>
 8002b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	6978      	ldr	r0, [r7, #20]
 8002b9c:	f7ff ff8e 	bl	8002abc <NVIC_EncodePriority>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff5d 	bl	8002a68 <__NVIC_SetPriority>
}
 8002bae:	bf00      	nop
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff ffb0 	bl	8002b24 <SysTick_Config>
 8002bc4:	4603      	mov	r3, r0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b085      	sub	sp, #20
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d008      	beq.n	8002bf8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2204      	movs	r2, #4
 8002bea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e022      	b.n	8002c3e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 020e 	bic.w	r2, r2, #14
 8002c06:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f003 021c 	and.w	r2, r3, #28
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	2101      	movs	r1, #1
 8002c26:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c5a:	e17f      	b.n	8002f5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2101      	movs	r1, #1
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8171 	beq.w	8002f56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d00b      	beq.n	8002c94 <HAL_GPIO_Init+0x48>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d007      	beq.n	8002c94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c88:	2b11      	cmp	r3, #17
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b12      	cmp	r3, #18
 8002c92:	d130      	bne.n	8002cf6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cca:	2201      	movs	r2, #1
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f003 0201 	and.w	r2, r3, #1
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d118      	bne.n	8002d34 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	08db      	lsrs	r3, r3, #3
 8002d1e:	f003 0201 	and.w	r2, r3, #1
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x128>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b12      	cmp	r3, #18
 8002d72:	d123      	bne.n	8002dbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	08da      	lsrs	r2, r3, #3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3208      	adds	r2, #8
 8002d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	08da      	lsrs	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3208      	adds	r2, #8
 8002db6:	6939      	ldr	r1, [r7, #16]
 8002db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0203 	and.w	r2, r3, #3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80ac 	beq.w	8002f56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfe:	4b5e      	ldr	r3, [pc, #376]	; (8002f78 <HAL_GPIO_Init+0x32c>)
 8002e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e02:	4a5d      	ldr	r2, [pc, #372]	; (8002f78 <HAL_GPIO_Init+0x32c>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6613      	str	r3, [r2, #96]	; 0x60
 8002e0a:	4b5b      	ldr	r3, [pc, #364]	; (8002f78 <HAL_GPIO_Init+0x32c>)
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e16:	4a59      	ldr	r2, [pc, #356]	; (8002f7c <HAL_GPIO_Init+0x330>)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	220f      	movs	r2, #15
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e40:	d025      	beq.n	8002e8e <HAL_GPIO_Init+0x242>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4e      	ldr	r2, [pc, #312]	; (8002f80 <HAL_GPIO_Init+0x334>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01f      	beq.n	8002e8a <HAL_GPIO_Init+0x23e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4d      	ldr	r2, [pc, #308]	; (8002f84 <HAL_GPIO_Init+0x338>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d019      	beq.n	8002e86 <HAL_GPIO_Init+0x23a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4c      	ldr	r2, [pc, #304]	; (8002f88 <HAL_GPIO_Init+0x33c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_GPIO_Init+0x236>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4b      	ldr	r2, [pc, #300]	; (8002f8c <HAL_GPIO_Init+0x340>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00d      	beq.n	8002e7e <HAL_GPIO_Init+0x232>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4a      	ldr	r2, [pc, #296]	; (8002f90 <HAL_GPIO_Init+0x344>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <HAL_GPIO_Init+0x22e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a49      	ldr	r2, [pc, #292]	; (8002f94 <HAL_GPIO_Init+0x348>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d101      	bne.n	8002e76 <HAL_GPIO_Init+0x22a>
 8002e72:	2306      	movs	r3, #6
 8002e74:	e00c      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e76:	2307      	movs	r3, #7
 8002e78:	e00a      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e7a:	2305      	movs	r3, #5
 8002e7c:	e008      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e7e:	2304      	movs	r3, #4
 8002e80:	e006      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e82:	2303      	movs	r3, #3
 8002e84:	e004      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e002      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	f002 0203 	and.w	r2, r2, #3
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	4093      	lsls	r3, r2
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ea0:	4936      	ldr	r1, [pc, #216]	; (8002f7c <HAL_GPIO_Init+0x330>)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002eae:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ed2:	4a31      	ldr	r2, [pc, #196]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ed8:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002efc:	4a26      	ldr	r2, [pc, #152]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f02:	4b25      	ldr	r3, [pc, #148]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f26:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f2c:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f50:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	fa22 f303 	lsr.w	r3, r2, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f47f ae78 	bne.w	8002c5c <HAL_GPIO_Init+0x10>
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	48000400 	.word	0x48000400
 8002f84:	48000800 	.word	0x48000800
 8002f88:	48000c00 	.word	0x48000c00
 8002f8c:	48001000 	.word	0x48001000
 8002f90:	48001400 	.word	0x48001400
 8002f94:	48001800 	.word	0x48001800
 8002f98:	40010400 	.word	0x40010400

08002f9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002faa:	e0cd      	b.n	8003148 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002fac:	2201      	movs	r2, #1
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80c0 	beq.w	8003142 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002fc2:	4a68      	ldr	r2, [pc, #416]	; (8003164 <HAL_GPIO_DeInit+0x1c8>)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	220f      	movs	r2, #15
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fea:	d025      	beq.n	8003038 <HAL_GPIO_DeInit+0x9c>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a5e      	ldr	r2, [pc, #376]	; (8003168 <HAL_GPIO_DeInit+0x1cc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d01f      	beq.n	8003034 <HAL_GPIO_DeInit+0x98>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a5d      	ldr	r2, [pc, #372]	; (800316c <HAL_GPIO_DeInit+0x1d0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d019      	beq.n	8003030 <HAL_GPIO_DeInit+0x94>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a5c      	ldr	r2, [pc, #368]	; (8003170 <HAL_GPIO_DeInit+0x1d4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d013      	beq.n	800302c <HAL_GPIO_DeInit+0x90>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a5b      	ldr	r2, [pc, #364]	; (8003174 <HAL_GPIO_DeInit+0x1d8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00d      	beq.n	8003028 <HAL_GPIO_DeInit+0x8c>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a5a      	ldr	r2, [pc, #360]	; (8003178 <HAL_GPIO_DeInit+0x1dc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d007      	beq.n	8003024 <HAL_GPIO_DeInit+0x88>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a59      	ldr	r2, [pc, #356]	; (800317c <HAL_GPIO_DeInit+0x1e0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d101      	bne.n	8003020 <HAL_GPIO_DeInit+0x84>
 800301c:	2306      	movs	r3, #6
 800301e:	e00c      	b.n	800303a <HAL_GPIO_DeInit+0x9e>
 8003020:	2307      	movs	r3, #7
 8003022:	e00a      	b.n	800303a <HAL_GPIO_DeInit+0x9e>
 8003024:	2305      	movs	r3, #5
 8003026:	e008      	b.n	800303a <HAL_GPIO_DeInit+0x9e>
 8003028:	2304      	movs	r3, #4
 800302a:	e006      	b.n	800303a <HAL_GPIO_DeInit+0x9e>
 800302c:	2303      	movs	r3, #3
 800302e:	e004      	b.n	800303a <HAL_GPIO_DeInit+0x9e>
 8003030:	2302      	movs	r3, #2
 8003032:	e002      	b.n	800303a <HAL_GPIO_DeInit+0x9e>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <HAL_GPIO_DeInit+0x9e>
 8003038:	2300      	movs	r3, #0
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	f002 0203 	and.w	r2, r2, #3
 8003040:	0092      	lsls	r2, r2, #2
 8003042:	4093      	lsls	r3, r2
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	429a      	cmp	r2, r3
 8003048:	d132      	bne.n	80030b0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800304a:	4b4d      	ldr	r3, [pc, #308]	; (8003180 <HAL_GPIO_DeInit+0x1e4>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	43db      	mvns	r3, r3
 8003052:	494b      	ldr	r1, [pc, #300]	; (8003180 <HAL_GPIO_DeInit+0x1e4>)
 8003054:	4013      	ands	r3, r2
 8003056:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003058:	4b49      	ldr	r3, [pc, #292]	; (8003180 <HAL_GPIO_DeInit+0x1e4>)
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	4947      	ldr	r1, [pc, #284]	; (8003180 <HAL_GPIO_DeInit+0x1e4>)
 8003062:	4013      	ands	r3, r2
 8003064:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003066:	4b46      	ldr	r3, [pc, #280]	; (8003180 <HAL_GPIO_DeInit+0x1e4>)
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	4944      	ldr	r1, [pc, #272]	; (8003180 <HAL_GPIO_DeInit+0x1e4>)
 8003070:	4013      	ands	r3, r2
 8003072:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003074:	4b42      	ldr	r3, [pc, #264]	; (8003180 <HAL_GPIO_DeInit+0x1e4>)
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	4940      	ldr	r1, [pc, #256]	; (8003180 <HAL_GPIO_DeInit+0x1e4>)
 800307e:	4013      	ands	r3, r2
 8003080:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	220f      	movs	r2, #15
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003092:	4a34      	ldr	r2, [pc, #208]	; (8003164 <HAL_GPIO_DeInit+0x1c8>)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	43da      	mvns	r2, r3
 80030a2:	4830      	ldr	r0, [pc, #192]	; (8003164 <HAL_GPIO_DeInit+0x1c8>)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	400a      	ands	r2, r1
 80030aa:	3302      	adds	r3, #2
 80030ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	2103      	movs	r1, #3
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	08da      	lsrs	r2, r3, #3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3208      	adds	r2, #8
 80030cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	220f      	movs	r2, #15
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	08d2      	lsrs	r2, r2, #3
 80030e4:	4019      	ands	r1, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3208      	adds	r2, #8
 80030ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2103      	movs	r1, #3
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	2101      	movs	r1, #1
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	401a      	ands	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	2103      	movs	r1, #3
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	401a      	ands	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003132:	2101      	movs	r1, #1
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	401a      	ands	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	3301      	adds	r3, #1
 8003146:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	f47f af2b 	bne.w	8002fac <HAL_GPIO_DeInit+0x10>
  }
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40010000 	.word	0x40010000
 8003168:	48000400 	.word	0x48000400
 800316c:	48000800 	.word	0x48000800
 8003170:	48000c00 	.word	0x48000c00
 8003174:	48001000 	.word	0x48001000
 8003178:	48001400 	.word	0x48001400
 800317c:	48001800 	.word	0x48001800
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
 8003190:	4613      	mov	r3, r2
 8003192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003194:	787b      	ldrb	r3, [r7, #1]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800319a:	887a      	ldrh	r2, [r7, #2]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031a0:	e002      	b.n	80031a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031a2:	887a      	ldrh	r2, [r7, #2]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c2:	6013      	str	r3, [r2, #0]
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40007000 	.word	0x40007000

080031d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <HAL_PWREx_GetVoltageRange+0x18>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40007000 	.word	0x40007000

080031f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fe:	d130      	bne.n	8003262 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003200:	4b23      	ldr	r3, [pc, #140]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320c:	d038      	beq.n	8003280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003216:	4a1e      	ldr	r2, [pc, #120]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003218:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800321c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800321e:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2232      	movs	r2, #50	; 0x32
 8003224:	fb02 f303 	mul.w	r3, r2, r3
 8003228:	4a1b      	ldr	r2, [pc, #108]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0c9b      	lsrs	r3, r3, #18
 8003230:	3301      	adds	r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003234:	e002      	b.n	800323c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3b01      	subs	r3, #1
 800323a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800323c:	4b14      	ldr	r3, [pc, #80]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003248:	d102      	bne.n	8003250 <HAL_PWREx_ControlVoltageScaling+0x60>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f2      	bne.n	8003236 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325c:	d110      	bne.n	8003280 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e00f      	b.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800326a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326e:	d007      	beq.n	8003280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003270:	4b07      	ldr	r3, [pc, #28]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003278:	4a05      	ldr	r2, [pc, #20]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800327e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40007000 	.word	0x40007000
 8003294:	20000000 	.word	0x20000000
 8003298:	431bde83 	.word	0x431bde83

0800329c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80032a4:	f7fe fbe0 	bl	8001a68 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e063      	b.n	800337c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10b      	bne.n	80032d8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7fd fd5b 	bl	8000d84 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80032ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 faf7 	bl	80038c6 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	021a      	lsls	r2, r3, #8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	2120      	movs	r1, #32
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 faef 	bl	80038e2 <QSPI_WaitFlagStateUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003308:	7afb      	ldrb	r3, [r7, #11]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d131      	bne.n	8003372 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003318:	f023 0310 	bic.w	r3, r3, #16
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6852      	ldr	r2, [r2, #4]
 8003320:	0611      	lsls	r1, r2, #24
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68d2      	ldr	r2, [r2, #12]
 8003326:	4311      	orrs	r1, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	430b      	orrs	r3, r1
 800332e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	4b13      	ldr	r3, [pc, #76]	; (8003384 <HAL_QSPI_Init+0xe8>)
 8003338:	4013      	ands	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6912      	ldr	r2, [r2, #16]
 800333e:	0411      	lsls	r1, r2, #16
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6952      	ldr	r2, [r2, #20]
 8003344:	4311      	orrs	r1, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6992      	ldr	r2, [r2, #24]
 800334a:	4311      	orrs	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	430b      	orrs	r3, r1
 8003352:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800337a:	7afb      	ldrb	r3, [r7, #11]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	ffe0f8fe 	.word	0xffe0f8fe

08003388 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e016      	b.n	80033c8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fd fd2e 	bl	8000e0c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80033dc:	f7fe fb44 	bl	8001a68 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_QSPI_Command+0x22>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e048      	b.n	8003484 <HAL_QSPI_Command+0xb4>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d137      	bne.n	8003476 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2200      	movs	r2, #0
 800341c:	2120      	movs	r1, #32
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 fa5f 	bl	80038e2 <QSPI_WaitFlagStateUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d125      	bne.n	800347a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800342e:	2200      	movs	r2, #0
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 fa8c 	bl	8003950 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	2b00      	cmp	r3, #0
 800343e:	d115      	bne.n	800346c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2201      	movs	r2, #1
 8003448:	2102      	movs	r1, #2
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fa49 	bl	80038e2 <QSPI_WaitFlagStateUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003454:	7dfb      	ldrb	r3, [r7, #23]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10f      	bne.n	800347a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2202      	movs	r2, #2
 8003460:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800346a:	e006      	b.n	800347a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003474:	e001      	b.n	800347a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003476:	2302      	movs	r3, #2
 8003478:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003482:	7dfb      	ldrb	r3, [r7, #23]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800349c:	f7fe fae4 	bl	8001a68 <HAL_GetTick>
 80034a0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3320      	adds	r3, #32
 80034a8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_QSPI_Transmit+0x2e>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e07b      	b.n	80035b2 <HAL_QSPI_Transmit+0x126>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d16a      	bne.n	80035a4 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d05b      	beq.n	8003592 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2212      	movs	r2, #18
 80034de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800350e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003510:	e01b      	b.n	800354a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2201      	movs	r2, #1
 800351a:	2104      	movs	r1, #4
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f9e0 	bl	80038e2 <QSPI_WaitFlagStateUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003526:	7ffb      	ldrb	r3, [r7, #31]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d113      	bne.n	8003554 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	781a      	ldrb	r2, [r3, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	1e5a      	subs	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1df      	bne.n	8003512 <HAL_QSPI_Transmit+0x86>
 8003552:	e000      	b.n	8003556 <HAL_QSPI_Transmit+0xca>
          break;
 8003554:	bf00      	nop
      }

      if (status == HAL_OK)
 8003556:	7ffb      	ldrb	r3, [r7, #31]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d115      	bne.n	8003588 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2201      	movs	r2, #1
 8003564:	2102      	movs	r1, #2
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f9bb 	bl	80038e2 <QSPI_WaitFlagStateUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003570:	7ffb      	ldrb	r3, [r7, #31]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d108      	bne.n	8003588 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2202      	movs	r2, #2
 800357c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f934 	bl	80037ec <HAL_QSPI_Abort>
 8003584:	4603      	mov	r3, r0
 8003586:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003590:	e00a      	b.n	80035a8 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	f043 0208 	orr.w	r2, r3, #8
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	77fb      	strb	r3, [r7, #31]
 80035a2:	e001      	b.n	80035a8 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
 80035a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80035b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b08a      	sub	sp, #40	; 0x28
 80035be:	af02      	add	r7, sp, #8
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80035ca:	f7fe fa4d 	bl	8001a68 <HAL_GetTick>
 80035ce:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3320      	adds	r3, #32
 80035de:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_QSPI_Receive+0x36>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e082      	b.n	80036f6 <HAL_QSPI_Receive+0x13c>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d171      	bne.n	80036e8 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d062      	beq.n	80036d6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2222      	movs	r2, #34	; 0x22
 8003614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003648:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003652:	e01c      	b.n	800368e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2201      	movs	r2, #1
 800365c:	2106      	movs	r1, #6
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f93f 	bl	80038e2 <QSPI_WaitFlagStateUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003668:	7ffb      	ldrb	r3, [r7, #31]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d114      	bne.n	8003698 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	1e5a      	subs	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1de      	bne.n	8003654 <HAL_QSPI_Receive+0x9a>
 8003696:	e000      	b.n	800369a <HAL_QSPI_Receive+0xe0>
          break;
 8003698:	bf00      	nop
      }

      if (status == HAL_OK)
 800369a:	7ffb      	ldrb	r3, [r7, #31]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d115      	bne.n	80036cc <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2201      	movs	r2, #1
 80036a8:	2102      	movs	r1, #2
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f919 	bl	80038e2 <QSPI_WaitFlagStateUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80036b4:	7ffb      	ldrb	r3, [r7, #31]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d108      	bne.n	80036cc <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2202      	movs	r2, #2
 80036c0:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f892 	bl	80037ec <HAL_QSPI_Abort>
 80036c8:	4603      	mov	r3, r0
 80036ca:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80036d4:	e00a      	b.n	80036ec <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036da:	f043 0208 	orr.w	r2, r3, #8
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	77fb      	strb	r3, [r7, #31]
 80036e6:	e001      	b.n	80036ec <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
 80036ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80036f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b088      	sub	sp, #32
 8003702:	af02      	add	r7, sp, #8
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800370c:	f7fe f9ac 	bl	8001a68 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_QSPI_AutoPolling+0x24>
 800371e:	2302      	movs	r3, #2
 8003720:	e060      	b.n	80037e4 <HAL_QSPI_AutoPolling+0xe6>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d14f      	bne.n	80037d6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2242      	movs	r2, #66	; 0x42
 8003740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2200      	movs	r2, #0
 800374c:	2120      	movs	r1, #32
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f8c7 	bl	80038e2 <QSPI_WaitFlagStateUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d13d      	bne.n	80037da <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6852      	ldr	r2, [r2, #4]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6892      	ldr	r2, [r2, #8]
 800377a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	431a      	orrs	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003794:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800379e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f8d3 	bl	8003950 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2201      	movs	r2, #1
 80037b2:	2108      	movs	r1, #8
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f894 	bl	80038e2 <QSPI_WaitFlagStateUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80037be:	7dfb      	ldrb	r3, [r7, #23]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2208      	movs	r2, #8
 80037ca:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80037d4:	e001      	b.n	80037da <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
 80037d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80037f8:	f7fe f936 	bl	8001a68 <HAL_GetTick>
 80037fc:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d056      	beq.n	80038bc <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d017      	beq.n	8003854 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0204 	bic.w	r2, r2, #4
 8003832:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff f9c8 	bl	8002bce <HAL_DMA_Abort>
 800383e:	4603      	mov	r3, r0
 8003840:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384c:	f043 0204 	orr.w	r2, r3, #4
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0202 	orr.w	r2, r2, #2
 8003862:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2201      	movs	r2, #1
 800386e:	2102      	movs	r1, #2
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f836 	bl	80038e2 <QSPI_WaitFlagStateUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10e      	bne.n	800389e <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2202      	movs	r2, #2
 8003886:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2200      	movs	r2, #0
 8003892:	2120      	movs	r1, #32
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f824 	bl	80038e2 <QSPI_WaitFlagStateUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80038b2:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80038f2:	e01a      	b.n	800392a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038fa:	d016      	beq.n	800392a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fc:	f7fe f8b4 	bl	8001a68 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	429a      	cmp	r2, r3
 800390a:	d302      	bcc.n	8003912 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2204      	movs	r2, #4
 8003916:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391e:	f043 0201 	orr.w	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e00e      	b.n	8003948 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	429a      	cmp	r2, r3
 8003944:	d1d6      	bne.n	80038f4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	2b00      	cmp	r3, #0
 8003962:	d009      	beq.n	8003978 <QSPI_Config+0x28>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800396a:	d005      	beq.n	8003978 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3a01      	subs	r2, #1
 8003976:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80b9 	beq.w	8003af4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d05f      	beq.n	8003a4a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	6892      	ldr	r2, [r2, #8]
 8003992:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d031      	beq.n	8003a00 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	431a      	orrs	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	431a      	orrs	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	431a      	orrs	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	049b      	lsls	r3, r3, #18
 80039b8:	431a      	orrs	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	431a      	orrs	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	ea42 0103 	orr.w	r1, r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80039f0:	f000 812e 	beq.w	8003c50 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	6852      	ldr	r2, [r2, #4]
 80039fc:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80039fe:	e127      	b.n	8003c50 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	049b      	lsls	r3, r3, #18
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	ea42 0103 	orr.w	r1, r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	615a      	str	r2, [r3, #20]
}
 8003a48:	e102      	b.n	8003c50 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d02e      	beq.n	8003ab0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	431a      	orrs	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	049b      	lsls	r3, r3, #18
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	ea42 0103 	orr.w	r1, r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003aa0:	f000 80d6 	beq.w	8003c50 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	6852      	ldr	r2, [r2, #4]
 8003aac:	619a      	str	r2, [r3, #24]
}
 8003aae:	e0cf      	b.n	8003c50 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	049b      	lsls	r3, r3, #18
 8003acc:	431a      	orrs	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	ea42 0103 	orr.w	r1, r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	615a      	str	r2, [r3, #20]
}
 8003af2:	e0ad      	b.n	8003c50 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d058      	beq.n	8003bae <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	6892      	ldr	r2, [r2, #8]
 8003b04:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d02d      	beq.n	8003b6a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	431a      	orrs	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	431a      	orrs	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	049b      	lsls	r3, r3, #18
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	ea42 0103 	orr.w	r1, r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003b5c:	d078      	beq.n	8003c50 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	6852      	ldr	r2, [r2, #4]
 8003b66:	619a      	str	r2, [r3, #24]
}
 8003b68:	e072      	b.n	8003c50 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	431a      	orrs	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	049b      	lsls	r3, r3, #18
 8003b86:	431a      	orrs	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	ea42 0103 	orr.w	r1, r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	615a      	str	r2, [r3, #20]
}
 8003bac:	e050      	b.n	8003c50 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d02a      	beq.n	8003c0c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	049b      	lsls	r3, r3, #18
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	ea42 0103 	orr.w	r1, r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bfe:	d027      	beq.n	8003c50 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	6852      	ldr	r2, [r2, #4]
 8003c08:	619a      	str	r2, [r3, #24]
}
 8003c0a:	e021      	b.n	8003c50 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01d      	beq.n	8003c50 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c22:	431a      	orrs	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	049b      	lsls	r3, r3, #18
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	ea42 0103 	orr.w	r1, r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	615a      	str	r2, [r3, #20]
}
 8003c50:	bf00      	nop
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e3d4      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c6e:	4ba1      	ldr	r3, [pc, #644]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c78:	4b9e      	ldr	r3, [pc, #632]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80e4 	beq.w	8003e58 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x4a>
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b0c      	cmp	r3, #12
 8003c9a:	f040 808b 	bne.w	8003db4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	f040 8087 	bne.w	8003db4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ca6:	4b93      	ldr	r3, [pc, #588]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_RCC_OscConfig+0x62>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e3ac      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1a      	ldr	r2, [r3, #32]
 8003cc2:	4b8c      	ldr	r3, [pc, #560]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d004      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x7c>
 8003cce:	4b89      	ldr	r3, [pc, #548]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd6:	e005      	b.n	8003ce4 <HAL_RCC_OscConfig+0x88>
 8003cd8:	4b86      	ldr	r3, [pc, #536]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d223      	bcs.n	8003d30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fd3f 	bl	8004770 <RCC_SetFlashLatencyFromMSIRange>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e38d      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cfc:	4b7d      	ldr	r3, [pc, #500]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a7c      	ldr	r2, [pc, #496]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003d02:	f043 0308 	orr.w	r3, r3, #8
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	4b7a      	ldr	r3, [pc, #488]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	4977      	ldr	r1, [pc, #476]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d1a:	4b76      	ldr	r3, [pc, #472]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	4972      	ldr	r1, [pc, #456]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
 8003d2e:	e025      	b.n	8003d7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d30:	4b70      	ldr	r3, [pc, #448]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a6f      	ldr	r2, [pc, #444]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003d36:	f043 0308 	orr.w	r3, r3, #8
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	4b6d      	ldr	r3, [pc, #436]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	496a      	ldr	r1, [pc, #424]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d4e:	4b69      	ldr	r3, [pc, #420]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	4965      	ldr	r1, [pc, #404]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fcff 	bl	8004770 <RCC_SetFlashLatencyFromMSIRange>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e34d      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d7c:	f000 fc36 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 8003d80:	4601      	mov	r1, r0
 8003d82:	4b5c      	ldr	r3, [pc, #368]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	091b      	lsrs	r3, r3, #4
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	4a5a      	ldr	r2, [pc, #360]	; (8003ef8 <HAL_RCC_OscConfig+0x29c>)
 8003d8e:	5cd3      	ldrb	r3, [r2, r3]
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	fa21 f303 	lsr.w	r3, r1, r3
 8003d98:	4a58      	ldr	r2, [pc, #352]	; (8003efc <HAL_RCC_OscConfig+0x2a0>)
 8003d9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d9c:	4b58      	ldr	r3, [pc, #352]	; (8003f00 <HAL_RCC_OscConfig+0x2a4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fd fe11 	bl	80019c8 <HAL_InitTick>
 8003da6:	4603      	mov	r3, r0
 8003da8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d052      	beq.n	8003e56 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	e331      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d032      	beq.n	8003e22 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dbc:	4b4d      	ldr	r3, [pc, #308]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a4c      	ldr	r2, [pc, #304]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dc8:	f7fd fe4e 	bl	8001a68 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dd0:	f7fd fe4a 	bl	8001a68 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e31a      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003de2:	4b44      	ldr	r3, [pc, #272]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dee:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a40      	ldr	r2, [pc, #256]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003df4:	f043 0308 	orr.w	r3, r3, #8
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	493b      	ldr	r1, [pc, #236]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e0c:	4b39      	ldr	r3, [pc, #228]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	4936      	ldr	r1, [pc, #216]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
 8003e20:	e01a      	b.n	8003e58 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e22:	4b34      	ldr	r3, [pc, #208]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a33      	ldr	r2, [pc, #204]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e2e:	f7fd fe1b 	bl	8001a68 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e36:	f7fd fe17 	bl	8001a68 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e2e7      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e48:	4b2a      	ldr	r3, [pc, #168]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x1da>
 8003e54:	e000      	b.n	8003e58 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e56:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d074      	beq.n	8003f4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d005      	beq.n	8003e76 <HAL_RCC_OscConfig+0x21a>
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b0c      	cmp	r3, #12
 8003e6e:	d10e      	bne.n	8003e8e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d10b      	bne.n	8003e8e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e76:	4b1f      	ldr	r3, [pc, #124]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d064      	beq.n	8003f4c <HAL_RCC_OscConfig+0x2f0>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d160      	bne.n	8003f4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e2c4      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e96:	d106      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x24a>
 8003e98:	4b16      	ldr	r3, [pc, #88]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a15      	ldr	r2, [pc, #84]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	e01d      	b.n	8003ee2 <HAL_RCC_OscConfig+0x286>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eae:	d10c      	bne.n	8003eca <HAL_RCC_OscConfig+0x26e>
 8003eb0:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a0f      	ldr	r2, [pc, #60]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003eb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	e00b      	b.n	8003ee2 <HAL_RCC_OscConfig+0x286>
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b07      	ldr	r3, [pc, #28]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a06      	ldr	r2, [pc, #24]	; (8003ef4 <HAL_RCC_OscConfig+0x298>)
 8003edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ee0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01c      	beq.n	8003f24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eea:	f7fd fdbd 	bl	8001a68 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ef0:	e011      	b.n	8003f16 <HAL_RCC_OscConfig+0x2ba>
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	080073c4 	.word	0x080073c4
 8003efc:	20000000 	.word	0x20000000
 8003f00:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fd fdb0 	bl	8001a68 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e280      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f16:	4baf      	ldr	r3, [pc, #700]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x2a8>
 8003f22:	e014      	b.n	8003f4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fd fda0 	bl	8001a68 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f2c:	f7fd fd9c 	bl	8001a68 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e26c      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f3e:	4ba5      	ldr	r3, [pc, #660]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x2d0>
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d060      	beq.n	800401c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d005      	beq.n	8003f6c <HAL_RCC_OscConfig+0x310>
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b0c      	cmp	r3, #12
 8003f64:	d119      	bne.n	8003f9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d116      	bne.n	8003f9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f6c:	4b99      	ldr	r3, [pc, #612]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_OscConfig+0x328>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e249      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f84:	4b93      	ldr	r3, [pc, #588]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	4990      	ldr	r1, [pc, #576]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f98:	e040      	b.n	800401c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d023      	beq.n	8003fea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa2:	4b8c      	ldr	r3, [pc, #560]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a8b      	ldr	r2, [pc, #556]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8003fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fae:	f7fd fd5b 	bl	8001a68 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb6:	f7fd fd57 	bl	8001a68 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e227      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fc8:	4b82      	ldr	r3, [pc, #520]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd4:	4b7f      	ldr	r3, [pc, #508]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	061b      	lsls	r3, r3, #24
 8003fe2:	497c      	ldr	r1, [pc, #496]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
 8003fe8:	e018      	b.n	800401c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fea:	4b7a      	ldr	r3, [pc, #488]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a79      	ldr	r2, [pc, #484]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8003ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff6:	f7fd fd37 	bl	8001a68 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ffe:	f7fd fd33 	bl	8001a68 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e203      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004010:	4b70      	ldr	r3, [pc, #448]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d03c      	beq.n	80040a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01c      	beq.n	800406a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004030:	4b68      	ldr	r3, [pc, #416]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8004032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004036:	4a67      	ldr	r2, [pc, #412]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004040:	f7fd fd12 	bl	8001a68 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004048:	f7fd fd0e 	bl	8001a68 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e1de      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800405a:	4b5e      	ldr	r3, [pc, #376]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 800405c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ef      	beq.n	8004048 <HAL_RCC_OscConfig+0x3ec>
 8004068:	e01b      	b.n	80040a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800406a:	4b5a      	ldr	r3, [pc, #360]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 800406c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004070:	4a58      	ldr	r2, [pc, #352]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8004072:	f023 0301 	bic.w	r3, r3, #1
 8004076:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407a:	f7fd fcf5 	bl	8001a68 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004082:	f7fd fcf1 	bl	8001a68 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e1c1      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004094:	4b4f      	ldr	r3, [pc, #316]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8004096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1ef      	bne.n	8004082 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80a6 	beq.w	80041fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b0:	2300      	movs	r3, #0
 80040b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040b4:	4b47      	ldr	r3, [pc, #284]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10d      	bne.n	80040dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c0:	4b44      	ldr	r3, [pc, #272]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 80040c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c4:	4a43      	ldr	r2, [pc, #268]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 80040c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ca:	6593      	str	r3, [r2, #88]	; 0x58
 80040cc:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d8:	2301      	movs	r3, #1
 80040da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040dc:	4b3e      	ldr	r3, [pc, #248]	; (80041d8 <HAL_RCC_OscConfig+0x57c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d118      	bne.n	800411a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040e8:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <HAL_RCC_OscConfig+0x57c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a3a      	ldr	r2, [pc, #232]	; (80041d8 <HAL_RCC_OscConfig+0x57c>)
 80040ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040f4:	f7fd fcb8 	bl	8001a68 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040fc:	f7fd fcb4 	bl	8001a68 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e184      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800410e:	4b32      	ldr	r3, [pc, #200]	; (80041d8 <HAL_RCC_OscConfig+0x57c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d108      	bne.n	8004134 <HAL_RCC_OscConfig+0x4d8>
 8004122:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	4a2a      	ldr	r2, [pc, #168]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004132:	e024      	b.n	800417e <HAL_RCC_OscConfig+0x522>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b05      	cmp	r3, #5
 800413a:	d110      	bne.n	800415e <HAL_RCC_OscConfig+0x502>
 800413c:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004142:	4a24      	ldr	r2, [pc, #144]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8004144:	f043 0304 	orr.w	r3, r3, #4
 8004148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800414c:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	4a20      	ldr	r2, [pc, #128]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800415c:	e00f      	b.n	800417e <HAL_RCC_OscConfig+0x522>
 800415e:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800416e:	4b19      	ldr	r3, [pc, #100]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004174:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 8004176:	f023 0304 	bic.w	r3, r3, #4
 800417a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d016      	beq.n	80041b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004186:	f7fd fc6f 	bl	8001a68 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800418c:	e00a      	b.n	80041a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418e:	f7fd fc6b 	bl	8001a68 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f241 3288 	movw	r2, #5000	; 0x1388
 800419c:	4293      	cmp	r3, r2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e139      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_RCC_OscConfig+0x578>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0ed      	beq.n	800418e <HAL_RCC_OscConfig+0x532>
 80041b2:	e01a      	b.n	80041ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fd fc58 	bl	8001a68 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041ba:	e00f      	b.n	80041dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041bc:	f7fd fc54 	bl	8001a68 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d906      	bls.n	80041dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e122      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041dc:	4b90      	ldr	r3, [pc, #576]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e8      	bne.n	80041bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041ea:	7ffb      	ldrb	r3, [r7, #31]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d105      	bne.n	80041fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f0:	4b8b      	ldr	r3, [pc, #556]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	4a8a      	ldr	r2, [pc, #552]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80041f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 8108 	beq.w	8004416 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	2b02      	cmp	r3, #2
 800420c:	f040 80d0 	bne.w	80043b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004210:	4b83      	ldr	r3, [pc, #524]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f003 0203 	and.w	r2, r3, #3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	429a      	cmp	r2, r3
 8004222:	d130      	bne.n	8004286 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	3b01      	subs	r3, #1
 8004230:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004232:	429a      	cmp	r2, r3
 8004234:	d127      	bne.n	8004286 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004240:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004242:	429a      	cmp	r2, r3
 8004244:	d11f      	bne.n	8004286 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004250:	2a07      	cmp	r2, #7
 8004252:	bf14      	ite	ne
 8004254:	2201      	movne	r2, #1
 8004256:	2200      	moveq	r2, #0
 8004258:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800425a:	4293      	cmp	r3, r2
 800425c:	d113      	bne.n	8004286 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	3b01      	subs	r3, #1
 800426c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d109      	bne.n	8004286 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	3b01      	subs	r3, #1
 8004280:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d06e      	beq.n	8004364 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b0c      	cmp	r3, #12
 800428a:	d069      	beq.n	8004360 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800428c:	4b64      	ldr	r3, [pc, #400]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d105      	bne.n	80042a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004298:	4b61      	ldr	r3, [pc, #388]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0b7      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042a8:	4b5d      	ldr	r3, [pc, #372]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a5c      	ldr	r2, [pc, #368]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80042ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042b4:	f7fd fbd8 	bl	8001a68 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fd fbd4 	bl	8001a68 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e0a4      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ce:	4b54      	ldr	r3, [pc, #336]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042da:	4b51      	ldr	r3, [pc, #324]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	4b51      	ldr	r3, [pc, #324]	; (8004424 <HAL_RCC_OscConfig+0x7c8>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042ea:	3a01      	subs	r2, #1
 80042ec:	0112      	lsls	r2, r2, #4
 80042ee:	4311      	orrs	r1, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042f4:	0212      	lsls	r2, r2, #8
 80042f6:	4311      	orrs	r1, r2
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042fc:	0852      	lsrs	r2, r2, #1
 80042fe:	3a01      	subs	r2, #1
 8004300:	0552      	lsls	r2, r2, #21
 8004302:	4311      	orrs	r1, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004308:	0852      	lsrs	r2, r2, #1
 800430a:	3a01      	subs	r2, #1
 800430c:	0652      	lsls	r2, r2, #25
 800430e:	4311      	orrs	r1, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004314:	0912      	lsrs	r2, r2, #4
 8004316:	0452      	lsls	r2, r2, #17
 8004318:	430a      	orrs	r2, r1
 800431a:	4941      	ldr	r1, [pc, #260]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 800431c:	4313      	orrs	r3, r2
 800431e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004320:	4b3f      	ldr	r3, [pc, #252]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a3e      	ldr	r2, [pc, #248]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 8004326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800432c:	4b3c      	ldr	r3, [pc, #240]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a3b      	ldr	r2, [pc, #236]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 8004332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004336:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004338:	f7fd fb96 	bl	8001a68 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004340:	f7fd fb92 	bl	8001a68 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e062      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004352:	4b33      	ldr	r3, [pc, #204]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800435e:	e05a      	b.n	8004416 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e059      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004364:	4b2e      	ldr	r3, [pc, #184]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d152      	bne.n	8004416 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004370:	4b2b      	ldr	r3, [pc, #172]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2a      	ldr	r2, [pc, #168]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 8004376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800437a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800437c:	4b28      	ldr	r3, [pc, #160]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a27      	ldr	r2, [pc, #156]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 8004382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004386:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004388:	f7fd fb6e 	bl	8001a68 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004390:	f7fd fb6a 	bl	8001a68 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e03a      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a2:	4b1f      	ldr	r3, [pc, #124]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0x734>
 80043ae:	e032      	b.n	8004416 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	d02d      	beq.n	8004412 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b6:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a19      	ldr	r2, [pc, #100]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80043bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043c0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80043c2:	4b17      	ldr	r3, [pc, #92]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d105      	bne.n	80043da <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043ce:	4b14      	ldr	r3, [pc, #80]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	4a13      	ldr	r2, [pc, #76]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80043d4:	f023 0303 	bic.w	r3, r3, #3
 80043d8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043da:	4b11      	ldr	r3, [pc, #68]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4a10      	ldr	r2, [pc, #64]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 80043e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ea:	f7fd fb3d 	bl	8001a68 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f2:	f7fd fb39 	bl	8001a68 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e009      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_RCC_OscConfig+0x7c4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <HAL_RCC_OscConfig+0x796>
 8004410:	e001      	b.n	8004416 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3720      	adds	r7, #32
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40021000 	.word	0x40021000
 8004424:	f99d808c 	.word	0xf99d808c

08004428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0c8      	b.n	80045ce <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800443c:	4b66      	ldr	r3, [pc, #408]	; (80045d8 <HAL_RCC_ClockConfig+0x1b0>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d910      	bls.n	800446c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444a:	4b63      	ldr	r3, [pc, #396]	; (80045d8 <HAL_RCC_ClockConfig+0x1b0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f023 0207 	bic.w	r2, r3, #7
 8004452:	4961      	ldr	r1, [pc, #388]	; (80045d8 <HAL_RCC_ClockConfig+0x1b0>)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445a:	4b5f      	ldr	r3, [pc, #380]	; (80045d8 <HAL_RCC_ClockConfig+0x1b0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d001      	beq.n	800446c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0b0      	b.n	80045ce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d04c      	beq.n	8004512 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d107      	bne.n	8004490 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004480:	4b56      	ldr	r3, [pc, #344]	; (80045dc <HAL_RCC_ClockConfig+0x1b4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d121      	bne.n	80044d0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e09e      	b.n	80045ce <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004498:	4b50      	ldr	r3, [pc, #320]	; (80045dc <HAL_RCC_ClockConfig+0x1b4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d115      	bne.n	80044d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e092      	b.n	80045ce <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044b0:	4b4a      	ldr	r3, [pc, #296]	; (80045dc <HAL_RCC_ClockConfig+0x1b4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e086      	b.n	80045ce <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044c0:	4b46      	ldr	r3, [pc, #280]	; (80045dc <HAL_RCC_ClockConfig+0x1b4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e07e      	b.n	80045ce <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044d0:	4b42      	ldr	r3, [pc, #264]	; (80045dc <HAL_RCC_ClockConfig+0x1b4>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f023 0203 	bic.w	r2, r3, #3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	493f      	ldr	r1, [pc, #252]	; (80045dc <HAL_RCC_ClockConfig+0x1b4>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e2:	f7fd fac1 	bl	8001a68 <HAL_GetTick>
 80044e6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e8:	e00a      	b.n	8004500 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ea:	f7fd fabd 	bl	8001a68 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e066      	b.n	80045ce <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004500:	4b36      	ldr	r3, [pc, #216]	; (80045dc <HAL_RCC_ClockConfig+0x1b4>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 020c 	and.w	r2, r3, #12
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	429a      	cmp	r2, r3
 8004510:	d1eb      	bne.n	80044ea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d008      	beq.n	8004530 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800451e:	4b2f      	ldr	r3, [pc, #188]	; (80045dc <HAL_RCC_ClockConfig+0x1b4>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	492c      	ldr	r1, [pc, #176]	; (80045dc <HAL_RCC_ClockConfig+0x1b4>)
 800452c:	4313      	orrs	r3, r2
 800452e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004530:	4b29      	ldr	r3, [pc, #164]	; (80045d8 <HAL_RCC_ClockConfig+0x1b0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d210      	bcs.n	8004560 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b26      	ldr	r3, [pc, #152]	; (80045d8 <HAL_RCC_ClockConfig+0x1b0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 0207 	bic.w	r2, r3, #7
 8004546:	4924      	ldr	r1, [pc, #144]	; (80045d8 <HAL_RCC_ClockConfig+0x1b0>)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b22      	ldr	r3, [pc, #136]	; (80045d8 <HAL_RCC_ClockConfig+0x1b0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e036      	b.n	80045ce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800456c:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <HAL_RCC_ClockConfig+0x1b4>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4918      	ldr	r1, [pc, #96]	; (80045dc <HAL_RCC_ClockConfig+0x1b4>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d009      	beq.n	800459e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800458a:	4b14      	ldr	r3, [pc, #80]	; (80045dc <HAL_RCC_ClockConfig+0x1b4>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4910      	ldr	r1, [pc, #64]	; (80045dc <HAL_RCC_ClockConfig+0x1b4>)
 800459a:	4313      	orrs	r3, r2
 800459c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800459e:	f000 f825 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 80045a2:	4601      	mov	r1, r0
 80045a4:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <HAL_RCC_ClockConfig+0x1b4>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	4a0c      	ldr	r2, [pc, #48]	; (80045e0 <HAL_RCC_ClockConfig+0x1b8>)
 80045b0:	5cd3      	ldrb	r3, [r2, r3]
 80045b2:	f003 031f 	and.w	r3, r3, #31
 80045b6:	fa21 f303 	lsr.w	r3, r1, r3
 80045ba:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045be:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <HAL_RCC_ClockConfig+0x1c0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fd fa00 	bl	80019c8 <HAL_InitTick>
 80045c8:	4603      	mov	r3, r0
 80045ca:	72fb      	strb	r3, [r7, #11]

  return status;
 80045cc:	7afb      	ldrb	r3, [r7, #11]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40022000 	.word	0x40022000
 80045dc:	40021000 	.word	0x40021000
 80045e0:	080073c4 	.word	0x080073c4
 80045e4:	20000000 	.word	0x20000000
 80045e8:	20000004 	.word	0x20000004

080045ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b089      	sub	sp, #36	; 0x24
 80045f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	2300      	movs	r3, #0
 80045f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045fa:	4b3d      	ldr	r3, [pc, #244]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
 8004602:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004604:	4b3a      	ldr	r3, [pc, #232]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0x34>
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b0c      	cmp	r3, #12
 8004618:	d121      	bne.n	800465e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d11e      	bne.n	800465e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004620:	4b33      	ldr	r3, [pc, #204]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d107      	bne.n	800463c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800462c:	4b30      	ldr	r3, [pc, #192]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800462e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	61fb      	str	r3, [r7, #28]
 800463a:	e005      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800463c:	4b2c      	ldr	r3, [pc, #176]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004648:	4a2a      	ldr	r2, [pc, #168]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004650:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10d      	bne.n	8004674 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800465c:	e00a      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b04      	cmp	r3, #4
 8004662:	d102      	bne.n	800466a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004664:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004666:	61bb      	str	r3, [r7, #24]
 8004668:	e004      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d101      	bne.n	8004674 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004670:	4b22      	ldr	r3, [pc, #136]	; (80046fc <HAL_RCC_GetSysClockFreq+0x110>)
 8004672:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d133      	bne.n	80046e2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d002      	beq.n	8004690 <HAL_RCC_GetSysClockFreq+0xa4>
 800468a:	2b03      	cmp	r3, #3
 800468c:	d003      	beq.n	8004696 <HAL_RCC_GetSysClockFreq+0xaa>
 800468e:	e005      	b.n	800469c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004690:	4b19      	ldr	r3, [pc, #100]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004692:	617b      	str	r3, [r7, #20]
      break;
 8004694:	e005      	b.n	80046a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004696:	4b19      	ldr	r3, [pc, #100]	; (80046fc <HAL_RCC_GetSysClockFreq+0x110>)
 8004698:	617b      	str	r3, [r7, #20]
      break;
 800469a:	e002      	b.n	80046a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	617b      	str	r3, [r7, #20]
      break;
 80046a0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046a2:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	3301      	adds	r3, #1
 80046ae:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046b0:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	0a1b      	lsrs	r3, r3, #8
 80046b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	fb02 f203 	mul.w	r2, r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046c8:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	0e5b      	lsrs	r3, r3, #25
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	3301      	adds	r3, #1
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046e2:	69bb      	ldr	r3, [r7, #24]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3724      	adds	r7, #36	; 0x24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	40021000 	.word	0x40021000
 80046f4:	080073dc 	.word	0x080073dc
 80046f8:	00f42400 	.word	0x00f42400
 80046fc:	007a1200 	.word	0x007a1200

08004700 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004704:	4b03      	ldr	r3, [pc, #12]	; (8004714 <HAL_RCC_GetHCLKFreq+0x14>)
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000000 	.word	0x20000000

08004718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800471c:	f7ff fff0 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8004720:	4601      	mov	r1, r0
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	0a1b      	lsrs	r3, r3, #8
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	4a04      	ldr	r2, [pc, #16]	; (8004740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800472e:	5cd3      	ldrb	r3, [r2, r3]
 8004730:	f003 031f 	and.w	r3, r3, #31
 8004734:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40021000 	.word	0x40021000
 8004740:	080073d4 	.word	0x080073d4

08004744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004748:	f7ff ffda 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 800474c:	4601      	mov	r1, r0
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	0adb      	lsrs	r3, r3, #11
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	4a04      	ldr	r2, [pc, #16]	; (800476c <HAL_RCC_GetPCLK2Freq+0x28>)
 800475a:	5cd3      	ldrb	r3, [r2, r3]
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004764:	4618      	mov	r0, r3
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40021000 	.word	0x40021000
 800476c:	080073d4 	.word	0x080073d4

08004770 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004778:	2300      	movs	r3, #0
 800477a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800477c:	4b2a      	ldr	r3, [pc, #168]	; (8004828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800477e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004788:	f7fe fd24 	bl	80031d4 <HAL_PWREx_GetVoltageRange>
 800478c:	6178      	str	r0, [r7, #20]
 800478e:	e014      	b.n	80047ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004790:	4b25      	ldr	r3, [pc, #148]	; (8004828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004794:	4a24      	ldr	r2, [pc, #144]	; (8004828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479a:	6593      	str	r3, [r2, #88]	; 0x58
 800479c:	4b22      	ldr	r3, [pc, #136]	; (8004828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047a8:	f7fe fd14 	bl	80031d4 <HAL_PWREx_GetVoltageRange>
 80047ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047ae:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c0:	d10b      	bne.n	80047da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b80      	cmp	r3, #128	; 0x80
 80047c6:	d919      	bls.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2ba0      	cmp	r3, #160	; 0xa0
 80047cc:	d902      	bls.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047ce:	2302      	movs	r3, #2
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	e013      	b.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047d4:	2301      	movs	r3, #1
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	e010      	b.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b80      	cmp	r3, #128	; 0x80
 80047de:	d902      	bls.n	80047e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047e0:	2303      	movs	r3, #3
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	e00a      	b.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b80      	cmp	r3, #128	; 0x80
 80047ea:	d102      	bne.n	80047f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047ec:	2302      	movs	r3, #2
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	e004      	b.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b70      	cmp	r3, #112	; 0x70
 80047f6:	d101      	bne.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047f8:	2301      	movs	r3, #1
 80047fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047fc:	4b0b      	ldr	r3, [pc, #44]	; (800482c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f023 0207 	bic.w	r2, r3, #7
 8004804:	4909      	ldr	r1, [pc, #36]	; (800482c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800480c:	4b07      	ldr	r3, [pc, #28]	; (800482c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	429a      	cmp	r2, r3
 8004818:	d001      	beq.n	800481e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40021000 	.word	0x40021000
 800482c:	40022000 	.word	0x40022000

08004830 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004838:	2300      	movs	r3, #0
 800483a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800483c:	2300      	movs	r3, #0
 800483e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004848:	2b00      	cmp	r3, #0
 800484a:	d03f      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004854:	d01c      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485a:	d802      	bhi.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00e      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004860:	e01f      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004862:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004866:	d003      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004868:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800486c:	d01c      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800486e:	e018      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004870:	4b85      	ldr	r3, [pc, #532]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4a84      	ldr	r2, [pc, #528]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800487c:	e015      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3304      	adds	r3, #4
 8004882:	2100      	movs	r1, #0
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fab9 	bl	8004dfc <RCCEx_PLLSAI1_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800488e:	e00c      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3320      	adds	r3, #32
 8004894:	2100      	movs	r1, #0
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fba0 	bl	8004fdc <RCCEx_PLLSAI2_Config>
 800489c:	4603      	mov	r3, r0
 800489e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048a0:	e003      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	74fb      	strb	r3, [r7, #19]
      break;
 80048a6:	e000      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80048a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048aa:	7cfb      	ldrb	r3, [r7, #19]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10b      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048b0:	4b75      	ldr	r3, [pc, #468]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048be:	4972      	ldr	r1, [pc, #456]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048c6:	e001      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c8:	7cfb      	ldrb	r3, [r7, #19]
 80048ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d03f      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048e0:	d01c      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80048e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048e6:	d802      	bhi.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00e      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xda>
 80048ec:	e01f      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80048ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048f2:	d003      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80048f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048f8:	d01c      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80048fa:	e018      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048fc:	4b62      	ldr	r3, [pc, #392]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a61      	ldr	r2, [pc, #388]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004906:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004908:	e015      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3304      	adds	r3, #4
 800490e:	2100      	movs	r1, #0
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fa73 	bl	8004dfc <RCCEx_PLLSAI1_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800491a:	e00c      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3320      	adds	r3, #32
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fb5a 	bl	8004fdc <RCCEx_PLLSAI2_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800492c:	e003      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	74fb      	strb	r3, [r7, #19]
      break;
 8004932:	e000      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004936:	7cfb      	ldrb	r3, [r7, #19]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800493c:	4b52      	ldr	r3, [pc, #328]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800494a:	494f      	ldr	r1, [pc, #316]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004952:	e001      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004954:	7cfb      	ldrb	r3, [r7, #19]
 8004956:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80a0 	beq.w	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800496a:	4b47      	ldr	r3, [pc, #284]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800497a:	2300      	movs	r3, #0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00d      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004980:	4b41      	ldr	r3, [pc, #260]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	4a40      	ldr	r2, [pc, #256]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498a:	6593      	str	r3, [r2, #88]	; 0x58
 800498c:	4b3e      	ldr	r3, [pc, #248]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800498e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004998:	2301      	movs	r3, #1
 800499a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499c:	4b3b      	ldr	r3, [pc, #236]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a3a      	ldr	r2, [pc, #232]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80049a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049a8:	f7fd f85e 	bl	8001a68 <HAL_GetTick>
 80049ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049ae:	e009      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b0:	f7fd f85a 	bl	8001a68 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d902      	bls.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	74fb      	strb	r3, [r7, #19]
        break;
 80049c2:	e005      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049c4:	4b31      	ldr	r3, [pc, #196]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0ef      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80049d0:	7cfb      	ldrb	r3, [r7, #19]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d15c      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049d6:	4b2c      	ldr	r3, [pc, #176]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01f      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d019      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049f4:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a00:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	4a20      	ldr	r2, [pc, #128]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a10:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	4a1c      	ldr	r2, [pc, #112]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a20:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d016      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fd f819 	bl	8001a68 <HAL_GetTick>
 8004a36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a38:	e00b      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fd f815 	bl	8001a68 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d902      	bls.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a50:	e006      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a52:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0ec      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a66:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a76:	4904      	ldr	r1, [pc, #16]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a7e:	e009      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	74bb      	strb	r3, [r7, #18]
 8004a84:	e006      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a90:	7cfb      	ldrb	r3, [r7, #19]
 8004a92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a94:	7c7b      	ldrb	r3, [r7, #17]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d105      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9a:	4b9e      	ldr	r3, [pc, #632]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	4a9d      	ldr	r2, [pc, #628]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ab2:	4b98      	ldr	r3, [pc, #608]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab8:	f023 0203 	bic.w	r2, r3, #3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	4994      	ldr	r1, [pc, #592]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ad4:	4b8f      	ldr	r3, [pc, #572]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	f023 020c 	bic.w	r2, r3, #12
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae2:	498c      	ldr	r1, [pc, #560]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004af6:	4b87      	ldr	r3, [pc, #540]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	4983      	ldr	r1, [pc, #524]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b18:	4b7e      	ldr	r3, [pc, #504]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	497b      	ldr	r1, [pc, #492]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b3a:	4b76      	ldr	r3, [pc, #472]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b48:	4972      	ldr	r1, [pc, #456]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b5c:	4b6d      	ldr	r3, [pc, #436]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	496a      	ldr	r1, [pc, #424]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b7e:	4b65      	ldr	r3, [pc, #404]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	4961      	ldr	r1, [pc, #388]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ba0:	4b5c      	ldr	r3, [pc, #368]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bae:	4959      	ldr	r1, [pc, #356]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bc2:	4b54      	ldr	r3, [pc, #336]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd0:	4950      	ldr	r1, [pc, #320]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004be4:	4b4b      	ldr	r3, [pc, #300]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf2:	4948      	ldr	r1, [pc, #288]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c06:	4b43      	ldr	r3, [pc, #268]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c14:	493f      	ldr	r1, [pc, #252]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d028      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c28:	4b3a      	ldr	r3, [pc, #232]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c36:	4937      	ldr	r1, [pc, #220]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c46:	d106      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c48:	4b32      	ldr	r3, [pc, #200]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4a31      	ldr	r2, [pc, #196]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c52:	60d3      	str	r3, [r2, #12]
 8004c54:	e011      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c5e:	d10c      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3304      	adds	r3, #4
 8004c64:	2101      	movs	r1, #1
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f8c8 	bl	8004dfc <RCCEx_PLLSAI1_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c70:	7cfb      	ldrb	r3, [r7, #19]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004c76:	7cfb      	ldrb	r3, [r7, #19]
 8004c78:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d028      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c86:	4b23      	ldr	r3, [pc, #140]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c94:	491f      	ldr	r1, [pc, #124]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca4:	d106      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb0:	60d3      	str	r3, [r2, #12]
 8004cb2:	e011      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f899 	bl	8004dfc <RCCEx_PLLSAI1_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cce:	7cfb      	ldrb	r3, [r7, #19]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004cd4:	7cfb      	ldrb	r3, [r7, #19]
 8004cd6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d02b      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf2:	4908      	ldr	r1, [pc, #32]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d02:	d109      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d04:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4a02      	ldr	r2, [pc, #8]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d0e:	60d3      	str	r3, [r2, #12]
 8004d10:	e014      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d20:	d10c      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2101      	movs	r1, #1
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 f867 	bl	8004dfc <RCCEx_PLLSAI1_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004d38:	7cfb      	ldrb	r3, [r7, #19]
 8004d3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d02f      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d48:	4b2b      	ldr	r3, [pc, #172]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d56:	4928      	ldr	r1, [pc, #160]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d66:	d10d      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	2102      	movs	r1, #2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f844 	bl	8004dfc <RCCEx_PLLSAI1_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d78:	7cfb      	ldrb	r3, [r7, #19]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d014      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004d7e:	7cfb      	ldrb	r3, [r7, #19]
 8004d80:	74bb      	strb	r3, [r7, #18]
 8004d82:	e011      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3320      	adds	r3, #32
 8004d92:	2102      	movs	r1, #2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 f921 	bl	8004fdc <RCCEx_PLLSAI2_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d9e:	7cfb      	ldrb	r3, [r7, #19]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004db4:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dc2:	490d      	ldr	r1, [pc, #52]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dd6:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ddc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de6:	4904      	ldr	r1, [pc, #16]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dee:	7cbb      	ldrb	r3, [r7, #18]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40021000 	.word	0x40021000

08004dfc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e0a:	4b73      	ldr	r3, [pc, #460]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d018      	beq.n	8004e48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e16:	4b70      	ldr	r3, [pc, #448]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f003 0203 	and.w	r2, r3, #3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d10d      	bne.n	8004e42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
       ||
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e2e:	4b6a      	ldr	r3, [pc, #424]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	091b      	lsrs	r3, r3, #4
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d044      	beq.n	8004ecc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	73fb      	strb	r3, [r7, #15]
 8004e46:	e041      	b.n	8004ecc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d00c      	beq.n	8004e6a <RCCEx_PLLSAI1_Config+0x6e>
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d013      	beq.n	8004e7c <RCCEx_PLLSAI1_Config+0x80>
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d120      	bne.n	8004e9a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e58:	4b5f      	ldr	r3, [pc, #380]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d11d      	bne.n	8004ea0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e68:	e01a      	b.n	8004ea0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e6a:	4b5b      	ldr	r3, [pc, #364]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d116      	bne.n	8004ea4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e7a:	e013      	b.n	8004ea4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e7c:	4b56      	ldr	r3, [pc, #344]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10f      	bne.n	8004ea8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e88:	4b53      	ldr	r3, [pc, #332]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d109      	bne.n	8004ea8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e98:	e006      	b.n	8004ea8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e9e:	e004      	b.n	8004eaa <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ea0:	bf00      	nop
 8004ea2:	e002      	b.n	8004eaa <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ea4:	bf00      	nop
 8004ea6:	e000      	b.n	8004eaa <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ea8:	bf00      	nop
    }

    if(status == HAL_OK)
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10d      	bne.n	8004ecc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004eb0:	4b49      	ldr	r3, [pc, #292]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6819      	ldr	r1, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	4944      	ldr	r1, [pc, #272]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d17d      	bne.n	8004fce <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ed2:	4b41      	ldr	r3, [pc, #260]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a40      	ldr	r2, [pc, #256]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ed8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ede:	f7fc fdc3 	bl	8001a68 <HAL_GetTick>
 8004ee2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ee4:	e009      	b.n	8004efa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ee6:	f7fc fdbf 	bl	8001a68 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d902      	bls.n	8004efa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	73fb      	strb	r3, [r7, #15]
        break;
 8004ef8:	e005      	b.n	8004f06 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004efa:	4b37      	ldr	r3, [pc, #220]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1ef      	bne.n	8004ee6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d160      	bne.n	8004fce <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d111      	bne.n	8004f36 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f12:	4b31      	ldr	r3, [pc, #196]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6892      	ldr	r2, [r2, #8]
 8004f22:	0211      	lsls	r1, r2, #8
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	68d2      	ldr	r2, [r2, #12]
 8004f28:	0912      	lsrs	r2, r2, #4
 8004f2a:	0452      	lsls	r2, r2, #17
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	492a      	ldr	r1, [pc, #168]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	610b      	str	r3, [r1, #16]
 8004f34:	e027      	b.n	8004f86 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d112      	bne.n	8004f62 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f3c:	4b26      	ldr	r3, [pc, #152]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6892      	ldr	r2, [r2, #8]
 8004f4c:	0211      	lsls	r1, r2, #8
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6912      	ldr	r2, [r2, #16]
 8004f52:	0852      	lsrs	r2, r2, #1
 8004f54:	3a01      	subs	r2, #1
 8004f56:	0552      	lsls	r2, r2, #21
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	491f      	ldr	r1, [pc, #124]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	610b      	str	r3, [r1, #16]
 8004f60:	e011      	b.n	8004f86 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f62:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6892      	ldr	r2, [r2, #8]
 8004f72:	0211      	lsls	r1, r2, #8
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6952      	ldr	r2, [r2, #20]
 8004f78:	0852      	lsrs	r2, r2, #1
 8004f7a:	3a01      	subs	r2, #1
 8004f7c:	0652      	lsls	r2, r2, #25
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	4915      	ldr	r1, [pc, #84]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f86:	4b14      	ldr	r3, [pc, #80]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f90:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f92:	f7fc fd69 	bl	8001a68 <HAL_GetTick>
 8004f96:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f98:	e009      	b.n	8004fae <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f9a:	f7fc fd65 	bl	8001a68 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d902      	bls.n	8004fae <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	73fb      	strb	r3, [r7, #15]
          break;
 8004fac:	e005      	b.n	8004fba <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0ef      	beq.n	8004f9a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	4903      	ldr	r1, [pc, #12]	; (8004fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40021000 	.word	0x40021000

08004fdc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fea:	4b68      	ldr	r3, [pc, #416]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d018      	beq.n	8005028 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ff6:	4b65      	ldr	r3, [pc, #404]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f003 0203 	and.w	r2, r3, #3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d10d      	bne.n	8005022 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
       ||
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800500e:	4b5f      	ldr	r3, [pc, #380]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	091b      	lsrs	r3, r3, #4
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
       ||
 800501e:	429a      	cmp	r2, r3
 8005020:	d044      	beq.n	80050ac <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	73fb      	strb	r3, [r7, #15]
 8005026:	e041      	b.n	80050ac <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d00c      	beq.n	800504a <RCCEx_PLLSAI2_Config+0x6e>
 8005030:	2b03      	cmp	r3, #3
 8005032:	d013      	beq.n	800505c <RCCEx_PLLSAI2_Config+0x80>
 8005034:	2b01      	cmp	r3, #1
 8005036:	d120      	bne.n	800507a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005038:	4b54      	ldr	r3, [pc, #336]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d11d      	bne.n	8005080 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005048:	e01a      	b.n	8005080 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800504a:	4b50      	ldr	r3, [pc, #320]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005052:	2b00      	cmp	r3, #0
 8005054:	d116      	bne.n	8005084 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800505a:	e013      	b.n	8005084 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800505c:	4b4b      	ldr	r3, [pc, #300]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10f      	bne.n	8005088 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005068:	4b48      	ldr	r3, [pc, #288]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005078:	e006      	b.n	8005088 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	73fb      	strb	r3, [r7, #15]
      break;
 800507e:	e004      	b.n	800508a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005080:	bf00      	nop
 8005082:	e002      	b.n	800508a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005084:	bf00      	nop
 8005086:	e000      	b.n	800508a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005088:	bf00      	nop
    }

    if(status == HAL_OK)
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10d      	bne.n	80050ac <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005090:	4b3e      	ldr	r3, [pc, #248]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6819      	ldr	r1, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	430b      	orrs	r3, r1
 80050a6:	4939      	ldr	r1, [pc, #228]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d167      	bne.n	8005182 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050b2:	4b36      	ldr	r3, [pc, #216]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a35      	ldr	r2, [pc, #212]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050be:	f7fc fcd3 	bl	8001a68 <HAL_GetTick>
 80050c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050c4:	e009      	b.n	80050da <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050c6:	f7fc fccf 	bl	8001a68 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d902      	bls.n	80050da <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	73fb      	strb	r3, [r7, #15]
        break;
 80050d8:	e005      	b.n	80050e6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050da:	4b2c      	ldr	r3, [pc, #176]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1ef      	bne.n	80050c6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d14a      	bne.n	8005182 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d111      	bne.n	8005116 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050f2:	4b26      	ldr	r3, [pc, #152]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6892      	ldr	r2, [r2, #8]
 8005102:	0211      	lsls	r1, r2, #8
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	68d2      	ldr	r2, [r2, #12]
 8005108:	0912      	lsrs	r2, r2, #4
 800510a:	0452      	lsls	r2, r2, #17
 800510c:	430a      	orrs	r2, r1
 800510e:	491f      	ldr	r1, [pc, #124]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005110:	4313      	orrs	r3, r2
 8005112:	614b      	str	r3, [r1, #20]
 8005114:	e011      	b.n	800513a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005116:	4b1d      	ldr	r3, [pc, #116]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800511e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6892      	ldr	r2, [r2, #8]
 8005126:	0211      	lsls	r1, r2, #8
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6912      	ldr	r2, [r2, #16]
 800512c:	0852      	lsrs	r2, r2, #1
 800512e:	3a01      	subs	r2, #1
 8005130:	0652      	lsls	r2, r2, #25
 8005132:	430a      	orrs	r2, r1
 8005134:	4915      	ldr	r1, [pc, #84]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005136:	4313      	orrs	r3, r2
 8005138:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800513a:	4b14      	ldr	r3, [pc, #80]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a13      	ldr	r2, [pc, #76]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005144:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005146:	f7fc fc8f 	bl	8001a68 <HAL_GetTick>
 800514a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800514c:	e009      	b.n	8005162 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800514e:	f7fc fc8b 	bl	8001a68 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d902      	bls.n	8005162 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	73fb      	strb	r3, [r7, #15]
          break;
 8005160:	e005      	b.n	800516e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005162:	4b0a      	ldr	r3, [pc, #40]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0ef      	beq.n	800514e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	4903      	ldr	r1, [pc, #12]	; (800518c <RCCEx_PLLSAI2_Config+0x1b0>)
 800517e:	4313      	orrs	r3, r2
 8005180:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40021000 	.word	0x40021000

08005190 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d06c      	beq.n	800527c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fc f952 	bl	8001460 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	22ca      	movs	r2, #202	; 0xca
 80051ca:	625a      	str	r2, [r3, #36]	; 0x24
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2253      	movs	r2, #83	; 0x53
 80051d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f9a0 	bl	800551a <RTC_EnterInitMode>
 80051da:	4603      	mov	r3, r0
 80051dc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80051de:	7bfb      	ldrb	r3, [r7, #15]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d14b      	bne.n	800527c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80051f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6899      	ldr	r1, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	68d2      	ldr	r2, [r2, #12]
 800521e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6919      	ldr	r1, [r3, #16]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	041a      	lsls	r2, r3, #16
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f9a3 	bl	8005580 <RTC_ExitInitMode>
 800523a:	4603      	mov	r3, r0
 800523c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d11b      	bne.n	800527c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0203 	bic.w	r2, r2, #3
 8005252:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	22ff      	movs	r2, #255	; 0xff
 8005272:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800527c:	7bfb      	ldrb	r3, [r7, #15]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005286:	b590      	push	{r4, r7, lr}
 8005288:	b087      	sub	sp, #28
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_RTC_SetTime+0x1a>
 800529c:	2302      	movs	r3, #2
 800529e:	e08b      	b.n	80053b8 <HAL_RTC_SetTime+0x132>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	22ca      	movs	r2, #202	; 0xca
 80052b6:	625a      	str	r2, [r3, #36]	; 0x24
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2253      	movs	r2, #83	; 0x53
 80052be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f92a 	bl	800551a <RTC_EnterInitMode>
 80052c6:	4603      	mov	r3, r0
 80052c8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80052ca:	7cfb      	ldrb	r3, [r7, #19]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d163      	bne.n	8005398 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d126      	bne.n	8005324 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d102      	bne.n	80052ea <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2200      	movs	r2, #0
 80052e8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 f984 	bl	80055fc <RTC_ByteToBcd2>
 80052f4:	4603      	mov	r3, r0
 80052f6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 f97d 	bl	80055fc <RTC_ByteToBcd2>
 8005302:	4603      	mov	r3, r0
 8005304:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005306:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	789b      	ldrb	r3, [r3, #2]
 800530c:	4618      	mov	r0, r3
 800530e:	f000 f975 	bl	80055fc <RTC_ByteToBcd2>
 8005312:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005314:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	78db      	ldrb	r3, [r3, #3]
 800531c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	e018      	b.n	8005356 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d102      	bne.n	8005338 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2200      	movs	r2, #0
 8005336:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005344:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800534a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	78db      	ldrb	r3, [r3, #3]
 8005350:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005360:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005364:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005374:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6899      	ldr	r1, [r3, #8]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	431a      	orrs	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f8f6 	bl	8005580 <RTC_ExitInitMode>
 8005394:	4603      	mov	r3, r0
 8005396:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	22ff      	movs	r2, #255	; 0xff
 800539e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80053a0:	7cfb      	ldrb	r3, [r7, #19]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d103      	bne.n	80053ae <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80053b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd90      	pop	{r4, r7, pc}

080053c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_RTC_SetDate+0x1a>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e075      	b.n	80054c6 <HAL_RTC_SetDate+0x106>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10e      	bne.n	800540e <HAL_RTC_SetDate+0x4e>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	785b      	ldrb	r3, [r3, #1]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	785b      	ldrb	r3, [r3, #1]
 8005400:	f023 0310 	bic.w	r3, r3, #16
 8005404:	b2db      	uxtb	r3, r3
 8005406:	330a      	adds	r3, #10
 8005408:	b2da      	uxtb	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d11c      	bne.n	800544e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	78db      	ldrb	r3, [r3, #3]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f8ef 	bl	80055fc <RTC_ByteToBcd2>
 800541e:	4603      	mov	r3, r0
 8005420:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	4618      	mov	r0, r3
 8005428:	f000 f8e8 	bl	80055fc <RTC_ByteToBcd2>
 800542c:	4603      	mov	r3, r0
 800542e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005430:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	789b      	ldrb	r3, [r3, #2]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f8e0 	bl	80055fc <RTC_ByteToBcd2>
 800543c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800543e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e00e      	b.n	800546c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	78db      	ldrb	r3, [r3, #3]
 8005452:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800545a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005460:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	22ca      	movs	r2, #202	; 0xca
 8005472:	625a      	str	r2, [r3, #36]	; 0x24
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2253      	movs	r2, #83	; 0x53
 800547a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f84c 	bl	800551a <RTC_EnterInitMode>
 8005482:	4603      	mov	r3, r0
 8005484:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005486:	7cfb      	ldrb	r3, [r7, #19]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10c      	bne.n	80054a6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005496:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800549a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f86f 	bl	8005580 <RTC_ExitInitMode>
 80054a2:	4603      	mov	r3, r0
 80054a4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	22ff      	movs	r2, #255	; 0xff
 80054ac:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80054ae:	7cfb      	ldrb	r3, [r7, #19]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d103      	bne.n	80054bc <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd90      	pop	{r4, r7, pc}

080054ce <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054e4:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80054e6:	f7fc fabf 	bl	8001a68 <HAL_GetTick>
 80054ea:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054ec:	e009      	b.n	8005502 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054ee:	f7fc fabb 	bl	8001a68 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054fc:	d901      	bls.n	8005502 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e007      	b.n	8005512 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0ee      	beq.n	80054ee <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005530:	2b00      	cmp	r3, #0
 8005532:	d120      	bne.n	8005576 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800553c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800553e:	f7fc fa93 	bl	8001a68 <HAL_GetTick>
 8005542:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005544:	e00d      	b.n	8005562 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005546:	f7fc fa8f 	bl	8001a68 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005554:	d905      	bls.n	8005562 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2203      	movs	r2, #3
 800555e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d102      	bne.n	8005576 <RTC_EnterInitMode+0x5c>
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b03      	cmp	r3, #3
 8005574:	d1e7      	bne.n	8005546 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005576:	7bfb      	ldrb	r3, [r7, #15]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800558c:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <RTC_ExitInitMode+0x78>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4a19      	ldr	r2, [pc, #100]	; (80055f8 <RTC_ExitInitMode+0x78>)
 8005592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005596:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005598:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <RTC_ExitInitMode+0x78>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10c      	bne.n	80055be <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff ff92 	bl	80054ce <HAL_RTC_WaitForSynchro>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01e      	beq.n	80055ee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2203      	movs	r2, #3
 80055b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	73fb      	strb	r3, [r7, #15]
 80055bc:	e017      	b.n	80055ee <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80055be:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <RTC_ExitInitMode+0x78>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	4a0d      	ldr	r2, [pc, #52]	; (80055f8 <RTC_ExitInitMode+0x78>)
 80055c4:	f023 0320 	bic.w	r3, r3, #32
 80055c8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff ff7f 	bl	80054ce <HAL_RTC_WaitForSynchro>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2203      	movs	r2, #3
 80055da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <RTC_ExitInitMode+0x78>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	4a04      	ldr	r2, [pc, #16]	; (80055f8 <RTC_ExitInitMode+0x78>)
 80055e8:	f043 0320 	orr.w	r3, r3, #32
 80055ec:	6093      	str	r3, [r2, #8]
  }

  return status;
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40002800 	.word	0x40002800

080055fc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800560e:	e005      	b.n	800561c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3301      	adds	r3, #1
 8005614:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005616:	7afb      	ldrb	r3, [r7, #11]
 8005618:	3b0a      	subs	r3, #10
 800561a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800561c:	7afb      	ldrb	r3, [r7, #11]
 800561e:	2b09      	cmp	r3, #9
 8005620:	d8f6      	bhi.n	8005610 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	b2da      	uxtb	r2, r3
 800562a:	7afb      	ldrb	r3, [r7, #11]
 800562c:	4313      	orrs	r3, r2
 800562e:	b2db      	uxtb	r3, r3
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e049      	b.n	80056e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fc f8be 	bl	80017e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3304      	adds	r3, #4
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f000 f8ee 	bl	800585c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_TIM_ConfigClockSource+0x18>
 80056fe:	2302      	movs	r3, #2
 8005700:	e0a8      	b.n	8005854 <HAL_TIM_ConfigClockSource+0x16a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2202      	movs	r2, #2
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005720:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005724:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800572c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b40      	cmp	r3, #64	; 0x40
 800573c:	d067      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x124>
 800573e:	2b40      	cmp	r3, #64	; 0x40
 8005740:	d80b      	bhi.n	800575a <HAL_TIM_ConfigClockSource+0x70>
 8005742:	2b10      	cmp	r3, #16
 8005744:	d073      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x144>
 8005746:	2b10      	cmp	r3, #16
 8005748:	d802      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x66>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d06f      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800574e:	e078      	b.n	8005842 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005750:	2b20      	cmp	r3, #32
 8005752:	d06c      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x144>
 8005754:	2b30      	cmp	r3, #48	; 0x30
 8005756:	d06a      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005758:	e073      	b.n	8005842 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800575a:	2b70      	cmp	r3, #112	; 0x70
 800575c:	d00d      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x90>
 800575e:	2b70      	cmp	r3, #112	; 0x70
 8005760:	d804      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x82>
 8005762:	2b50      	cmp	r3, #80	; 0x50
 8005764:	d033      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0xe4>
 8005766:	2b60      	cmp	r3, #96	; 0x60
 8005768:	d041      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0x104>
      break;
 800576a:	e06a      	b.n	8005842 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800576c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005770:	d066      	beq.n	8005840 <HAL_TIM_ConfigClockSource+0x156>
 8005772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005776:	d017      	beq.n	80057a8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005778:	e063      	b.n	8005842 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6899      	ldr	r1, [r3, #8]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f000 f97b 	bl	8005a84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800579c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	609a      	str	r2, [r3, #8]
      break;
 80057a6:	e04c      	b.n	8005842 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6899      	ldr	r1, [r3, #8]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f000 f964 	bl	8005a84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ca:	609a      	str	r2, [r3, #8]
      break;
 80057cc:	e039      	b.n	8005842 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6859      	ldr	r1, [r3, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	461a      	mov	r2, r3
 80057dc:	f000 f8d8 	bl	8005990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2150      	movs	r1, #80	; 0x50
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 f931 	bl	8005a4e <TIM_ITRx_SetConfig>
      break;
 80057ec:	e029      	b.n	8005842 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6859      	ldr	r1, [r3, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	461a      	mov	r2, r3
 80057fc:	f000 f8f7 	bl	80059ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2160      	movs	r1, #96	; 0x60
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f921 	bl	8005a4e <TIM_ITRx_SetConfig>
      break;
 800580c:	e019      	b.n	8005842 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	6859      	ldr	r1, [r3, #4]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	461a      	mov	r2, r3
 800581c:	f000 f8b8 	bl	8005990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2140      	movs	r1, #64	; 0x40
 8005826:	4618      	mov	r0, r3
 8005828:	f000 f911 	bl	8005a4e <TIM_ITRx_SetConfig>
      break;
 800582c:	e009      	b.n	8005842 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4619      	mov	r1, r3
 8005838:	4610      	mov	r0, r2
 800583a:	f000 f908 	bl	8005a4e <TIM_ITRx_SetConfig>
        break;
 800583e:	e000      	b.n	8005842 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005840:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a40      	ldr	r2, [pc, #256]	; (8005970 <TIM_Base_SetConfig+0x114>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d013      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587a:	d00f      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a3d      	ldr	r2, [pc, #244]	; (8005974 <TIM_Base_SetConfig+0x118>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00b      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a3c      	ldr	r2, [pc, #240]	; (8005978 <TIM_Base_SetConfig+0x11c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d007      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a3b      	ldr	r2, [pc, #236]	; (800597c <TIM_Base_SetConfig+0x120>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a3a      	ldr	r2, [pc, #232]	; (8005980 <TIM_Base_SetConfig+0x124>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d108      	bne.n	80058ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a2f      	ldr	r2, [pc, #188]	; (8005970 <TIM_Base_SetConfig+0x114>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d01f      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058bc:	d01b      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a2c      	ldr	r2, [pc, #176]	; (8005974 <TIM_Base_SetConfig+0x118>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d017      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a2b      	ldr	r2, [pc, #172]	; (8005978 <TIM_Base_SetConfig+0x11c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a2a      	ldr	r2, [pc, #168]	; (800597c <TIM_Base_SetConfig+0x120>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00f      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a29      	ldr	r2, [pc, #164]	; (8005980 <TIM_Base_SetConfig+0x124>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00b      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a28      	ldr	r2, [pc, #160]	; (8005984 <TIM_Base_SetConfig+0x128>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d007      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a27      	ldr	r2, [pc, #156]	; (8005988 <TIM_Base_SetConfig+0x12c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d003      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a26      	ldr	r2, [pc, #152]	; (800598c <TIM_Base_SetConfig+0x130>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d108      	bne.n	8005908 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a10      	ldr	r2, [pc, #64]	; (8005970 <TIM_Base_SetConfig+0x114>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00f      	beq.n	8005954 <TIM_Base_SetConfig+0xf8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a12      	ldr	r2, [pc, #72]	; (8005980 <TIM_Base_SetConfig+0x124>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00b      	beq.n	8005954 <TIM_Base_SetConfig+0xf8>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a11      	ldr	r2, [pc, #68]	; (8005984 <TIM_Base_SetConfig+0x128>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <TIM_Base_SetConfig+0xf8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a10      	ldr	r2, [pc, #64]	; (8005988 <TIM_Base_SetConfig+0x12c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_Base_SetConfig+0xf8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a0f      	ldr	r2, [pc, #60]	; (800598c <TIM_Base_SetConfig+0x130>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d103      	bne.n	800595c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	615a      	str	r2, [r3, #20]
}
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40000400 	.word	0x40000400
 8005978:	40000800 	.word	0x40000800
 800597c:	40000c00 	.word	0x40000c00
 8005980:	40013400 	.word	0x40013400
 8005984:	40014000 	.word	0x40014000
 8005988:	40014400 	.word	0x40014400
 800598c:	40014800 	.word	0x40014800

08005990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	f023 0201 	bic.w	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f023 030a 	bic.w	r3, r3, #10
 80059cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	621a      	str	r2, [r3, #32]
}
 80059e2:	bf00      	nop
 80059e4:	371c      	adds	r7, #28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b087      	sub	sp, #28
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f023 0210 	bic.w	r2, r3, #16
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	031b      	lsls	r3, r3, #12
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	621a      	str	r2, [r3, #32]
}
 8005a42:	bf00      	nop
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f043 0307 	orr.w	r3, r3, #7
 8005a70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	609a      	str	r2, [r3, #8]
}
 8005a78:	bf00      	nop
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	021a      	lsls	r2, r3, #8
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	609a      	str	r2, [r3, #8]
}
 8005ab8:	bf00      	nop
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e068      	b.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a2e      	ldr	r2, [pc, #184]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a2d      	ldr	r2, [pc, #180]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d108      	bne.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a1e      	ldr	r2, [pc, #120]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d01d      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4e:	d018      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1b      	ldr	r2, [pc, #108]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1a      	ldr	r2, [pc, #104]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a14      	ldr	r2, [pc, #80]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d10c      	bne.n	8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40013400 	.word	0x40013400
 8005bc4:	40000400 	.word	0x40000400
 8005bc8:	40000800 	.word	0x40000800
 8005bcc:	40000c00 	.word	0x40000c00
 8005bd0:	40014000 	.word	0x40014000

08005bd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e040      	b.n	8005c68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fb fe42 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2224      	movs	r2, #36	; 0x24
 8005c00:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0201 	bic.w	r2, r2, #1
 8005c10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f8c0 	bl	8005d98 <UART_SetConfig>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e022      	b.n	8005c68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fb3e 	bl	80062ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fbc5 	bl	80063f0 <UART_CheckIdleState>
 8005c66:	4603      	mov	r3, r0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08a      	sub	sp, #40	; 0x28
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	f040 8081 	bne.w	8005d8c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <HAL_UART_Transmit+0x26>
 8005c90:	88fb      	ldrh	r3, [r7, #6]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e079      	b.n	8005d8e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_UART_Transmit+0x38>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e072      	b.n	8005d8e <HAL_UART_Transmit+0x11e>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2221      	movs	r2, #33	; 0x21
 8005cba:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005cbc:	f7fb fed4 	bl	8001a68 <HAL_GetTick>
 8005cc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	88fa      	ldrh	r2, [r7, #6]
 8005cc6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	88fa      	ldrh	r2, [r7, #6]
 8005cce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cda:	d108      	bne.n	8005cee <HAL_UART_Transmit+0x7e>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d104      	bne.n	8005cee <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	e003      	b.n	8005cf6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005cfe:	e02d      	b.n	8005d5c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2200      	movs	r2, #0
 8005d08:	2180      	movs	r1, #128	; 0x80
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 fbb5 	bl	800647a <UART_WaitOnFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e039      	b.n	8005d8e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10b      	bne.n	8005d38 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	881a      	ldrh	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d2c:	b292      	uxth	r2, r2
 8005d2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	3302      	adds	r3, #2
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	e008      	b.n	8005d4a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	781a      	ldrb	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	b292      	uxth	r2, r2
 8005d42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	3301      	adds	r3, #1
 8005d48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1cb      	bne.n	8005d00 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2140      	movs	r1, #64	; 0x40
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fb81 	bl	800647a <UART_WaitOnFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e005      	b.n	8005d8e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2220      	movs	r2, #32
 8005d86:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e000      	b.n	8005d8e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005d8c:	2302      	movs	r3, #2
  }
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3720      	adds	r7, #32
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d98:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005d9c:	b088      	sub	sp, #32
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	4bac      	ldr	r3, [pc, #688]	; (8006078 <UART_SetConfig+0x2e0>)
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	69f9      	ldr	r1, [r7, #28]
 8005dce:	430b      	orrs	r3, r1
 8005dd0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4aa2      	ldr	r2, [pc, #648]	; (800607c <UART_SetConfig+0x2e4>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d004      	beq.n	8005e02 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a99      	ldr	r2, [pc, #612]	; (8006080 <UART_SetConfig+0x2e8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d121      	bne.n	8005e64 <UART_SetConfig+0xcc>
 8005e20:	4b98      	ldr	r3, [pc, #608]	; (8006084 <UART_SetConfig+0x2ec>)
 8005e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d816      	bhi.n	8005e5c <UART_SetConfig+0xc4>
 8005e2e:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <UART_SetConfig+0x9c>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e45 	.word	0x08005e45
 8005e38:	08005e51 	.word	0x08005e51
 8005e3c:	08005e4b 	.word	0x08005e4b
 8005e40:	08005e57 	.word	0x08005e57
 8005e44:	2301      	movs	r3, #1
 8005e46:	76fb      	strb	r3, [r7, #27]
 8005e48:	e0e8      	b.n	800601c <UART_SetConfig+0x284>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	76fb      	strb	r3, [r7, #27]
 8005e4e:	e0e5      	b.n	800601c <UART_SetConfig+0x284>
 8005e50:	2304      	movs	r3, #4
 8005e52:	76fb      	strb	r3, [r7, #27]
 8005e54:	e0e2      	b.n	800601c <UART_SetConfig+0x284>
 8005e56:	2308      	movs	r3, #8
 8005e58:	76fb      	strb	r3, [r7, #27]
 8005e5a:	e0df      	b.n	800601c <UART_SetConfig+0x284>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	76fb      	strb	r3, [r7, #27]
 8005e60:	bf00      	nop
 8005e62:	e0db      	b.n	800601c <UART_SetConfig+0x284>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a87      	ldr	r2, [pc, #540]	; (8006088 <UART_SetConfig+0x2f0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d134      	bne.n	8005ed8 <UART_SetConfig+0x140>
 8005e6e:	4b85      	ldr	r3, [pc, #532]	; (8006084 <UART_SetConfig+0x2ec>)
 8005e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e74:	f003 030c 	and.w	r3, r3, #12
 8005e78:	2b0c      	cmp	r3, #12
 8005e7a:	d829      	bhi.n	8005ed0 <UART_SetConfig+0x138>
 8005e7c:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <UART_SetConfig+0xec>)
 8005e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e82:	bf00      	nop
 8005e84:	08005eb9 	.word	0x08005eb9
 8005e88:	08005ed1 	.word	0x08005ed1
 8005e8c:	08005ed1 	.word	0x08005ed1
 8005e90:	08005ed1 	.word	0x08005ed1
 8005e94:	08005ec5 	.word	0x08005ec5
 8005e98:	08005ed1 	.word	0x08005ed1
 8005e9c:	08005ed1 	.word	0x08005ed1
 8005ea0:	08005ed1 	.word	0x08005ed1
 8005ea4:	08005ebf 	.word	0x08005ebf
 8005ea8:	08005ed1 	.word	0x08005ed1
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005ed1 	.word	0x08005ed1
 8005eb4:	08005ecb 	.word	0x08005ecb
 8005eb8:	2300      	movs	r3, #0
 8005eba:	76fb      	strb	r3, [r7, #27]
 8005ebc:	e0ae      	b.n	800601c <UART_SetConfig+0x284>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	76fb      	strb	r3, [r7, #27]
 8005ec2:	e0ab      	b.n	800601c <UART_SetConfig+0x284>
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	76fb      	strb	r3, [r7, #27]
 8005ec8:	e0a8      	b.n	800601c <UART_SetConfig+0x284>
 8005eca:	2308      	movs	r3, #8
 8005ecc:	76fb      	strb	r3, [r7, #27]
 8005ece:	e0a5      	b.n	800601c <UART_SetConfig+0x284>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	76fb      	strb	r3, [r7, #27]
 8005ed4:	bf00      	nop
 8005ed6:	e0a1      	b.n	800601c <UART_SetConfig+0x284>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a6b      	ldr	r2, [pc, #428]	; (800608c <UART_SetConfig+0x2f4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d120      	bne.n	8005f24 <UART_SetConfig+0x18c>
 8005ee2:	4b68      	ldr	r3, [pc, #416]	; (8006084 <UART_SetConfig+0x2ec>)
 8005ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005eec:	2b10      	cmp	r3, #16
 8005eee:	d00f      	beq.n	8005f10 <UART_SetConfig+0x178>
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d802      	bhi.n	8005efa <UART_SetConfig+0x162>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <UART_SetConfig+0x16c>
 8005ef8:	e010      	b.n	8005f1c <UART_SetConfig+0x184>
 8005efa:	2b20      	cmp	r3, #32
 8005efc:	d005      	beq.n	8005f0a <UART_SetConfig+0x172>
 8005efe:	2b30      	cmp	r3, #48	; 0x30
 8005f00:	d009      	beq.n	8005f16 <UART_SetConfig+0x17e>
 8005f02:	e00b      	b.n	8005f1c <UART_SetConfig+0x184>
 8005f04:	2300      	movs	r3, #0
 8005f06:	76fb      	strb	r3, [r7, #27]
 8005f08:	e088      	b.n	800601c <UART_SetConfig+0x284>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	76fb      	strb	r3, [r7, #27]
 8005f0e:	e085      	b.n	800601c <UART_SetConfig+0x284>
 8005f10:	2304      	movs	r3, #4
 8005f12:	76fb      	strb	r3, [r7, #27]
 8005f14:	e082      	b.n	800601c <UART_SetConfig+0x284>
 8005f16:	2308      	movs	r3, #8
 8005f18:	76fb      	strb	r3, [r7, #27]
 8005f1a:	e07f      	b.n	800601c <UART_SetConfig+0x284>
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	76fb      	strb	r3, [r7, #27]
 8005f20:	bf00      	nop
 8005f22:	e07b      	b.n	800601c <UART_SetConfig+0x284>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a59      	ldr	r2, [pc, #356]	; (8006090 <UART_SetConfig+0x2f8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d120      	bne.n	8005f70 <UART_SetConfig+0x1d8>
 8005f2e:	4b55      	ldr	r3, [pc, #340]	; (8006084 <UART_SetConfig+0x2ec>)
 8005f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f38:	2b40      	cmp	r3, #64	; 0x40
 8005f3a:	d00f      	beq.n	8005f5c <UART_SetConfig+0x1c4>
 8005f3c:	2b40      	cmp	r3, #64	; 0x40
 8005f3e:	d802      	bhi.n	8005f46 <UART_SetConfig+0x1ae>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d005      	beq.n	8005f50 <UART_SetConfig+0x1b8>
 8005f44:	e010      	b.n	8005f68 <UART_SetConfig+0x1d0>
 8005f46:	2b80      	cmp	r3, #128	; 0x80
 8005f48:	d005      	beq.n	8005f56 <UART_SetConfig+0x1be>
 8005f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8005f4c:	d009      	beq.n	8005f62 <UART_SetConfig+0x1ca>
 8005f4e:	e00b      	b.n	8005f68 <UART_SetConfig+0x1d0>
 8005f50:	2300      	movs	r3, #0
 8005f52:	76fb      	strb	r3, [r7, #27]
 8005f54:	e062      	b.n	800601c <UART_SetConfig+0x284>
 8005f56:	2302      	movs	r3, #2
 8005f58:	76fb      	strb	r3, [r7, #27]
 8005f5a:	e05f      	b.n	800601c <UART_SetConfig+0x284>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	76fb      	strb	r3, [r7, #27]
 8005f60:	e05c      	b.n	800601c <UART_SetConfig+0x284>
 8005f62:	2308      	movs	r3, #8
 8005f64:	76fb      	strb	r3, [r7, #27]
 8005f66:	e059      	b.n	800601c <UART_SetConfig+0x284>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	76fb      	strb	r3, [r7, #27]
 8005f6c:	bf00      	nop
 8005f6e:	e055      	b.n	800601c <UART_SetConfig+0x284>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a47      	ldr	r2, [pc, #284]	; (8006094 <UART_SetConfig+0x2fc>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d124      	bne.n	8005fc4 <UART_SetConfig+0x22c>
 8005f7a:	4b42      	ldr	r3, [pc, #264]	; (8006084 <UART_SetConfig+0x2ec>)
 8005f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f88:	d012      	beq.n	8005fb0 <UART_SetConfig+0x218>
 8005f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f8e:	d802      	bhi.n	8005f96 <UART_SetConfig+0x1fe>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <UART_SetConfig+0x20c>
 8005f94:	e012      	b.n	8005fbc <UART_SetConfig+0x224>
 8005f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f9a:	d006      	beq.n	8005faa <UART_SetConfig+0x212>
 8005f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fa0:	d009      	beq.n	8005fb6 <UART_SetConfig+0x21e>
 8005fa2:	e00b      	b.n	8005fbc <UART_SetConfig+0x224>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	76fb      	strb	r3, [r7, #27]
 8005fa8:	e038      	b.n	800601c <UART_SetConfig+0x284>
 8005faa:	2302      	movs	r3, #2
 8005fac:	76fb      	strb	r3, [r7, #27]
 8005fae:	e035      	b.n	800601c <UART_SetConfig+0x284>
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	76fb      	strb	r3, [r7, #27]
 8005fb4:	e032      	b.n	800601c <UART_SetConfig+0x284>
 8005fb6:	2308      	movs	r3, #8
 8005fb8:	76fb      	strb	r3, [r7, #27]
 8005fba:	e02f      	b.n	800601c <UART_SetConfig+0x284>
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	76fb      	strb	r3, [r7, #27]
 8005fc0:	bf00      	nop
 8005fc2:	e02b      	b.n	800601c <UART_SetConfig+0x284>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2c      	ldr	r2, [pc, #176]	; (800607c <UART_SetConfig+0x2e4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d124      	bne.n	8006018 <UART_SetConfig+0x280>
 8005fce:	4b2d      	ldr	r3, [pc, #180]	; (8006084 <UART_SetConfig+0x2ec>)
 8005fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fdc:	d012      	beq.n	8006004 <UART_SetConfig+0x26c>
 8005fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe2:	d802      	bhi.n	8005fea <UART_SetConfig+0x252>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d007      	beq.n	8005ff8 <UART_SetConfig+0x260>
 8005fe8:	e012      	b.n	8006010 <UART_SetConfig+0x278>
 8005fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fee:	d006      	beq.n	8005ffe <UART_SetConfig+0x266>
 8005ff0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ff4:	d009      	beq.n	800600a <UART_SetConfig+0x272>
 8005ff6:	e00b      	b.n	8006010 <UART_SetConfig+0x278>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	76fb      	strb	r3, [r7, #27]
 8005ffc:	e00e      	b.n	800601c <UART_SetConfig+0x284>
 8005ffe:	2302      	movs	r3, #2
 8006000:	76fb      	strb	r3, [r7, #27]
 8006002:	e00b      	b.n	800601c <UART_SetConfig+0x284>
 8006004:	2304      	movs	r3, #4
 8006006:	76fb      	strb	r3, [r7, #27]
 8006008:	e008      	b.n	800601c <UART_SetConfig+0x284>
 800600a:	2308      	movs	r3, #8
 800600c:	76fb      	strb	r3, [r7, #27]
 800600e:	e005      	b.n	800601c <UART_SetConfig+0x284>
 8006010:	2310      	movs	r3, #16
 8006012:	76fb      	strb	r3, [r7, #27]
 8006014:	bf00      	nop
 8006016:	e001      	b.n	800601c <UART_SetConfig+0x284>
 8006018:	2310      	movs	r3, #16
 800601a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a16      	ldr	r2, [pc, #88]	; (800607c <UART_SetConfig+0x2e4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	f040 8087 	bne.w	8006136 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006028:	7efb      	ldrb	r3, [r7, #27]
 800602a:	2b08      	cmp	r3, #8
 800602c:	d836      	bhi.n	800609c <UART_SetConfig+0x304>
 800602e:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <UART_SetConfig+0x29c>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	08006059 	.word	0x08006059
 8006038:	0800609d 	.word	0x0800609d
 800603c:	08006061 	.word	0x08006061
 8006040:	0800609d 	.word	0x0800609d
 8006044:	08006067 	.word	0x08006067
 8006048:	0800609d 	.word	0x0800609d
 800604c:	0800609d 	.word	0x0800609d
 8006050:	0800609d 	.word	0x0800609d
 8006054:	0800606f 	.word	0x0800606f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006058:	f7fe fb5e 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 800605c:	6178      	str	r0, [r7, #20]
        break;
 800605e:	e022      	b.n	80060a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006060:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <UART_SetConfig+0x300>)
 8006062:	617b      	str	r3, [r7, #20]
        break;
 8006064:	e01f      	b.n	80060a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006066:	f7fe fac1 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 800606a:	6178      	str	r0, [r7, #20]
        break;
 800606c:	e01b      	b.n	80060a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800606e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006072:	617b      	str	r3, [r7, #20]
        break;
 8006074:	e017      	b.n	80060a6 <UART_SetConfig+0x30e>
 8006076:	bf00      	nop
 8006078:	efff69f3 	.word	0xefff69f3
 800607c:	40008000 	.word	0x40008000
 8006080:	40013800 	.word	0x40013800
 8006084:	40021000 	.word	0x40021000
 8006088:	40004400 	.word	0x40004400
 800608c:	40004800 	.word	0x40004800
 8006090:	40004c00 	.word	0x40004c00
 8006094:	40005000 	.word	0x40005000
 8006098:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	76bb      	strb	r3, [r7, #26]
        break;
 80060a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80f1 	beq.w	8006290 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	4613      	mov	r3, r2
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	4413      	add	r3, r2
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d305      	bcc.n	80060ca <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d902      	bls.n	80060d0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	76bb      	strb	r3, [r7, #26]
 80060ce:	e0df      	b.n	8006290 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	4619      	mov	r1, r3
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	f04f 0400 	mov.w	r4, #0
 80060e0:	0214      	lsls	r4, r2, #8
 80060e2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80060e6:	020b      	lsls	r3, r1, #8
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6852      	ldr	r2, [r2, #4]
 80060ec:	0852      	lsrs	r2, r2, #1
 80060ee:	4611      	mov	r1, r2
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	eb13 0b01 	adds.w	fp, r3, r1
 80060f8:	eb44 0c02 	adc.w	ip, r4, r2
 80060fc:	4658      	mov	r0, fp
 80060fe:	4661      	mov	r1, ip
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f04f 0400 	mov.w	r4, #0
 8006108:	461a      	mov	r2, r3
 800610a:	4623      	mov	r3, r4
 800610c:	f7fa f8b0 	bl	8000270 <__aeabi_uldivmod>
 8006110:	4603      	mov	r3, r0
 8006112:	460c      	mov	r4, r1
 8006114:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800611c:	d308      	bcc.n	8006130 <UART_SetConfig+0x398>
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006124:	d204      	bcs.n	8006130 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	60da      	str	r2, [r3, #12]
 800612e:	e0af      	b.n	8006290 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	76bb      	strb	r3, [r7, #26]
 8006134:	e0ac      	b.n	8006290 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800613e:	d15b      	bne.n	80061f8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006140:	7efb      	ldrb	r3, [r7, #27]
 8006142:	2b08      	cmp	r3, #8
 8006144:	d827      	bhi.n	8006196 <UART_SetConfig+0x3fe>
 8006146:	a201      	add	r2, pc, #4	; (adr r2, 800614c <UART_SetConfig+0x3b4>)
 8006148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614c:	08006171 	.word	0x08006171
 8006150:	08006179 	.word	0x08006179
 8006154:	08006181 	.word	0x08006181
 8006158:	08006197 	.word	0x08006197
 800615c:	08006187 	.word	0x08006187
 8006160:	08006197 	.word	0x08006197
 8006164:	08006197 	.word	0x08006197
 8006168:	08006197 	.word	0x08006197
 800616c:	0800618f 	.word	0x0800618f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006170:	f7fe fad2 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8006174:	6178      	str	r0, [r7, #20]
        break;
 8006176:	e013      	b.n	80061a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006178:	f7fe fae4 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 800617c:	6178      	str	r0, [r7, #20]
        break;
 800617e:	e00f      	b.n	80061a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006180:	4b49      	ldr	r3, [pc, #292]	; (80062a8 <UART_SetConfig+0x510>)
 8006182:	617b      	str	r3, [r7, #20]
        break;
 8006184:	e00c      	b.n	80061a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006186:	f7fe fa31 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 800618a:	6178      	str	r0, [r7, #20]
        break;
 800618c:	e008      	b.n	80061a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800618e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006192:	617b      	str	r3, [r7, #20]
        break;
 8006194:	e004      	b.n	80061a0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	76bb      	strb	r3, [r7, #26]
        break;
 800619e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d074      	beq.n	8006290 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	005a      	lsls	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	085b      	lsrs	r3, r3, #1
 80061b0:	441a      	add	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b0f      	cmp	r3, #15
 80061c2:	d916      	bls.n	80061f2 <UART_SetConfig+0x45a>
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ca:	d212      	bcs.n	80061f2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f023 030f 	bic.w	r3, r3, #15
 80061d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	085b      	lsrs	r3, r3, #1
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	89fb      	ldrh	r3, [r7, #14]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	89fa      	ldrh	r2, [r7, #14]
 80061ee:	60da      	str	r2, [r3, #12]
 80061f0:	e04e      	b.n	8006290 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	76bb      	strb	r3, [r7, #26]
 80061f6:	e04b      	b.n	8006290 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061f8:	7efb      	ldrb	r3, [r7, #27]
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d827      	bhi.n	800624e <UART_SetConfig+0x4b6>
 80061fe:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <UART_SetConfig+0x46c>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	08006229 	.word	0x08006229
 8006208:	08006231 	.word	0x08006231
 800620c:	08006239 	.word	0x08006239
 8006210:	0800624f 	.word	0x0800624f
 8006214:	0800623f 	.word	0x0800623f
 8006218:	0800624f 	.word	0x0800624f
 800621c:	0800624f 	.word	0x0800624f
 8006220:	0800624f 	.word	0x0800624f
 8006224:	08006247 	.word	0x08006247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006228:	f7fe fa76 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 800622c:	6178      	str	r0, [r7, #20]
        break;
 800622e:	e013      	b.n	8006258 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006230:	f7fe fa88 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 8006234:	6178      	str	r0, [r7, #20]
        break;
 8006236:	e00f      	b.n	8006258 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006238:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <UART_SetConfig+0x510>)
 800623a:	617b      	str	r3, [r7, #20]
        break;
 800623c:	e00c      	b.n	8006258 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800623e:	f7fe f9d5 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 8006242:	6178      	str	r0, [r7, #20]
        break;
 8006244:	e008      	b.n	8006258 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800624a:	617b      	str	r3, [r7, #20]
        break;
 800624c:	e004      	b.n	8006258 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	76bb      	strb	r3, [r7, #26]
        break;
 8006256:	bf00      	nop
    }

    if (pclk != 0U)
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d018      	beq.n	8006290 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	085a      	lsrs	r2, r3, #1
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	441a      	add	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006270:	b29b      	uxth	r3, r3
 8006272:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b0f      	cmp	r3, #15
 8006278:	d908      	bls.n	800628c <UART_SetConfig+0x4f4>
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006280:	d204      	bcs.n	800628c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	60da      	str	r2, [r3, #12]
 800628a:	e001      	b.n	8006290 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800629c:	7ebb      	ldrb	r3, [r7, #26]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80062a8:	00f42400 	.word	0x00f42400

080062ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	f003 0310 	and.w	r3, r3, #16
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01a      	beq.n	80063c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063aa:	d10a      	bne.n	80063c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	605a      	str	r2, [r3, #4]
  }
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80063fe:	f7fb fb33 	bl	8001a68 <HAL_GetTick>
 8006402:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b08      	cmp	r3, #8
 8006410:	d10e      	bne.n	8006430 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006412:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f82a 	bl	800647a <UART_WaitOnFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e020      	b.n	8006472 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	2b04      	cmp	r3, #4
 800643c:	d10e      	bne.n	800645c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800643e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f814 	bl	800647a <UART_WaitOnFlagUntilTimeout>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e00a      	b.n	8006472 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2220      	movs	r2, #32
 8006460:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	603b      	str	r3, [r7, #0]
 8006486:	4613      	mov	r3, r2
 8006488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800648a:	e05d      	b.n	8006548 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006492:	d059      	beq.n	8006548 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006494:	f7fb fae8 	bl	8001a68 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d302      	bcc.n	80064aa <UART_WaitOnFlagUntilTimeout+0x30>
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d11b      	bne.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0201 	bic.w	r2, r2, #1
 80064c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e042      	b.n	8006568 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d02b      	beq.n	8006548 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064fe:	d123      	bne.n	8006548 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006508:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006518:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0201 	bic.w	r2, r2, #1
 8006528:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2220      	movs	r2, #32
 8006534:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2220      	movs	r2, #32
 800653a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e00f      	b.n	8006568 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69da      	ldr	r2, [r3, #28]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4013      	ands	r3, r2
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	429a      	cmp	r2, r3
 8006556:	bf0c      	ite	eq
 8006558:	2301      	moveq	r3, #1
 800655a:	2300      	movne	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	429a      	cmp	r2, r3
 8006564:	d092      	beq.n	800648c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <__errno>:
 8006570:	4b01      	ldr	r3, [pc, #4]	; (8006578 <__errno+0x8>)
 8006572:	6818      	ldr	r0, [r3, #0]
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	2000000c 	.word	0x2000000c

0800657c <__libc_init_array>:
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	4e0d      	ldr	r6, [pc, #52]	; (80065b4 <__libc_init_array+0x38>)
 8006580:	4c0d      	ldr	r4, [pc, #52]	; (80065b8 <__libc_init_array+0x3c>)
 8006582:	1ba4      	subs	r4, r4, r6
 8006584:	10a4      	asrs	r4, r4, #2
 8006586:	2500      	movs	r5, #0
 8006588:	42a5      	cmp	r5, r4
 800658a:	d109      	bne.n	80065a0 <__libc_init_array+0x24>
 800658c:	4e0b      	ldr	r6, [pc, #44]	; (80065bc <__libc_init_array+0x40>)
 800658e:	4c0c      	ldr	r4, [pc, #48]	; (80065c0 <__libc_init_array+0x44>)
 8006590:	f000 ff04 	bl	800739c <_init>
 8006594:	1ba4      	subs	r4, r4, r6
 8006596:	10a4      	asrs	r4, r4, #2
 8006598:	2500      	movs	r5, #0
 800659a:	42a5      	cmp	r5, r4
 800659c:	d105      	bne.n	80065aa <__libc_init_array+0x2e>
 800659e:	bd70      	pop	{r4, r5, r6, pc}
 80065a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065a4:	4798      	blx	r3
 80065a6:	3501      	adds	r5, #1
 80065a8:	e7ee      	b.n	8006588 <__libc_init_array+0xc>
 80065aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065ae:	4798      	blx	r3
 80065b0:	3501      	adds	r5, #1
 80065b2:	e7f2      	b.n	800659a <__libc_init_array+0x1e>
 80065b4:	080074ac 	.word	0x080074ac
 80065b8:	080074ac 	.word	0x080074ac
 80065bc:	080074ac 	.word	0x080074ac
 80065c0:	080074b0 	.word	0x080074b0

080065c4 <memset>:
 80065c4:	4402      	add	r2, r0
 80065c6:	4603      	mov	r3, r0
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d100      	bne.n	80065ce <memset+0xa>
 80065cc:	4770      	bx	lr
 80065ce:	f803 1b01 	strb.w	r1, [r3], #1
 80065d2:	e7f9      	b.n	80065c8 <memset+0x4>

080065d4 <_free_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	4605      	mov	r5, r0
 80065d8:	2900      	cmp	r1, #0
 80065da:	d045      	beq.n	8006668 <_free_r+0x94>
 80065dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e0:	1f0c      	subs	r4, r1, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bfb8      	it	lt
 80065e6:	18e4      	addlt	r4, r4, r3
 80065e8:	f000 f98e 	bl	8006908 <__malloc_lock>
 80065ec:	4a1f      	ldr	r2, [pc, #124]	; (800666c <_free_r+0x98>)
 80065ee:	6813      	ldr	r3, [r2, #0]
 80065f0:	4610      	mov	r0, r2
 80065f2:	b933      	cbnz	r3, 8006602 <_free_r+0x2e>
 80065f4:	6063      	str	r3, [r4, #4]
 80065f6:	6014      	str	r4, [r2, #0]
 80065f8:	4628      	mov	r0, r5
 80065fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065fe:	f000 b984 	b.w	800690a <__malloc_unlock>
 8006602:	42a3      	cmp	r3, r4
 8006604:	d90c      	bls.n	8006620 <_free_r+0x4c>
 8006606:	6821      	ldr	r1, [r4, #0]
 8006608:	1862      	adds	r2, r4, r1
 800660a:	4293      	cmp	r3, r2
 800660c:	bf04      	itt	eq
 800660e:	681a      	ldreq	r2, [r3, #0]
 8006610:	685b      	ldreq	r3, [r3, #4]
 8006612:	6063      	str	r3, [r4, #4]
 8006614:	bf04      	itt	eq
 8006616:	1852      	addeq	r2, r2, r1
 8006618:	6022      	streq	r2, [r4, #0]
 800661a:	6004      	str	r4, [r0, #0]
 800661c:	e7ec      	b.n	80065f8 <_free_r+0x24>
 800661e:	4613      	mov	r3, r2
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	b10a      	cbz	r2, 8006628 <_free_r+0x54>
 8006624:	42a2      	cmp	r2, r4
 8006626:	d9fa      	bls.n	800661e <_free_r+0x4a>
 8006628:	6819      	ldr	r1, [r3, #0]
 800662a:	1858      	adds	r0, r3, r1
 800662c:	42a0      	cmp	r0, r4
 800662e:	d10b      	bne.n	8006648 <_free_r+0x74>
 8006630:	6820      	ldr	r0, [r4, #0]
 8006632:	4401      	add	r1, r0
 8006634:	1858      	adds	r0, r3, r1
 8006636:	4282      	cmp	r2, r0
 8006638:	6019      	str	r1, [r3, #0]
 800663a:	d1dd      	bne.n	80065f8 <_free_r+0x24>
 800663c:	6810      	ldr	r0, [r2, #0]
 800663e:	6852      	ldr	r2, [r2, #4]
 8006640:	605a      	str	r2, [r3, #4]
 8006642:	4401      	add	r1, r0
 8006644:	6019      	str	r1, [r3, #0]
 8006646:	e7d7      	b.n	80065f8 <_free_r+0x24>
 8006648:	d902      	bls.n	8006650 <_free_r+0x7c>
 800664a:	230c      	movs	r3, #12
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	e7d3      	b.n	80065f8 <_free_r+0x24>
 8006650:	6820      	ldr	r0, [r4, #0]
 8006652:	1821      	adds	r1, r4, r0
 8006654:	428a      	cmp	r2, r1
 8006656:	bf04      	itt	eq
 8006658:	6811      	ldreq	r1, [r2, #0]
 800665a:	6852      	ldreq	r2, [r2, #4]
 800665c:	6062      	str	r2, [r4, #4]
 800665e:	bf04      	itt	eq
 8006660:	1809      	addeq	r1, r1, r0
 8006662:	6021      	streq	r1, [r4, #0]
 8006664:	605c      	str	r4, [r3, #4]
 8006666:	e7c7      	b.n	80065f8 <_free_r+0x24>
 8006668:	bd38      	pop	{r3, r4, r5, pc}
 800666a:	bf00      	nop
 800666c:	200000ac 	.word	0x200000ac

08006670 <_malloc_r>:
 8006670:	b570      	push	{r4, r5, r6, lr}
 8006672:	1ccd      	adds	r5, r1, #3
 8006674:	f025 0503 	bic.w	r5, r5, #3
 8006678:	3508      	adds	r5, #8
 800667a:	2d0c      	cmp	r5, #12
 800667c:	bf38      	it	cc
 800667e:	250c      	movcc	r5, #12
 8006680:	2d00      	cmp	r5, #0
 8006682:	4606      	mov	r6, r0
 8006684:	db01      	blt.n	800668a <_malloc_r+0x1a>
 8006686:	42a9      	cmp	r1, r5
 8006688:	d903      	bls.n	8006692 <_malloc_r+0x22>
 800668a:	230c      	movs	r3, #12
 800668c:	6033      	str	r3, [r6, #0]
 800668e:	2000      	movs	r0, #0
 8006690:	bd70      	pop	{r4, r5, r6, pc}
 8006692:	f000 f939 	bl	8006908 <__malloc_lock>
 8006696:	4a21      	ldr	r2, [pc, #132]	; (800671c <_malloc_r+0xac>)
 8006698:	6814      	ldr	r4, [r2, #0]
 800669a:	4621      	mov	r1, r4
 800669c:	b991      	cbnz	r1, 80066c4 <_malloc_r+0x54>
 800669e:	4c20      	ldr	r4, [pc, #128]	; (8006720 <_malloc_r+0xb0>)
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	b91b      	cbnz	r3, 80066ac <_malloc_r+0x3c>
 80066a4:	4630      	mov	r0, r6
 80066a6:	f000 f855 	bl	8006754 <_sbrk_r>
 80066aa:	6020      	str	r0, [r4, #0]
 80066ac:	4629      	mov	r1, r5
 80066ae:	4630      	mov	r0, r6
 80066b0:	f000 f850 	bl	8006754 <_sbrk_r>
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	d124      	bne.n	8006702 <_malloc_r+0x92>
 80066b8:	230c      	movs	r3, #12
 80066ba:	6033      	str	r3, [r6, #0]
 80066bc:	4630      	mov	r0, r6
 80066be:	f000 f924 	bl	800690a <__malloc_unlock>
 80066c2:	e7e4      	b.n	800668e <_malloc_r+0x1e>
 80066c4:	680b      	ldr	r3, [r1, #0]
 80066c6:	1b5b      	subs	r3, r3, r5
 80066c8:	d418      	bmi.n	80066fc <_malloc_r+0x8c>
 80066ca:	2b0b      	cmp	r3, #11
 80066cc:	d90f      	bls.n	80066ee <_malloc_r+0x7e>
 80066ce:	600b      	str	r3, [r1, #0]
 80066d0:	50cd      	str	r5, [r1, r3]
 80066d2:	18cc      	adds	r4, r1, r3
 80066d4:	4630      	mov	r0, r6
 80066d6:	f000 f918 	bl	800690a <__malloc_unlock>
 80066da:	f104 000b 	add.w	r0, r4, #11
 80066de:	1d23      	adds	r3, r4, #4
 80066e0:	f020 0007 	bic.w	r0, r0, #7
 80066e4:	1ac3      	subs	r3, r0, r3
 80066e6:	d0d3      	beq.n	8006690 <_malloc_r+0x20>
 80066e8:	425a      	negs	r2, r3
 80066ea:	50e2      	str	r2, [r4, r3]
 80066ec:	e7d0      	b.n	8006690 <_malloc_r+0x20>
 80066ee:	428c      	cmp	r4, r1
 80066f0:	684b      	ldr	r3, [r1, #4]
 80066f2:	bf16      	itet	ne
 80066f4:	6063      	strne	r3, [r4, #4]
 80066f6:	6013      	streq	r3, [r2, #0]
 80066f8:	460c      	movne	r4, r1
 80066fa:	e7eb      	b.n	80066d4 <_malloc_r+0x64>
 80066fc:	460c      	mov	r4, r1
 80066fe:	6849      	ldr	r1, [r1, #4]
 8006700:	e7cc      	b.n	800669c <_malloc_r+0x2c>
 8006702:	1cc4      	adds	r4, r0, #3
 8006704:	f024 0403 	bic.w	r4, r4, #3
 8006708:	42a0      	cmp	r0, r4
 800670a:	d005      	beq.n	8006718 <_malloc_r+0xa8>
 800670c:	1a21      	subs	r1, r4, r0
 800670e:	4630      	mov	r0, r6
 8006710:	f000 f820 	bl	8006754 <_sbrk_r>
 8006714:	3001      	adds	r0, #1
 8006716:	d0cf      	beq.n	80066b8 <_malloc_r+0x48>
 8006718:	6025      	str	r5, [r4, #0]
 800671a:	e7db      	b.n	80066d4 <_malloc_r+0x64>
 800671c:	200000ac 	.word	0x200000ac
 8006720:	200000b0 	.word	0x200000b0

08006724 <iprintf>:
 8006724:	b40f      	push	{r0, r1, r2, r3}
 8006726:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <iprintf+0x2c>)
 8006728:	b513      	push	{r0, r1, r4, lr}
 800672a:	681c      	ldr	r4, [r3, #0]
 800672c:	b124      	cbz	r4, 8006738 <iprintf+0x14>
 800672e:	69a3      	ldr	r3, [r4, #24]
 8006730:	b913      	cbnz	r3, 8006738 <iprintf+0x14>
 8006732:	4620      	mov	r0, r4
 8006734:	f000 f85e 	bl	80067f4 <__sinit>
 8006738:	ab05      	add	r3, sp, #20
 800673a:	9a04      	ldr	r2, [sp, #16]
 800673c:	68a1      	ldr	r1, [r4, #8]
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	4620      	mov	r0, r4
 8006742:	f000 f90d 	bl	8006960 <_vfiprintf_r>
 8006746:	b002      	add	sp, #8
 8006748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800674c:	b004      	add	sp, #16
 800674e:	4770      	bx	lr
 8006750:	2000000c 	.word	0x2000000c

08006754 <_sbrk_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	4c06      	ldr	r4, [pc, #24]	; (8006770 <_sbrk_r+0x1c>)
 8006758:	2300      	movs	r3, #0
 800675a:	4605      	mov	r5, r0
 800675c:	4608      	mov	r0, r1
 800675e:	6023      	str	r3, [r4, #0]
 8006760:	f7fa ff86 	bl	8001670 <_sbrk>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_sbrk_r+0x1a>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	b103      	cbz	r3, 800676e <_sbrk_r+0x1a>
 800676c:	602b      	str	r3, [r5, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	20000250 	.word	0x20000250

08006774 <std>:
 8006774:	2300      	movs	r3, #0
 8006776:	b510      	push	{r4, lr}
 8006778:	4604      	mov	r4, r0
 800677a:	e9c0 3300 	strd	r3, r3, [r0]
 800677e:	6083      	str	r3, [r0, #8]
 8006780:	8181      	strh	r1, [r0, #12]
 8006782:	6643      	str	r3, [r0, #100]	; 0x64
 8006784:	81c2      	strh	r2, [r0, #14]
 8006786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800678a:	6183      	str	r3, [r0, #24]
 800678c:	4619      	mov	r1, r3
 800678e:	2208      	movs	r2, #8
 8006790:	305c      	adds	r0, #92	; 0x5c
 8006792:	f7ff ff17 	bl	80065c4 <memset>
 8006796:	4b05      	ldr	r3, [pc, #20]	; (80067ac <std+0x38>)
 8006798:	6263      	str	r3, [r4, #36]	; 0x24
 800679a:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <std+0x3c>)
 800679c:	62a3      	str	r3, [r4, #40]	; 0x28
 800679e:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <std+0x40>)
 80067a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067a2:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <std+0x44>)
 80067a4:	6224      	str	r4, [r4, #32]
 80067a6:	6323      	str	r3, [r4, #48]	; 0x30
 80067a8:	bd10      	pop	{r4, pc}
 80067aa:	bf00      	nop
 80067ac:	08006e9d 	.word	0x08006e9d
 80067b0:	08006ebf 	.word	0x08006ebf
 80067b4:	08006ef7 	.word	0x08006ef7
 80067b8:	08006f1b 	.word	0x08006f1b

080067bc <_cleanup_r>:
 80067bc:	4901      	ldr	r1, [pc, #4]	; (80067c4 <_cleanup_r+0x8>)
 80067be:	f000 b885 	b.w	80068cc <_fwalk_reent>
 80067c2:	bf00      	nop
 80067c4:	080071f5 	.word	0x080071f5

080067c8 <__sfmoreglue>:
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	1e4a      	subs	r2, r1, #1
 80067cc:	2568      	movs	r5, #104	; 0x68
 80067ce:	4355      	muls	r5, r2
 80067d0:	460e      	mov	r6, r1
 80067d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067d6:	f7ff ff4b 	bl	8006670 <_malloc_r>
 80067da:	4604      	mov	r4, r0
 80067dc:	b140      	cbz	r0, 80067f0 <__sfmoreglue+0x28>
 80067de:	2100      	movs	r1, #0
 80067e0:	e9c0 1600 	strd	r1, r6, [r0]
 80067e4:	300c      	adds	r0, #12
 80067e6:	60a0      	str	r0, [r4, #8]
 80067e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067ec:	f7ff feea 	bl	80065c4 <memset>
 80067f0:	4620      	mov	r0, r4
 80067f2:	bd70      	pop	{r4, r5, r6, pc}

080067f4 <__sinit>:
 80067f4:	6983      	ldr	r3, [r0, #24]
 80067f6:	b510      	push	{r4, lr}
 80067f8:	4604      	mov	r4, r0
 80067fa:	bb33      	cbnz	r3, 800684a <__sinit+0x56>
 80067fc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006800:	6503      	str	r3, [r0, #80]	; 0x50
 8006802:	4b12      	ldr	r3, [pc, #72]	; (800684c <__sinit+0x58>)
 8006804:	4a12      	ldr	r2, [pc, #72]	; (8006850 <__sinit+0x5c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6282      	str	r2, [r0, #40]	; 0x28
 800680a:	4298      	cmp	r0, r3
 800680c:	bf04      	itt	eq
 800680e:	2301      	moveq	r3, #1
 8006810:	6183      	streq	r3, [r0, #24]
 8006812:	f000 f81f 	bl	8006854 <__sfp>
 8006816:	6060      	str	r0, [r4, #4]
 8006818:	4620      	mov	r0, r4
 800681a:	f000 f81b 	bl	8006854 <__sfp>
 800681e:	60a0      	str	r0, [r4, #8]
 8006820:	4620      	mov	r0, r4
 8006822:	f000 f817 	bl	8006854 <__sfp>
 8006826:	2200      	movs	r2, #0
 8006828:	60e0      	str	r0, [r4, #12]
 800682a:	2104      	movs	r1, #4
 800682c:	6860      	ldr	r0, [r4, #4]
 800682e:	f7ff ffa1 	bl	8006774 <std>
 8006832:	2201      	movs	r2, #1
 8006834:	2109      	movs	r1, #9
 8006836:	68a0      	ldr	r0, [r4, #8]
 8006838:	f7ff ff9c 	bl	8006774 <std>
 800683c:	2202      	movs	r2, #2
 800683e:	2112      	movs	r1, #18
 8006840:	68e0      	ldr	r0, [r4, #12]
 8006842:	f7ff ff97 	bl	8006774 <std>
 8006846:	2301      	movs	r3, #1
 8006848:	61a3      	str	r3, [r4, #24]
 800684a:	bd10      	pop	{r4, pc}
 800684c:	0800740c 	.word	0x0800740c
 8006850:	080067bd 	.word	0x080067bd

08006854 <__sfp>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	4b1b      	ldr	r3, [pc, #108]	; (80068c4 <__sfp+0x70>)
 8006858:	681e      	ldr	r6, [r3, #0]
 800685a:	69b3      	ldr	r3, [r6, #24]
 800685c:	4607      	mov	r7, r0
 800685e:	b913      	cbnz	r3, 8006866 <__sfp+0x12>
 8006860:	4630      	mov	r0, r6
 8006862:	f7ff ffc7 	bl	80067f4 <__sinit>
 8006866:	3648      	adds	r6, #72	; 0x48
 8006868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800686c:	3b01      	subs	r3, #1
 800686e:	d503      	bpl.n	8006878 <__sfp+0x24>
 8006870:	6833      	ldr	r3, [r6, #0]
 8006872:	b133      	cbz	r3, 8006882 <__sfp+0x2e>
 8006874:	6836      	ldr	r6, [r6, #0]
 8006876:	e7f7      	b.n	8006868 <__sfp+0x14>
 8006878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800687c:	b16d      	cbz	r5, 800689a <__sfp+0x46>
 800687e:	3468      	adds	r4, #104	; 0x68
 8006880:	e7f4      	b.n	800686c <__sfp+0x18>
 8006882:	2104      	movs	r1, #4
 8006884:	4638      	mov	r0, r7
 8006886:	f7ff ff9f 	bl	80067c8 <__sfmoreglue>
 800688a:	6030      	str	r0, [r6, #0]
 800688c:	2800      	cmp	r0, #0
 800688e:	d1f1      	bne.n	8006874 <__sfp+0x20>
 8006890:	230c      	movs	r3, #12
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	4604      	mov	r4, r0
 8006896:	4620      	mov	r0, r4
 8006898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800689a:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <__sfp+0x74>)
 800689c:	6665      	str	r5, [r4, #100]	; 0x64
 800689e:	e9c4 5500 	strd	r5, r5, [r4]
 80068a2:	60a5      	str	r5, [r4, #8]
 80068a4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80068a8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80068ac:	2208      	movs	r2, #8
 80068ae:	4629      	mov	r1, r5
 80068b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068b4:	f7ff fe86 	bl	80065c4 <memset>
 80068b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068c0:	e7e9      	b.n	8006896 <__sfp+0x42>
 80068c2:	bf00      	nop
 80068c4:	0800740c 	.word	0x0800740c
 80068c8:	ffff0001 	.word	0xffff0001

080068cc <_fwalk_reent>:
 80068cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d0:	4680      	mov	r8, r0
 80068d2:	4689      	mov	r9, r1
 80068d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068d8:	2600      	movs	r6, #0
 80068da:	b914      	cbnz	r4, 80068e2 <_fwalk_reent+0x16>
 80068dc:	4630      	mov	r0, r6
 80068de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80068e6:	3f01      	subs	r7, #1
 80068e8:	d501      	bpl.n	80068ee <_fwalk_reent+0x22>
 80068ea:	6824      	ldr	r4, [r4, #0]
 80068ec:	e7f5      	b.n	80068da <_fwalk_reent+0xe>
 80068ee:	89ab      	ldrh	r3, [r5, #12]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d907      	bls.n	8006904 <_fwalk_reent+0x38>
 80068f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068f8:	3301      	adds	r3, #1
 80068fa:	d003      	beq.n	8006904 <_fwalk_reent+0x38>
 80068fc:	4629      	mov	r1, r5
 80068fe:	4640      	mov	r0, r8
 8006900:	47c8      	blx	r9
 8006902:	4306      	orrs	r6, r0
 8006904:	3568      	adds	r5, #104	; 0x68
 8006906:	e7ee      	b.n	80068e6 <_fwalk_reent+0x1a>

08006908 <__malloc_lock>:
 8006908:	4770      	bx	lr

0800690a <__malloc_unlock>:
 800690a:	4770      	bx	lr

0800690c <__sfputc_r>:
 800690c:	6893      	ldr	r3, [r2, #8]
 800690e:	3b01      	subs	r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	b410      	push	{r4}
 8006914:	6093      	str	r3, [r2, #8]
 8006916:	da08      	bge.n	800692a <__sfputc_r+0x1e>
 8006918:	6994      	ldr	r4, [r2, #24]
 800691a:	42a3      	cmp	r3, r4
 800691c:	db01      	blt.n	8006922 <__sfputc_r+0x16>
 800691e:	290a      	cmp	r1, #10
 8006920:	d103      	bne.n	800692a <__sfputc_r+0x1e>
 8006922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006926:	f000 bafd 	b.w	8006f24 <__swbuf_r>
 800692a:	6813      	ldr	r3, [r2, #0]
 800692c:	1c58      	adds	r0, r3, #1
 800692e:	6010      	str	r0, [r2, #0]
 8006930:	7019      	strb	r1, [r3, #0]
 8006932:	4608      	mov	r0, r1
 8006934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006938:	4770      	bx	lr

0800693a <__sfputs_r>:
 800693a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693c:	4606      	mov	r6, r0
 800693e:	460f      	mov	r7, r1
 8006940:	4614      	mov	r4, r2
 8006942:	18d5      	adds	r5, r2, r3
 8006944:	42ac      	cmp	r4, r5
 8006946:	d101      	bne.n	800694c <__sfputs_r+0x12>
 8006948:	2000      	movs	r0, #0
 800694a:	e007      	b.n	800695c <__sfputs_r+0x22>
 800694c:	463a      	mov	r2, r7
 800694e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006952:	4630      	mov	r0, r6
 8006954:	f7ff ffda 	bl	800690c <__sfputc_r>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d1f3      	bne.n	8006944 <__sfputs_r+0xa>
 800695c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006960 <_vfiprintf_r>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	460c      	mov	r4, r1
 8006966:	b09d      	sub	sp, #116	; 0x74
 8006968:	4617      	mov	r7, r2
 800696a:	461d      	mov	r5, r3
 800696c:	4606      	mov	r6, r0
 800696e:	b118      	cbz	r0, 8006978 <_vfiprintf_r+0x18>
 8006970:	6983      	ldr	r3, [r0, #24]
 8006972:	b90b      	cbnz	r3, 8006978 <_vfiprintf_r+0x18>
 8006974:	f7ff ff3e 	bl	80067f4 <__sinit>
 8006978:	4b7c      	ldr	r3, [pc, #496]	; (8006b6c <_vfiprintf_r+0x20c>)
 800697a:	429c      	cmp	r4, r3
 800697c:	d158      	bne.n	8006a30 <_vfiprintf_r+0xd0>
 800697e:	6874      	ldr	r4, [r6, #4]
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	0718      	lsls	r0, r3, #28
 8006984:	d55e      	bpl.n	8006a44 <_vfiprintf_r+0xe4>
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d05b      	beq.n	8006a44 <_vfiprintf_r+0xe4>
 800698c:	2300      	movs	r3, #0
 800698e:	9309      	str	r3, [sp, #36]	; 0x24
 8006990:	2320      	movs	r3, #32
 8006992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006996:	2330      	movs	r3, #48	; 0x30
 8006998:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800699c:	9503      	str	r5, [sp, #12]
 800699e:	f04f 0b01 	mov.w	fp, #1
 80069a2:	46b8      	mov	r8, r7
 80069a4:	4645      	mov	r5, r8
 80069a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80069aa:	b10b      	cbz	r3, 80069b0 <_vfiprintf_r+0x50>
 80069ac:	2b25      	cmp	r3, #37	; 0x25
 80069ae:	d154      	bne.n	8006a5a <_vfiprintf_r+0xfa>
 80069b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80069b4:	d00b      	beq.n	80069ce <_vfiprintf_r+0x6e>
 80069b6:	4653      	mov	r3, sl
 80069b8:	463a      	mov	r2, r7
 80069ba:	4621      	mov	r1, r4
 80069bc:	4630      	mov	r0, r6
 80069be:	f7ff ffbc 	bl	800693a <__sfputs_r>
 80069c2:	3001      	adds	r0, #1
 80069c4:	f000 80c2 	beq.w	8006b4c <_vfiprintf_r+0x1ec>
 80069c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ca:	4453      	add	r3, sl
 80069cc:	9309      	str	r3, [sp, #36]	; 0x24
 80069ce:	f898 3000 	ldrb.w	r3, [r8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 80ba 	beq.w	8006b4c <_vfiprintf_r+0x1ec>
 80069d8:	2300      	movs	r3, #0
 80069da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069e2:	9304      	str	r3, [sp, #16]
 80069e4:	9307      	str	r3, [sp, #28]
 80069e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069ea:	931a      	str	r3, [sp, #104]	; 0x68
 80069ec:	46a8      	mov	r8, r5
 80069ee:	2205      	movs	r2, #5
 80069f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80069f4:	485e      	ldr	r0, [pc, #376]	; (8006b70 <_vfiprintf_r+0x210>)
 80069f6:	f7f9 fbeb 	bl	80001d0 <memchr>
 80069fa:	9b04      	ldr	r3, [sp, #16]
 80069fc:	bb78      	cbnz	r0, 8006a5e <_vfiprintf_r+0xfe>
 80069fe:	06d9      	lsls	r1, r3, #27
 8006a00:	bf44      	itt	mi
 8006a02:	2220      	movmi	r2, #32
 8006a04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a08:	071a      	lsls	r2, r3, #28
 8006a0a:	bf44      	itt	mi
 8006a0c:	222b      	movmi	r2, #43	; 0x2b
 8006a0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a12:	782a      	ldrb	r2, [r5, #0]
 8006a14:	2a2a      	cmp	r2, #42	; 0x2a
 8006a16:	d02a      	beq.n	8006a6e <_vfiprintf_r+0x10e>
 8006a18:	9a07      	ldr	r2, [sp, #28]
 8006a1a:	46a8      	mov	r8, r5
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	250a      	movs	r5, #10
 8006a20:	4641      	mov	r1, r8
 8006a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a26:	3b30      	subs	r3, #48	; 0x30
 8006a28:	2b09      	cmp	r3, #9
 8006a2a:	d969      	bls.n	8006b00 <_vfiprintf_r+0x1a0>
 8006a2c:	b360      	cbz	r0, 8006a88 <_vfiprintf_r+0x128>
 8006a2e:	e024      	b.n	8006a7a <_vfiprintf_r+0x11a>
 8006a30:	4b50      	ldr	r3, [pc, #320]	; (8006b74 <_vfiprintf_r+0x214>)
 8006a32:	429c      	cmp	r4, r3
 8006a34:	d101      	bne.n	8006a3a <_vfiprintf_r+0xda>
 8006a36:	68b4      	ldr	r4, [r6, #8]
 8006a38:	e7a2      	b.n	8006980 <_vfiprintf_r+0x20>
 8006a3a:	4b4f      	ldr	r3, [pc, #316]	; (8006b78 <_vfiprintf_r+0x218>)
 8006a3c:	429c      	cmp	r4, r3
 8006a3e:	bf08      	it	eq
 8006a40:	68f4      	ldreq	r4, [r6, #12]
 8006a42:	e79d      	b.n	8006980 <_vfiprintf_r+0x20>
 8006a44:	4621      	mov	r1, r4
 8006a46:	4630      	mov	r0, r6
 8006a48:	f000 fad0 	bl	8006fec <__swsetup_r>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d09d      	beq.n	800698c <_vfiprintf_r+0x2c>
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a54:	b01d      	add	sp, #116	; 0x74
 8006a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5a:	46a8      	mov	r8, r5
 8006a5c:	e7a2      	b.n	80069a4 <_vfiprintf_r+0x44>
 8006a5e:	4a44      	ldr	r2, [pc, #272]	; (8006b70 <_vfiprintf_r+0x210>)
 8006a60:	1a80      	subs	r0, r0, r2
 8006a62:	fa0b f000 	lsl.w	r0, fp, r0
 8006a66:	4318      	orrs	r0, r3
 8006a68:	9004      	str	r0, [sp, #16]
 8006a6a:	4645      	mov	r5, r8
 8006a6c:	e7be      	b.n	80069ec <_vfiprintf_r+0x8c>
 8006a6e:	9a03      	ldr	r2, [sp, #12]
 8006a70:	1d11      	adds	r1, r2, #4
 8006a72:	6812      	ldr	r2, [r2, #0]
 8006a74:	9103      	str	r1, [sp, #12]
 8006a76:	2a00      	cmp	r2, #0
 8006a78:	db01      	blt.n	8006a7e <_vfiprintf_r+0x11e>
 8006a7a:	9207      	str	r2, [sp, #28]
 8006a7c:	e004      	b.n	8006a88 <_vfiprintf_r+0x128>
 8006a7e:	4252      	negs	r2, r2
 8006a80:	f043 0302 	orr.w	r3, r3, #2
 8006a84:	9207      	str	r2, [sp, #28]
 8006a86:	9304      	str	r3, [sp, #16]
 8006a88:	f898 3000 	ldrb.w	r3, [r8]
 8006a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a8e:	d10e      	bne.n	8006aae <_vfiprintf_r+0x14e>
 8006a90:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006a94:	2b2a      	cmp	r3, #42	; 0x2a
 8006a96:	d138      	bne.n	8006b0a <_vfiprintf_r+0x1aa>
 8006a98:	9b03      	ldr	r3, [sp, #12]
 8006a9a:	1d1a      	adds	r2, r3, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	9203      	str	r2, [sp, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bfb8      	it	lt
 8006aa4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006aa8:	f108 0802 	add.w	r8, r8, #2
 8006aac:	9305      	str	r3, [sp, #20]
 8006aae:	4d33      	ldr	r5, [pc, #204]	; (8006b7c <_vfiprintf_r+0x21c>)
 8006ab0:	f898 1000 	ldrb.w	r1, [r8]
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f7f9 fb8a 	bl	80001d0 <memchr>
 8006abc:	b140      	cbz	r0, 8006ad0 <_vfiprintf_r+0x170>
 8006abe:	2340      	movs	r3, #64	; 0x40
 8006ac0:	1b40      	subs	r0, r0, r5
 8006ac2:	fa03 f000 	lsl.w	r0, r3, r0
 8006ac6:	9b04      	ldr	r3, [sp, #16]
 8006ac8:	4303      	orrs	r3, r0
 8006aca:	f108 0801 	add.w	r8, r8, #1
 8006ace:	9304      	str	r3, [sp, #16]
 8006ad0:	f898 1000 	ldrb.w	r1, [r8]
 8006ad4:	482a      	ldr	r0, [pc, #168]	; (8006b80 <_vfiprintf_r+0x220>)
 8006ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ada:	2206      	movs	r2, #6
 8006adc:	f108 0701 	add.w	r7, r8, #1
 8006ae0:	f7f9 fb76 	bl	80001d0 <memchr>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d037      	beq.n	8006b58 <_vfiprintf_r+0x1f8>
 8006ae8:	4b26      	ldr	r3, [pc, #152]	; (8006b84 <_vfiprintf_r+0x224>)
 8006aea:	bb1b      	cbnz	r3, 8006b34 <_vfiprintf_r+0x1d4>
 8006aec:	9b03      	ldr	r3, [sp, #12]
 8006aee:	3307      	adds	r3, #7
 8006af0:	f023 0307 	bic.w	r3, r3, #7
 8006af4:	3308      	adds	r3, #8
 8006af6:	9303      	str	r3, [sp, #12]
 8006af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006afa:	444b      	add	r3, r9
 8006afc:	9309      	str	r3, [sp, #36]	; 0x24
 8006afe:	e750      	b.n	80069a2 <_vfiprintf_r+0x42>
 8006b00:	fb05 3202 	mla	r2, r5, r2, r3
 8006b04:	2001      	movs	r0, #1
 8006b06:	4688      	mov	r8, r1
 8006b08:	e78a      	b.n	8006a20 <_vfiprintf_r+0xc0>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f108 0801 	add.w	r8, r8, #1
 8006b10:	9305      	str	r3, [sp, #20]
 8006b12:	4619      	mov	r1, r3
 8006b14:	250a      	movs	r5, #10
 8006b16:	4640      	mov	r0, r8
 8006b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b1c:	3a30      	subs	r2, #48	; 0x30
 8006b1e:	2a09      	cmp	r2, #9
 8006b20:	d903      	bls.n	8006b2a <_vfiprintf_r+0x1ca>
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0c3      	beq.n	8006aae <_vfiprintf_r+0x14e>
 8006b26:	9105      	str	r1, [sp, #20]
 8006b28:	e7c1      	b.n	8006aae <_vfiprintf_r+0x14e>
 8006b2a:	fb05 2101 	mla	r1, r5, r1, r2
 8006b2e:	2301      	movs	r3, #1
 8006b30:	4680      	mov	r8, r0
 8006b32:	e7f0      	b.n	8006b16 <_vfiprintf_r+0x1b6>
 8006b34:	ab03      	add	r3, sp, #12
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	4622      	mov	r2, r4
 8006b3a:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <_vfiprintf_r+0x228>)
 8006b3c:	a904      	add	r1, sp, #16
 8006b3e:	4630      	mov	r0, r6
 8006b40:	f3af 8000 	nop.w
 8006b44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006b48:	4681      	mov	r9, r0
 8006b4a:	d1d5      	bne.n	8006af8 <_vfiprintf_r+0x198>
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	065b      	lsls	r3, r3, #25
 8006b50:	f53f af7e 	bmi.w	8006a50 <_vfiprintf_r+0xf0>
 8006b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b56:	e77d      	b.n	8006a54 <_vfiprintf_r+0xf4>
 8006b58:	ab03      	add	r3, sp, #12
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <_vfiprintf_r+0x228>)
 8006b60:	a904      	add	r1, sp, #16
 8006b62:	4630      	mov	r0, r6
 8006b64:	f000 f888 	bl	8006c78 <_printf_i>
 8006b68:	e7ec      	b.n	8006b44 <_vfiprintf_r+0x1e4>
 8006b6a:	bf00      	nop
 8006b6c:	08007430 	.word	0x08007430
 8006b70:	08007470 	.word	0x08007470
 8006b74:	08007450 	.word	0x08007450
 8006b78:	08007410 	.word	0x08007410
 8006b7c:	08007476 	.word	0x08007476
 8006b80:	0800747a 	.word	0x0800747a
 8006b84:	00000000 	.word	0x00000000
 8006b88:	0800693b 	.word	0x0800693b

08006b8c <_printf_common>:
 8006b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b90:	4691      	mov	r9, r2
 8006b92:	461f      	mov	r7, r3
 8006b94:	688a      	ldr	r2, [r1, #8]
 8006b96:	690b      	ldr	r3, [r1, #16]
 8006b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	bfb8      	it	lt
 8006ba0:	4613      	movlt	r3, r2
 8006ba2:	f8c9 3000 	str.w	r3, [r9]
 8006ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006baa:	4606      	mov	r6, r0
 8006bac:	460c      	mov	r4, r1
 8006bae:	b112      	cbz	r2, 8006bb6 <_printf_common+0x2a>
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	f8c9 3000 	str.w	r3, [r9]
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	0699      	lsls	r1, r3, #26
 8006bba:	bf42      	ittt	mi
 8006bbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006bc0:	3302      	addmi	r3, #2
 8006bc2:	f8c9 3000 	strmi.w	r3, [r9]
 8006bc6:	6825      	ldr	r5, [r4, #0]
 8006bc8:	f015 0506 	ands.w	r5, r5, #6
 8006bcc:	d107      	bne.n	8006bde <_printf_common+0x52>
 8006bce:	f104 0a19 	add.w	sl, r4, #25
 8006bd2:	68e3      	ldr	r3, [r4, #12]
 8006bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8006bd8:	1a9b      	subs	r3, r3, r2
 8006bda:	42ab      	cmp	r3, r5
 8006bdc:	dc28      	bgt.n	8006c30 <_printf_common+0xa4>
 8006bde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006be2:	6822      	ldr	r2, [r4, #0]
 8006be4:	3300      	adds	r3, #0
 8006be6:	bf18      	it	ne
 8006be8:	2301      	movne	r3, #1
 8006bea:	0692      	lsls	r2, r2, #26
 8006bec:	d42d      	bmi.n	8006c4a <_printf_common+0xbe>
 8006bee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bf2:	4639      	mov	r1, r7
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	47c0      	blx	r8
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d020      	beq.n	8006c3e <_printf_common+0xb2>
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	68e5      	ldr	r5, [r4, #12]
 8006c00:	f8d9 2000 	ldr.w	r2, [r9]
 8006c04:	f003 0306 	and.w	r3, r3, #6
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	bf08      	it	eq
 8006c0c:	1aad      	subeq	r5, r5, r2
 8006c0e:	68a3      	ldr	r3, [r4, #8]
 8006c10:	6922      	ldr	r2, [r4, #16]
 8006c12:	bf0c      	ite	eq
 8006c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c18:	2500      	movne	r5, #0
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	bfc4      	itt	gt
 8006c1e:	1a9b      	subgt	r3, r3, r2
 8006c20:	18ed      	addgt	r5, r5, r3
 8006c22:	f04f 0900 	mov.w	r9, #0
 8006c26:	341a      	adds	r4, #26
 8006c28:	454d      	cmp	r5, r9
 8006c2a:	d11a      	bne.n	8006c62 <_printf_common+0xd6>
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	e008      	b.n	8006c42 <_printf_common+0xb6>
 8006c30:	2301      	movs	r3, #1
 8006c32:	4652      	mov	r2, sl
 8006c34:	4639      	mov	r1, r7
 8006c36:	4630      	mov	r0, r6
 8006c38:	47c0      	blx	r8
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	d103      	bne.n	8006c46 <_printf_common+0xba>
 8006c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c46:	3501      	adds	r5, #1
 8006c48:	e7c3      	b.n	8006bd2 <_printf_common+0x46>
 8006c4a:	18e1      	adds	r1, r4, r3
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	2030      	movs	r0, #48	; 0x30
 8006c50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c54:	4422      	add	r2, r4
 8006c56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c5e:	3302      	adds	r3, #2
 8006c60:	e7c5      	b.n	8006bee <_printf_common+0x62>
 8006c62:	2301      	movs	r3, #1
 8006c64:	4622      	mov	r2, r4
 8006c66:	4639      	mov	r1, r7
 8006c68:	4630      	mov	r0, r6
 8006c6a:	47c0      	blx	r8
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d0e6      	beq.n	8006c3e <_printf_common+0xb2>
 8006c70:	f109 0901 	add.w	r9, r9, #1
 8006c74:	e7d8      	b.n	8006c28 <_printf_common+0x9c>
	...

08006c78 <_printf_i>:
 8006c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006c80:	460c      	mov	r4, r1
 8006c82:	7e09      	ldrb	r1, [r1, #24]
 8006c84:	b085      	sub	sp, #20
 8006c86:	296e      	cmp	r1, #110	; 0x6e
 8006c88:	4617      	mov	r7, r2
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	4698      	mov	r8, r3
 8006c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c90:	f000 80b3 	beq.w	8006dfa <_printf_i+0x182>
 8006c94:	d822      	bhi.n	8006cdc <_printf_i+0x64>
 8006c96:	2963      	cmp	r1, #99	; 0x63
 8006c98:	d036      	beq.n	8006d08 <_printf_i+0x90>
 8006c9a:	d80a      	bhi.n	8006cb2 <_printf_i+0x3a>
 8006c9c:	2900      	cmp	r1, #0
 8006c9e:	f000 80b9 	beq.w	8006e14 <_printf_i+0x19c>
 8006ca2:	2958      	cmp	r1, #88	; 0x58
 8006ca4:	f000 8083 	beq.w	8006dae <_printf_i+0x136>
 8006ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006cb0:	e032      	b.n	8006d18 <_printf_i+0xa0>
 8006cb2:	2964      	cmp	r1, #100	; 0x64
 8006cb4:	d001      	beq.n	8006cba <_printf_i+0x42>
 8006cb6:	2969      	cmp	r1, #105	; 0x69
 8006cb8:	d1f6      	bne.n	8006ca8 <_printf_i+0x30>
 8006cba:	6820      	ldr	r0, [r4, #0]
 8006cbc:	6813      	ldr	r3, [r2, #0]
 8006cbe:	0605      	lsls	r5, r0, #24
 8006cc0:	f103 0104 	add.w	r1, r3, #4
 8006cc4:	d52a      	bpl.n	8006d1c <_printf_i+0xa4>
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6011      	str	r1, [r2, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	da03      	bge.n	8006cd6 <_printf_i+0x5e>
 8006cce:	222d      	movs	r2, #45	; 0x2d
 8006cd0:	425b      	negs	r3, r3
 8006cd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006cd6:	486f      	ldr	r0, [pc, #444]	; (8006e94 <_printf_i+0x21c>)
 8006cd8:	220a      	movs	r2, #10
 8006cda:	e039      	b.n	8006d50 <_printf_i+0xd8>
 8006cdc:	2973      	cmp	r1, #115	; 0x73
 8006cde:	f000 809d 	beq.w	8006e1c <_printf_i+0x1a4>
 8006ce2:	d808      	bhi.n	8006cf6 <_printf_i+0x7e>
 8006ce4:	296f      	cmp	r1, #111	; 0x6f
 8006ce6:	d020      	beq.n	8006d2a <_printf_i+0xb2>
 8006ce8:	2970      	cmp	r1, #112	; 0x70
 8006cea:	d1dd      	bne.n	8006ca8 <_printf_i+0x30>
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	f043 0320 	orr.w	r3, r3, #32
 8006cf2:	6023      	str	r3, [r4, #0]
 8006cf4:	e003      	b.n	8006cfe <_printf_i+0x86>
 8006cf6:	2975      	cmp	r1, #117	; 0x75
 8006cf8:	d017      	beq.n	8006d2a <_printf_i+0xb2>
 8006cfa:	2978      	cmp	r1, #120	; 0x78
 8006cfc:	d1d4      	bne.n	8006ca8 <_printf_i+0x30>
 8006cfe:	2378      	movs	r3, #120	; 0x78
 8006d00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d04:	4864      	ldr	r0, [pc, #400]	; (8006e98 <_printf_i+0x220>)
 8006d06:	e055      	b.n	8006db4 <_printf_i+0x13c>
 8006d08:	6813      	ldr	r3, [r2, #0]
 8006d0a:	1d19      	adds	r1, r3, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6011      	str	r1, [r2, #0]
 8006d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e08c      	b.n	8006e36 <_printf_i+0x1be>
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6011      	str	r1, [r2, #0]
 8006d20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d24:	bf18      	it	ne
 8006d26:	b21b      	sxthne	r3, r3
 8006d28:	e7cf      	b.n	8006cca <_printf_i+0x52>
 8006d2a:	6813      	ldr	r3, [r2, #0]
 8006d2c:	6825      	ldr	r5, [r4, #0]
 8006d2e:	1d18      	adds	r0, r3, #4
 8006d30:	6010      	str	r0, [r2, #0]
 8006d32:	0628      	lsls	r0, r5, #24
 8006d34:	d501      	bpl.n	8006d3a <_printf_i+0xc2>
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	e002      	b.n	8006d40 <_printf_i+0xc8>
 8006d3a:	0668      	lsls	r0, r5, #25
 8006d3c:	d5fb      	bpl.n	8006d36 <_printf_i+0xbe>
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	4854      	ldr	r0, [pc, #336]	; (8006e94 <_printf_i+0x21c>)
 8006d42:	296f      	cmp	r1, #111	; 0x6f
 8006d44:	bf14      	ite	ne
 8006d46:	220a      	movne	r2, #10
 8006d48:	2208      	moveq	r2, #8
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d50:	6865      	ldr	r5, [r4, #4]
 8006d52:	60a5      	str	r5, [r4, #8]
 8006d54:	2d00      	cmp	r5, #0
 8006d56:	f2c0 8095 	blt.w	8006e84 <_printf_i+0x20c>
 8006d5a:	6821      	ldr	r1, [r4, #0]
 8006d5c:	f021 0104 	bic.w	r1, r1, #4
 8006d60:	6021      	str	r1, [r4, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d13d      	bne.n	8006de2 <_printf_i+0x16a>
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	f040 808e 	bne.w	8006e88 <_printf_i+0x210>
 8006d6c:	4665      	mov	r5, ip
 8006d6e:	2a08      	cmp	r2, #8
 8006d70:	d10b      	bne.n	8006d8a <_printf_i+0x112>
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	07db      	lsls	r3, r3, #31
 8006d76:	d508      	bpl.n	8006d8a <_printf_i+0x112>
 8006d78:	6923      	ldr	r3, [r4, #16]
 8006d7a:	6862      	ldr	r2, [r4, #4]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	bfde      	ittt	le
 8006d80:	2330      	movle	r3, #48	; 0x30
 8006d82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d86:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006d8a:	ebac 0305 	sub.w	r3, ip, r5
 8006d8e:	6123      	str	r3, [r4, #16]
 8006d90:	f8cd 8000 	str.w	r8, [sp]
 8006d94:	463b      	mov	r3, r7
 8006d96:	aa03      	add	r2, sp, #12
 8006d98:	4621      	mov	r1, r4
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f7ff fef6 	bl	8006b8c <_printf_common>
 8006da0:	3001      	adds	r0, #1
 8006da2:	d14d      	bne.n	8006e40 <_printf_i+0x1c8>
 8006da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006da8:	b005      	add	sp, #20
 8006daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dae:	4839      	ldr	r0, [pc, #228]	; (8006e94 <_printf_i+0x21c>)
 8006db0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006db4:	6813      	ldr	r3, [r2, #0]
 8006db6:	6821      	ldr	r1, [r4, #0]
 8006db8:	1d1d      	adds	r5, r3, #4
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6015      	str	r5, [r2, #0]
 8006dbe:	060a      	lsls	r2, r1, #24
 8006dc0:	d50b      	bpl.n	8006dda <_printf_i+0x162>
 8006dc2:	07ca      	lsls	r2, r1, #31
 8006dc4:	bf44      	itt	mi
 8006dc6:	f041 0120 	orrmi.w	r1, r1, #32
 8006dca:	6021      	strmi	r1, [r4, #0]
 8006dcc:	b91b      	cbnz	r3, 8006dd6 <_printf_i+0x15e>
 8006dce:	6822      	ldr	r2, [r4, #0]
 8006dd0:	f022 0220 	bic.w	r2, r2, #32
 8006dd4:	6022      	str	r2, [r4, #0]
 8006dd6:	2210      	movs	r2, #16
 8006dd8:	e7b7      	b.n	8006d4a <_printf_i+0xd2>
 8006dda:	064d      	lsls	r5, r1, #25
 8006ddc:	bf48      	it	mi
 8006dde:	b29b      	uxthmi	r3, r3
 8006de0:	e7ef      	b.n	8006dc2 <_printf_i+0x14a>
 8006de2:	4665      	mov	r5, ip
 8006de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006de8:	fb02 3311 	mls	r3, r2, r1, r3
 8006dec:	5cc3      	ldrb	r3, [r0, r3]
 8006dee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006df2:	460b      	mov	r3, r1
 8006df4:	2900      	cmp	r1, #0
 8006df6:	d1f5      	bne.n	8006de4 <_printf_i+0x16c>
 8006df8:	e7b9      	b.n	8006d6e <_printf_i+0xf6>
 8006dfa:	6813      	ldr	r3, [r2, #0]
 8006dfc:	6825      	ldr	r5, [r4, #0]
 8006dfe:	6961      	ldr	r1, [r4, #20]
 8006e00:	1d18      	adds	r0, r3, #4
 8006e02:	6010      	str	r0, [r2, #0]
 8006e04:	0628      	lsls	r0, r5, #24
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	d501      	bpl.n	8006e0e <_printf_i+0x196>
 8006e0a:	6019      	str	r1, [r3, #0]
 8006e0c:	e002      	b.n	8006e14 <_printf_i+0x19c>
 8006e0e:	066a      	lsls	r2, r5, #25
 8006e10:	d5fb      	bpl.n	8006e0a <_printf_i+0x192>
 8006e12:	8019      	strh	r1, [r3, #0]
 8006e14:	2300      	movs	r3, #0
 8006e16:	6123      	str	r3, [r4, #16]
 8006e18:	4665      	mov	r5, ip
 8006e1a:	e7b9      	b.n	8006d90 <_printf_i+0x118>
 8006e1c:	6813      	ldr	r3, [r2, #0]
 8006e1e:	1d19      	adds	r1, r3, #4
 8006e20:	6011      	str	r1, [r2, #0]
 8006e22:	681d      	ldr	r5, [r3, #0]
 8006e24:	6862      	ldr	r2, [r4, #4]
 8006e26:	2100      	movs	r1, #0
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f7f9 f9d1 	bl	80001d0 <memchr>
 8006e2e:	b108      	cbz	r0, 8006e34 <_printf_i+0x1bc>
 8006e30:	1b40      	subs	r0, r0, r5
 8006e32:	6060      	str	r0, [r4, #4]
 8006e34:	6863      	ldr	r3, [r4, #4]
 8006e36:	6123      	str	r3, [r4, #16]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e3e:	e7a7      	b.n	8006d90 <_printf_i+0x118>
 8006e40:	6923      	ldr	r3, [r4, #16]
 8006e42:	462a      	mov	r2, r5
 8006e44:	4639      	mov	r1, r7
 8006e46:	4630      	mov	r0, r6
 8006e48:	47c0      	blx	r8
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	d0aa      	beq.n	8006da4 <_printf_i+0x12c>
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	079b      	lsls	r3, r3, #30
 8006e52:	d413      	bmi.n	8006e7c <_printf_i+0x204>
 8006e54:	68e0      	ldr	r0, [r4, #12]
 8006e56:	9b03      	ldr	r3, [sp, #12]
 8006e58:	4298      	cmp	r0, r3
 8006e5a:	bfb8      	it	lt
 8006e5c:	4618      	movlt	r0, r3
 8006e5e:	e7a3      	b.n	8006da8 <_printf_i+0x130>
 8006e60:	2301      	movs	r3, #1
 8006e62:	464a      	mov	r2, r9
 8006e64:	4639      	mov	r1, r7
 8006e66:	4630      	mov	r0, r6
 8006e68:	47c0      	blx	r8
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	d09a      	beq.n	8006da4 <_printf_i+0x12c>
 8006e6e:	3501      	adds	r5, #1
 8006e70:	68e3      	ldr	r3, [r4, #12]
 8006e72:	9a03      	ldr	r2, [sp, #12]
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	42ab      	cmp	r3, r5
 8006e78:	dcf2      	bgt.n	8006e60 <_printf_i+0x1e8>
 8006e7a:	e7eb      	b.n	8006e54 <_printf_i+0x1dc>
 8006e7c:	2500      	movs	r5, #0
 8006e7e:	f104 0919 	add.w	r9, r4, #25
 8006e82:	e7f5      	b.n	8006e70 <_printf_i+0x1f8>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1ac      	bne.n	8006de2 <_printf_i+0x16a>
 8006e88:	7803      	ldrb	r3, [r0, #0]
 8006e8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e92:	e76c      	b.n	8006d6e <_printf_i+0xf6>
 8006e94:	08007481 	.word	0x08007481
 8006e98:	08007492 	.word	0x08007492

08006e9c <__sread>:
 8006e9c:	b510      	push	{r4, lr}
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea4:	f000 fa46 	bl	8007334 <_read_r>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	bfab      	itete	ge
 8006eac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006eae:	89a3      	ldrhlt	r3, [r4, #12]
 8006eb0:	181b      	addge	r3, r3, r0
 8006eb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006eb6:	bfac      	ite	ge
 8006eb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006eba:	81a3      	strhlt	r3, [r4, #12]
 8006ebc:	bd10      	pop	{r4, pc}

08006ebe <__swrite>:
 8006ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec2:	461f      	mov	r7, r3
 8006ec4:	898b      	ldrh	r3, [r1, #12]
 8006ec6:	05db      	lsls	r3, r3, #23
 8006ec8:	4605      	mov	r5, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	4616      	mov	r6, r2
 8006ece:	d505      	bpl.n	8006edc <__swrite+0x1e>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed8:	f000 f9b6 	bl	8007248 <_lseek_r>
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ee6:	81a3      	strh	r3, [r4, #12]
 8006ee8:	4632      	mov	r2, r6
 8006eea:	463b      	mov	r3, r7
 8006eec:	4628      	mov	r0, r5
 8006eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef2:	f000 b869 	b.w	8006fc8 <_write_r>

08006ef6 <__sseek>:
 8006ef6:	b510      	push	{r4, lr}
 8006ef8:	460c      	mov	r4, r1
 8006efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006efe:	f000 f9a3 	bl	8007248 <_lseek_r>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	bf15      	itete	ne
 8006f08:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f12:	81a3      	strheq	r3, [r4, #12]
 8006f14:	bf18      	it	ne
 8006f16:	81a3      	strhne	r3, [r4, #12]
 8006f18:	bd10      	pop	{r4, pc}

08006f1a <__sclose>:
 8006f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f1e:	f000 b8d3 	b.w	80070c8 <_close_r>
	...

08006f24 <__swbuf_r>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	460e      	mov	r6, r1
 8006f28:	4614      	mov	r4, r2
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	b118      	cbz	r0, 8006f36 <__swbuf_r+0x12>
 8006f2e:	6983      	ldr	r3, [r0, #24]
 8006f30:	b90b      	cbnz	r3, 8006f36 <__swbuf_r+0x12>
 8006f32:	f7ff fc5f 	bl	80067f4 <__sinit>
 8006f36:	4b21      	ldr	r3, [pc, #132]	; (8006fbc <__swbuf_r+0x98>)
 8006f38:	429c      	cmp	r4, r3
 8006f3a:	d12a      	bne.n	8006f92 <__swbuf_r+0x6e>
 8006f3c:	686c      	ldr	r4, [r5, #4]
 8006f3e:	69a3      	ldr	r3, [r4, #24]
 8006f40:	60a3      	str	r3, [r4, #8]
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	071a      	lsls	r2, r3, #28
 8006f46:	d52e      	bpl.n	8006fa6 <__swbuf_r+0x82>
 8006f48:	6923      	ldr	r3, [r4, #16]
 8006f4a:	b363      	cbz	r3, 8006fa6 <__swbuf_r+0x82>
 8006f4c:	6923      	ldr	r3, [r4, #16]
 8006f4e:	6820      	ldr	r0, [r4, #0]
 8006f50:	1ac0      	subs	r0, r0, r3
 8006f52:	6963      	ldr	r3, [r4, #20]
 8006f54:	b2f6      	uxtb	r6, r6
 8006f56:	4283      	cmp	r3, r0
 8006f58:	4637      	mov	r7, r6
 8006f5a:	dc04      	bgt.n	8006f66 <__swbuf_r+0x42>
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 f948 	bl	80071f4 <_fflush_r>
 8006f64:	bb28      	cbnz	r0, 8006fb2 <__swbuf_r+0x8e>
 8006f66:	68a3      	ldr	r3, [r4, #8]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	60a3      	str	r3, [r4, #8]
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	6022      	str	r2, [r4, #0]
 8006f72:	701e      	strb	r6, [r3, #0]
 8006f74:	6963      	ldr	r3, [r4, #20]
 8006f76:	3001      	adds	r0, #1
 8006f78:	4283      	cmp	r3, r0
 8006f7a:	d004      	beq.n	8006f86 <__swbuf_r+0x62>
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	07db      	lsls	r3, r3, #31
 8006f80:	d519      	bpl.n	8006fb6 <__swbuf_r+0x92>
 8006f82:	2e0a      	cmp	r6, #10
 8006f84:	d117      	bne.n	8006fb6 <__swbuf_r+0x92>
 8006f86:	4621      	mov	r1, r4
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f000 f933 	bl	80071f4 <_fflush_r>
 8006f8e:	b190      	cbz	r0, 8006fb6 <__swbuf_r+0x92>
 8006f90:	e00f      	b.n	8006fb2 <__swbuf_r+0x8e>
 8006f92:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <__swbuf_r+0x9c>)
 8006f94:	429c      	cmp	r4, r3
 8006f96:	d101      	bne.n	8006f9c <__swbuf_r+0x78>
 8006f98:	68ac      	ldr	r4, [r5, #8]
 8006f9a:	e7d0      	b.n	8006f3e <__swbuf_r+0x1a>
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <__swbuf_r+0xa0>)
 8006f9e:	429c      	cmp	r4, r3
 8006fa0:	bf08      	it	eq
 8006fa2:	68ec      	ldreq	r4, [r5, #12]
 8006fa4:	e7cb      	b.n	8006f3e <__swbuf_r+0x1a>
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4628      	mov	r0, r5
 8006faa:	f000 f81f 	bl	8006fec <__swsetup_r>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d0cc      	beq.n	8006f4c <__swbuf_r+0x28>
 8006fb2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	08007430 	.word	0x08007430
 8006fc0:	08007450 	.word	0x08007450
 8006fc4:	08007410 	.word	0x08007410

08006fc8 <_write_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4c07      	ldr	r4, [pc, #28]	; (8006fe8 <_write_r+0x20>)
 8006fcc:	4605      	mov	r5, r0
 8006fce:	4608      	mov	r0, r1
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	6022      	str	r2, [r4, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f7fa fc96 	bl	8001908 <_write>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_write_r+0x1e>
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_write_r+0x1e>
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	20000250 	.word	0x20000250

08006fec <__swsetup_r>:
 8006fec:	4b32      	ldr	r3, [pc, #200]	; (80070b8 <__swsetup_r+0xcc>)
 8006fee:	b570      	push	{r4, r5, r6, lr}
 8006ff0:	681d      	ldr	r5, [r3, #0]
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	b125      	cbz	r5, 8007002 <__swsetup_r+0x16>
 8006ff8:	69ab      	ldr	r3, [r5, #24]
 8006ffa:	b913      	cbnz	r3, 8007002 <__swsetup_r+0x16>
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f7ff fbf9 	bl	80067f4 <__sinit>
 8007002:	4b2e      	ldr	r3, [pc, #184]	; (80070bc <__swsetup_r+0xd0>)
 8007004:	429c      	cmp	r4, r3
 8007006:	d10f      	bne.n	8007028 <__swsetup_r+0x3c>
 8007008:	686c      	ldr	r4, [r5, #4]
 800700a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800700e:	b29a      	uxth	r2, r3
 8007010:	0715      	lsls	r5, r2, #28
 8007012:	d42c      	bmi.n	800706e <__swsetup_r+0x82>
 8007014:	06d0      	lsls	r0, r2, #27
 8007016:	d411      	bmi.n	800703c <__swsetup_r+0x50>
 8007018:	2209      	movs	r2, #9
 800701a:	6032      	str	r2, [r6, #0]
 800701c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007026:	e03e      	b.n	80070a6 <__swsetup_r+0xba>
 8007028:	4b25      	ldr	r3, [pc, #148]	; (80070c0 <__swsetup_r+0xd4>)
 800702a:	429c      	cmp	r4, r3
 800702c:	d101      	bne.n	8007032 <__swsetup_r+0x46>
 800702e:	68ac      	ldr	r4, [r5, #8]
 8007030:	e7eb      	b.n	800700a <__swsetup_r+0x1e>
 8007032:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <__swsetup_r+0xd8>)
 8007034:	429c      	cmp	r4, r3
 8007036:	bf08      	it	eq
 8007038:	68ec      	ldreq	r4, [r5, #12]
 800703a:	e7e6      	b.n	800700a <__swsetup_r+0x1e>
 800703c:	0751      	lsls	r1, r2, #29
 800703e:	d512      	bpl.n	8007066 <__swsetup_r+0x7a>
 8007040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007042:	b141      	cbz	r1, 8007056 <__swsetup_r+0x6a>
 8007044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007048:	4299      	cmp	r1, r3
 800704a:	d002      	beq.n	8007052 <__swsetup_r+0x66>
 800704c:	4630      	mov	r0, r6
 800704e:	f7ff fac1 	bl	80065d4 <_free_r>
 8007052:	2300      	movs	r3, #0
 8007054:	6363      	str	r3, [r4, #52]	; 0x34
 8007056:	89a3      	ldrh	r3, [r4, #12]
 8007058:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800705c:	81a3      	strh	r3, [r4, #12]
 800705e:	2300      	movs	r3, #0
 8007060:	6063      	str	r3, [r4, #4]
 8007062:	6923      	ldr	r3, [r4, #16]
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	f043 0308 	orr.w	r3, r3, #8
 800706c:	81a3      	strh	r3, [r4, #12]
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	b94b      	cbnz	r3, 8007086 <__swsetup_r+0x9a>
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800707c:	d003      	beq.n	8007086 <__swsetup_r+0x9a>
 800707e:	4621      	mov	r1, r4
 8007080:	4630      	mov	r0, r6
 8007082:	f000 f917 	bl	80072b4 <__smakebuf_r>
 8007086:	89a2      	ldrh	r2, [r4, #12]
 8007088:	f012 0301 	ands.w	r3, r2, #1
 800708c:	d00c      	beq.n	80070a8 <__swsetup_r+0xbc>
 800708e:	2300      	movs	r3, #0
 8007090:	60a3      	str	r3, [r4, #8]
 8007092:	6963      	ldr	r3, [r4, #20]
 8007094:	425b      	negs	r3, r3
 8007096:	61a3      	str	r3, [r4, #24]
 8007098:	6923      	ldr	r3, [r4, #16]
 800709a:	b953      	cbnz	r3, 80070b2 <__swsetup_r+0xc6>
 800709c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80070a4:	d1ba      	bne.n	800701c <__swsetup_r+0x30>
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
 80070a8:	0792      	lsls	r2, r2, #30
 80070aa:	bf58      	it	pl
 80070ac:	6963      	ldrpl	r3, [r4, #20]
 80070ae:	60a3      	str	r3, [r4, #8]
 80070b0:	e7f2      	b.n	8007098 <__swsetup_r+0xac>
 80070b2:	2000      	movs	r0, #0
 80070b4:	e7f7      	b.n	80070a6 <__swsetup_r+0xba>
 80070b6:	bf00      	nop
 80070b8:	2000000c 	.word	0x2000000c
 80070bc:	08007430 	.word	0x08007430
 80070c0:	08007450 	.word	0x08007450
 80070c4:	08007410 	.word	0x08007410

080070c8 <_close_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4c06      	ldr	r4, [pc, #24]	; (80070e4 <_close_r+0x1c>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4605      	mov	r5, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	f7fa fa97 	bl	8001606 <_close>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_close_r+0x1a>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_close_r+0x1a>
 80070e0:	602b      	str	r3, [r5, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	20000250 	.word	0x20000250

080070e8 <__sflush_r>:
 80070e8:	898a      	ldrh	r2, [r1, #12]
 80070ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ee:	4605      	mov	r5, r0
 80070f0:	0710      	lsls	r0, r2, #28
 80070f2:	460c      	mov	r4, r1
 80070f4:	d458      	bmi.n	80071a8 <__sflush_r+0xc0>
 80070f6:	684b      	ldr	r3, [r1, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	dc05      	bgt.n	8007108 <__sflush_r+0x20>
 80070fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070fe:	2b00      	cmp	r3, #0
 8007100:	dc02      	bgt.n	8007108 <__sflush_r+0x20>
 8007102:	2000      	movs	r0, #0
 8007104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800710a:	2e00      	cmp	r6, #0
 800710c:	d0f9      	beq.n	8007102 <__sflush_r+0x1a>
 800710e:	2300      	movs	r3, #0
 8007110:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007114:	682f      	ldr	r7, [r5, #0]
 8007116:	6a21      	ldr	r1, [r4, #32]
 8007118:	602b      	str	r3, [r5, #0]
 800711a:	d032      	beq.n	8007182 <__sflush_r+0x9a>
 800711c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	075a      	lsls	r2, r3, #29
 8007122:	d505      	bpl.n	8007130 <__sflush_r+0x48>
 8007124:	6863      	ldr	r3, [r4, #4]
 8007126:	1ac0      	subs	r0, r0, r3
 8007128:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800712a:	b10b      	cbz	r3, 8007130 <__sflush_r+0x48>
 800712c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800712e:	1ac0      	subs	r0, r0, r3
 8007130:	2300      	movs	r3, #0
 8007132:	4602      	mov	r2, r0
 8007134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007136:	6a21      	ldr	r1, [r4, #32]
 8007138:	4628      	mov	r0, r5
 800713a:	47b0      	blx	r6
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	d106      	bne.n	8007150 <__sflush_r+0x68>
 8007142:	6829      	ldr	r1, [r5, #0]
 8007144:	291d      	cmp	r1, #29
 8007146:	d848      	bhi.n	80071da <__sflush_r+0xf2>
 8007148:	4a29      	ldr	r2, [pc, #164]	; (80071f0 <__sflush_r+0x108>)
 800714a:	40ca      	lsrs	r2, r1
 800714c:	07d6      	lsls	r6, r2, #31
 800714e:	d544      	bpl.n	80071da <__sflush_r+0xf2>
 8007150:	2200      	movs	r2, #0
 8007152:	6062      	str	r2, [r4, #4]
 8007154:	04d9      	lsls	r1, r3, #19
 8007156:	6922      	ldr	r2, [r4, #16]
 8007158:	6022      	str	r2, [r4, #0]
 800715a:	d504      	bpl.n	8007166 <__sflush_r+0x7e>
 800715c:	1c42      	adds	r2, r0, #1
 800715e:	d101      	bne.n	8007164 <__sflush_r+0x7c>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	b903      	cbnz	r3, 8007166 <__sflush_r+0x7e>
 8007164:	6560      	str	r0, [r4, #84]	; 0x54
 8007166:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007168:	602f      	str	r7, [r5, #0]
 800716a:	2900      	cmp	r1, #0
 800716c:	d0c9      	beq.n	8007102 <__sflush_r+0x1a>
 800716e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007172:	4299      	cmp	r1, r3
 8007174:	d002      	beq.n	800717c <__sflush_r+0x94>
 8007176:	4628      	mov	r0, r5
 8007178:	f7ff fa2c 	bl	80065d4 <_free_r>
 800717c:	2000      	movs	r0, #0
 800717e:	6360      	str	r0, [r4, #52]	; 0x34
 8007180:	e7c0      	b.n	8007104 <__sflush_r+0x1c>
 8007182:	2301      	movs	r3, #1
 8007184:	4628      	mov	r0, r5
 8007186:	47b0      	blx	r6
 8007188:	1c41      	adds	r1, r0, #1
 800718a:	d1c8      	bne.n	800711e <__sflush_r+0x36>
 800718c:	682b      	ldr	r3, [r5, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0c5      	beq.n	800711e <__sflush_r+0x36>
 8007192:	2b1d      	cmp	r3, #29
 8007194:	d001      	beq.n	800719a <__sflush_r+0xb2>
 8007196:	2b16      	cmp	r3, #22
 8007198:	d101      	bne.n	800719e <__sflush_r+0xb6>
 800719a:	602f      	str	r7, [r5, #0]
 800719c:	e7b1      	b.n	8007102 <__sflush_r+0x1a>
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071a4:	81a3      	strh	r3, [r4, #12]
 80071a6:	e7ad      	b.n	8007104 <__sflush_r+0x1c>
 80071a8:	690f      	ldr	r7, [r1, #16]
 80071aa:	2f00      	cmp	r7, #0
 80071ac:	d0a9      	beq.n	8007102 <__sflush_r+0x1a>
 80071ae:	0793      	lsls	r3, r2, #30
 80071b0:	680e      	ldr	r6, [r1, #0]
 80071b2:	bf08      	it	eq
 80071b4:	694b      	ldreq	r3, [r1, #20]
 80071b6:	600f      	str	r7, [r1, #0]
 80071b8:	bf18      	it	ne
 80071ba:	2300      	movne	r3, #0
 80071bc:	eba6 0807 	sub.w	r8, r6, r7
 80071c0:	608b      	str	r3, [r1, #8]
 80071c2:	f1b8 0f00 	cmp.w	r8, #0
 80071c6:	dd9c      	ble.n	8007102 <__sflush_r+0x1a>
 80071c8:	4643      	mov	r3, r8
 80071ca:	463a      	mov	r2, r7
 80071cc:	6a21      	ldr	r1, [r4, #32]
 80071ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b0      	blx	r6
 80071d4:	2800      	cmp	r0, #0
 80071d6:	dc06      	bgt.n	80071e6 <__sflush_r+0xfe>
 80071d8:	89a3      	ldrh	r3, [r4, #12]
 80071da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071de:	81a3      	strh	r3, [r4, #12]
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071e4:	e78e      	b.n	8007104 <__sflush_r+0x1c>
 80071e6:	4407      	add	r7, r0
 80071e8:	eba8 0800 	sub.w	r8, r8, r0
 80071ec:	e7e9      	b.n	80071c2 <__sflush_r+0xda>
 80071ee:	bf00      	nop
 80071f0:	20400001 	.word	0x20400001

080071f4 <_fflush_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	690b      	ldr	r3, [r1, #16]
 80071f8:	4605      	mov	r5, r0
 80071fa:	460c      	mov	r4, r1
 80071fc:	b1db      	cbz	r3, 8007236 <_fflush_r+0x42>
 80071fe:	b118      	cbz	r0, 8007208 <_fflush_r+0x14>
 8007200:	6983      	ldr	r3, [r0, #24]
 8007202:	b90b      	cbnz	r3, 8007208 <_fflush_r+0x14>
 8007204:	f7ff faf6 	bl	80067f4 <__sinit>
 8007208:	4b0c      	ldr	r3, [pc, #48]	; (800723c <_fflush_r+0x48>)
 800720a:	429c      	cmp	r4, r3
 800720c:	d109      	bne.n	8007222 <_fflush_r+0x2e>
 800720e:	686c      	ldr	r4, [r5, #4]
 8007210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007214:	b17b      	cbz	r3, 8007236 <_fflush_r+0x42>
 8007216:	4621      	mov	r1, r4
 8007218:	4628      	mov	r0, r5
 800721a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800721e:	f7ff bf63 	b.w	80070e8 <__sflush_r>
 8007222:	4b07      	ldr	r3, [pc, #28]	; (8007240 <_fflush_r+0x4c>)
 8007224:	429c      	cmp	r4, r3
 8007226:	d101      	bne.n	800722c <_fflush_r+0x38>
 8007228:	68ac      	ldr	r4, [r5, #8]
 800722a:	e7f1      	b.n	8007210 <_fflush_r+0x1c>
 800722c:	4b05      	ldr	r3, [pc, #20]	; (8007244 <_fflush_r+0x50>)
 800722e:	429c      	cmp	r4, r3
 8007230:	bf08      	it	eq
 8007232:	68ec      	ldreq	r4, [r5, #12]
 8007234:	e7ec      	b.n	8007210 <_fflush_r+0x1c>
 8007236:	2000      	movs	r0, #0
 8007238:	bd38      	pop	{r3, r4, r5, pc}
 800723a:	bf00      	nop
 800723c:	08007430 	.word	0x08007430
 8007240:	08007450 	.word	0x08007450
 8007244:	08007410 	.word	0x08007410

08007248 <_lseek_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4c07      	ldr	r4, [pc, #28]	; (8007268 <_lseek_r+0x20>)
 800724c:	4605      	mov	r5, r0
 800724e:	4608      	mov	r0, r1
 8007250:	4611      	mov	r1, r2
 8007252:	2200      	movs	r2, #0
 8007254:	6022      	str	r2, [r4, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	f7fa f9fc 	bl	8001654 <_lseek>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <_lseek_r+0x1e>
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	b103      	cbz	r3, 8007266 <_lseek_r+0x1e>
 8007264:	602b      	str	r3, [r5, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	20000250 	.word	0x20000250

0800726c <__swhatbuf_r>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	460e      	mov	r6, r1
 8007270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007274:	2900      	cmp	r1, #0
 8007276:	b096      	sub	sp, #88	; 0x58
 8007278:	4614      	mov	r4, r2
 800727a:	461d      	mov	r5, r3
 800727c:	da07      	bge.n	800728e <__swhatbuf_r+0x22>
 800727e:	2300      	movs	r3, #0
 8007280:	602b      	str	r3, [r5, #0]
 8007282:	89b3      	ldrh	r3, [r6, #12]
 8007284:	061a      	lsls	r2, r3, #24
 8007286:	d410      	bmi.n	80072aa <__swhatbuf_r+0x3e>
 8007288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800728c:	e00e      	b.n	80072ac <__swhatbuf_r+0x40>
 800728e:	466a      	mov	r2, sp
 8007290:	f000 f862 	bl	8007358 <_fstat_r>
 8007294:	2800      	cmp	r0, #0
 8007296:	dbf2      	blt.n	800727e <__swhatbuf_r+0x12>
 8007298:	9a01      	ldr	r2, [sp, #4]
 800729a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800729e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072a2:	425a      	negs	r2, r3
 80072a4:	415a      	adcs	r2, r3
 80072a6:	602a      	str	r2, [r5, #0]
 80072a8:	e7ee      	b.n	8007288 <__swhatbuf_r+0x1c>
 80072aa:	2340      	movs	r3, #64	; 0x40
 80072ac:	2000      	movs	r0, #0
 80072ae:	6023      	str	r3, [r4, #0]
 80072b0:	b016      	add	sp, #88	; 0x58
 80072b2:	bd70      	pop	{r4, r5, r6, pc}

080072b4 <__smakebuf_r>:
 80072b4:	898b      	ldrh	r3, [r1, #12]
 80072b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072b8:	079d      	lsls	r5, r3, #30
 80072ba:	4606      	mov	r6, r0
 80072bc:	460c      	mov	r4, r1
 80072be:	d507      	bpl.n	80072d0 <__smakebuf_r+0x1c>
 80072c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	6123      	str	r3, [r4, #16]
 80072c8:	2301      	movs	r3, #1
 80072ca:	6163      	str	r3, [r4, #20]
 80072cc:	b002      	add	sp, #8
 80072ce:	bd70      	pop	{r4, r5, r6, pc}
 80072d0:	ab01      	add	r3, sp, #4
 80072d2:	466a      	mov	r2, sp
 80072d4:	f7ff ffca 	bl	800726c <__swhatbuf_r>
 80072d8:	9900      	ldr	r1, [sp, #0]
 80072da:	4605      	mov	r5, r0
 80072dc:	4630      	mov	r0, r6
 80072de:	f7ff f9c7 	bl	8006670 <_malloc_r>
 80072e2:	b948      	cbnz	r0, 80072f8 <__smakebuf_r+0x44>
 80072e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072e8:	059a      	lsls	r2, r3, #22
 80072ea:	d4ef      	bmi.n	80072cc <__smakebuf_r+0x18>
 80072ec:	f023 0303 	bic.w	r3, r3, #3
 80072f0:	f043 0302 	orr.w	r3, r3, #2
 80072f4:	81a3      	strh	r3, [r4, #12]
 80072f6:	e7e3      	b.n	80072c0 <__smakebuf_r+0xc>
 80072f8:	4b0d      	ldr	r3, [pc, #52]	; (8007330 <__smakebuf_r+0x7c>)
 80072fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80072fc:	89a3      	ldrh	r3, [r4, #12]
 80072fe:	6020      	str	r0, [r4, #0]
 8007300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007304:	81a3      	strh	r3, [r4, #12]
 8007306:	9b00      	ldr	r3, [sp, #0]
 8007308:	6163      	str	r3, [r4, #20]
 800730a:	9b01      	ldr	r3, [sp, #4]
 800730c:	6120      	str	r0, [r4, #16]
 800730e:	b15b      	cbz	r3, 8007328 <__smakebuf_r+0x74>
 8007310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007314:	4630      	mov	r0, r6
 8007316:	f000 f831 	bl	800737c <_isatty_r>
 800731a:	b128      	cbz	r0, 8007328 <__smakebuf_r+0x74>
 800731c:	89a3      	ldrh	r3, [r4, #12]
 800731e:	f023 0303 	bic.w	r3, r3, #3
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	81a3      	strh	r3, [r4, #12]
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	431d      	orrs	r5, r3
 800732c:	81a5      	strh	r5, [r4, #12]
 800732e:	e7cd      	b.n	80072cc <__smakebuf_r+0x18>
 8007330:	080067bd 	.word	0x080067bd

08007334 <_read_r>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	4c07      	ldr	r4, [pc, #28]	; (8007354 <_read_r+0x20>)
 8007338:	4605      	mov	r5, r0
 800733a:	4608      	mov	r0, r1
 800733c:	4611      	mov	r1, r2
 800733e:	2200      	movs	r2, #0
 8007340:	6022      	str	r2, [r4, #0]
 8007342:	461a      	mov	r2, r3
 8007344:	f7fa f942 	bl	80015cc <_read>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d102      	bne.n	8007352 <_read_r+0x1e>
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	b103      	cbz	r3, 8007352 <_read_r+0x1e>
 8007350:	602b      	str	r3, [r5, #0]
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	20000250 	.word	0x20000250

08007358 <_fstat_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4c07      	ldr	r4, [pc, #28]	; (8007378 <_fstat_r+0x20>)
 800735c:	2300      	movs	r3, #0
 800735e:	4605      	mov	r5, r0
 8007360:	4608      	mov	r0, r1
 8007362:	4611      	mov	r1, r2
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	f7fa f95a 	bl	800161e <_fstat>
 800736a:	1c43      	adds	r3, r0, #1
 800736c:	d102      	bne.n	8007374 <_fstat_r+0x1c>
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	b103      	cbz	r3, 8007374 <_fstat_r+0x1c>
 8007372:	602b      	str	r3, [r5, #0]
 8007374:	bd38      	pop	{r3, r4, r5, pc}
 8007376:	bf00      	nop
 8007378:	20000250 	.word	0x20000250

0800737c <_isatty_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	4c06      	ldr	r4, [pc, #24]	; (8007398 <_isatty_r+0x1c>)
 8007380:	2300      	movs	r3, #0
 8007382:	4605      	mov	r5, r0
 8007384:	4608      	mov	r0, r1
 8007386:	6023      	str	r3, [r4, #0]
 8007388:	f7fa f959 	bl	800163e <_isatty>
 800738c:	1c43      	adds	r3, r0, #1
 800738e:	d102      	bne.n	8007396 <_isatty_r+0x1a>
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	b103      	cbz	r3, 8007396 <_isatty_r+0x1a>
 8007394:	602b      	str	r3, [r5, #0]
 8007396:	bd38      	pop	{r3, r4, r5, pc}
 8007398:	20000250 	.word	0x20000250

0800739c <_init>:
 800739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739e:	bf00      	nop
 80073a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a2:	bc08      	pop	{r3}
 80073a4:	469e      	mov	lr, r3
 80073a6:	4770      	bx	lr

080073a8 <_fini>:
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	bf00      	nop
 80073ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ae:	bc08      	pop	{r3}
 80073b0:	469e      	mov	lr, r3
 80073b2:	4770      	bx	lr
